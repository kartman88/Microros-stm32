
micro_ros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001605c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fa4  08016200  08016200  00026200  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080171a4  080171a4  000302b8  2**0
                  CONTENTS
  4 .ARM          00000008  080171a4  080171a4  000271a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080171ac  080171ac  000302b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080171ac  080171ac  000271ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080171b8  080171b8  000271b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b8  20000000  080171bc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000dc50  200002b8  08017474  000302b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000df08  08017474  0003df08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302b8  2**0
                  CONTENTS, READONLY
 12 .comment      00000076  00000000  00000000  000302e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bcb5  00000000  00000000  0003035e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e37  00000000  00000000  0004c013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001620  00000000  00000000  0004fe50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001116  00000000  00000000  00051470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bcc3  00000000  00000000  00052586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a0ae  00000000  00000000  0006e249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3b36  00000000  00000000  000882f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006a68  00000000  00000000  0012be30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00132898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002b8 	.word	0x200002b8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080161e4 	.word	0x080161e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002bc 	.word	0x200002bc
 80001dc:	080161e4 	.word	0x080161e4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_ldivmod>:
 80002b0:	b97b      	cbnz	r3, 80002d2 <__aeabi_ldivmod+0x22>
 80002b2:	b972      	cbnz	r2, 80002d2 <__aeabi_ldivmod+0x22>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bfbe      	ittt	lt
 80002b8:	2000      	movlt	r0, #0
 80002ba:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002be:	e006      	blt.n	80002ce <__aeabi_ldivmod+0x1e>
 80002c0:	bf08      	it	eq
 80002c2:	2800      	cmpeq	r0, #0
 80002c4:	bf1c      	itt	ne
 80002c6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002ca:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ce:	f000 b9bb 	b.w	8000648 <__aeabi_idiv0>
 80002d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002da:	2900      	cmp	r1, #0
 80002dc:	db09      	blt.n	80002f2 <__aeabi_ldivmod+0x42>
 80002de:	2b00      	cmp	r3, #0
 80002e0:	db1a      	blt.n	8000318 <__aeabi_ldivmod+0x68>
 80002e2:	f000 f84d 	bl	8000380 <__udivmoddi4>
 80002e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ee:	b004      	add	sp, #16
 80002f0:	4770      	bx	lr
 80002f2:	4240      	negs	r0, r0
 80002f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	db1b      	blt.n	8000334 <__aeabi_ldivmod+0x84>
 80002fc:	f000 f840 	bl	8000380 <__udivmoddi4>
 8000300:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000308:	b004      	add	sp, #16
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	4252      	negs	r2, r2
 8000312:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000316:	4770      	bx	lr
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	f000 f82f 	bl	8000380 <__udivmoddi4>
 8000322:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032a:	b004      	add	sp, #16
 800032c:	4240      	negs	r0, r0
 800032e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000332:	4770      	bx	lr
 8000334:	4252      	negs	r2, r2
 8000336:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033a:	f000 f821 	bl	8000380 <__udivmoddi4>
 800033e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000342:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000346:	b004      	add	sp, #16
 8000348:	4252      	negs	r2, r2
 800034a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034e:	4770      	bx	lr

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000360:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000364:	f000 b970 	b.w	8000648 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9e08      	ldr	r6, [sp, #32]
 8000386:	460d      	mov	r5, r1
 8000388:	4604      	mov	r4, r0
 800038a:	460f      	mov	r7, r1
 800038c:	2b00      	cmp	r3, #0
 800038e:	d14a      	bne.n	8000426 <__udivmoddi4+0xa6>
 8000390:	428a      	cmp	r2, r1
 8000392:	4694      	mov	ip, r2
 8000394:	d965      	bls.n	8000462 <__udivmoddi4+0xe2>
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	b143      	cbz	r3, 80003ae <__udivmoddi4+0x2e>
 800039c:	fa02 fc03 	lsl.w	ip, r2, r3
 80003a0:	f1c3 0220 	rsb	r2, r3, #32
 80003a4:	409f      	lsls	r7, r3
 80003a6:	fa20 f202 	lsr.w	r2, r0, r2
 80003aa:	4317      	orrs	r7, r2
 80003ac:	409c      	lsls	r4, r3
 80003ae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003b2:	fa1f f58c 	uxth.w	r5, ip
 80003b6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ba:	0c22      	lsrs	r2, r4, #16
 80003bc:	fb0e 7711 	mls	r7, lr, r1, r7
 80003c0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003c4:	fb01 f005 	mul.w	r0, r1, r5
 80003c8:	4290      	cmp	r0, r2
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x62>
 80003cc:	eb1c 0202 	adds.w	r2, ip, r2
 80003d0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80003d4:	f080 811c 	bcs.w	8000610 <__udivmoddi4+0x290>
 80003d8:	4290      	cmp	r0, r2
 80003da:	f240 8119 	bls.w	8000610 <__udivmoddi4+0x290>
 80003de:	3902      	subs	r1, #2
 80003e0:	4462      	add	r2, ip
 80003e2:	1a12      	subs	r2, r2, r0
 80003e4:	b2a4      	uxth	r4, r4
 80003e6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ea:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f2:	fb00 f505 	mul.w	r5, r0, r5
 80003f6:	42a5      	cmp	r5, r4
 80003f8:	d90a      	bls.n	8000410 <__udivmoddi4+0x90>
 80003fa:	eb1c 0404 	adds.w	r4, ip, r4
 80003fe:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000402:	f080 8107 	bcs.w	8000614 <__udivmoddi4+0x294>
 8000406:	42a5      	cmp	r5, r4
 8000408:	f240 8104 	bls.w	8000614 <__udivmoddi4+0x294>
 800040c:	4464      	add	r4, ip
 800040e:	3802      	subs	r0, #2
 8000410:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000414:	1b64      	subs	r4, r4, r5
 8000416:	2100      	movs	r1, #0
 8000418:	b11e      	cbz	r6, 8000422 <__udivmoddi4+0xa2>
 800041a:	40dc      	lsrs	r4, r3
 800041c:	2300      	movs	r3, #0
 800041e:	e9c6 4300 	strd	r4, r3, [r6]
 8000422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000426:	428b      	cmp	r3, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0xbc>
 800042a:	2e00      	cmp	r6, #0
 800042c:	f000 80ed 	beq.w	800060a <__udivmoddi4+0x28a>
 8000430:	2100      	movs	r1, #0
 8000432:	e9c6 0500 	strd	r0, r5, [r6]
 8000436:	4608      	mov	r0, r1
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	fab3 f183 	clz	r1, r3
 8000440:	2900      	cmp	r1, #0
 8000442:	d149      	bne.n	80004d8 <__udivmoddi4+0x158>
 8000444:	42ab      	cmp	r3, r5
 8000446:	d302      	bcc.n	800044e <__udivmoddi4+0xce>
 8000448:	4282      	cmp	r2, r0
 800044a:	f200 80f8 	bhi.w	800063e <__udivmoddi4+0x2be>
 800044e:	1a84      	subs	r4, r0, r2
 8000450:	eb65 0203 	sbc.w	r2, r5, r3
 8000454:	2001      	movs	r0, #1
 8000456:	4617      	mov	r7, r2
 8000458:	2e00      	cmp	r6, #0
 800045a:	d0e2      	beq.n	8000422 <__udivmoddi4+0xa2>
 800045c:	e9c6 4700 	strd	r4, r7, [r6]
 8000460:	e7df      	b.n	8000422 <__udivmoddi4+0xa2>
 8000462:	b902      	cbnz	r2, 8000466 <__udivmoddi4+0xe6>
 8000464:	deff      	udf	#255	; 0xff
 8000466:	fab2 f382 	clz	r3, r2
 800046a:	2b00      	cmp	r3, #0
 800046c:	f040 8090 	bne.w	8000590 <__udivmoddi4+0x210>
 8000470:	1a8a      	subs	r2, r1, r2
 8000472:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000476:	fa1f fe8c 	uxth.w	lr, ip
 800047a:	2101      	movs	r1, #1
 800047c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000480:	fb07 2015 	mls	r0, r7, r5, r2
 8000484:	0c22      	lsrs	r2, r4, #16
 8000486:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800048a:	fb0e f005 	mul.w	r0, lr, r5
 800048e:	4290      	cmp	r0, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x124>
 8000492:	eb1c 0202 	adds.w	r2, ip, r2
 8000496:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0x122>
 800049c:	4290      	cmp	r0, r2
 800049e:	f200 80cb 	bhi.w	8000638 <__udivmoddi4+0x2b8>
 80004a2:	4645      	mov	r5, r8
 80004a4:	1a12      	subs	r2, r2, r0
 80004a6:	b2a4      	uxth	r4, r4
 80004a8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ac:	fb07 2210 	mls	r2, r7, r0, r2
 80004b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004b4:	fb0e fe00 	mul.w	lr, lr, r0
 80004b8:	45a6      	cmp	lr, r4
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x14e>
 80004bc:	eb1c 0404 	adds.w	r4, ip, r4
 80004c0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x14c>
 80004c6:	45a6      	cmp	lr, r4
 80004c8:	f200 80bb 	bhi.w	8000642 <__udivmoddi4+0x2c2>
 80004cc:	4610      	mov	r0, r2
 80004ce:	eba4 040e 	sub.w	r4, r4, lr
 80004d2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004d6:	e79f      	b.n	8000418 <__udivmoddi4+0x98>
 80004d8:	f1c1 0720 	rsb	r7, r1, #32
 80004dc:	408b      	lsls	r3, r1
 80004de:	fa22 fc07 	lsr.w	ip, r2, r7
 80004e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004e6:	fa05 f401 	lsl.w	r4, r5, r1
 80004ea:	fa20 f307 	lsr.w	r3, r0, r7
 80004ee:	40fd      	lsrs	r5, r7
 80004f0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004f4:	4323      	orrs	r3, r4
 80004f6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004fa:	fa1f fe8c 	uxth.w	lr, ip
 80004fe:	fb09 5518 	mls	r5, r9, r8, r5
 8000502:	0c1c      	lsrs	r4, r3, #16
 8000504:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000508:	fb08 f50e 	mul.w	r5, r8, lr
 800050c:	42a5      	cmp	r5, r4
 800050e:	fa02 f201 	lsl.w	r2, r2, r1
 8000512:	fa00 f001 	lsl.w	r0, r0, r1
 8000516:	d90b      	bls.n	8000530 <__udivmoddi4+0x1b0>
 8000518:	eb1c 0404 	adds.w	r4, ip, r4
 800051c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000520:	f080 8088 	bcs.w	8000634 <__udivmoddi4+0x2b4>
 8000524:	42a5      	cmp	r5, r4
 8000526:	f240 8085 	bls.w	8000634 <__udivmoddi4+0x2b4>
 800052a:	f1a8 0802 	sub.w	r8, r8, #2
 800052e:	4464      	add	r4, ip
 8000530:	1b64      	subs	r4, r4, r5
 8000532:	b29d      	uxth	r5, r3
 8000534:	fbb4 f3f9 	udiv	r3, r4, r9
 8000538:	fb09 4413 	mls	r4, r9, r3, r4
 800053c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000540:	fb03 fe0e 	mul.w	lr, r3, lr
 8000544:	45a6      	cmp	lr, r4
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x1da>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000550:	d26c      	bcs.n	800062c <__udivmoddi4+0x2ac>
 8000552:	45a6      	cmp	lr, r4
 8000554:	d96a      	bls.n	800062c <__udivmoddi4+0x2ac>
 8000556:	3b02      	subs	r3, #2
 8000558:	4464      	add	r4, ip
 800055a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800055e:	fba3 9502 	umull	r9, r5, r3, r2
 8000562:	eba4 040e 	sub.w	r4, r4, lr
 8000566:	42ac      	cmp	r4, r5
 8000568:	46c8      	mov	r8, r9
 800056a:	46ae      	mov	lr, r5
 800056c:	d356      	bcc.n	800061c <__udivmoddi4+0x29c>
 800056e:	d053      	beq.n	8000618 <__udivmoddi4+0x298>
 8000570:	b156      	cbz	r6, 8000588 <__udivmoddi4+0x208>
 8000572:	ebb0 0208 	subs.w	r2, r0, r8
 8000576:	eb64 040e 	sbc.w	r4, r4, lr
 800057a:	fa04 f707 	lsl.w	r7, r4, r7
 800057e:	40ca      	lsrs	r2, r1
 8000580:	40cc      	lsrs	r4, r1
 8000582:	4317      	orrs	r7, r2
 8000584:	e9c6 7400 	strd	r7, r4, [r6]
 8000588:	4618      	mov	r0, r3
 800058a:	2100      	movs	r1, #0
 800058c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000590:	f1c3 0120 	rsb	r1, r3, #32
 8000594:	fa02 fc03 	lsl.w	ip, r2, r3
 8000598:	fa20 f201 	lsr.w	r2, r0, r1
 800059c:	fa25 f101 	lsr.w	r1, r5, r1
 80005a0:	409d      	lsls	r5, r3
 80005a2:	432a      	orrs	r2, r5
 80005a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005a8:	fa1f fe8c 	uxth.w	lr, ip
 80005ac:	fbb1 f0f7 	udiv	r0, r1, r7
 80005b0:	fb07 1510 	mls	r5, r7, r0, r1
 80005b4:	0c11      	lsrs	r1, r2, #16
 80005b6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ba:	fb00 f50e 	mul.w	r5, r0, lr
 80005be:	428d      	cmp	r5, r1
 80005c0:	fa04 f403 	lsl.w	r4, r4, r3
 80005c4:	d908      	bls.n	80005d8 <__udivmoddi4+0x258>
 80005c6:	eb1c 0101 	adds.w	r1, ip, r1
 80005ca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005ce:	d22f      	bcs.n	8000630 <__udivmoddi4+0x2b0>
 80005d0:	428d      	cmp	r5, r1
 80005d2:	d92d      	bls.n	8000630 <__udivmoddi4+0x2b0>
 80005d4:	3802      	subs	r0, #2
 80005d6:	4461      	add	r1, ip
 80005d8:	1b49      	subs	r1, r1, r5
 80005da:	b292      	uxth	r2, r2
 80005dc:	fbb1 f5f7 	udiv	r5, r1, r7
 80005e0:	fb07 1115 	mls	r1, r7, r5, r1
 80005e4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005e8:	fb05 f10e 	mul.w	r1, r5, lr
 80005ec:	4291      	cmp	r1, r2
 80005ee:	d908      	bls.n	8000602 <__udivmoddi4+0x282>
 80005f0:	eb1c 0202 	adds.w	r2, ip, r2
 80005f4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80005f8:	d216      	bcs.n	8000628 <__udivmoddi4+0x2a8>
 80005fa:	4291      	cmp	r1, r2
 80005fc:	d914      	bls.n	8000628 <__udivmoddi4+0x2a8>
 80005fe:	3d02      	subs	r5, #2
 8000600:	4462      	add	r2, ip
 8000602:	1a52      	subs	r2, r2, r1
 8000604:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000608:	e738      	b.n	800047c <__udivmoddi4+0xfc>
 800060a:	4631      	mov	r1, r6
 800060c:	4630      	mov	r0, r6
 800060e:	e708      	b.n	8000422 <__udivmoddi4+0xa2>
 8000610:	4639      	mov	r1, r7
 8000612:	e6e6      	b.n	80003e2 <__udivmoddi4+0x62>
 8000614:	4610      	mov	r0, r2
 8000616:	e6fb      	b.n	8000410 <__udivmoddi4+0x90>
 8000618:	4548      	cmp	r0, r9
 800061a:	d2a9      	bcs.n	8000570 <__udivmoddi4+0x1f0>
 800061c:	ebb9 0802 	subs.w	r8, r9, r2
 8000620:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000624:	3b01      	subs	r3, #1
 8000626:	e7a3      	b.n	8000570 <__udivmoddi4+0x1f0>
 8000628:	4645      	mov	r5, r8
 800062a:	e7ea      	b.n	8000602 <__udivmoddi4+0x282>
 800062c:	462b      	mov	r3, r5
 800062e:	e794      	b.n	800055a <__udivmoddi4+0x1da>
 8000630:	4640      	mov	r0, r8
 8000632:	e7d1      	b.n	80005d8 <__udivmoddi4+0x258>
 8000634:	46d0      	mov	r8, sl
 8000636:	e77b      	b.n	8000530 <__udivmoddi4+0x1b0>
 8000638:	3d02      	subs	r5, #2
 800063a:	4462      	add	r2, ip
 800063c:	e732      	b.n	80004a4 <__udivmoddi4+0x124>
 800063e:	4608      	mov	r0, r1
 8000640:	e70a      	b.n	8000458 <__udivmoddi4+0xd8>
 8000642:	4464      	add	r4, ip
 8000644:	3802      	subs	r0, #2
 8000646:	e742      	b.n	80004ce <__udivmoddi4+0x14e>

08000648 <__aeabi_idiv0>:
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop

0800064c <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08a      	sub	sp, #40	; 0x28
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000654:	2300      	movs	r3, #0
 8000656:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000658:	f005 fbf2 	bl	8005e40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800065c:	4b58      	ldr	r3, [pc, #352]	; (80007c0 <pvPortMallocMicroROS+0x174>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d101      	bne.n	8000668 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000664:	f000 f980 	bl	8000968 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000668:	4b56      	ldr	r3, [pc, #344]	; (80007c4 <pvPortMallocMicroROS+0x178>)
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4013      	ands	r3, r2
 8000670:	2b00      	cmp	r3, #0
 8000672:	f040 808e 	bne.w	8000792 <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d01d      	beq.n	80006b8 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800067c:	2208      	movs	r2, #8
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4413      	add	r3, r2
 8000682:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f003 0307 	and.w	r3, r3, #7
 800068a:	2b00      	cmp	r3, #0
 800068c:	d014      	beq.n	80006b8 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f023 0307 	bic.w	r3, r3, #7
 8000694:	3308      	adds	r3, #8
 8000696:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	f003 0307 	and.w	r3, r3, #7
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d00a      	beq.n	80006b8 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80006a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006a6:	f383 8811 	msr	BASEPRI, r3
 80006aa:	f3bf 8f6f 	isb	sy
 80006ae:	f3bf 8f4f 	dsb	sy
 80006b2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80006b4:	bf00      	nop
 80006b6:	e7fe      	b.n	80006b6 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d069      	beq.n	8000792 <pvPortMallocMicroROS+0x146>
 80006be:	4b42      	ldr	r3, [pc, #264]	; (80007c8 <pvPortMallocMicroROS+0x17c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d864      	bhi.n	8000792 <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80006c8:	4b40      	ldr	r3, [pc, #256]	; (80007cc <pvPortMallocMicroROS+0x180>)
 80006ca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80006cc:	4b3f      	ldr	r3, [pc, #252]	; (80007cc <pvPortMallocMicroROS+0x180>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80006d2:	e004      	b.n	80006de <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 80006d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80006d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80006de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d903      	bls.n	80006f0 <pvPortMallocMicroROS+0xa4>
 80006e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d1f1      	bne.n	80006d4 <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80006f0:	4b33      	ldr	r3, [pc, #204]	; (80007c0 <pvPortMallocMicroROS+0x174>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006f6:	429a      	cmp	r2, r3
 80006f8:	d04b      	beq.n	8000792 <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80006fa:	6a3b      	ldr	r3, [r7, #32]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	2208      	movs	r2, #8
 8000700:	4413      	add	r3, r2
 8000702:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	6a3b      	ldr	r3, [r7, #32]
 800070a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800070c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070e:	685a      	ldr	r2, [r3, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	1ad2      	subs	r2, r2, r3
 8000714:	2308      	movs	r3, #8
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	429a      	cmp	r2, r3
 800071a:	d91f      	bls.n	800075c <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800071c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4413      	add	r3, r2
 8000722:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000724:	69bb      	ldr	r3, [r7, #24]
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	2b00      	cmp	r3, #0
 800072c:	d00a      	beq.n	8000744 <pvPortMallocMicroROS+0xf8>
	__asm volatile
 800072e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000732:	f383 8811 	msr	BASEPRI, r3
 8000736:	f3bf 8f6f 	isb	sy
 800073a:	f3bf 8f4f 	dsb	sy
 800073e:	613b      	str	r3, [r7, #16]
}
 8000740:	bf00      	nop
 8000742:	e7fe      	b.n	8000742 <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000746:	685a      	ldr	r2, [r3, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	1ad2      	subs	r2, r2, r3
 800074c:	69bb      	ldr	r3, [r7, #24]
 800074e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000756:	69b8      	ldr	r0, [r7, #24]
 8000758:	f000 f968 	bl	8000a2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800075c:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <pvPortMallocMicroROS+0x17c>)
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	1ad3      	subs	r3, r2, r3
 8000766:	4a18      	ldr	r2, [pc, #96]	; (80007c8 <pvPortMallocMicroROS+0x17c>)
 8000768:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <pvPortMallocMicroROS+0x17c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b18      	ldr	r3, [pc, #96]	; (80007d0 <pvPortMallocMicroROS+0x184>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	429a      	cmp	r2, r3
 8000774:	d203      	bcs.n	800077e <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <pvPortMallocMicroROS+0x17c>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a15      	ldr	r2, [pc, #84]	; (80007d0 <pvPortMallocMicroROS+0x184>)
 800077c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800077e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000780:	685a      	ldr	r2, [r3, #4]
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <pvPortMallocMicroROS+0x178>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	431a      	orrs	r2, r3
 8000788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800078a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800078c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000792:	f005 fb63 	bl	8005e5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	f003 0307 	and.w	r3, r3, #7
 800079c:	2b00      	cmp	r3, #0
 800079e:	d00a      	beq.n	80007b6 <pvPortMallocMicroROS+0x16a>
	__asm volatile
 80007a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007a4:	f383 8811 	msr	BASEPRI, r3
 80007a8:	f3bf 8f6f 	isb	sy
 80007ac:	f3bf 8f4f 	dsb	sy
 80007b0:	60fb      	str	r3, [r7, #12]
}
 80007b2:	bf00      	nop
 80007b4:	e7fe      	b.n	80007b4 <pvPortMallocMicroROS+0x168>
	return pvReturn;
 80007b6:	69fb      	ldr	r3, [r7, #28]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3728      	adds	r7, #40	; 0x28
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20003edc 	.word	0x20003edc
 80007c4:	20003ee8 	.word	0x20003ee8
 80007c8:	20003ee0 	.word	0x20003ee0
 80007cc:	20003ed4 	.word	0x20003ed4
 80007d0:	20003ee4 	.word	0x20003ee4

080007d4 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d048      	beq.n	8000878 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80007e6:	2308      	movs	r3, #8
 80007e8:	425b      	negs	r3, r3
 80007ea:	697a      	ldr	r2, [r7, #20]
 80007ec:	4413      	add	r3, r2
 80007ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80007f4:	693b      	ldr	r3, [r7, #16]
 80007f6:	685a      	ldr	r2, [r3, #4]
 80007f8:	4b21      	ldr	r3, [pc, #132]	; (8000880 <vPortFreeMicroROS+0xac>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4013      	ands	r3, r2
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d10a      	bne.n	8000818 <vPortFreeMicroROS+0x44>
	__asm volatile
 8000802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000806:	f383 8811 	msr	BASEPRI, r3
 800080a:	f3bf 8f6f 	isb	sy
 800080e:	f3bf 8f4f 	dsb	sy
 8000812:	60fb      	str	r3, [r7, #12]
}
 8000814:	bf00      	nop
 8000816:	e7fe      	b.n	8000816 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000818:	693b      	ldr	r3, [r7, #16]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d00a      	beq.n	8000836 <vPortFreeMicroROS+0x62>
	__asm volatile
 8000820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000824:	f383 8811 	msr	BASEPRI, r3
 8000828:	f3bf 8f6f 	isb	sy
 800082c:	f3bf 8f4f 	dsb	sy
 8000830:	60bb      	str	r3, [r7, #8]
}
 8000832:	bf00      	nop
 8000834:	e7fe      	b.n	8000834 <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	685a      	ldr	r2, [r3, #4]
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <vPortFreeMicroROS+0xac>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4013      	ands	r3, r2
 8000840:	2b00      	cmp	r3, #0
 8000842:	d019      	beq.n	8000878 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000844:	693b      	ldr	r3, [r7, #16]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d115      	bne.n	8000878 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800084c:	693b      	ldr	r3, [r7, #16]
 800084e:	685a      	ldr	r2, [r3, #4]
 8000850:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <vPortFreeMicroROS+0xac>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	43db      	mvns	r3, r3
 8000856:	401a      	ands	r2, r3
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800085c:	f005 faf0 	bl	8005e40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	685a      	ldr	r2, [r3, #4]
 8000864:	4b07      	ldr	r3, [pc, #28]	; (8000884 <vPortFreeMicroROS+0xb0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4413      	add	r3, r2
 800086a:	4a06      	ldr	r2, [pc, #24]	; (8000884 <vPortFreeMicroROS+0xb0>)
 800086c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800086e:	6938      	ldr	r0, [r7, #16]
 8000870:	f000 f8dc 	bl	8000a2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000874:	f005 faf2 	bl	8005e5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000878:	bf00      	nop
 800087a:	3718      	adds	r7, #24
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20003ee8 	.word	0x20003ee8
 8000884:	20003ee0 	.word	0x20003ee0

08000888 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000888:	b480      	push	{r7}
 800088a:	b087      	sub	sp, #28
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000894:	2308      	movs	r3, #8
 8000896:	425b      	negs	r3, r3
 8000898:	697a      	ldr	r2, [r7, #20]
 800089a:	4413      	add	r3, r2
 800089c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	685a      	ldr	r2, [r3, #4]
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <getBlockSize+0x38>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	43db      	mvns	r3, r3
 80008ac:	4013      	ands	r3, r2
 80008ae:	60fb      	str	r3, [r7, #12]

	return count;
 80008b0:	68fb      	ldr	r3, [r7, #12]
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	371c      	adds	r7, #28
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	20003ee8 	.word	0x20003ee8

080008c4 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80008ce:	f005 fab7 	bl	8005e40 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80008d2:	6838      	ldr	r0, [r7, #0]
 80008d4:	f7ff feba 	bl	800064c <pvPortMallocMicroROS>
 80008d8:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d017      	beq.n	8000910 <pvPortReallocMicroROS+0x4c>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d014      	beq.n	8000910 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff ffce 	bl	8000888 <getBlockSize>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2208      	movs	r2, #8
 80008f0:	1a9b      	subs	r3, r3, r2
 80008f2:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80008f4:	683a      	ldr	r2, [r7, #0]
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d201      	bcs.n	8000900 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	6879      	ldr	r1, [r7, #4]
 8000904:	68b8      	ldr	r0, [r7, #8]
 8000906:	f014 fd8e 	bl	8015426 <memcpy>

		vPortFreeMicroROS(pv);
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff ff62 	bl	80007d4 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000910:	f005 faa4 	bl	8005e5c <xTaskResumeAll>

	return newmem;
 8000914:	68bb      	ldr	r3, [r7, #8]
}
 8000916:	4618      	mov	r0, r3
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b086      	sub	sp, #24
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
 8000926:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000928:	f005 fa8a 	bl	8005e40 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	fb02 f303 	mul.w	r3, r2, r3
 8000934:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000936:	6978      	ldr	r0, [r7, #20]
 8000938:	f7ff fe88 	bl	800064c <pvPortMallocMicroROS>
 800093c:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000942:	e004      	b.n	800094e <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	1c5a      	adds	r2, r3, #1
 8000948:	613a      	str	r2, [r7, #16]
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
  	while(count--)
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	1e5a      	subs	r2, r3, #1
 8000952:	617a      	str	r2, [r7, #20]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d1f5      	bne.n	8000944 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000958:	f005 fa80 	bl	8005e5c <xTaskResumeAll>
  	return mem;
 800095c:	68fb      	ldr	r3, [r7, #12]
}
 800095e:	4618      	mov	r0, r3
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800096e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000972:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000974:	4b27      	ldr	r3, [pc, #156]	; (8000a14 <prvHeapInit+0xac>)
 8000976:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f003 0307 	and.w	r3, r3, #7
 800097e:	2b00      	cmp	r3, #0
 8000980:	d00c      	beq.n	800099c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	3307      	adds	r3, #7
 8000986:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f023 0307 	bic.w	r3, r3, #7
 800098e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000990:	68ba      	ldr	r2, [r7, #8]
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	4a1f      	ldr	r2, [pc, #124]	; (8000a14 <prvHeapInit+0xac>)
 8000998:	4413      	add	r3, r2
 800099a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80009a0:	4a1d      	ldr	r2, [pc, #116]	; (8000a18 <prvHeapInit+0xb0>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80009a6:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <prvHeapInit+0xb0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	4413      	add	r3, r2
 80009b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80009b4:	2208      	movs	r2, #8
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	1a9b      	subs	r3, r3, r2
 80009ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f023 0307 	bic.w	r3, r3, #7
 80009c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	4a15      	ldr	r2, [pc, #84]	; (8000a1c <prvHeapInit+0xb4>)
 80009c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80009ca:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <prvHeapInit+0xb4>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2200      	movs	r2, #0
 80009d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80009d2:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <prvHeapInit+0xb4>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	68fa      	ldr	r2, [r7, #12]
 80009e2:	1ad2      	subs	r2, r2, r3
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80009e8:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <prvHeapInit+0xb4>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <prvHeapInit+0xb8>)
 80009f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	4a09      	ldr	r2, [pc, #36]	; (8000a24 <prvHeapInit+0xbc>)
 80009fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a00:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <prvHeapInit+0xc0>)
 8000a02:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000a06:	601a      	str	r2, [r3, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	3714      	adds	r7, #20
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	200002d4 	.word	0x200002d4
 8000a18:	20003ed4 	.word	0x20003ed4
 8000a1c:	20003edc 	.word	0x20003edc
 8000a20:	20003ee4 	.word	0x20003ee4
 8000a24:	20003ee0 	.word	0x20003ee0
 8000a28:	20003ee8 	.word	0x20003ee8

08000a2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000a34:	4b28      	ldr	r3, [pc, #160]	; (8000ad8 <prvInsertBlockIntoFreeList+0xac>)
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	e002      	b.n	8000a40 <prvInsertBlockIntoFreeList+0x14>
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d8f7      	bhi.n	8000a3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	4413      	add	r3, r2
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d108      	bne.n	8000a6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	685a      	ldr	r2, [r3, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	441a      	add	r2, r3
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	441a      	add	r2, r3
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d118      	bne.n	8000ab4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <prvInsertBlockIntoFreeList+0xb0>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d00d      	beq.n	8000aaa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	685a      	ldr	r2, [r3, #4]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	441a      	add	r2, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	e008      	b.n	8000abc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <prvInsertBlockIntoFreeList+0xb0>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	e003      	b.n	8000abc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000abc:	68fa      	ldr	r2, [r7, #12]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d002      	beq.n	8000aca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000aca:	bf00      	nop
 8000acc:	3714      	adds	r7, #20
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	20003ed4 	.word	0x20003ed4
 8000adc:	20003edc 	.word	0x20003edc

08000ae0 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000aee:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000af0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000af4:	4904      	ldr	r1, [pc, #16]	; (8000b08 <cubemx_transport_open+0x28>)
 8000af6:	68f8      	ldr	r0, [r7, #12]
 8000af8:	f002 fe94 	bl	8003824 <HAL_UART_Receive_DMA>
    return true;
 8000afc:	2301      	movs	r3, #1
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20003eec 	.word	0x20003eec

08000b0c <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000b1a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000b1c:	68f8      	ldr	r0, [r7, #12]
 8000b1e:	f002 fea6 	bl	800386e <HAL_UART_DMAStop>
    return true;
 8000b22:	2301      	movs	r3, #1
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3710      	adds	r7, #16
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
 8000b38:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000b40:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	2b20      	cmp	r3, #32
 8000b4c:	d11c      	bne.n	8000b88 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	461a      	mov	r2, r3
 8000b54:	68b9      	ldr	r1, [r7, #8]
 8000b56:	6978      	ldr	r0, [r7, #20]
 8000b58:	f002 fdf4 	bl	8003744 <HAL_UART_Transmit_DMA>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000b60:	e002      	b.n	8000b68 <cubemx_transport_write+0x3c>
            osDelay(1);
 8000b62:	2001      	movs	r0, #1
 8000b64:	f004 f920 	bl	8004da8 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000b68:	7cfb      	ldrb	r3, [r7, #19]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d105      	bne.n	8000b7a <cubemx_transport_write+0x4e>
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	2b20      	cmp	r3, #32
 8000b78:	d1f3      	bne.n	8000b62 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8000b7a:	7cfb      	ldrb	r3, [r7, #19]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d101      	bne.n	8000b84 <cubemx_transport_write+0x58>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	e002      	b.n	8000b8a <cubemx_transport_write+0x5e>
 8000b84:	2300      	movs	r3, #0
 8000b86:	e000      	b.n	8000b8a <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8000b88:	2300      	movs	r3, #0
    }
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b088      	sub	sp, #32
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
 8000ba0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000ba8:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bae:	b672      	cpsid	i
}
 8000bb0:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000bbe:	4a1c      	ldr	r2, [pc, #112]	; (8000c30 <cubemx_transport_read+0x9c>)
 8000bc0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000bc2:	b662      	cpsie	i
}
 8000bc4:	bf00      	nop
        __enable_irq();
        ms_used++;
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8000bcc:	2001      	movs	r0, #1
 8000bce:	f004 f8eb 	bl	8004da8 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8000bd2:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <cubemx_transport_read+0xa0>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <cubemx_transport_read+0x9c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d103      	bne.n	8000be6 <cubemx_transport_read+0x52>
 8000bde:	69fa      	ldr	r2, [r7, #28]
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	dbe3      	blt.n	8000bae <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000bea:	e011      	b.n	8000c10 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <cubemx_transport_read+0xa0>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	68b9      	ldr	r1, [r7, #8]
 8000bf2:	69bb      	ldr	r3, [r7, #24]
 8000bf4:	440b      	add	r3, r1
 8000bf6:	4910      	ldr	r1, [pc, #64]	; (8000c38 <cubemx_transport_read+0xa4>)
 8000bf8:	5c8a      	ldrb	r2, [r1, r2]
 8000bfa:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8000bfc:	4b0d      	ldr	r3, [pc, #52]	; (8000c34 <cubemx_transport_read+0xa0>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	3301      	adds	r3, #1
 8000c02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000c06:	4a0b      	ldr	r2, [pc, #44]	; (8000c34 <cubemx_transport_read+0xa0>)
 8000c08:	6013      	str	r3, [r2, #0]
        wrote++;
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <cubemx_transport_read+0xa0>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <cubemx_transport_read+0x9c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d003      	beq.n	8000c24 <cubemx_transport_read+0x90>
 8000c1c:	69ba      	ldr	r2, [r7, #24]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d3e3      	bcc.n	8000bec <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8000c24:	69bb      	ldr	r3, [r7, #24]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3720      	adds	r7, #32
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200046f0 	.word	0x200046f0
 8000c34:	200046ec 	.word	0x200046ec
 8000c38:	20003eec 	.word	0x20003eec

08000c3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c40:	f000 ff14 	bl	8001a6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c44:	f000 f81a 	bl	8000c7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c48:	f000 f8d6 	bl	8000df8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c4c:	f000 f8ac 	bl	8000da8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000c50:	f000 f880 	bl	8000d54 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c54:	f003 ffcc 	bl	8004bf0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000c58:	4a05      	ldr	r2, [pc, #20]	; (8000c70 <main+0x34>)
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4805      	ldr	r0, [pc, #20]	; (8000c74 <main+0x38>)
 8000c5e:	f004 f811 	bl	8004c84 <osThreadNew>
 8000c62:	4603      	mov	r3, r0
 8000c64:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <main+0x3c>)
 8000c66:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c68:	f003 ffe6 	bl	8004c38 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c6c:	e7fe      	b.n	8000c6c <main+0x30>
 8000c6e:	bf00      	nop
 8000c70:	080162c0 	.word	0x080162c0
 8000c74:	08000f21 	.word	0x08000f21
 8000c78:	200047fc 	.word	0x200047fc

08000c7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b094      	sub	sp, #80	; 0x50
 8000c80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c82:	f107 0320 	add.w	r3, r7, #32
 8000c86:	2230      	movs	r2, #48	; 0x30
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f014 faac 	bl	80151e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	4b29      	ldr	r3, [pc, #164]	; (8000d4c <SystemClock_Config+0xd0>)
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca8:	4a28      	ldr	r2, [pc, #160]	; (8000d4c <SystemClock_Config+0xd0>)
 8000caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cae:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb0:	4b26      	ldr	r3, [pc, #152]	; (8000d4c <SystemClock_Config+0xd0>)
 8000cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	4b23      	ldr	r3, [pc, #140]	; (8000d50 <SystemClock_Config+0xd4>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cc8:	4a21      	ldr	r2, [pc, #132]	; (8000d50 <SystemClock_Config+0xd4>)
 8000cca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cce:	6013      	str	r3, [r2, #0]
 8000cd0:	4b1f      	ldr	r3, [pc, #124]	; (8000d50 <SystemClock_Config+0xd4>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ce4:	2310      	movs	r3, #16
 8000ce6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cec:	2300      	movs	r3, #0
 8000cee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000cf0:	2310      	movs	r3, #16
 8000cf2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000cf4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000cf8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000cfe:	2307      	movs	r3, #7
 8000d00:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d02:	f107 0320 	add.w	r3, r7, #32
 8000d06:	4618      	mov	r0, r3
 8000d08:	f001 fd8e 	bl	8002828 <HAL_RCC_OscConfig>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d12:	f000 faad 	bl	8001270 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d16:	230f      	movs	r3, #15
 8000d18:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d26:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	2102      	movs	r1, #2
 8000d32:	4618      	mov	r0, r3
 8000d34:	f001 fff0 	bl	8002d18 <HAL_RCC_ClockConfig>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000d3e:	f000 fa97 	bl	8001270 <Error_Handler>
  }
}
 8000d42:	bf00      	nop
 8000d44:	3750      	adds	r7, #80	; 0x50
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40007000 	.word	0x40007000

08000d54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d58:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d5a:	4a12      	ldr	r2, [pc, #72]	; (8000da4 <MX_USART2_UART_Init+0x50>)
 8000d5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d66:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d78:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d7a:	220c      	movs	r2, #12
 8000d7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d7e:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d8a:	4805      	ldr	r0, [pc, #20]	; (8000da0 <MX_USART2_UART_Init+0x4c>)
 8000d8c:	f002 fc8a 	bl	80036a4 <HAL_UART_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d96:	f000 fa6b 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	200046f4 	.word	0x200046f4
 8000da4:	40004400 	.word	0x40004400

08000da8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	607b      	str	r3, [r7, #4]
 8000db2:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <MX_DMA_Init+0x4c>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a0f      	ldr	r2, [pc, #60]	; (8000df4 <MX_DMA_Init+0x4c>)
 8000db8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b0d      	ldr	r3, [pc, #52]	; (8000df4 <MX_DMA_Init+0x4c>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2105      	movs	r1, #5
 8000dce:	2010      	movs	r0, #16
 8000dd0:	f000 ff46 	bl	8001c60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000dd4:	2010      	movs	r0, #16
 8000dd6:	f000 ff5f 	bl	8001c98 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2105      	movs	r1, #5
 8000dde:	2011      	movs	r0, #17
 8000de0:	f000 ff3e 	bl	8001c60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000de4:	2011      	movs	r0, #17
 8000de6:	f000 ff57 	bl	8001c98 <HAL_NVIC_EnableIRQ>

}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40023800 	.word	0x40023800

08000df8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	; 0x28
 8000dfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
 8000e0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	4b2d      	ldr	r3, [pc, #180]	; (8000ec8 <MX_GPIO_Init+0xd0>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a2c      	ldr	r2, [pc, #176]	; (8000ec8 <MX_GPIO_Init+0xd0>)
 8000e18:	f043 0304 	orr.w	r3, r3, #4
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b2a      	ldr	r3, [pc, #168]	; (8000ec8 <MX_GPIO_Init+0xd0>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0304 	and.w	r3, r3, #4
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	4b26      	ldr	r3, [pc, #152]	; (8000ec8 <MX_GPIO_Init+0xd0>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a25      	ldr	r2, [pc, #148]	; (8000ec8 <MX_GPIO_Init+0xd0>)
 8000e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b23      	ldr	r3, [pc, #140]	; (8000ec8 <MX_GPIO_Init+0xd0>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	4b1f      	ldr	r3, [pc, #124]	; (8000ec8 <MX_GPIO_Init+0xd0>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a1e      	ldr	r2, [pc, #120]	; (8000ec8 <MX_GPIO_Init+0xd0>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b1c      	ldr	r3, [pc, #112]	; (8000ec8 <MX_GPIO_Init+0xd0>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <MX_GPIO_Init+0xd0>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a17      	ldr	r2, [pc, #92]	; (8000ec8 <MX_GPIO_Init+0xd0>)
 8000e6c:	f043 0302 	orr.w	r3, r3, #2
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <MX_GPIO_Init+0xd0>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2120      	movs	r1, #32
 8000e82:	4812      	ldr	r0, [pc, #72]	; (8000ecc <MX_GPIO_Init+0xd4>)
 8000e84:	f001 fc9c 	bl	80027c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e8e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	480c      	ldr	r0, [pc, #48]	; (8000ed0 <MX_GPIO_Init+0xd8>)
 8000ea0:	f001 fb0a 	bl	80024b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ea4:	2320      	movs	r3, #32
 8000ea6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4804      	ldr	r0, [pc, #16]	; (8000ecc <MX_GPIO_Init+0xd4>)
 8000ebc:	f001 fafc 	bl	80024b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ec0:	bf00      	nop
 8000ec2:	3728      	adds	r7, #40	; 0x28
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020000 	.word	0x40020000
 8000ed0:	40020800 	.word	0x40020800

08000ed4 <subscription_callback>:
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);

void (* rclc_subscription_callback)(const void *);

void subscription_callback(const void * msgin){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	    // Cast received message to used type
	    const geometry_msgs__msg__Twist * msg = (const geometry_msgs__msg__Twist *)msgin;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	60fb      	str	r3, [r7, #12]
	    HAL_GPIO_TogglePin(LD2_GPIO_Port , LD2_Pin);
 8000ee0:	2120      	movs	r1, #32
 8000ee2:	4806      	ldr	r0, [pc, #24]	; (8000efc <subscription_callback+0x28>)
 8000ee4:	f001 fc85 	bl	80027f2 <HAL_GPIO_TogglePin>

	    // Process message
	    printf("Received: %d\n", msg->linear.x);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eee:	4804      	ldr	r0, [pc, #16]	; (8000f00 <subscription_callback+0x2c>)
 8000ef0:	f014 f88e 	bl	8015010 <iprintf>
}
 8000ef4:	bf00      	nop
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40020000 	.word	0x40020000
 8000f00:	0801620c 	.word	0x0801620c

08000f04 <timer_callback>:

void timer_callback(rcl_timer_t * timer, int64_t last_call_time){
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	e9c7 2300 	strd	r2, r3, [r7]
	RCLC_UNUSED(last_call_time);
}
 8000f10:	bf00      	nop
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	0000      	movs	r0, r0
	...

08000f20 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000f20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f24:	b0ea      	sub	sp, #424	; 0x1a8
 8000f26:	af02      	add	r7, sp, #8
 8000f28:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000f2c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8000f30:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
	// micro-ROS configuration

	  rmw_uros_set_custom_transport(
 8000f32:	4bb5      	ldr	r3, [pc, #724]	; (8001208 <StartDefaultTask+0x2e8>)
 8000f34:	9301      	str	r3, [sp, #4]
 8000f36:	4bb5      	ldr	r3, [pc, #724]	; (800120c <StartDefaultTask+0x2ec>)
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	4bb5      	ldr	r3, [pc, #724]	; (8001210 <StartDefaultTask+0x2f0>)
 8000f3c:	4ab5      	ldr	r2, [pc, #724]	; (8001214 <StartDefaultTask+0x2f4>)
 8000f3e:	49b6      	ldr	r1, [pc, #728]	; (8001218 <StartDefaultTask+0x2f8>)
 8000f40:	2001      	movs	r0, #1
 8000f42:	f009 fb61 	bl	800a608 <rmw_uros_set_custom_transport>
	    cubemx_transport_open,
	    cubemx_transport_close,
	    cubemx_transport_write,
	    cubemx_transport_read);

	  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8000f46:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f009 f9ea 	bl	800a324 <rcutils_get_zero_initialized_allocator>
	  freeRTOS_allocator.allocate = microros_allocate;
 8000f50:	4bb2      	ldr	r3, [pc, #712]	; (800121c <StartDefaultTask+0x2fc>)
 8000f52:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
	  freeRTOS_allocator.deallocate = microros_deallocate;
 8000f56:	4bb2      	ldr	r3, [pc, #712]	; (8001220 <StartDefaultTask+0x300>)
 8000f58:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
	  freeRTOS_allocator.reallocate = microros_reallocate;
 8000f5c:	4bb1      	ldr	r3, [pc, #708]	; (8001224 <StartDefaultTask+0x304>)
 8000f5e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
	  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8000f62:	4bb1      	ldr	r3, [pc, #708]	; (8001228 <StartDefaultTask+0x308>)
 8000f64:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

	  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8000f68:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f009 f9e7 	bl	800a340 <rcutils_set_default_allocator>
 8000f72:	4603      	mov	r3, r0
 8000f74:	f083 0301 	eor.w	r3, r3, #1
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d004      	beq.n	8000f88 <StartDefaultTask+0x68>
	      printf("Error on default allocators (line %d)\n", __LINE__);
 8000f7e:	f240 1163 	movw	r1, #355	; 0x163
 8000f82:	48aa      	ldr	r0, [pc, #680]	; (800122c <StartDefaultTask+0x30c>)
 8000f84:	f014 f844 	bl	8015010 <iprintf>
	  }

	  // micro-ROS app

	  rcl_subscription_t subscriber;
	  const char * topic_name = "cmd_vel";
 8000f88:	4ba9      	ldr	r3, [pc, #676]	; (8001230 <StartDefaultTask+0x310>)
 8000f8a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

	  rclc_support_t support;
	  rcl_allocator_t allocator;
	  rcl_node_t node;

	  allocator = rcl_get_default_allocator();
 8000f8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f92:	4618      	mov	r0, r3
 8000f94:	f009 f9f2 	bl	800a37c <rcutils_get_default_allocator>
 8000f98:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000f9c:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8000fa0:	f107 05f8 	add.w	r5, r7, #248	; 0xf8
 8000fa4:	461c      	mov	r4, r3
 8000fa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000faa:	6823      	ldr	r3, [r4, #0]
 8000fac:	602b      	str	r3, [r5, #0]

	  //create init_options
	  rclc_support_init(&support, 0, NULL, &allocator);
 8000fae:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000fb2:	f507 7086 	add.w	r0, r7, #268	; 0x10c
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2100      	movs	r1, #0
 8000fba:	f009 f88d 	bl	800a0d8 <rclc_support_init>

	  // create node
	  rclc_node_init_default(&node, "cubemx_node", "", &support);
 8000fbe:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000fc2:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 8000fc6:	4a9b      	ldr	r2, [pc, #620]	; (8001234 <StartDefaultTask+0x314>)
 8000fc8:	499b      	ldr	r1, [pc, #620]	; (8001238 <StartDefaultTask+0x318>)
 8000fca:	f009 f8cf 	bl	800a16c <rclc_node_init_default>

	  // create publisher
	  // create publisher
	  rclc_publisher_init_default(
 8000fce:	f00a f875 	bl	800b0bc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8000fd8:	f507 70a2 	add.w	r0, r7, #324	; 0x144
 8000fdc:	4b97      	ldr	r3, [pc, #604]	; (800123c <StartDefaultTask+0x31c>)
 8000fde:	f009 f901 	bl	800a1e4 <rclc_publisher_init_default>
	      &node,
	      ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
	      "cubemx_publisher");

	  // create subscriber for Twist messages
	  rclc_subscription_init_default(
 8000fe2:	f006 fba3 	bl	800772c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8000fec:	f507 70bc 	add.w	r0, r7, #376	; 0x178
 8000ff0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8000ff4:	f009 f92a 	bl	800a24c <rclc_subscription_init_default>
	    &subscriber, &node,
		ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist), topic_name);

	  //Add subscription to the executor
	  rcl_timer_t timer = rcl_get_zero_initialized_timer();
 8000ff8:	f008 f85e 	bl	80090b8 <rcl_get_zero_initialized_timer>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	  	const unsigned int timer_timeout = 200;
 8001002:	23c8      	movs	r3, #200	; 0xc8
 8001004:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
	  	rclc_timer_init_default(&timer, &support, RCL_MS_TO_NS(timer_timeout), timer_callback);
 8001008:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800100c:	2200      	movs	r2, #0
 800100e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001010:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001012:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8001016:	4622      	mov	r2, r4
 8001018:	462b      	mov	r3, r5
 800101a:	f04f 0000 	mov.w	r0, #0
 800101e:	f04f 0100 	mov.w	r1, #0
 8001022:	0159      	lsls	r1, r3, #5
 8001024:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001028:	0150      	lsls	r0, r2, #5
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	4621      	mov	r1, r4
 8001030:	ebb2 0801 	subs.w	r8, r2, r1
 8001034:	4629      	mov	r1, r5
 8001036:	eb63 0901 	sbc.w	r9, r3, r1
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	f04f 0300 	mov.w	r3, #0
 8001042:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001046:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800104a:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800104e:	4690      	mov	r8, r2
 8001050:	4699      	mov	r9, r3
 8001052:	4623      	mov	r3, r4
 8001054:	eb18 0a03 	adds.w	sl, r8, r3
 8001058:	462b      	mov	r3, r5
 800105a:	eb49 0b03 	adc.w	fp, r9, r3
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	f04f 0300 	mov.w	r3, #0
 8001066:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800106a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800106e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001072:	ebb2 010a 	subs.w	r1, r2, sl
 8001076:	61b9      	str	r1, [r7, #24]
 8001078:	eb63 030b 	sbc.w	r3, r3, fp
 800107c:	61fb      	str	r3, [r7, #28]
 800107e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001082:	4603      	mov	r3, r0
 8001084:	4622      	mov	r2, r4
 8001086:	189b      	adds	r3, r3, r2
 8001088:	633b      	str	r3, [r7, #48]	; 0x30
 800108a:	462b      	mov	r3, r5
 800108c:	460a      	mov	r2, r1
 800108e:	eb42 0303 	adc.w	r3, r2, r3
 8001092:	637b      	str	r3, [r7, #52]	; 0x34
 8001094:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001098:	f507 7486 	add.w	r4, r7, #268	; 0x10c
 800109c:	f107 05ec 	add.w	r5, r7, #236	; 0xec
 80010a0:	4b67      	ldr	r3, [pc, #412]	; (8001240 <StartDefaultTask+0x320>)
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4621      	mov	r1, r4
 80010aa:	4628      	mov	r0, r5
 80010ac:	f009 f902 	bl	800a2b4 <rclc_timer_init_default>

	  	// create executor
	  	rclc_executor_t executor = rclc_executor_get_zero_initialized_executor();
 80010b0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80010b4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80010b8:	4618      	mov	r0, r3
 80010ba:	f008 fcff 	bl	8009abc <rclc_executor_get_zero_initialized_executor>
	  	rclc_executor_init(&executor, &support.context, 2, &allocator);
 80010be:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80010c2:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 80010c6:	f107 0060 	add.w	r0, r7, #96	; 0x60
 80010ca:	2202      	movs	r2, #2
 80010cc:	f008 fd00 	bl	8009ad0 <rclc_executor_init>

	  	unsigned int rcl_wait_timeout = 1000;   // in ms
 80010d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	  	rclc_executor_set_timeout(&executor, RCL_MS_TO_NS(rcl_wait_timeout));
 80010d8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80010dc:	2200      	movs	r2, #0
 80010de:	62bb      	str	r3, [r7, #40]	; 0x28
 80010e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80010e2:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80010e6:	4622      	mov	r2, r4
 80010e8:	462b      	mov	r3, r5
 80010ea:	f04f 0000 	mov.w	r0, #0
 80010ee:	f04f 0100 	mov.w	r1, #0
 80010f2:	0159      	lsls	r1, r3, #5
 80010f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80010f8:	0150      	lsls	r0, r2, #5
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4621      	mov	r1, r4
 8001100:	1a51      	subs	r1, r2, r1
 8001102:	6139      	str	r1, [r7, #16]
 8001104:	4629      	mov	r1, r5
 8001106:	eb63 0301 	sbc.w	r3, r3, r1
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	f04f 0200 	mov.w	r2, #0
 8001110:	f04f 0300 	mov.w	r3, #0
 8001114:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001118:	4649      	mov	r1, r9
 800111a:	024b      	lsls	r3, r1, #9
 800111c:	4641      	mov	r1, r8
 800111e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001122:	4641      	mov	r1, r8
 8001124:	024a      	lsls	r2, r1, #9
 8001126:	4610      	mov	r0, r2
 8001128:	4619      	mov	r1, r3
 800112a:	4603      	mov	r3, r0
 800112c:	4622      	mov	r2, r4
 800112e:	189b      	adds	r3, r3, r2
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	460b      	mov	r3, r1
 8001134:	462a      	mov	r2, r5
 8001136:	eb42 0303 	adc.w	r3, r2, r3
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	f04f 0200 	mov.w	r2, #0
 8001140:	f04f 0300 	mov.w	r3, #0
 8001144:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001148:	4649      	mov	r1, r9
 800114a:	018b      	lsls	r3, r1, #6
 800114c:	4641      	mov	r1, r8
 800114e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001152:	4641      	mov	r1, r8
 8001154:	018a      	lsls	r2, r1, #6
 8001156:	4641      	mov	r1, r8
 8001158:	1a51      	subs	r1, r2, r1
 800115a:	6039      	str	r1, [r7, #0]
 800115c:	4649      	mov	r1, r9
 800115e:	eb63 0301 	sbc.w	r3, r3, r1
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001168:	4603      	mov	r3, r0
 800116a:	4622      	mov	r2, r4
 800116c:	189b      	adds	r3, r3, r2
 800116e:	623b      	str	r3, [r7, #32]
 8001170:	462b      	mov	r3, r5
 8001172:	460a      	mov	r2, r1
 8001174:	eb42 0303 	adc.w	r3, r2, r3
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
 800117a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800117e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001182:	4608      	mov	r0, r1
 8001184:	f008 fd14 	bl	8009bb0 <rclc_executor_set_timeout>
	  	rclc_executor_add_timer(&executor, &timer);
 8001188:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 800118c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001190:	4611      	mov	r1, r2
 8001192:	4618      	mov	r0, r3
 8001194:	f008 fd50 	bl	8009c38 <rclc_executor_add_timer>
	  	rclc_executor_add_subscription(&executor, &subscriber, &twist_msg, subscription_callback, ON_NEW_DATA);
 8001198:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800119c:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 80011a0:	f107 0060 	add.w	r0, r7, #96	; 0x60
 80011a4:	2300      	movs	r3, #0
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	4b26      	ldr	r3, [pc, #152]	; (8001244 <StartDefaultTask+0x324>)
 80011aa:	f008 fd11 	bl	8009bd0 <rclc_executor_add_subscription>

	  	//rclc_executor_spin(&executor);

	  msg.data = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	  for(;;)
	  {
		  rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 80011b4:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80011b8:	a311      	add	r3, pc, #68	; (adr r3, 8001200 <StartDefaultTask+0x2e0>)
 80011ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011be:	4608      	mov	r0, r1
 80011c0:	f008 ff50 	bl	800a064 <rclc_executor_spin_some>
		  rcl_ret_t ret = rcl_publish(&publisher, &msg, NULL);
 80011c4:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 80011c8:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80011cc:	2200      	movs	r2, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f007 fe92 	bl	8008ef8 <rcl_publish>
 80011d4:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
		  	  if (ret != RCL_RET_OK){
 80011d8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d004      	beq.n	80011ea <StartDefaultTask+0x2ca>
		  		  printf("Error publishing (line %d)\n", __LINE__);
 80011e0:	f240 119f 	movw	r1, #415	; 0x19f
 80011e4:	4818      	ldr	r0, [pc, #96]	; (8001248 <StartDefaultTask+0x328>)
 80011e6:	f013 ff13 	bl	8015010 <iprintf>
		  	  }

		  msg.data++;
 80011ea:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80011ee:	3301      	adds	r3, #1
 80011f0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
		  osDelay(10);
 80011f4:	200a      	movs	r0, #10
 80011f6:	f003 fdd7 	bl	8004da8 <osDelay>
	  {
 80011fa:	e7db      	b.n	80011b4 <StartDefaultTask+0x294>
 80011fc:	f3af 8000 	nop.w
 8001200:	05f5e100 	.word	0x05f5e100
 8001204:	00000000 	.word	0x00000000
 8001208:	08000b95 	.word	0x08000b95
 800120c:	08000b2d 	.word	0x08000b2d
 8001210:	08000b0d 	.word	0x08000b0d
 8001214:	08000ae1 	.word	0x08000ae1
 8001218:	200046f4 	.word	0x200046f4
 800121c:	0800127d 	.word	0x0800127d
 8001220:	080012c1 	.word	0x080012c1
 8001224:	080012f9 	.word	0x080012f9
 8001228:	08001365 	.word	0x08001365
 800122c:	0801621c 	.word	0x0801621c
 8001230:	08016244 	.word	0x08016244
 8001234:	0801624c 	.word	0x0801624c
 8001238:	08016250 	.word	0x08016250
 800123c:	0801625c 	.word	0x0801625c
 8001240:	08000f05 	.word	0x08000f05
 8001244:	08000ed5 	.word	0x08000ed5
 8001248:	08016270 	.word	0x08016270

0800124c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a04      	ldr	r2, [pc, #16]	; (800126c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d101      	bne.n	8001262 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800125e:	f000 fc27 	bl	8001ab0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40010000 	.word	0x40010000

08001270 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001274:	b672      	cpsid	i
}
 8001276:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001278:	e7fe      	b.n	8001278 <Error_Handler+0x8>
	...

0800127c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <microros_allocate+0x3c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4413      	add	r3, r2
 8001290:	461a      	mov	r2, r3
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <microros_allocate+0x3c>)
 8001294:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001296:	4b09      	ldr	r3, [pc, #36]	; (80012bc <microros_allocate+0x40>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	461a      	mov	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4413      	add	r3, r2
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <microros_allocate+0x40>)
 80012a4:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff f9d0 	bl	800064c <pvPortMallocMicroROS>
 80012ac:	4603      	mov	r3, r0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20004800 	.word	0x20004800
 80012bc:	20004804 	.word	0x20004804

080012c0 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d00c      	beq.n	80012ea <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff fad9 	bl	8000888 <getBlockSize>
 80012d6:	4603      	mov	r3, r0
 80012d8:	4a06      	ldr	r2, [pc, #24]	; (80012f4 <microros_deallocate+0x34>)
 80012da:	6812      	ldr	r2, [r2, #0]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	461a      	mov	r2, r3
 80012e0:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <microros_deallocate+0x34>)
 80012e2:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff fa75 	bl	80007d4 <vPortFreeMicroROS>
  }
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20004804 	.word	0x20004804

080012f8 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001304:	4b15      	ldr	r3, [pc, #84]	; (800135c <microros_reallocate+0x64>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	4413      	add	r3, r2
 800130e:	461a      	mov	r2, r3
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <microros_reallocate+0x64>)
 8001312:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <microros_reallocate+0x68>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	461a      	mov	r2, r3
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	4413      	add	r3, r2
 800131e:	461a      	mov	r2, r3
 8001320:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <microros_reallocate+0x68>)
 8001322:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d104      	bne.n	8001334 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800132a:	68b8      	ldr	r0, [r7, #8]
 800132c:	f7ff f98e 	bl	800064c <pvPortMallocMicroROS>
 8001330:	4603      	mov	r3, r0
 8001332:	e00e      	b.n	8001352 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001334:	68f8      	ldr	r0, [r7, #12]
 8001336:	f7ff faa7 	bl	8000888 <getBlockSize>
 800133a:	4603      	mov	r3, r0
 800133c:	4a08      	ldr	r2, [pc, #32]	; (8001360 <microros_reallocate+0x68>)
 800133e:	6812      	ldr	r2, [r2, #0]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	461a      	mov	r2, r3
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <microros_reallocate+0x68>)
 8001346:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001348:	68b9      	ldr	r1, [r7, #8]
 800134a:	68f8      	ldr	r0, [r7, #12]
 800134c:	f7ff faba 	bl	80008c4 <pvPortReallocMicroROS>
 8001350:	4603      	mov	r3, r0
  }
}
 8001352:	4618      	mov	r0, r3
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20004800 	.word	0x20004800
 8001360:	20004804 	.word	0x20004804

08001364 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	68ba      	ldr	r2, [r7, #8]
 8001374:	fb02 f303 	mul.w	r3, r2, r3
 8001378:	4a0c      	ldr	r2, [pc, #48]	; (80013ac <microros_zero_allocate+0x48>)
 800137a:	6812      	ldr	r2, [r2, #0]
 800137c:	4413      	add	r3, r2
 800137e:	461a      	mov	r2, r3
 8001380:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <microros_zero_allocate+0x48>)
 8001382:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	68ba      	ldr	r2, [r7, #8]
 8001388:	fb02 f303 	mul.w	r3, r2, r3
 800138c:	4a08      	ldr	r2, [pc, #32]	; (80013b0 <microros_zero_allocate+0x4c>)
 800138e:	6812      	ldr	r2, [r2, #0]
 8001390:	4413      	add	r3, r2
 8001392:	461a      	mov	r2, r3
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <microros_zero_allocate+0x4c>)
 8001396:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001398:	68b9      	ldr	r1, [r7, #8]
 800139a:	68f8      	ldr	r0, [r7, #12]
 800139c:	f7ff fabf 	bl	800091e <pvPortCallocMicroROS>
 80013a0:	4603      	mov	r3, r0
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20004800 	.word	0x20004800
 80013b0:	20004804 	.word	0x20004804
 80013b4:	00000000 	.word	0x00000000

080013b8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80013b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013bc:	b086      	sub	sp, #24
 80013be:	af00      	add	r7, sp, #0
 80013c0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80013c4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80013ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013ce:	a320      	add	r3, pc, #128	; (adr r3, 8001450 <UTILS_NanosecondsToTimespec+0x98>)
 80013d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d4:	f7fe ff6c 	bl	80002b0 <__aeabi_ldivmod>
 80013d8:	4602      	mov	r2, r0
 80013da:	460b      	mov	r3, r1
 80013dc:	6879      	ldr	r1, [r7, #4]
 80013de:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80013e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013e6:	a31a      	add	r3, pc, #104	; (adr r3, 8001450 <UTILS_NanosecondsToTimespec+0x98>)
 80013e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ec:	f7fe ff60 	bl	80002b0 <__aeabi_ldivmod>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	da20      	bge.n	800143e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	4a11      	ldr	r2, [pc, #68]	; (8001448 <UTILS_NanosecondsToTimespec+0x90>)
 8001402:	fb82 1203 	smull	r1, r2, r2, r3
 8001406:	1712      	asrs	r2, r2, #28
 8001408:	17db      	asrs	r3, r3, #31
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	3301      	adds	r3, #1
 800140e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001416:	6979      	ldr	r1, [r7, #20]
 8001418:	17c8      	asrs	r0, r1, #31
 800141a:	460c      	mov	r4, r1
 800141c:	4605      	mov	r5, r0
 800141e:	ebb2 0804 	subs.w	r8, r2, r4
 8001422:	eb63 0905 	sbc.w	r9, r3, r5
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689a      	ldr	r2, [r3, #8]
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	4906      	ldr	r1, [pc, #24]	; (800144c <UTILS_NanosecondsToTimespec+0x94>)
 8001434:	fb01 f303 	mul.w	r3, r1, r3
 8001438:	441a      	add	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	609a      	str	r2, [r3, #8]
    }
}
 800143e:	bf00      	nop
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001448:	44b82fa1 	.word	0x44b82fa1
 800144c:	3b9aca00 	.word	0x3b9aca00
 8001450:	3b9aca00 	.word	0x3b9aca00
 8001454:	00000000 	.word	0x00000000

08001458 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800145c:	b08e      	sub	sp, #56	; 0x38
 800145e:	af00      	add	r7, sp, #0
 8001460:	6278      	str	r0, [r7, #36]	; 0x24
 8001462:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001464:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001468:	2300      	movs	r3, #0
 800146a:	6013      	str	r3, [r2, #0]
 800146c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800146e:	f04f 0200 	mov.w	r2, #0
 8001472:	f04f 0300 	mov.w	r3, #0
 8001476:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800147a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800147e:	4618      	mov	r0, r3
 8001480:	f004 ff6c 	bl	800635c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001486:	17da      	asrs	r2, r3, #31
 8001488:	61bb      	str	r3, [r7, #24]
 800148a:	61fa      	str	r2, [r7, #28]
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	f04f 0300 	mov.w	r3, #0
 8001494:	69b9      	ldr	r1, [r7, #24]
 8001496:	000b      	movs	r3, r1
 8001498:	2200      	movs	r2, #0
 800149a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800149e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a0:	2200      	movs	r2, #0
 80014a2:	461c      	mov	r4, r3
 80014a4:	4615      	mov	r5, r2
 80014a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80014aa:	1911      	adds	r1, r2, r4
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	416b      	adcs	r3, r5
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80014b6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80014ba:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	f04f 0400 	mov.w	r4, #0
 80014c6:	f04f 0500 	mov.w	r5, #0
 80014ca:	015d      	lsls	r5, r3, #5
 80014cc:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80014d0:	0154      	lsls	r4, r2, #5
 80014d2:	4622      	mov	r2, r4
 80014d4:	462b      	mov	r3, r5
 80014d6:	ebb2 0800 	subs.w	r8, r2, r0
 80014da:	eb63 0901 	sbc.w	r9, r3, r1
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	f04f 0300 	mov.w	r3, #0
 80014e6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80014ea:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80014ee:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80014f2:	4690      	mov	r8, r2
 80014f4:	4699      	mov	r9, r3
 80014f6:	eb18 0a00 	adds.w	sl, r8, r0
 80014fa:	eb49 0b01 	adc.w	fp, r9, r1
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	f04f 0300 	mov.w	r3, #0
 8001506:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800150a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800150e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001512:	ebb2 040a 	subs.w	r4, r2, sl
 8001516:	603c      	str	r4, [r7, #0]
 8001518:	eb63 030b 	sbc.w	r3, r3, fp
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001522:	4623      	mov	r3, r4
 8001524:	181b      	adds	r3, r3, r0
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	462b      	mov	r3, r5
 800152a:	eb41 0303 	adc.w	r3, r1, r3
 800152e:	617b      	str	r3, [r7, #20]
 8001530:	6a3a      	ldr	r2, [r7, #32]
 8001532:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001536:	f7ff ff3f 	bl	80013b8 <UTILS_NanosecondsToTimespec>

    return 0;
 800153a:	2300      	movs	r3, #0
 800153c:	4618      	mov	r0, r3
 800153e:	3738      	adds	r7, #56	; 0x38
 8001540:	46bd      	mov	sp, r7
 8001542:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	607b      	str	r3, [r7, #4]
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <HAL_MspInit+0x4c>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	4a0f      	ldr	r2, [pc, #60]	; (8001594 <HAL_MspInit+0x4c>)
 8001558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800155c:	6453      	str	r3, [r2, #68]	; 0x44
 800155e:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <HAL_MspInit+0x4c>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	603b      	str	r3, [r7, #0]
 800156e:	4b09      	ldr	r3, [pc, #36]	; (8001594 <HAL_MspInit+0x4c>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	4a08      	ldr	r2, [pc, #32]	; (8001594 <HAL_MspInit+0x4c>)
 8001574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001578:	6413      	str	r3, [r2, #64]	; 0x40
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_MspInit+0x4c>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001582:	603b      	str	r3, [r7, #0]
 8001584:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	40023800 	.word	0x40023800

08001598 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	; 0x28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a4d      	ldr	r2, [pc, #308]	; (80016ec <HAL_UART_MspInit+0x154>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	f040 8093 	bne.w	80016e2 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015bc:	2300      	movs	r3, #0
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	4b4b      	ldr	r3, [pc, #300]	; (80016f0 <HAL_UART_MspInit+0x158>)
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	4a4a      	ldr	r2, [pc, #296]	; (80016f0 <HAL_UART_MspInit+0x158>)
 80015c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ca:	6413      	str	r3, [r2, #64]	; 0x40
 80015cc:	4b48      	ldr	r3, [pc, #288]	; (80016f0 <HAL_UART_MspInit+0x158>)
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d8:	2300      	movs	r3, #0
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	4b44      	ldr	r3, [pc, #272]	; (80016f0 <HAL_UART_MspInit+0x158>)
 80015de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e0:	4a43      	ldr	r2, [pc, #268]	; (80016f0 <HAL_UART_MspInit+0x158>)
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	6313      	str	r3, [r2, #48]	; 0x30
 80015e8:	4b41      	ldr	r3, [pc, #260]	; (80016f0 <HAL_UART_MspInit+0x158>)
 80015ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015f4:	230c      	movs	r3, #12
 80015f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f8:	2302      	movs	r3, #2
 80015fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001600:	2300      	movs	r3, #0
 8001602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001604:	2307      	movs	r3, #7
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	4619      	mov	r1, r3
 800160e:	4839      	ldr	r0, [pc, #228]	; (80016f4 <HAL_UART_MspInit+0x15c>)
 8001610:	f000 ff52 	bl	80024b8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001614:	4b38      	ldr	r3, [pc, #224]	; (80016f8 <HAL_UART_MspInit+0x160>)
 8001616:	4a39      	ldr	r2, [pc, #228]	; (80016fc <HAL_UART_MspInit+0x164>)
 8001618:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800161a:	4b37      	ldr	r3, [pc, #220]	; (80016f8 <HAL_UART_MspInit+0x160>)
 800161c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001620:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001622:	4b35      	ldr	r3, [pc, #212]	; (80016f8 <HAL_UART_MspInit+0x160>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001628:	4b33      	ldr	r3, [pc, #204]	; (80016f8 <HAL_UART_MspInit+0x160>)
 800162a:	2200      	movs	r2, #0
 800162c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800162e:	4b32      	ldr	r3, [pc, #200]	; (80016f8 <HAL_UART_MspInit+0x160>)
 8001630:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001634:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001636:	4b30      	ldr	r3, [pc, #192]	; (80016f8 <HAL_UART_MspInit+0x160>)
 8001638:	2200      	movs	r2, #0
 800163a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800163c:	4b2e      	ldr	r3, [pc, #184]	; (80016f8 <HAL_UART_MspInit+0x160>)
 800163e:	2200      	movs	r2, #0
 8001640:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001642:	4b2d      	ldr	r3, [pc, #180]	; (80016f8 <HAL_UART_MspInit+0x160>)
 8001644:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001648:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800164a:	4b2b      	ldr	r3, [pc, #172]	; (80016f8 <HAL_UART_MspInit+0x160>)
 800164c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001650:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001652:	4b29      	ldr	r3, [pc, #164]	; (80016f8 <HAL_UART_MspInit+0x160>)
 8001654:	2200      	movs	r2, #0
 8001656:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001658:	4827      	ldr	r0, [pc, #156]	; (80016f8 <HAL_UART_MspInit+0x160>)
 800165a:	f000 fb2b 	bl	8001cb4 <HAL_DMA_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8001664:	f7ff fe04 	bl	8001270 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a23      	ldr	r2, [pc, #140]	; (80016f8 <HAL_UART_MspInit+0x160>)
 800166c:	63da      	str	r2, [r3, #60]	; 0x3c
 800166e:	4a22      	ldr	r2, [pc, #136]	; (80016f8 <HAL_UART_MspInit+0x160>)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001674:	4b22      	ldr	r3, [pc, #136]	; (8001700 <HAL_UART_MspInit+0x168>)
 8001676:	4a23      	ldr	r2, [pc, #140]	; (8001704 <HAL_UART_MspInit+0x16c>)
 8001678:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800167a:	4b21      	ldr	r3, [pc, #132]	; (8001700 <HAL_UART_MspInit+0x168>)
 800167c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001680:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001682:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <HAL_UART_MspInit+0x168>)
 8001684:	2240      	movs	r2, #64	; 0x40
 8001686:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001688:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <HAL_UART_MspInit+0x168>)
 800168a:	2200      	movs	r2, #0
 800168c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800168e:	4b1c      	ldr	r3, [pc, #112]	; (8001700 <HAL_UART_MspInit+0x168>)
 8001690:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001694:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001696:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <HAL_UART_MspInit+0x168>)
 8001698:	2200      	movs	r2, #0
 800169a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800169c:	4b18      	ldr	r3, [pc, #96]	; (8001700 <HAL_UART_MspInit+0x168>)
 800169e:	2200      	movs	r2, #0
 80016a0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80016a2:	4b17      	ldr	r3, [pc, #92]	; (8001700 <HAL_UART_MspInit+0x168>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80016a8:	4b15      	ldr	r3, [pc, #84]	; (8001700 <HAL_UART_MspInit+0x168>)
 80016aa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80016ae:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016b0:	4b13      	ldr	r3, [pc, #76]	; (8001700 <HAL_UART_MspInit+0x168>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80016b6:	4812      	ldr	r0, [pc, #72]	; (8001700 <HAL_UART_MspInit+0x168>)
 80016b8:	f000 fafc 	bl	8001cb4 <HAL_DMA_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 80016c2:	f7ff fdd5 	bl	8001270 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a0d      	ldr	r2, [pc, #52]	; (8001700 <HAL_UART_MspInit+0x168>)
 80016ca:	639a      	str	r2, [r3, #56]	; 0x38
 80016cc:	4a0c      	ldr	r2, [pc, #48]	; (8001700 <HAL_UART_MspInit+0x168>)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2105      	movs	r1, #5
 80016d6:	2026      	movs	r0, #38	; 0x26
 80016d8:	f000 fac2 	bl	8001c60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016dc:	2026      	movs	r0, #38	; 0x26
 80016de:	f000 fadb 	bl	8001c98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016e2:	bf00      	nop
 80016e4:	3728      	adds	r7, #40	; 0x28
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40004400 	.word	0x40004400
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40020000 	.word	0x40020000
 80016f8:	2000473c 	.word	0x2000473c
 80016fc:	40026088 	.word	0x40026088
 8001700:	2000479c 	.word	0x2000479c
 8001704:	400260a0 	.word	0x400260a0

08001708 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08c      	sub	sp, #48	; 0x30
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001710:	2300      	movs	r3, #0
 8001712:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001714:	2300      	movs	r3, #0
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001718:	2300      	movs	r3, #0
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	4b2e      	ldr	r3, [pc, #184]	; (80017d8 <HAL_InitTick+0xd0>)
 800171e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001720:	4a2d      	ldr	r2, [pc, #180]	; (80017d8 <HAL_InitTick+0xd0>)
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	6453      	str	r3, [r2, #68]	; 0x44
 8001728:	4b2b      	ldr	r3, [pc, #172]	; (80017d8 <HAL_InitTick+0xd0>)
 800172a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001734:	f107 020c 	add.w	r2, r7, #12
 8001738:	f107 0310 	add.w	r3, r7, #16
 800173c:	4611      	mov	r1, r2
 800173e:	4618      	mov	r0, r3
 8001740:	f001 fd0a 	bl	8003158 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001744:	f001 fcf4 	bl	8003130 <HAL_RCC_GetPCLK2Freq>
 8001748:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800174a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800174c:	4a23      	ldr	r2, [pc, #140]	; (80017dc <HAL_InitTick+0xd4>)
 800174e:	fba2 2303 	umull	r2, r3, r2, r3
 8001752:	0c9b      	lsrs	r3, r3, #18
 8001754:	3b01      	subs	r3, #1
 8001756:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001758:	4b21      	ldr	r3, [pc, #132]	; (80017e0 <HAL_InitTick+0xd8>)
 800175a:	4a22      	ldr	r2, [pc, #136]	; (80017e4 <HAL_InitTick+0xdc>)
 800175c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800175e:	4b20      	ldr	r3, [pc, #128]	; (80017e0 <HAL_InitTick+0xd8>)
 8001760:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001764:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001766:	4a1e      	ldr	r2, [pc, #120]	; (80017e0 <HAL_InitTick+0xd8>)
 8001768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800176c:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <HAL_InitTick+0xd8>)
 800176e:	2200      	movs	r2, #0
 8001770:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001772:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <HAL_InitTick+0xd8>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001778:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <HAL_InitTick+0xd8>)
 800177a:	2200      	movs	r2, #0
 800177c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800177e:	4818      	ldr	r0, [pc, #96]	; (80017e0 <HAL_InitTick+0xd8>)
 8001780:	f001 fd1c 	bl	80031bc <HAL_TIM_Base_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800178a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800178e:	2b00      	cmp	r3, #0
 8001790:	d11b      	bne.n	80017ca <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001792:	4813      	ldr	r0, [pc, #76]	; (80017e0 <HAL_InitTick+0xd8>)
 8001794:	f001 fd6c 	bl	8003270 <HAL_TIM_Base_Start_IT>
 8001798:	4603      	mov	r3, r0
 800179a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800179e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d111      	bne.n	80017ca <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80017a6:	2019      	movs	r0, #25
 80017a8:	f000 fa76 	bl	8001c98 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b0f      	cmp	r3, #15
 80017b0:	d808      	bhi.n	80017c4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80017b2:	2200      	movs	r2, #0
 80017b4:	6879      	ldr	r1, [r7, #4]
 80017b6:	2019      	movs	r0, #25
 80017b8:	f000 fa52 	bl	8001c60 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017bc:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <HAL_InitTick+0xe0>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6013      	str	r3, [r2, #0]
 80017c2:	e002      	b.n	80017ca <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80017ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3730      	adds	r7, #48	; 0x30
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800
 80017dc:	431bde83 	.word	0x431bde83
 80017e0:	20004808 	.word	0x20004808
 80017e4:	40010000 	.word	0x40010000
 80017e8:	20000008 	.word	0x20000008

080017ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017f0:	e7fe      	b.n	80017f0 <NMI_Handler+0x4>

080017f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f6:	e7fe      	b.n	80017f6 <HardFault_Handler+0x4>

080017f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017fc:	e7fe      	b.n	80017fc <MemManage_Handler+0x4>

080017fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001802:	e7fe      	b.n	8001802 <BusFault_Handler+0x4>

08001804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001808:	e7fe      	b.n	8001808 <UsageFault_Handler+0x4>

0800180a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <DMA1_Stream5_IRQHandler+0x10>)
 800181e:	f000 fbe1 	bl	8001fe4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	2000473c 	.word	0x2000473c

0800182c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001830:	4802      	ldr	r0, [pc, #8]	; (800183c <DMA1_Stream6_IRQHandler+0x10>)
 8001832:	f000 fbd7 	bl	8001fe4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	2000479c 	.word	0x2000479c

08001840 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001844:	4802      	ldr	r0, [pc, #8]	; (8001850 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001846:	f001 fd75 	bl	8003334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20004808 	.word	0x20004808

08001854 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001858:	4802      	ldr	r0, [pc, #8]	; (8001864 <USART2_IRQHandler+0x10>)
 800185a:	f002 f887 	bl	800396c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	200046f4 	.word	0x200046f4

08001868 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return 1;
 800186c:	2301      	movs	r3, #1
}
 800186e:	4618      	mov	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <_kill>:

int _kill(int pid, int sig)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001882:	f013 fd9b 	bl	80153bc <__errno>
 8001886:	4603      	mov	r3, r0
 8001888:	2216      	movs	r2, #22
 800188a:	601a      	str	r2, [r3, #0]
  return -1;
 800188c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001890:	4618      	mov	r0, r3
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <_exit>:

void _exit (int status)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff ffe7 	bl	8001878 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018aa:	e7fe      	b.n	80018aa <_exit+0x12>

080018ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	e00a      	b.n	80018d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018be:	f3af 8000 	nop.w
 80018c2:	4601      	mov	r1, r0
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	1c5a      	adds	r2, r3, #1
 80018c8:	60ba      	str	r2, [r7, #8]
 80018ca:	b2ca      	uxtb	r2, r1
 80018cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	3301      	adds	r3, #1
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	429a      	cmp	r2, r3
 80018da:	dbf0      	blt.n	80018be <_read+0x12>
  }

  return len;
 80018dc:	687b      	ldr	r3, [r7, #4]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b086      	sub	sp, #24
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	60f8      	str	r0, [r7, #12]
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	e009      	b.n	800190c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	1c5a      	adds	r2, r3, #1
 80018fc:	60ba      	str	r2, [r7, #8]
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	3301      	adds	r3, #1
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	429a      	cmp	r2, r3
 8001912:	dbf1      	blt.n	80018f8 <_write+0x12>
  }
  return len;
 8001914:	687b      	ldr	r3, [r7, #4]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <_close>:

int _close(int file)
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800192a:	4618      	mov	r0, r3
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
 800193e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001946:	605a      	str	r2, [r3, #4]
  return 0;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <_isatty>:

int _isatty(int file)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800195e:	2301      	movs	r3, #1
}
 8001960:	4618      	mov	r0, r3
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	60b9      	str	r1, [r7, #8]
 8001976:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
	...

08001988 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001990:	4a14      	ldr	r2, [pc, #80]	; (80019e4 <_sbrk+0x5c>)
 8001992:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <_sbrk+0x60>)
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800199c:	4b13      	ldr	r3, [pc, #76]	; (80019ec <_sbrk+0x64>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d102      	bne.n	80019aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a4:	4b11      	ldr	r3, [pc, #68]	; (80019ec <_sbrk+0x64>)
 80019a6:	4a12      	ldr	r2, [pc, #72]	; (80019f0 <_sbrk+0x68>)
 80019a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019aa:	4b10      	ldr	r3, [pc, #64]	; (80019ec <_sbrk+0x64>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4413      	add	r3, r2
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d207      	bcs.n	80019c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019b8:	f013 fd00 	bl	80153bc <__errno>
 80019bc:	4603      	mov	r3, r0
 80019be:	220c      	movs	r2, #12
 80019c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019c6:	e009      	b.n	80019dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019c8:	4b08      	ldr	r3, [pc, #32]	; (80019ec <_sbrk+0x64>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ce:	4b07      	ldr	r3, [pc, #28]	; (80019ec <_sbrk+0x64>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	4a05      	ldr	r2, [pc, #20]	; (80019ec <_sbrk+0x64>)
 80019d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019da:	68fb      	ldr	r3, [r7, #12]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20018000 	.word	0x20018000
 80019e8:	00000400 	.word	0x00000400
 80019ec:	20004854 	.word	0x20004854
 80019f0:	2000df08 	.word	0x2000df08

080019f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019f8:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <SystemInit+0x20>)
 80019fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019fe:	4a05      	ldr	r2, [pc, #20]	; (8001a14 <SystemInit+0x20>)
 8001a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a50 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a1c:	f7ff ffea 	bl	80019f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a20:	480c      	ldr	r0, [pc, #48]	; (8001a54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a22:	490d      	ldr	r1, [pc, #52]	; (8001a58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a24:	4a0d      	ldr	r2, [pc, #52]	; (8001a5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a28:	e002      	b.n	8001a30 <LoopCopyDataInit>

08001a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a2e:	3304      	adds	r3, #4

08001a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a34:	d3f9      	bcc.n	8001a2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a36:	4a0a      	ldr	r2, [pc, #40]	; (8001a60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a38:	4c0a      	ldr	r4, [pc, #40]	; (8001a64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a3c:	e001      	b.n	8001a42 <LoopFillZerobss>

08001a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a40:	3204      	adds	r2, #4

08001a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a44:	d3fb      	bcc.n	8001a3e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001a46:	f013 fcbf 	bl	80153c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a4a:	f7ff f8f7 	bl	8000c3c <main>
  bx  lr    
 8001a4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a50:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a58:	200002b8 	.word	0x200002b8
  ldr r2, =_sidata
 8001a5c:	080171bc 	.word	0x080171bc
  ldr r2, =_sbss
 8001a60:	200002b8 	.word	0x200002b8
  ldr r4, =_ebss
 8001a64:	2000df08 	.word	0x2000df08

08001a68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a68:	e7fe      	b.n	8001a68 <ADC_IRQHandler>
	...

08001a6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a70:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <HAL_Init+0x40>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a0d      	ldr	r2, [pc, #52]	; (8001aac <HAL_Init+0x40>)
 8001a76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <HAL_Init+0x40>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a0a      	ldr	r2, [pc, #40]	; (8001aac <HAL_Init+0x40>)
 8001a82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <HAL_Init+0x40>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a07      	ldr	r2, [pc, #28]	; (8001aac <HAL_Init+0x40>)
 8001a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a94:	2003      	movs	r0, #3
 8001a96:	f000 f8d8 	bl	8001c4a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f7ff fe34 	bl	8001708 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aa0:	f7ff fd52 	bl	8001548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023c00 	.word	0x40023c00

08001ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_IncTick+0x20>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <HAL_IncTick+0x24>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4413      	add	r3, r2
 8001ac0:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <HAL_IncTick+0x24>)
 8001ac2:	6013      	str	r3, [r2, #0]
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	2000000c 	.word	0x2000000c
 8001ad4:	20004858 	.word	0x20004858

08001ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return uwTick;
 8001adc:	4b03      	ldr	r3, [pc, #12]	; (8001aec <HAL_GetTick+0x14>)
 8001ade:	681b      	ldr	r3, [r3, #0]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	20004858 	.word	0x20004858

08001af0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b00:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <__NVIC_SetPriorityGrouping+0x44>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b06:	68ba      	ldr	r2, [r7, #8]
 8001b08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b22:	4a04      	ldr	r2, [pc, #16]	; (8001b34 <__NVIC_SetPriorityGrouping+0x44>)
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	60d3      	str	r3, [r2, #12]
}
 8001b28:	bf00      	nop
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b3c:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <__NVIC_GetPriorityGrouping+0x18>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	0a1b      	lsrs	r3, r3, #8
 8001b42:	f003 0307 	and.w	r3, r3, #7
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	db0b      	blt.n	8001b7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	f003 021f 	and.w	r2, r3, #31
 8001b6c:	4907      	ldr	r1, [pc, #28]	; (8001b8c <__NVIC_EnableIRQ+0x38>)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	095b      	lsrs	r3, r3, #5
 8001b74:	2001      	movs	r0, #1
 8001b76:	fa00 f202 	lsl.w	r2, r0, r2
 8001b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	e000e100 	.word	0xe000e100

08001b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	6039      	str	r1, [r7, #0]
 8001b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	db0a      	blt.n	8001bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	490c      	ldr	r1, [pc, #48]	; (8001bdc <__NVIC_SetPriority+0x4c>)
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	0112      	lsls	r2, r2, #4
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	440b      	add	r3, r1
 8001bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bb8:	e00a      	b.n	8001bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	4908      	ldr	r1, [pc, #32]	; (8001be0 <__NVIC_SetPriority+0x50>)
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	3b04      	subs	r3, #4
 8001bc8:	0112      	lsls	r2, r2, #4
 8001bca:	b2d2      	uxtb	r2, r2
 8001bcc:	440b      	add	r3, r1
 8001bce:	761a      	strb	r2, [r3, #24]
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000e100 	.word	0xe000e100
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b089      	sub	sp, #36	; 0x24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	f1c3 0307 	rsb	r3, r3, #7
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	bf28      	it	cs
 8001c02:	2304      	movcs	r3, #4
 8001c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	3304      	adds	r3, #4
 8001c0a:	2b06      	cmp	r3, #6
 8001c0c:	d902      	bls.n	8001c14 <NVIC_EncodePriority+0x30>
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3b03      	subs	r3, #3
 8001c12:	e000      	b.n	8001c16 <NVIC_EncodePriority+0x32>
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43da      	mvns	r2, r3
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	401a      	ands	r2, r3
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	fa01 f303 	lsl.w	r3, r1, r3
 8001c36:	43d9      	mvns	r1, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c3c:	4313      	orrs	r3, r2
         );
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3724      	adds	r7, #36	; 0x24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff ff4c 	bl	8001af0 <__NVIC_SetPriorityGrouping>
}
 8001c58:	bf00      	nop
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
 8001c6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c72:	f7ff ff61 	bl	8001b38 <__NVIC_GetPriorityGrouping>
 8001c76:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	68b9      	ldr	r1, [r7, #8]
 8001c7c:	6978      	ldr	r0, [r7, #20]
 8001c7e:	f7ff ffb1 	bl	8001be4 <NVIC_EncodePriority>
 8001c82:	4602      	mov	r2, r0
 8001c84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c88:	4611      	mov	r1, r2
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff ff80 	bl	8001b90 <__NVIC_SetPriority>
}
 8001c90:	bf00      	nop
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff ff54 	bl	8001b54 <__NVIC_EnableIRQ>
}
 8001cac:	bf00      	nop
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001cc0:	f7ff ff0a 	bl	8001ad8 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e099      	b.n	8001e04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0201 	bic.w	r2, r2, #1
 8001cee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cf0:	e00f      	b.n	8001d12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cf2:	f7ff fef1 	bl	8001ad8 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b05      	cmp	r3, #5
 8001cfe:	d908      	bls.n	8001d12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2220      	movs	r2, #32
 8001d04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2203      	movs	r2, #3
 8001d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e078      	b.n	8001e04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1e8      	bne.n	8001cf2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	4b38      	ldr	r3, [pc, #224]	; (8001e0c <HAL_DMA_Init+0x158>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	d107      	bne.n	8001d7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d74:	4313      	orrs	r3, r2
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	f023 0307 	bic.w	r3, r3, #7
 8001d92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	d117      	bne.n	8001dd6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00e      	beq.n	8001dd6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f000 fb01 	bl	80023c0 <DMA_CheckFifoParam>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d008      	beq.n	8001dd6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2240      	movs	r2, #64	; 0x40
 8001dc8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e016      	b.n	8001e04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 fab8 	bl	8002354 <DMA_CalcBaseAndBitshift>
 8001de4:	4603      	mov	r3, r0
 8001de6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dec:	223f      	movs	r2, #63	; 0x3f
 8001dee:	409a      	lsls	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	f010803f 	.word	0xf010803f

08001e10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
 8001e1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e26:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d101      	bne.n	8001e36 <HAL_DMA_Start_IT+0x26>
 8001e32:	2302      	movs	r3, #2
 8001e34:	e040      	b.n	8001eb8 <HAL_DMA_Start_IT+0xa8>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d12f      	bne.n	8001eaa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	68b9      	ldr	r1, [r7, #8]
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f000 fa4a 	bl	80022f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e68:	223f      	movs	r2, #63	; 0x3f
 8001e6a:	409a      	lsls	r2, r3
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0216 	orr.w	r2, r2, #22
 8001e7e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d007      	beq.n	8001e98 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f042 0208 	orr.w	r2, r2, #8
 8001e96:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0201 	orr.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	e005      	b.n	8001eb6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ecc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ece:	f7ff fe03 	bl	8001ad8 <HAL_GetTick>
 8001ed2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d008      	beq.n	8001ef2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2280      	movs	r2, #128	; 0x80
 8001ee4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e052      	b.n	8001f98 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f022 0216 	bic.w	r2, r2, #22
 8001f00:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	695a      	ldr	r2, [r3, #20]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f10:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d103      	bne.n	8001f22 <HAL_DMA_Abort+0x62>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d007      	beq.n	8001f32 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 0208 	bic.w	r2, r2, #8
 8001f30:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0201 	bic.w	r2, r2, #1
 8001f40:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f42:	e013      	b.n	8001f6c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f44:	f7ff fdc8 	bl	8001ad8 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b05      	cmp	r3, #5
 8001f50:	d90c      	bls.n	8001f6c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2220      	movs	r2, #32
 8001f56:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2203      	movs	r2, #3
 8001f5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e015      	b.n	8001f98 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1e4      	bne.n	8001f44 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f7e:	223f      	movs	r2, #63	; 0x3f
 8001f80:	409a      	lsls	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d004      	beq.n	8001fbe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2280      	movs	r2, #128	; 0x80
 8001fb8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e00c      	b.n	8001fd8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2205      	movs	r2, #5
 8001fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0201 	bic.w	r2, r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ff0:	4b8e      	ldr	r3, [pc, #568]	; (800222c <HAL_DMA_IRQHandler+0x248>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a8e      	ldr	r2, [pc, #568]	; (8002230 <HAL_DMA_IRQHandler+0x24c>)
 8001ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffa:	0a9b      	lsrs	r3, r3, #10
 8001ffc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002002:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200e:	2208      	movs	r2, #8
 8002010:	409a      	lsls	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	4013      	ands	r3, r2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d01a      	beq.n	8002050 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	d013      	beq.n	8002050 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0204 	bic.w	r2, r2, #4
 8002036:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203c:	2208      	movs	r2, #8
 800203e:	409a      	lsls	r2, r3
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002048:	f043 0201 	orr.w	r2, r3, #1
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002054:	2201      	movs	r2, #1
 8002056:	409a      	lsls	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	4013      	ands	r3, r2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d012      	beq.n	8002086 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00b      	beq.n	8002086 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002072:	2201      	movs	r2, #1
 8002074:	409a      	lsls	r2, r3
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800207e:	f043 0202 	orr.w	r2, r3, #2
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208a:	2204      	movs	r2, #4
 800208c:	409a      	lsls	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	4013      	ands	r3, r2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d012      	beq.n	80020bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00b      	beq.n	80020bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a8:	2204      	movs	r2, #4
 80020aa:	409a      	lsls	r2, r3
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b4:	f043 0204 	orr.w	r2, r3, #4
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c0:	2210      	movs	r2, #16
 80020c2:	409a      	lsls	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4013      	ands	r3, r2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d043      	beq.n	8002154 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0308 	and.w	r3, r3, #8
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d03c      	beq.n	8002154 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020de:	2210      	movs	r2, #16
 80020e0:	409a      	lsls	r2, r3
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d018      	beq.n	8002126 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d108      	bne.n	8002114 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	2b00      	cmp	r3, #0
 8002108:	d024      	beq.n	8002154 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	4798      	blx	r3
 8002112:	e01f      	b.n	8002154 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002118:	2b00      	cmp	r3, #0
 800211a:	d01b      	beq.n	8002154 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	4798      	blx	r3
 8002124:	e016      	b.n	8002154 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002130:	2b00      	cmp	r3, #0
 8002132:	d107      	bne.n	8002144 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 0208 	bic.w	r2, r2, #8
 8002142:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002158:	2220      	movs	r2, #32
 800215a:	409a      	lsls	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4013      	ands	r3, r2
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 808f 	beq.w	8002284 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0310 	and.w	r3, r3, #16
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 8087 	beq.w	8002284 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217a:	2220      	movs	r2, #32
 800217c:	409a      	lsls	r2, r3
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b05      	cmp	r3, #5
 800218c:	d136      	bne.n	80021fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0216 	bic.w	r2, r2, #22
 800219c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	695a      	ldr	r2, [r3, #20]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d103      	bne.n	80021be <HAL_DMA_IRQHandler+0x1da>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d007      	beq.n	80021ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 0208 	bic.w	r2, r2, #8
 80021cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d2:	223f      	movs	r2, #63	; 0x3f
 80021d4:	409a      	lsls	r2, r3
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d07e      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	4798      	blx	r3
        }
        return;
 80021fa:	e079      	b.n	80022f0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d01d      	beq.n	8002246 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10d      	bne.n	8002234 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221c:	2b00      	cmp	r3, #0
 800221e:	d031      	beq.n	8002284 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	4798      	blx	r3
 8002228:	e02c      	b.n	8002284 <HAL_DMA_IRQHandler+0x2a0>
 800222a:	bf00      	nop
 800222c:	20000004 	.word	0x20000004
 8002230:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002238:	2b00      	cmp	r3, #0
 800223a:	d023      	beq.n	8002284 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	4798      	blx	r3
 8002244:	e01e      	b.n	8002284 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10f      	bne.n	8002274 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0210 	bic.w	r2, r2, #16
 8002262:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002288:	2b00      	cmp	r3, #0
 800228a:	d032      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b00      	cmp	r3, #0
 8002296:	d022      	beq.n	80022de <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2205      	movs	r2, #5
 800229c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f022 0201 	bic.w	r2, r2, #1
 80022ae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	3301      	adds	r3, #1
 80022b4:	60bb      	str	r3, [r7, #8]
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d307      	bcc.n	80022cc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f2      	bne.n	80022b0 <HAL_DMA_IRQHandler+0x2cc>
 80022ca:	e000      	b.n	80022ce <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022cc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d005      	beq.n	80022f2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	4798      	blx	r3
 80022ee:	e000      	b.n	80022f2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80022f0:	bf00      	nop
    }
  }
}
 80022f2:	3718      	adds	r7, #24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
 8002304:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002314:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	2b40      	cmp	r3, #64	; 0x40
 8002324:	d108      	bne.n	8002338 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68ba      	ldr	r2, [r7, #8]
 8002334:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002336:	e007      	b.n	8002348 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68ba      	ldr	r2, [r7, #8]
 800233e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	60da      	str	r2, [r3, #12]
}
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	b2db      	uxtb	r3, r3
 8002362:	3b10      	subs	r3, #16
 8002364:	4a14      	ldr	r2, [pc, #80]	; (80023b8 <DMA_CalcBaseAndBitshift+0x64>)
 8002366:	fba2 2303 	umull	r2, r3, r2, r3
 800236a:	091b      	lsrs	r3, r3, #4
 800236c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800236e:	4a13      	ldr	r2, [pc, #76]	; (80023bc <DMA_CalcBaseAndBitshift+0x68>)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4413      	add	r3, r2
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	461a      	mov	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2b03      	cmp	r3, #3
 8002380:	d909      	bls.n	8002396 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800238a:	f023 0303 	bic.w	r3, r3, #3
 800238e:	1d1a      	adds	r2, r3, #4
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	659a      	str	r2, [r3, #88]	; 0x58
 8002394:	e007      	b.n	80023a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800239e:	f023 0303 	bic.w	r3, r3, #3
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	aaaaaaab 	.word	0xaaaaaaab
 80023bc:	080162fc 	.word	0x080162fc

080023c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023c8:	2300      	movs	r3, #0
 80023ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d11f      	bne.n	800241a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2b03      	cmp	r3, #3
 80023de:	d856      	bhi.n	800248e <DMA_CheckFifoParam+0xce>
 80023e0:	a201      	add	r2, pc, #4	; (adr r2, 80023e8 <DMA_CheckFifoParam+0x28>)
 80023e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e6:	bf00      	nop
 80023e8:	080023f9 	.word	0x080023f9
 80023ec:	0800240b 	.word	0x0800240b
 80023f0:	080023f9 	.word	0x080023f9
 80023f4:	0800248f 	.word	0x0800248f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d046      	beq.n	8002492 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002408:	e043      	b.n	8002492 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002412:	d140      	bne.n	8002496 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002418:	e03d      	b.n	8002496 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002422:	d121      	bne.n	8002468 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2b03      	cmp	r3, #3
 8002428:	d837      	bhi.n	800249a <DMA_CheckFifoParam+0xda>
 800242a:	a201      	add	r2, pc, #4	; (adr r2, 8002430 <DMA_CheckFifoParam+0x70>)
 800242c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002430:	08002441 	.word	0x08002441
 8002434:	08002447 	.word	0x08002447
 8002438:	08002441 	.word	0x08002441
 800243c:	08002459 	.word	0x08002459
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	73fb      	strb	r3, [r7, #15]
      break;
 8002444:	e030      	b.n	80024a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d025      	beq.n	800249e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002456:	e022      	b.n	800249e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002460:	d11f      	bne.n	80024a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002466:	e01c      	b.n	80024a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2b02      	cmp	r3, #2
 800246c:	d903      	bls.n	8002476 <DMA_CheckFifoParam+0xb6>
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	2b03      	cmp	r3, #3
 8002472:	d003      	beq.n	800247c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002474:	e018      	b.n	80024a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	73fb      	strb	r3, [r7, #15]
      break;
 800247a:	e015      	b.n	80024a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002480:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00e      	beq.n	80024a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
      break;
 800248c:	e00b      	b.n	80024a6 <DMA_CheckFifoParam+0xe6>
      break;
 800248e:	bf00      	nop
 8002490:	e00a      	b.n	80024a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002492:	bf00      	nop
 8002494:	e008      	b.n	80024a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002496:	bf00      	nop
 8002498:	e006      	b.n	80024a8 <DMA_CheckFifoParam+0xe8>
      break;
 800249a:	bf00      	nop
 800249c:	e004      	b.n	80024a8 <DMA_CheckFifoParam+0xe8>
      break;
 800249e:	bf00      	nop
 80024a0:	e002      	b.n	80024a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80024a2:	bf00      	nop
 80024a4:	e000      	b.n	80024a8 <DMA_CheckFifoParam+0xe8>
      break;
 80024a6:	bf00      	nop
    }
  } 
  
  return status; 
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3714      	adds	r7, #20
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop

080024b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b089      	sub	sp, #36	; 0x24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ce:	2300      	movs	r3, #0
 80024d0:	61fb      	str	r3, [r7, #28]
 80024d2:	e159      	b.n	8002788 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024d4:	2201      	movs	r2, #1
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	4013      	ands	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	f040 8148 	bne.w	8002782 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d005      	beq.n	800250a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002506:	2b02      	cmp	r3, #2
 8002508:	d130      	bne.n	800256c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	2203      	movs	r2, #3
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43db      	mvns	r3, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4013      	ands	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4313      	orrs	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002540:	2201      	movs	r2, #1
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	091b      	lsrs	r3, r3, #4
 8002556:	f003 0201 	and.w	r2, r3, #1
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 0303 	and.w	r3, r3, #3
 8002574:	2b03      	cmp	r3, #3
 8002576:	d017      	beq.n	80025a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	2203      	movs	r2, #3
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4313      	orrs	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f003 0303 	and.w	r3, r3, #3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d123      	bne.n	80025fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	08da      	lsrs	r2, r3, #3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3208      	adds	r2, #8
 80025bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	220f      	movs	r2, #15
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	691a      	ldr	r2, [r3, #16]
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	08da      	lsrs	r2, r3, #3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	3208      	adds	r2, #8
 80025f6:	69b9      	ldr	r1, [r7, #24]
 80025f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	2203      	movs	r2, #3
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f003 0203 	and.w	r2, r3, #3
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4313      	orrs	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 80a2 	beq.w	8002782 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	60fb      	str	r3, [r7, #12]
 8002642:	4b57      	ldr	r3, [pc, #348]	; (80027a0 <HAL_GPIO_Init+0x2e8>)
 8002644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002646:	4a56      	ldr	r2, [pc, #344]	; (80027a0 <HAL_GPIO_Init+0x2e8>)
 8002648:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800264c:	6453      	str	r3, [r2, #68]	; 0x44
 800264e:	4b54      	ldr	r3, [pc, #336]	; (80027a0 <HAL_GPIO_Init+0x2e8>)
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800265a:	4a52      	ldr	r2, [pc, #328]	; (80027a4 <HAL_GPIO_Init+0x2ec>)
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	089b      	lsrs	r3, r3, #2
 8002660:	3302      	adds	r3, #2
 8002662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002666:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	220f      	movs	r2, #15
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43db      	mvns	r3, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4013      	ands	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a49      	ldr	r2, [pc, #292]	; (80027a8 <HAL_GPIO_Init+0x2f0>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d019      	beq.n	80026ba <HAL_GPIO_Init+0x202>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a48      	ldr	r2, [pc, #288]	; (80027ac <HAL_GPIO_Init+0x2f4>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d013      	beq.n	80026b6 <HAL_GPIO_Init+0x1fe>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a47      	ldr	r2, [pc, #284]	; (80027b0 <HAL_GPIO_Init+0x2f8>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d00d      	beq.n	80026b2 <HAL_GPIO_Init+0x1fa>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a46      	ldr	r2, [pc, #280]	; (80027b4 <HAL_GPIO_Init+0x2fc>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d007      	beq.n	80026ae <HAL_GPIO_Init+0x1f6>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a45      	ldr	r2, [pc, #276]	; (80027b8 <HAL_GPIO_Init+0x300>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d101      	bne.n	80026aa <HAL_GPIO_Init+0x1f2>
 80026a6:	2304      	movs	r3, #4
 80026a8:	e008      	b.n	80026bc <HAL_GPIO_Init+0x204>
 80026aa:	2307      	movs	r3, #7
 80026ac:	e006      	b.n	80026bc <HAL_GPIO_Init+0x204>
 80026ae:	2303      	movs	r3, #3
 80026b0:	e004      	b.n	80026bc <HAL_GPIO_Init+0x204>
 80026b2:	2302      	movs	r3, #2
 80026b4:	e002      	b.n	80026bc <HAL_GPIO_Init+0x204>
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <HAL_GPIO_Init+0x204>
 80026ba:	2300      	movs	r3, #0
 80026bc:	69fa      	ldr	r2, [r7, #28]
 80026be:	f002 0203 	and.w	r2, r2, #3
 80026c2:	0092      	lsls	r2, r2, #2
 80026c4:	4093      	lsls	r3, r2
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026cc:	4935      	ldr	r1, [pc, #212]	; (80027a4 <HAL_GPIO_Init+0x2ec>)
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	089b      	lsrs	r3, r3, #2
 80026d2:	3302      	adds	r3, #2
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026da:	4b38      	ldr	r3, [pc, #224]	; (80027bc <HAL_GPIO_Init+0x304>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	43db      	mvns	r3, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4013      	ands	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026fe:	4a2f      	ldr	r2, [pc, #188]	; (80027bc <HAL_GPIO_Init+0x304>)
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002704:	4b2d      	ldr	r3, [pc, #180]	; (80027bc <HAL_GPIO_Init+0x304>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	43db      	mvns	r3, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4013      	ands	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4313      	orrs	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002728:	4a24      	ldr	r2, [pc, #144]	; (80027bc <HAL_GPIO_Init+0x304>)
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800272e:	4b23      	ldr	r3, [pc, #140]	; (80027bc <HAL_GPIO_Init+0x304>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	43db      	mvns	r3, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4013      	ands	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4313      	orrs	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002752:	4a1a      	ldr	r2, [pc, #104]	; (80027bc <HAL_GPIO_Init+0x304>)
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002758:	4b18      	ldr	r3, [pc, #96]	; (80027bc <HAL_GPIO_Init+0x304>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	43db      	mvns	r3, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4013      	ands	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	4313      	orrs	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800277c:	4a0f      	ldr	r2, [pc, #60]	; (80027bc <HAL_GPIO_Init+0x304>)
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	3301      	adds	r3, #1
 8002786:	61fb      	str	r3, [r7, #28]
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	2b0f      	cmp	r3, #15
 800278c:	f67f aea2 	bls.w	80024d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002790:	bf00      	nop
 8002792:	bf00      	nop
 8002794:	3724      	adds	r7, #36	; 0x24
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	40023800 	.word	0x40023800
 80027a4:	40013800 	.word	0x40013800
 80027a8:	40020000 	.word	0x40020000
 80027ac:	40020400 	.word	0x40020400
 80027b0:	40020800 	.word	0x40020800
 80027b4:	40020c00 	.word	0x40020c00
 80027b8:	40021000 	.word	0x40021000
 80027bc:	40013c00 	.word	0x40013c00

080027c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	460b      	mov	r3, r1
 80027ca:	807b      	strh	r3, [r7, #2]
 80027cc:	4613      	mov	r3, r2
 80027ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027d0:	787b      	ldrb	r3, [r7, #1]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027d6:	887a      	ldrh	r2, [r7, #2]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027dc:	e003      	b.n	80027e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027de:	887b      	ldrh	r3, [r7, #2]
 80027e0:	041a      	lsls	r2, r3, #16
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	619a      	str	r2, [r3, #24]
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b085      	sub	sp, #20
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	460b      	mov	r3, r1
 80027fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002804:	887a      	ldrh	r2, [r7, #2]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	4013      	ands	r3, r2
 800280a:	041a      	lsls	r2, r3, #16
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	43d9      	mvns	r1, r3
 8002810:	887b      	ldrh	r3, [r7, #2]
 8002812:	400b      	ands	r3, r1
 8002814:	431a      	orrs	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	619a      	str	r2, [r3, #24]
}
 800281a:	bf00      	nop
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
	...

08002828 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e267      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d075      	beq.n	8002932 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002846:	4b88      	ldr	r3, [pc, #544]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 030c 	and.w	r3, r3, #12
 800284e:	2b04      	cmp	r3, #4
 8002850:	d00c      	beq.n	800286c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002852:	4b85      	ldr	r3, [pc, #532]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800285a:	2b08      	cmp	r3, #8
 800285c:	d112      	bne.n	8002884 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800285e:	4b82      	ldr	r3, [pc, #520]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002866:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800286a:	d10b      	bne.n	8002884 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800286c:	4b7e      	ldr	r3, [pc, #504]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d05b      	beq.n	8002930 <HAL_RCC_OscConfig+0x108>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d157      	bne.n	8002930 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e242      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800288c:	d106      	bne.n	800289c <HAL_RCC_OscConfig+0x74>
 800288e:	4b76      	ldr	r3, [pc, #472]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a75      	ldr	r2, [pc, #468]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 8002894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	e01d      	b.n	80028d8 <HAL_RCC_OscConfig+0xb0>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028a4:	d10c      	bne.n	80028c0 <HAL_RCC_OscConfig+0x98>
 80028a6:	4b70      	ldr	r3, [pc, #448]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a6f      	ldr	r2, [pc, #444]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 80028ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	4b6d      	ldr	r3, [pc, #436]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a6c      	ldr	r2, [pc, #432]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 80028b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	e00b      	b.n	80028d8 <HAL_RCC_OscConfig+0xb0>
 80028c0:	4b69      	ldr	r3, [pc, #420]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a68      	ldr	r2, [pc, #416]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 80028c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ca:	6013      	str	r3, [r2, #0]
 80028cc:	4b66      	ldr	r3, [pc, #408]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a65      	ldr	r2, [pc, #404]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 80028d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d013      	beq.n	8002908 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e0:	f7ff f8fa 	bl	8001ad8 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028e8:	f7ff f8f6 	bl	8001ad8 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b64      	cmp	r3, #100	; 0x64
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e207      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fa:	4b5b      	ldr	r3, [pc, #364]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0f0      	beq.n	80028e8 <HAL_RCC_OscConfig+0xc0>
 8002906:	e014      	b.n	8002932 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002908:	f7ff f8e6 	bl	8001ad8 <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002910:	f7ff f8e2 	bl	8001ad8 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b64      	cmp	r3, #100	; 0x64
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e1f3      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002922:	4b51      	ldr	r3, [pc, #324]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1f0      	bne.n	8002910 <HAL_RCC_OscConfig+0xe8>
 800292e:	e000      	b.n	8002932 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d063      	beq.n	8002a06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800293e:	4b4a      	ldr	r3, [pc, #296]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 030c 	and.w	r3, r3, #12
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00b      	beq.n	8002962 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800294a:	4b47      	ldr	r3, [pc, #284]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002952:	2b08      	cmp	r3, #8
 8002954:	d11c      	bne.n	8002990 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002956:	4b44      	ldr	r3, [pc, #272]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d116      	bne.n	8002990 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002962:	4b41      	ldr	r3, [pc, #260]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d005      	beq.n	800297a <HAL_RCC_OscConfig+0x152>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d001      	beq.n	800297a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e1c7      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800297a:	4b3b      	ldr	r3, [pc, #236]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	4937      	ldr	r1, [pc, #220]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 800298a:	4313      	orrs	r3, r2
 800298c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800298e:	e03a      	b.n	8002a06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d020      	beq.n	80029da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002998:	4b34      	ldr	r3, [pc, #208]	; (8002a6c <HAL_RCC_OscConfig+0x244>)
 800299a:	2201      	movs	r2, #1
 800299c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299e:	f7ff f89b 	bl	8001ad8 <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029a6:	f7ff f897 	bl	8001ad8 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e1a8      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b8:	4b2b      	ldr	r3, [pc, #172]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0f0      	beq.n	80029a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c4:	4b28      	ldr	r3, [pc, #160]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	4925      	ldr	r1, [pc, #148]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	600b      	str	r3, [r1, #0]
 80029d8:	e015      	b.n	8002a06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029da:	4b24      	ldr	r3, [pc, #144]	; (8002a6c <HAL_RCC_OscConfig+0x244>)
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e0:	f7ff f87a 	bl	8001ad8 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029e8:	f7ff f876 	bl	8001ad8 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e187      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029fa:	4b1b      	ldr	r3, [pc, #108]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1f0      	bne.n	80029e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0308 	and.w	r3, r3, #8
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d036      	beq.n	8002a80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d016      	beq.n	8002a48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a1a:	4b15      	ldr	r3, [pc, #84]	; (8002a70 <HAL_RCC_OscConfig+0x248>)
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a20:	f7ff f85a 	bl	8001ad8 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a28:	f7ff f856 	bl	8001ad8 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e167      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a3a:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <HAL_RCC_OscConfig+0x240>)
 8002a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0f0      	beq.n	8002a28 <HAL_RCC_OscConfig+0x200>
 8002a46:	e01b      	b.n	8002a80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a48:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <HAL_RCC_OscConfig+0x248>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a4e:	f7ff f843 	bl	8001ad8 <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a54:	e00e      	b.n	8002a74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a56:	f7ff f83f 	bl	8001ad8 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d907      	bls.n	8002a74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e150      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	42470000 	.word	0x42470000
 8002a70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a74:	4b88      	ldr	r3, [pc, #544]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1ea      	bne.n	8002a56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 8097 	beq.w	8002bbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a92:	4b81      	ldr	r3, [pc, #516]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10f      	bne.n	8002abe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60bb      	str	r3, [r7, #8]
 8002aa2:	4b7d      	ldr	r3, [pc, #500]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	4a7c      	ldr	r2, [pc, #496]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aac:	6413      	str	r3, [r2, #64]	; 0x40
 8002aae:	4b7a      	ldr	r3, [pc, #488]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab6:	60bb      	str	r3, [r7, #8]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aba:	2301      	movs	r3, #1
 8002abc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002abe:	4b77      	ldr	r3, [pc, #476]	; (8002c9c <HAL_RCC_OscConfig+0x474>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d118      	bne.n	8002afc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aca:	4b74      	ldr	r3, [pc, #464]	; (8002c9c <HAL_RCC_OscConfig+0x474>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a73      	ldr	r2, [pc, #460]	; (8002c9c <HAL_RCC_OscConfig+0x474>)
 8002ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ad6:	f7fe ffff 	bl	8001ad8 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ade:	f7fe fffb 	bl	8001ad8 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e10c      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af0:	4b6a      	ldr	r3, [pc, #424]	; (8002c9c <HAL_RCC_OscConfig+0x474>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0f0      	beq.n	8002ade <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d106      	bne.n	8002b12 <HAL_RCC_OscConfig+0x2ea>
 8002b04:	4b64      	ldr	r3, [pc, #400]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b08:	4a63      	ldr	r2, [pc, #396]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b0a:	f043 0301 	orr.w	r3, r3, #1
 8002b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b10:	e01c      	b.n	8002b4c <HAL_RCC_OscConfig+0x324>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	2b05      	cmp	r3, #5
 8002b18:	d10c      	bne.n	8002b34 <HAL_RCC_OscConfig+0x30c>
 8002b1a:	4b5f      	ldr	r3, [pc, #380]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1e:	4a5e      	ldr	r2, [pc, #376]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b20:	f043 0304 	orr.w	r3, r3, #4
 8002b24:	6713      	str	r3, [r2, #112]	; 0x70
 8002b26:	4b5c      	ldr	r3, [pc, #368]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2a:	4a5b      	ldr	r2, [pc, #364]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	6713      	str	r3, [r2, #112]	; 0x70
 8002b32:	e00b      	b.n	8002b4c <HAL_RCC_OscConfig+0x324>
 8002b34:	4b58      	ldr	r3, [pc, #352]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b38:	4a57      	ldr	r2, [pc, #348]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b3a:	f023 0301 	bic.w	r3, r3, #1
 8002b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b40:	4b55      	ldr	r3, [pc, #340]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b44:	4a54      	ldr	r2, [pc, #336]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b46:	f023 0304 	bic.w	r3, r3, #4
 8002b4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d015      	beq.n	8002b80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b54:	f7fe ffc0 	bl	8001ad8 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b5a:	e00a      	b.n	8002b72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b5c:	f7fe ffbc 	bl	8001ad8 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e0cb      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b72:	4b49      	ldr	r3, [pc, #292]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0ee      	beq.n	8002b5c <HAL_RCC_OscConfig+0x334>
 8002b7e:	e014      	b.n	8002baa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b80:	f7fe ffaa 	bl	8001ad8 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b86:	e00a      	b.n	8002b9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b88:	f7fe ffa6 	bl	8001ad8 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e0b5      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b9e:	4b3e      	ldr	r3, [pc, #248]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1ee      	bne.n	8002b88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002baa:	7dfb      	ldrb	r3, [r7, #23]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d105      	bne.n	8002bbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb0:	4b39      	ldr	r3, [pc, #228]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	4a38      	ldr	r2, [pc, #224]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002bb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 80a1 	beq.w	8002d08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bc6:	4b34      	ldr	r3, [pc, #208]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 030c 	and.w	r3, r3, #12
 8002bce:	2b08      	cmp	r3, #8
 8002bd0:	d05c      	beq.n	8002c8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d141      	bne.n	8002c5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bda:	4b31      	ldr	r3, [pc, #196]	; (8002ca0 <HAL_RCC_OscConfig+0x478>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be0:	f7fe ff7a 	bl	8001ad8 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002be8:	f7fe ff76 	bl	8001ad8 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e087      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bfa:	4b27      	ldr	r3, [pc, #156]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f0      	bne.n	8002be8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69da      	ldr	r2, [r3, #28]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	019b      	lsls	r3, r3, #6
 8002c16:	431a      	orrs	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1c:	085b      	lsrs	r3, r3, #1
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	041b      	lsls	r3, r3, #16
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c28:	061b      	lsls	r3, r3, #24
 8002c2a:	491b      	ldr	r1, [pc, #108]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c30:	4b1b      	ldr	r3, [pc, #108]	; (8002ca0 <HAL_RCC_OscConfig+0x478>)
 8002c32:	2201      	movs	r2, #1
 8002c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c36:	f7fe ff4f 	bl	8001ad8 <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c3e:	f7fe ff4b 	bl	8001ad8 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e05c      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c50:	4b11      	ldr	r3, [pc, #68]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0f0      	beq.n	8002c3e <HAL_RCC_OscConfig+0x416>
 8002c5c:	e054      	b.n	8002d08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c5e:	4b10      	ldr	r3, [pc, #64]	; (8002ca0 <HAL_RCC_OscConfig+0x478>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c64:	f7fe ff38 	bl	8001ad8 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c6c:	f7fe ff34 	bl	8001ad8 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e045      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c7e:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <HAL_RCC_OscConfig+0x470>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f0      	bne.n	8002c6c <HAL_RCC_OscConfig+0x444>
 8002c8a:	e03d      	b.n	8002d08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d107      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e038      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	40007000 	.word	0x40007000
 8002ca0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ca4:	4b1b      	ldr	r3, [pc, #108]	; (8002d14 <HAL_RCC_OscConfig+0x4ec>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d028      	beq.n	8002d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d121      	bne.n	8002d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d11a      	bne.n	8002d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d111      	bne.n	8002d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cea:	085b      	lsrs	r3, r3, #1
 8002cec:	3b01      	subs	r3, #1
 8002cee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d107      	bne.n	8002d04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d001      	beq.n	8002d08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e000      	b.n	8002d0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3718      	adds	r7, #24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40023800 	.word	0x40023800

08002d18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e0cc      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d2c:	4b68      	ldr	r3, [pc, #416]	; (8002ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d90c      	bls.n	8002d54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3a:	4b65      	ldr	r3, [pc, #404]	; (8002ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d42:	4b63      	ldr	r3, [pc, #396]	; (8002ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d001      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e0b8      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d020      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d005      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d6c:	4b59      	ldr	r3, [pc, #356]	; (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	4a58      	ldr	r2, [pc, #352]	; (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0308 	and.w	r3, r3, #8
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d005      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d84:	4b53      	ldr	r3, [pc, #332]	; (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	4a52      	ldr	r2, [pc, #328]	; (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d90:	4b50      	ldr	r3, [pc, #320]	; (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	494d      	ldr	r1, [pc, #308]	; (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d044      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d107      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db6:	4b47      	ldr	r3, [pc, #284]	; (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d119      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e07f      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d003      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dd2:	2b03      	cmp	r3, #3
 8002dd4:	d107      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd6:	4b3f      	ldr	r3, [pc, #252]	; (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d109      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e06f      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de6:	4b3b      	ldr	r3, [pc, #236]	; (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e067      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002df6:	4b37      	ldr	r3, [pc, #220]	; (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f023 0203 	bic.w	r2, r3, #3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	4934      	ldr	r1, [pc, #208]	; (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e08:	f7fe fe66 	bl	8001ad8 <HAL_GetTick>
 8002e0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e0e:	e00a      	b.n	8002e26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e10:	f7fe fe62 	bl	8001ad8 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e04f      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e26:	4b2b      	ldr	r3, [pc, #172]	; (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 020c 	and.w	r2, r3, #12
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d1eb      	bne.n	8002e10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e38:	4b25      	ldr	r3, [pc, #148]	; (8002ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d20c      	bcs.n	8002e60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e46:	4b22      	ldr	r3, [pc, #136]	; (8002ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4e:	4b20      	ldr	r3, [pc, #128]	; (8002ed0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d001      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e032      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0304 	and.w	r3, r3, #4
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d008      	beq.n	8002e7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e6c:	4b19      	ldr	r3, [pc, #100]	; (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	4916      	ldr	r1, [pc, #88]	; (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d009      	beq.n	8002e9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e8a:	4b12      	ldr	r3, [pc, #72]	; (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	490e      	ldr	r1, [pc, #56]	; (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e9e:	f000 f821 	bl	8002ee4 <HAL_RCC_GetSysClockFreq>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	091b      	lsrs	r3, r3, #4
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	490a      	ldr	r1, [pc, #40]	; (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002eb0:	5ccb      	ldrb	r3, [r1, r3]
 8002eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb6:	4a09      	ldr	r2, [pc, #36]	; (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002eb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002eba:	4b09      	ldr	r3, [pc, #36]	; (8002ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fe fc22 	bl	8001708 <HAL_InitTick>

  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3710      	adds	r7, #16
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40023c00 	.word	0x40023c00
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	080162e4 	.word	0x080162e4
 8002edc:	20000004 	.word	0x20000004
 8002ee0:	20000008 	.word	0x20000008

08002ee4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ee8:	b094      	sub	sp, #80	; 0x50
 8002eea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002eec:	2300      	movs	r3, #0
 8002eee:	647b      	str	r3, [r7, #68]	; 0x44
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002efc:	4b79      	ldr	r3, [pc, #484]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 030c 	and.w	r3, r3, #12
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d00d      	beq.n	8002f24 <HAL_RCC_GetSysClockFreq+0x40>
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	f200 80e1 	bhi.w	80030d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <HAL_RCC_GetSysClockFreq+0x34>
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d003      	beq.n	8002f1e <HAL_RCC_GetSysClockFreq+0x3a>
 8002f16:	e0db      	b.n	80030d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f18:	4b73      	ldr	r3, [pc, #460]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f1a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002f1c:	e0db      	b.n	80030d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f1e:	4b73      	ldr	r3, [pc, #460]	; (80030ec <HAL_RCC_GetSysClockFreq+0x208>)
 8002f20:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f22:	e0d8      	b.n	80030d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f24:	4b6f      	ldr	r3, [pc, #444]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f2c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f2e:	4b6d      	ldr	r3, [pc, #436]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d063      	beq.n	8003002 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f3a:	4b6a      	ldr	r3, [pc, #424]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	099b      	lsrs	r3, r3, #6
 8002f40:	2200      	movs	r2, #0
 8002f42:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f44:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f4c:	633b      	str	r3, [r7, #48]	; 0x30
 8002f4e:	2300      	movs	r3, #0
 8002f50:	637b      	str	r3, [r7, #52]	; 0x34
 8002f52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f56:	4622      	mov	r2, r4
 8002f58:	462b      	mov	r3, r5
 8002f5a:	f04f 0000 	mov.w	r0, #0
 8002f5e:	f04f 0100 	mov.w	r1, #0
 8002f62:	0159      	lsls	r1, r3, #5
 8002f64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f68:	0150      	lsls	r0, r2, #5
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	4621      	mov	r1, r4
 8002f70:	1a51      	subs	r1, r2, r1
 8002f72:	6139      	str	r1, [r7, #16]
 8002f74:	4629      	mov	r1, r5
 8002f76:	eb63 0301 	sbc.w	r3, r3, r1
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	f04f 0300 	mov.w	r3, #0
 8002f84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f88:	4659      	mov	r1, fp
 8002f8a:	018b      	lsls	r3, r1, #6
 8002f8c:	4651      	mov	r1, sl
 8002f8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f92:	4651      	mov	r1, sl
 8002f94:	018a      	lsls	r2, r1, #6
 8002f96:	4651      	mov	r1, sl
 8002f98:	ebb2 0801 	subs.w	r8, r2, r1
 8002f9c:	4659      	mov	r1, fp
 8002f9e:	eb63 0901 	sbc.w	r9, r3, r1
 8002fa2:	f04f 0200 	mov.w	r2, #0
 8002fa6:	f04f 0300 	mov.w	r3, #0
 8002faa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fb6:	4690      	mov	r8, r2
 8002fb8:	4699      	mov	r9, r3
 8002fba:	4623      	mov	r3, r4
 8002fbc:	eb18 0303 	adds.w	r3, r8, r3
 8002fc0:	60bb      	str	r3, [r7, #8]
 8002fc2:	462b      	mov	r3, r5
 8002fc4:	eb49 0303 	adc.w	r3, r9, r3
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fd6:	4629      	mov	r1, r5
 8002fd8:	024b      	lsls	r3, r1, #9
 8002fda:	4621      	mov	r1, r4
 8002fdc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fe0:	4621      	mov	r1, r4
 8002fe2:	024a      	lsls	r2, r1, #9
 8002fe4:	4610      	mov	r0, r2
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fea:	2200      	movs	r2, #0
 8002fec:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ff0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ff4:	f7fd f9ac 	bl	8000350 <__aeabi_uldivmod>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003000:	e058      	b.n	80030b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003002:	4b38      	ldr	r3, [pc, #224]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	099b      	lsrs	r3, r3, #6
 8003008:	2200      	movs	r2, #0
 800300a:	4618      	mov	r0, r3
 800300c:	4611      	mov	r1, r2
 800300e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003012:	623b      	str	r3, [r7, #32]
 8003014:	2300      	movs	r3, #0
 8003016:	627b      	str	r3, [r7, #36]	; 0x24
 8003018:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800301c:	4642      	mov	r2, r8
 800301e:	464b      	mov	r3, r9
 8003020:	f04f 0000 	mov.w	r0, #0
 8003024:	f04f 0100 	mov.w	r1, #0
 8003028:	0159      	lsls	r1, r3, #5
 800302a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800302e:	0150      	lsls	r0, r2, #5
 8003030:	4602      	mov	r2, r0
 8003032:	460b      	mov	r3, r1
 8003034:	4641      	mov	r1, r8
 8003036:	ebb2 0a01 	subs.w	sl, r2, r1
 800303a:	4649      	mov	r1, r9
 800303c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003040:	f04f 0200 	mov.w	r2, #0
 8003044:	f04f 0300 	mov.w	r3, #0
 8003048:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800304c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003050:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003054:	ebb2 040a 	subs.w	r4, r2, sl
 8003058:	eb63 050b 	sbc.w	r5, r3, fp
 800305c:	f04f 0200 	mov.w	r2, #0
 8003060:	f04f 0300 	mov.w	r3, #0
 8003064:	00eb      	lsls	r3, r5, #3
 8003066:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800306a:	00e2      	lsls	r2, r4, #3
 800306c:	4614      	mov	r4, r2
 800306e:	461d      	mov	r5, r3
 8003070:	4643      	mov	r3, r8
 8003072:	18e3      	adds	r3, r4, r3
 8003074:	603b      	str	r3, [r7, #0]
 8003076:	464b      	mov	r3, r9
 8003078:	eb45 0303 	adc.w	r3, r5, r3
 800307c:	607b      	str	r3, [r7, #4]
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	e9d7 4500 	ldrd	r4, r5, [r7]
 800308a:	4629      	mov	r1, r5
 800308c:	028b      	lsls	r3, r1, #10
 800308e:	4621      	mov	r1, r4
 8003090:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003094:	4621      	mov	r1, r4
 8003096:	028a      	lsls	r2, r1, #10
 8003098:	4610      	mov	r0, r2
 800309a:	4619      	mov	r1, r3
 800309c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800309e:	2200      	movs	r2, #0
 80030a0:	61bb      	str	r3, [r7, #24]
 80030a2:	61fa      	str	r2, [r7, #28]
 80030a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030a8:	f7fd f952 	bl	8000350 <__aeabi_uldivmod>
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	4613      	mov	r3, r2
 80030b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030b4:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	0c1b      	lsrs	r3, r3, #16
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	3301      	adds	r3, #1
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80030c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030ce:	e002      	b.n	80030d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030d0:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80030d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3750      	adds	r7, #80	; 0x50
 80030dc:	46bd      	mov	sp, r7
 80030de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030e2:	bf00      	nop
 80030e4:	40023800 	.word	0x40023800
 80030e8:	00f42400 	.word	0x00f42400
 80030ec:	007a1200 	.word	0x007a1200

080030f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030f4:	4b03      	ldr	r3, [pc, #12]	; (8003104 <HAL_RCC_GetHCLKFreq+0x14>)
 80030f6:	681b      	ldr	r3, [r3, #0]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	20000004 	.word	0x20000004

08003108 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800310c:	f7ff fff0 	bl	80030f0 <HAL_RCC_GetHCLKFreq>
 8003110:	4602      	mov	r2, r0
 8003112:	4b05      	ldr	r3, [pc, #20]	; (8003128 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	0a9b      	lsrs	r3, r3, #10
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	4903      	ldr	r1, [pc, #12]	; (800312c <HAL_RCC_GetPCLK1Freq+0x24>)
 800311e:	5ccb      	ldrb	r3, [r1, r3]
 8003120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003124:	4618      	mov	r0, r3
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40023800 	.word	0x40023800
 800312c:	080162f4 	.word	0x080162f4

08003130 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003134:	f7ff ffdc 	bl	80030f0 <HAL_RCC_GetHCLKFreq>
 8003138:	4602      	mov	r2, r0
 800313a:	4b05      	ldr	r3, [pc, #20]	; (8003150 <HAL_RCC_GetPCLK2Freq+0x20>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	0b5b      	lsrs	r3, r3, #13
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	4903      	ldr	r1, [pc, #12]	; (8003154 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003146:	5ccb      	ldrb	r3, [r1, r3]
 8003148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800314c:	4618      	mov	r0, r3
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40023800 	.word	0x40023800
 8003154:	080162f4 	.word	0x080162f4

08003158 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	220f      	movs	r2, #15
 8003166:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003168:	4b12      	ldr	r3, [pc, #72]	; (80031b4 <HAL_RCC_GetClockConfig+0x5c>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 0203 	and.w	r2, r3, #3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003174:	4b0f      	ldr	r3, [pc, #60]	; (80031b4 <HAL_RCC_GetClockConfig+0x5c>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003180:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <HAL_RCC_GetClockConfig+0x5c>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800318c:	4b09      	ldr	r3, [pc, #36]	; (80031b4 <HAL_RCC_GetClockConfig+0x5c>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	08db      	lsrs	r3, r3, #3
 8003192:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800319a:	4b07      	ldr	r3, [pc, #28]	; (80031b8 <HAL_RCC_GetClockConfig+0x60>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0207 	and.w	r2, r3, #7
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	601a      	str	r2, [r3, #0]
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	40023800 	.word	0x40023800
 80031b8:	40023c00 	.word	0x40023c00

080031bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e041      	b.n	8003252 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d106      	bne.n	80031e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f839 	bl	800325a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2202      	movs	r2, #2
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	3304      	adds	r3, #4
 80031f8:	4619      	mov	r1, r3
 80031fa:	4610      	mov	r0, r2
 80031fc:	f000 f9b2 	bl	8003564 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
	...

08003270 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b01      	cmp	r3, #1
 8003282:	d001      	beq.n	8003288 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e044      	b.n	8003312 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2202      	movs	r2, #2
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68da      	ldr	r2, [r3, #12]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0201 	orr.w	r2, r2, #1
 800329e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a1e      	ldr	r2, [pc, #120]	; (8003320 <HAL_TIM_Base_Start_IT+0xb0>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d018      	beq.n	80032dc <HAL_TIM_Base_Start_IT+0x6c>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b2:	d013      	beq.n	80032dc <HAL_TIM_Base_Start_IT+0x6c>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a1a      	ldr	r2, [pc, #104]	; (8003324 <HAL_TIM_Base_Start_IT+0xb4>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d00e      	beq.n	80032dc <HAL_TIM_Base_Start_IT+0x6c>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a19      	ldr	r2, [pc, #100]	; (8003328 <HAL_TIM_Base_Start_IT+0xb8>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d009      	beq.n	80032dc <HAL_TIM_Base_Start_IT+0x6c>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a17      	ldr	r2, [pc, #92]	; (800332c <HAL_TIM_Base_Start_IT+0xbc>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d004      	beq.n	80032dc <HAL_TIM_Base_Start_IT+0x6c>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a16      	ldr	r2, [pc, #88]	; (8003330 <HAL_TIM_Base_Start_IT+0xc0>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d111      	bne.n	8003300 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2b06      	cmp	r3, #6
 80032ec:	d010      	beq.n	8003310 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f042 0201 	orr.w	r2, r2, #1
 80032fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032fe:	e007      	b.n	8003310 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0201 	orr.w	r2, r2, #1
 800330e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	40010000 	.word	0x40010000
 8003324:	40000400 	.word	0x40000400
 8003328:	40000800 	.word	0x40000800
 800332c:	40000c00 	.word	0x40000c00
 8003330:	40014000 	.word	0x40014000

08003334 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d020      	beq.n	8003398 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d01b      	beq.n	8003398 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f06f 0202 	mvn.w	r2, #2
 8003368:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	f003 0303 	and.w	r3, r3, #3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f8d2 	bl	8003528 <HAL_TIM_IC_CaptureCallback>
 8003384:	e005      	b.n	8003392 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f8c4 	bl	8003514 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 f8d5 	bl	800353c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	f003 0304 	and.w	r3, r3, #4
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d020      	beq.n	80033e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d01b      	beq.n	80033e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f06f 0204 	mvn.w	r2, #4
 80033b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2202      	movs	r2, #2
 80033ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f8ac 	bl	8003528 <HAL_TIM_IC_CaptureCallback>
 80033d0:	e005      	b.n	80033de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f89e 	bl	8003514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 f8af 	bl	800353c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d020      	beq.n	8003430 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f003 0308 	and.w	r3, r3, #8
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d01b      	beq.n	8003430 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f06f 0208 	mvn.w	r2, #8
 8003400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2204      	movs	r2, #4
 8003406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	f003 0303 	and.w	r3, r3, #3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f886 	bl	8003528 <HAL_TIM_IC_CaptureCallback>
 800341c:	e005      	b.n	800342a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f878 	bl	8003514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 f889 	bl	800353c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f003 0310 	and.w	r3, r3, #16
 8003436:	2b00      	cmp	r3, #0
 8003438:	d020      	beq.n	800347c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f003 0310 	and.w	r3, r3, #16
 8003440:	2b00      	cmp	r3, #0
 8003442:	d01b      	beq.n	800347c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f06f 0210 	mvn.w	r2, #16
 800344c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2208      	movs	r2, #8
 8003452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f860 	bl	8003528 <HAL_TIM_IC_CaptureCallback>
 8003468:	e005      	b.n	8003476 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f852 	bl	8003514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 f863 	bl	800353c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00c      	beq.n	80034a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b00      	cmp	r3, #0
 800348e:	d007      	beq.n	80034a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f06f 0201 	mvn.w	r2, #1
 8003498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f7fd fed6 	bl	800124c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00c      	beq.n	80034c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d007      	beq.n	80034c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 f8e6 	bl	8003690 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00c      	beq.n	80034e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d007      	beq.n	80034e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f834 	bl	8003550 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f003 0320 	and.w	r3, r3, #32
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00c      	beq.n	800350c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f003 0320 	and.w	r3, r3, #32
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d007      	beq.n	800350c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f06f 0220 	mvn.w	r2, #32
 8003504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f8b8 	bl	800367c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800350c:	bf00      	nop
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a3a      	ldr	r2, [pc, #232]	; (8003660 <TIM_Base_SetConfig+0xfc>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d00f      	beq.n	800359c <TIM_Base_SetConfig+0x38>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003582:	d00b      	beq.n	800359c <TIM_Base_SetConfig+0x38>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a37      	ldr	r2, [pc, #220]	; (8003664 <TIM_Base_SetConfig+0x100>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d007      	beq.n	800359c <TIM_Base_SetConfig+0x38>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a36      	ldr	r2, [pc, #216]	; (8003668 <TIM_Base_SetConfig+0x104>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d003      	beq.n	800359c <TIM_Base_SetConfig+0x38>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a35      	ldr	r2, [pc, #212]	; (800366c <TIM_Base_SetConfig+0x108>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d108      	bne.n	80035ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a2b      	ldr	r2, [pc, #172]	; (8003660 <TIM_Base_SetConfig+0xfc>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d01b      	beq.n	80035ee <TIM_Base_SetConfig+0x8a>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035bc:	d017      	beq.n	80035ee <TIM_Base_SetConfig+0x8a>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a28      	ldr	r2, [pc, #160]	; (8003664 <TIM_Base_SetConfig+0x100>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d013      	beq.n	80035ee <TIM_Base_SetConfig+0x8a>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a27      	ldr	r2, [pc, #156]	; (8003668 <TIM_Base_SetConfig+0x104>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d00f      	beq.n	80035ee <TIM_Base_SetConfig+0x8a>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a26      	ldr	r2, [pc, #152]	; (800366c <TIM_Base_SetConfig+0x108>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d00b      	beq.n	80035ee <TIM_Base_SetConfig+0x8a>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a25      	ldr	r2, [pc, #148]	; (8003670 <TIM_Base_SetConfig+0x10c>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d007      	beq.n	80035ee <TIM_Base_SetConfig+0x8a>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a24      	ldr	r2, [pc, #144]	; (8003674 <TIM_Base_SetConfig+0x110>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d003      	beq.n	80035ee <TIM_Base_SetConfig+0x8a>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a23      	ldr	r2, [pc, #140]	; (8003678 <TIM_Base_SetConfig+0x114>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d108      	bne.n	8003600 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	4313      	orrs	r3, r2
 800360c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a0e      	ldr	r2, [pc, #56]	; (8003660 <TIM_Base_SetConfig+0xfc>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d103      	bne.n	8003634 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	691a      	ldr	r2, [r3, #16]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b01      	cmp	r3, #1
 8003644:	d105      	bne.n	8003652 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	f023 0201 	bic.w	r2, r3, #1
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	611a      	str	r2, [r3, #16]
  }
}
 8003652:	bf00      	nop
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	40010000 	.word	0x40010000
 8003664:	40000400 	.word	0x40000400
 8003668:	40000800 	.word	0x40000800
 800366c:	40000c00 	.word	0x40000c00
 8003670:	40014000 	.word	0x40014000
 8003674:	40014400 	.word	0x40014400
 8003678:	40014800 	.word	0x40014800

0800367c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e042      	b.n	800373c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d106      	bne.n	80036d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7fd ff64 	bl	8001598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2224      	movs	r2, #36	; 0x24
 80036d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 ffc9 	bl	8004680 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	691a      	ldr	r2, [r3, #16]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	695a      	ldr	r2, [r3, #20]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800370c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800371c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2220      	movs	r2, #32
 8003728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b08c      	sub	sp, #48	; 0x30
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	4613      	mov	r3, r2
 8003750:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b20      	cmp	r3, #32
 800375c:	d156      	bne.n	800380c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d002      	beq.n	800376a <HAL_UART_Transmit_DMA+0x26>
 8003764:	88fb      	ldrh	r3, [r7, #6]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e04f      	b.n	800380e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	88fa      	ldrh	r2, [r7, #6]
 8003778:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	88fa      	ldrh	r2, [r7, #6]
 800377e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2221      	movs	r2, #33	; 0x21
 800378a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003792:	4a21      	ldr	r2, [pc, #132]	; (8003818 <HAL_UART_Transmit_DMA+0xd4>)
 8003794:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379a:	4a20      	ldr	r2, [pc, #128]	; (800381c <HAL_UART_Transmit_DMA+0xd8>)
 800379c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a2:	4a1f      	ldr	r2, [pc, #124]	; (8003820 <HAL_UART_Transmit_DMA+0xdc>)
 80037a4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037aa:	2200      	movs	r2, #0
 80037ac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80037ae:	f107 0308 	add.w	r3, r7, #8
 80037b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80037b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ba:	6819      	ldr	r1, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	3304      	adds	r3, #4
 80037c2:	461a      	mov	r2, r3
 80037c4:	88fb      	ldrh	r3, [r7, #6]
 80037c6:	f7fe fb23 	bl	8001e10 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037d2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	3314      	adds	r3, #20
 80037da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	e853 3f00 	ldrex	r3, [r3]
 80037e2:	617b      	str	r3, [r7, #20]
   return(result);
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	3314      	adds	r3, #20
 80037f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037f4:	627a      	str	r2, [r7, #36]	; 0x24
 80037f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f8:	6a39      	ldr	r1, [r7, #32]
 80037fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037fc:	e841 2300 	strex	r3, r2, [r1]
 8003800:	61fb      	str	r3, [r7, #28]
   return(result);
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1e5      	bne.n	80037d4 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003808:	2300      	movs	r3, #0
 800380a:	e000      	b.n	800380e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800380c:	2302      	movs	r3, #2
  }
}
 800380e:	4618      	mov	r0, r3
 8003810:	3730      	adds	r7, #48	; 0x30
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	08003f0d 	.word	0x08003f0d
 800381c:	08003fa7 	.word	0x08003fa7
 8003820:	0800412b 	.word	0x0800412b

08003824 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	4613      	mov	r3, r2
 8003830:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b20      	cmp	r3, #32
 800383c:	d112      	bne.n	8003864 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d002      	beq.n	800384a <HAL_UART_Receive_DMA+0x26>
 8003844:	88fb      	ldrh	r3, [r7, #6]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e00b      	b.n	8003866 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003854:	88fb      	ldrh	r3, [r7, #6]
 8003856:	461a      	mov	r2, r3
 8003858:	68b9      	ldr	r1, [r7, #8]
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f000 fcb0 	bl	80041c0 <UART_Start_Receive_DMA>
 8003860:	4603      	mov	r3, r0
 8003862:	e000      	b.n	8003866 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003864:	2302      	movs	r3, #2
  }
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b090      	sub	sp, #64	; 0x40
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003876:	2300      	movs	r3, #0
 8003878:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003884:	2b80      	cmp	r3, #128	; 0x80
 8003886:	bf0c      	ite	eq
 8003888:	2301      	moveq	r3, #1
 800388a:	2300      	movne	r3, #0
 800388c:	b2db      	uxtb	r3, r3
 800388e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b21      	cmp	r3, #33	; 0x21
 800389a:	d128      	bne.n	80038ee <HAL_UART_DMAStop+0x80>
 800389c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d025      	beq.n	80038ee <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	3314      	adds	r3, #20
 80038a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	e853 3f00 	ldrex	r3, [r3]
 80038b0:	623b      	str	r3, [r7, #32]
   return(result);
 80038b2:	6a3b      	ldr	r3, [r7, #32]
 80038b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	3314      	adds	r3, #20
 80038c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038c2:	633a      	str	r2, [r7, #48]	; 0x30
 80038c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038ca:	e841 2300 	strex	r3, r2, [r1]
 80038ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1e5      	bne.n	80038a2 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d004      	beq.n	80038e8 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fe faec 	bl	8001ec0 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 fd03 	bl	80042f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f8:	2b40      	cmp	r3, #64	; 0x40
 80038fa:	bf0c      	ite	eq
 80038fc:	2301      	moveq	r3, #1
 80038fe:	2300      	movne	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b22      	cmp	r3, #34	; 0x22
 800390e:	d128      	bne.n	8003962 <HAL_UART_DMAStop+0xf4>
 8003910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003912:	2b00      	cmp	r3, #0
 8003914:	d025      	beq.n	8003962 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	3314      	adds	r3, #20
 800391c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	e853 3f00 	ldrex	r3, [r3]
 8003924:	60fb      	str	r3, [r7, #12]
   return(result);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800392c:	637b      	str	r3, [r7, #52]	; 0x34
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	3314      	adds	r3, #20
 8003934:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003936:	61fa      	str	r2, [r7, #28]
 8003938:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393a:	69b9      	ldr	r1, [r7, #24]
 800393c:	69fa      	ldr	r2, [r7, #28]
 800393e:	e841 2300 	strex	r3, r2, [r1]
 8003942:	617b      	str	r3, [r7, #20]
   return(result);
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1e5      	bne.n	8003916 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394e:	2b00      	cmp	r3, #0
 8003950:	d004      	beq.n	800395c <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003956:	4618      	mov	r0, r3
 8003958:	f7fe fab2 	bl	8001ec0 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 fcf1 	bl	8004344 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3740      	adds	r7, #64	; 0x40
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b0ba      	sub	sp, #232	; 0xe8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003992:	2300      	movs	r3, #0
 8003994:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003998:	2300      	movs	r3, #0
 800399a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800399e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80039aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10f      	bne.n	80039d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039b6:	f003 0320 	and.w	r3, r3, #32
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d009      	beq.n	80039d2 <HAL_UART_IRQHandler+0x66>
 80039be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039c2:	f003 0320 	and.w	r3, r3, #32
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 fd99 	bl	8004502 <UART_Receive_IT>
      return;
 80039d0:	e25b      	b.n	8003e8a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80039d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 80de 	beq.w	8003b98 <HAL_UART_IRQHandler+0x22c>
 80039dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d106      	bne.n	80039f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039ec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 80d1 	beq.w	8003b98 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00b      	beq.n	8003a1a <HAL_UART_IRQHandler+0xae>
 8003a02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d005      	beq.n	8003a1a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a12:	f043 0201 	orr.w	r2, r3, #1
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a1e:	f003 0304 	and.w	r3, r3, #4
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00b      	beq.n	8003a3e <HAL_UART_IRQHandler+0xd2>
 8003a26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d005      	beq.n	8003a3e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a36:	f043 0202 	orr.w	r2, r3, #2
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00b      	beq.n	8003a62 <HAL_UART_IRQHandler+0xf6>
 8003a4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d005      	beq.n	8003a62 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5a:	f043 0204 	orr.w	r2, r3, #4
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d011      	beq.n	8003a92 <HAL_UART_IRQHandler+0x126>
 8003a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a72:	f003 0320 	and.w	r3, r3, #32
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d105      	bne.n	8003a86 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d005      	beq.n	8003a92 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8a:	f043 0208 	orr.w	r2, r3, #8
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 81f2 	beq.w	8003e80 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aa0:	f003 0320 	and.w	r3, r3, #32
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d008      	beq.n	8003aba <HAL_UART_IRQHandler+0x14e>
 8003aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aac:	f003 0320 	and.w	r3, r3, #32
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d002      	beq.n	8003aba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 fd24 	bl	8004502 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac4:	2b40      	cmp	r3, #64	; 0x40
 8003ac6:	bf0c      	ite	eq
 8003ac8:	2301      	moveq	r3, #1
 8003aca:	2300      	movne	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d103      	bne.n	8003ae6 <HAL_UART_IRQHandler+0x17a>
 8003ade:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d04f      	beq.n	8003b86 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 fc2c 	bl	8004344 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af6:	2b40      	cmp	r3, #64	; 0x40
 8003af8:	d141      	bne.n	8003b7e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	3314      	adds	r3, #20
 8003b00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b08:	e853 3f00 	ldrex	r3, [r3]
 8003b0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	3314      	adds	r3, #20
 8003b22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b36:	e841 2300 	strex	r3, r2, [r1]
 8003b3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1d9      	bne.n	8003afa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d013      	beq.n	8003b76 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b52:	4a7e      	ldr	r2, [pc, #504]	; (8003d4c <HAL_UART_IRQHandler+0x3e0>)
 8003b54:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fe fa20 	bl	8001fa0 <HAL_DMA_Abort_IT>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d016      	beq.n	8003b94 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b70:	4610      	mov	r0, r2
 8003b72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b74:	e00e      	b.n	8003b94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f9b2 	bl	8003ee0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b7c:	e00a      	b.n	8003b94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f9ae 	bl	8003ee0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b84:	e006      	b.n	8003b94 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f9aa 	bl	8003ee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003b92:	e175      	b.n	8003e80 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b94:	bf00      	nop
    return;
 8003b96:	e173      	b.n	8003e80 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	f040 814f 	bne.w	8003e40 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ba6:	f003 0310 	and.w	r3, r3, #16
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f000 8148 	beq.w	8003e40 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bb4:	f003 0310 	and.w	r3, r3, #16
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 8141 	beq.w	8003e40 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	60bb      	str	r3, [r7, #8]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	60bb      	str	r3, [r7, #8]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	60bb      	str	r3, [r7, #8]
 8003bd2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bde:	2b40      	cmp	r3, #64	; 0x40
 8003be0:	f040 80b6 	bne.w	8003d50 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003bf0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 8145 	beq.w	8003e84 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003bfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c02:	429a      	cmp	r2, r3
 8003c04:	f080 813e 	bcs.w	8003e84 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c0e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c1a:	f000 8088 	beq.w	8003d2e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	330c      	adds	r3, #12
 8003c24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c2c:	e853 3f00 	ldrex	r3, [r3]
 8003c30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	330c      	adds	r3, #12
 8003c46:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003c4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c52:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c5a:	e841 2300 	strex	r3, r2, [r1]
 8003c5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1d9      	bne.n	8003c1e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	3314      	adds	r3, #20
 8003c70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c74:	e853 3f00 	ldrex	r3, [r3]
 8003c78:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c7c:	f023 0301 	bic.w	r3, r3, #1
 8003c80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	3314      	adds	r3, #20
 8003c8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c8e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c92:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c94:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c9a:	e841 2300 	strex	r3, r2, [r1]
 8003c9e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ca0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1e1      	bne.n	8003c6a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	3314      	adds	r3, #20
 8003cac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cb0:	e853 3f00 	ldrex	r3, [r3]
 8003cb4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003cb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	3314      	adds	r3, #20
 8003cc6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003cca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ccc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003cd0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003cd2:	e841 2300 	strex	r3, r2, [r1]
 8003cd6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003cd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1e3      	bne.n	8003ca6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	330c      	adds	r3, #12
 8003cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cf6:	e853 3f00 	ldrex	r3, [r3]
 8003cfa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003cfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cfe:	f023 0310 	bic.w	r3, r3, #16
 8003d02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	330c      	adds	r3, #12
 8003d0c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003d10:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d12:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d18:	e841 2300 	strex	r3, r2, [r1]
 8003d1c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1e3      	bne.n	8003cec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7fe f8c9 	bl	8001ec0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2202      	movs	r2, #2
 8003d32:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	4619      	mov	r1, r3
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 f8d5 	bl	8003ef4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d4a:	e09b      	b.n	8003e84 <HAL_UART_IRQHandler+0x518>
 8003d4c:	0800440b 	.word	0x0800440b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f000 808e 	beq.w	8003e88 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003d6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 8089 	beq.w	8003e88 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	330c      	adds	r3, #12
 8003d7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d80:	e853 3f00 	ldrex	r3, [r3]
 8003d84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	330c      	adds	r3, #12
 8003d96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003d9a:	647a      	str	r2, [r7, #68]	; 0x44
 8003d9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003da0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003da2:	e841 2300 	strex	r3, r2, [r1]
 8003da6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1e3      	bne.n	8003d76 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	3314      	adds	r3, #20
 8003db4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	e853 3f00 	ldrex	r3, [r3]
 8003dbc:	623b      	str	r3, [r7, #32]
   return(result);
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
 8003dc0:	f023 0301 	bic.w	r3, r3, #1
 8003dc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	3314      	adds	r3, #20
 8003dce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003dd2:	633a      	str	r2, [r7, #48]	; 0x30
 8003dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003dd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dda:	e841 2300 	strex	r3, r2, [r1]
 8003dde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1e3      	bne.n	8003dae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2220      	movs	r2, #32
 8003dea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	330c      	adds	r3, #12
 8003dfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	e853 3f00 	ldrex	r3, [r3]
 8003e02:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f023 0310 	bic.w	r3, r3, #16
 8003e0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	330c      	adds	r3, #12
 8003e14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003e18:	61fa      	str	r2, [r7, #28]
 8003e1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1c:	69b9      	ldr	r1, [r7, #24]
 8003e1e:	69fa      	ldr	r2, [r7, #28]
 8003e20:	e841 2300 	strex	r3, r2, [r1]
 8003e24:	617b      	str	r3, [r7, #20]
   return(result);
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1e3      	bne.n	8003df4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e36:	4619      	mov	r1, r3
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f85b 	bl	8003ef4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e3e:	e023      	b.n	8003e88 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d009      	beq.n	8003e60 <HAL_UART_IRQHandler+0x4f4>
 8003e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d003      	beq.n	8003e60 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 faea 	bl	8004432 <UART_Transmit_IT>
    return;
 8003e5e:	e014      	b.n	8003e8a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00e      	beq.n	8003e8a <HAL_UART_IRQHandler+0x51e>
 8003e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d008      	beq.n	8003e8a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 fb2a 	bl	80044d2 <UART_EndTransmit_IT>
    return;
 8003e7e:	e004      	b.n	8003e8a <HAL_UART_IRQHandler+0x51e>
    return;
 8003e80:	bf00      	nop
 8003e82:	e002      	b.n	8003e8a <HAL_UART_IRQHandler+0x51e>
      return;
 8003e84:	bf00      	nop
 8003e86:	e000      	b.n	8003e8a <HAL_UART_IRQHandler+0x51e>
      return;
 8003e88:	bf00      	nop
  }
}
 8003e8a:	37e8      	adds	r7, #232	; 0xe8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	460b      	mov	r3, r1
 8003efe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b090      	sub	sp, #64	; 0x40
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f18:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d137      	bne.n	8003f98 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8003f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	3314      	adds	r3, #20
 8003f34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	e853 3f00 	ldrex	r3, [r3]
 8003f3c:	623b      	str	r3, [r7, #32]
   return(result);
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f44:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	3314      	adds	r3, #20
 8003f4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f4e:	633a      	str	r2, [r7, #48]	; 0x30
 8003f50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f56:	e841 2300 	strex	r3, r2, [r1]
 8003f5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1e5      	bne.n	8003f2e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	330c      	adds	r3, #12
 8003f68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	e853 3f00 	ldrex	r3, [r3]
 8003f70:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f78:	637b      	str	r3, [r7, #52]	; 0x34
 8003f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	330c      	adds	r3, #12
 8003f80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f82:	61fa      	str	r2, [r7, #28]
 8003f84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f86:	69b9      	ldr	r1, [r7, #24]
 8003f88:	69fa      	ldr	r2, [r7, #28]
 8003f8a:	e841 2300 	strex	r3, r2, [r1]
 8003f8e:	617b      	str	r3, [r7, #20]
   return(result);
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1e5      	bne.n	8003f62 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003f96:	e002      	b.n	8003f9e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003f98:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003f9a:	f7ff ff79 	bl	8003e90 <HAL_UART_TxCpltCallback>
}
 8003f9e:	bf00      	nop
 8003fa0:	3740      	adds	r7, #64	; 0x40
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b084      	sub	sp, #16
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f7ff ff75 	bl	8003ea4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fba:	bf00      	nop
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b09c      	sub	sp, #112	; 0x70
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fce:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d172      	bne.n	80040c4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	330c      	adds	r3, #12
 8003fea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fee:	e853 3f00 	ldrex	r3, [r3]
 8003ff2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ff6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ffa:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	330c      	adds	r3, #12
 8004002:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004004:	65ba      	str	r2, [r7, #88]	; 0x58
 8004006:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004008:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800400a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800400c:	e841 2300 	strex	r3, r2, [r1]
 8004010:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1e5      	bne.n	8003fe4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3314      	adds	r3, #20
 800401e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004022:	e853 3f00 	ldrex	r3, [r3]
 8004026:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800402a:	f023 0301 	bic.w	r3, r3, #1
 800402e:	667b      	str	r3, [r7, #100]	; 0x64
 8004030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	3314      	adds	r3, #20
 8004036:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004038:	647a      	str	r2, [r7, #68]	; 0x44
 800403a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800403e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004040:	e841 2300 	strex	r3, r2, [r1]
 8004044:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1e5      	bne.n	8004018 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800404c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	3314      	adds	r3, #20
 8004052:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004056:	e853 3f00 	ldrex	r3, [r3]
 800405a:	623b      	str	r3, [r7, #32]
   return(result);
 800405c:	6a3b      	ldr	r3, [r7, #32]
 800405e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004062:	663b      	str	r3, [r7, #96]	; 0x60
 8004064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	3314      	adds	r3, #20
 800406a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800406c:	633a      	str	r2, [r7, #48]	; 0x30
 800406e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004070:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004072:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004074:	e841 2300 	strex	r3, r2, [r1]
 8004078:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800407a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1e5      	bne.n	800404c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004082:	2220      	movs	r2, #32
 8004084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800408a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408c:	2b01      	cmp	r3, #1
 800408e:	d119      	bne.n	80040c4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	330c      	adds	r3, #12
 8004096:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	e853 3f00 	ldrex	r3, [r3]
 800409e:	60fb      	str	r3, [r7, #12]
   return(result);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f023 0310 	bic.w	r3, r3, #16
 80040a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	330c      	adds	r3, #12
 80040ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80040b0:	61fa      	str	r2, [r7, #28]
 80040b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b4:	69b9      	ldr	r1, [r7, #24]
 80040b6:	69fa      	ldr	r2, [r7, #28]
 80040b8:	e841 2300 	strex	r3, r2, [r1]
 80040bc:	617b      	str	r3, [r7, #20]
   return(result);
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1e5      	bne.n	8004090 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c6:	2200      	movs	r2, #0
 80040c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d106      	bne.n	80040e0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040d6:	4619      	mov	r1, r3
 80040d8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80040da:	f7ff ff0b 	bl	8003ef4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80040de:	e002      	b.n	80040e6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80040e0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80040e2:	f7ff fee9 	bl	8003eb8 <HAL_UART_RxCpltCallback>
}
 80040e6:	bf00      	nop
 80040e8:	3770      	adds	r7, #112	; 0x70
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b084      	sub	sp, #16
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2201      	movs	r2, #1
 8004100:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004106:	2b01      	cmp	r3, #1
 8004108:	d108      	bne.n	800411c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800410e:	085b      	lsrs	r3, r3, #1
 8004110:	b29b      	uxth	r3, r3
 8004112:	4619      	mov	r1, r3
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f7ff feed 	bl	8003ef4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800411a:	e002      	b.n	8004122 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f7ff fed5 	bl	8003ecc <HAL_UART_RxHalfCpltCallback>
}
 8004122:	bf00      	nop
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b084      	sub	sp, #16
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004132:	2300      	movs	r3, #0
 8004134:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004146:	2b80      	cmp	r3, #128	; 0x80
 8004148:	bf0c      	ite	eq
 800414a:	2301      	moveq	r3, #1
 800414c:	2300      	movne	r3, #0
 800414e:	b2db      	uxtb	r3, r3
 8004150:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b21      	cmp	r3, #33	; 0x21
 800415c:	d108      	bne.n	8004170 <UART_DMAError+0x46>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d005      	beq.n	8004170 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	2200      	movs	r2, #0
 8004168:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800416a:	68b8      	ldr	r0, [r7, #8]
 800416c:	f000 f8c2 	bl	80042f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417a:	2b40      	cmp	r3, #64	; 0x40
 800417c:	bf0c      	ite	eq
 800417e:	2301      	moveq	r3, #1
 8004180:	2300      	movne	r3, #0
 8004182:	b2db      	uxtb	r3, r3
 8004184:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b22      	cmp	r3, #34	; 0x22
 8004190:	d108      	bne.n	80041a4 <UART_DMAError+0x7a>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d005      	beq.n	80041a4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	2200      	movs	r2, #0
 800419c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800419e:	68b8      	ldr	r0, [r7, #8]
 80041a0:	f000 f8d0 	bl	8004344 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a8:	f043 0210 	orr.w	r2, r3, #16
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041b0:	68b8      	ldr	r0, [r7, #8]
 80041b2:	f7ff fe95 	bl	8003ee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041b6:	bf00      	nop
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
	...

080041c0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b098      	sub	sp, #96	; 0x60
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	4613      	mov	r3, r2
 80041cc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	88fa      	ldrh	r2, [r7, #6]
 80041d8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2222      	movs	r2, #34	; 0x22
 80041e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ec:	4a3e      	ldr	r2, [pc, #248]	; (80042e8 <UART_Start_Receive_DMA+0x128>)
 80041ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f4:	4a3d      	ldr	r2, [pc, #244]	; (80042ec <UART_Start_Receive_DMA+0x12c>)
 80041f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fc:	4a3c      	ldr	r2, [pc, #240]	; (80042f0 <UART_Start_Receive_DMA+0x130>)
 80041fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004204:	2200      	movs	r2, #0
 8004206:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004208:	f107 0308 	add.w	r3, r7, #8
 800420c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	3304      	adds	r3, #4
 8004218:	4619      	mov	r1, r3
 800421a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	88fb      	ldrh	r3, [r7, #6]
 8004220:	f7fd fdf6 	bl	8001e10 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004224:	2300      	movs	r3, #0
 8004226:	613b      	str	r3, [r7, #16]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	613b      	str	r3, [r7, #16]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	613b      	str	r3, [r7, #16]
 8004238:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d019      	beq.n	8004276 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	330c      	adds	r3, #12
 8004248:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800424c:	e853 3f00 	ldrex	r3, [r3]
 8004250:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004258:	65bb      	str	r3, [r7, #88]	; 0x58
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	330c      	adds	r3, #12
 8004260:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004262:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004264:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004266:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004268:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800426a:	e841 2300 	strex	r3, r2, [r1]
 800426e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1e5      	bne.n	8004242 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	3314      	adds	r3, #20
 800427c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004280:	e853 3f00 	ldrex	r3, [r3]
 8004284:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004288:	f043 0301 	orr.w	r3, r3, #1
 800428c:	657b      	str	r3, [r7, #84]	; 0x54
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	3314      	adds	r3, #20
 8004294:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004296:	63ba      	str	r2, [r7, #56]	; 0x38
 8004298:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800429c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800429e:	e841 2300 	strex	r3, r2, [r1]
 80042a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80042a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1e5      	bne.n	8004276 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	3314      	adds	r3, #20
 80042b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	e853 3f00 	ldrex	r3, [r3]
 80042b8:	617b      	str	r3, [r7, #20]
   return(result);
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042c0:	653b      	str	r3, [r7, #80]	; 0x50
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	3314      	adds	r3, #20
 80042c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80042ca:	627a      	str	r2, [r7, #36]	; 0x24
 80042cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ce:	6a39      	ldr	r1, [r7, #32]
 80042d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042d2:	e841 2300 	strex	r3, r2, [r1]
 80042d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1e5      	bne.n	80042aa <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3760      	adds	r7, #96	; 0x60
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	08003fc3 	.word	0x08003fc3
 80042ec:	080040ef 	.word	0x080040ef
 80042f0:	0800412b 	.word	0x0800412b

080042f4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b089      	sub	sp, #36	; 0x24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	330c      	adds	r3, #12
 8004302:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	e853 3f00 	ldrex	r3, [r3]
 800430a:	60bb      	str	r3, [r7, #8]
   return(result);
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004312:	61fb      	str	r3, [r7, #28]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	330c      	adds	r3, #12
 800431a:	69fa      	ldr	r2, [r7, #28]
 800431c:	61ba      	str	r2, [r7, #24]
 800431e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004320:	6979      	ldr	r1, [r7, #20]
 8004322:	69ba      	ldr	r2, [r7, #24]
 8004324:	e841 2300 	strex	r3, r2, [r1]
 8004328:	613b      	str	r3, [r7, #16]
   return(result);
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1e5      	bne.n	80042fc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2220      	movs	r2, #32
 8004334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8004338:	bf00      	nop
 800433a:	3724      	adds	r7, #36	; 0x24
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004344:	b480      	push	{r7}
 8004346:	b095      	sub	sp, #84	; 0x54
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	330c      	adds	r3, #12
 8004352:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004356:	e853 3f00 	ldrex	r3, [r3]
 800435a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800435c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004362:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	330c      	adds	r3, #12
 800436a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800436c:	643a      	str	r2, [r7, #64]	; 0x40
 800436e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004370:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004372:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004374:	e841 2300 	strex	r3, r2, [r1]
 8004378:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800437a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1e5      	bne.n	800434c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	3314      	adds	r3, #20
 8004386:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	e853 3f00 	ldrex	r3, [r3]
 800438e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	f023 0301 	bic.w	r3, r3, #1
 8004396:	64bb      	str	r3, [r7, #72]	; 0x48
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	3314      	adds	r3, #20
 800439e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043a8:	e841 2300 	strex	r3, r2, [r1]
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1e5      	bne.n	8004380 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d119      	bne.n	80043f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	330c      	adds	r3, #12
 80043c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	e853 3f00 	ldrex	r3, [r3]
 80043ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	f023 0310 	bic.w	r3, r3, #16
 80043d2:	647b      	str	r3, [r7, #68]	; 0x44
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	330c      	adds	r3, #12
 80043da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043dc:	61ba      	str	r2, [r7, #24]
 80043de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e0:	6979      	ldr	r1, [r7, #20]
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	e841 2300 	strex	r3, r2, [r1]
 80043e8:	613b      	str	r3, [r7, #16]
   return(result);
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1e5      	bne.n	80043bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2220      	movs	r2, #32
 80043f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80043fe:	bf00      	nop
 8004400:	3754      	adds	r7, #84	; 0x54
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b084      	sub	sp, #16
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004416:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f7ff fd5b 	bl	8003ee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800442a:	bf00      	nop
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004432:	b480      	push	{r7}
 8004434:	b085      	sub	sp, #20
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b21      	cmp	r3, #33	; 0x21
 8004444:	d13e      	bne.n	80044c4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800444e:	d114      	bne.n	800447a <UART_Transmit_IT+0x48>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d110      	bne.n	800447a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800446c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	1c9a      	adds	r2, r3, #2
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	621a      	str	r2, [r3, #32]
 8004478:	e008      	b.n	800448c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	1c59      	adds	r1, r3, #1
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	6211      	str	r1, [r2, #32]
 8004484:	781a      	ldrb	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004490:	b29b      	uxth	r3, r3
 8004492:	3b01      	subs	r3, #1
 8004494:	b29b      	uxth	r3, r3
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	4619      	mov	r1, r3
 800449a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10f      	bne.n	80044c0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044ae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68da      	ldr	r2, [r3, #12]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044be:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80044c0:	2300      	movs	r3, #0
 80044c2:	e000      	b.n	80044c6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80044c4:	2302      	movs	r3, #2
  }
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3714      	adds	r7, #20
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr

080044d2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b082      	sub	sp, #8
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68da      	ldr	r2, [r3, #12]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044e8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2220      	movs	r2, #32
 80044ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7ff fccc 	bl	8003e90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b08c      	sub	sp, #48	; 0x30
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b22      	cmp	r3, #34	; 0x22
 8004514:	f040 80ae 	bne.w	8004674 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004520:	d117      	bne.n	8004552 <UART_Receive_IT+0x50>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d113      	bne.n	8004552 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800452a:	2300      	movs	r3, #0
 800452c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004532:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	b29b      	uxth	r3, r3
 800453c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004540:	b29a      	uxth	r2, r3
 8004542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004544:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454a:	1c9a      	adds	r2, r3, #2
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	629a      	str	r2, [r3, #40]	; 0x28
 8004550:	e026      	b.n	80045a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004556:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004558:	2300      	movs	r3, #0
 800455a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004564:	d007      	beq.n	8004576 <UART_Receive_IT+0x74>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10a      	bne.n	8004584 <UART_Receive_IT+0x82>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d106      	bne.n	8004584 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	b2da      	uxtb	r2, r3
 800457e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004580:	701a      	strb	r2, [r3, #0]
 8004582:	e008      	b.n	8004596 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	b2db      	uxtb	r3, r3
 800458c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004590:	b2da      	uxtb	r2, r3
 8004592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004594:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459a:	1c5a      	adds	r2, r3, #1
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	4619      	mov	r1, r3
 80045ae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d15d      	bne.n	8004670 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68da      	ldr	r2, [r3, #12]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 0220 	bic.w	r2, r2, #32
 80045c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68da      	ldr	r2, [r3, #12]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	695a      	ldr	r2, [r3, #20]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 0201 	bic.w	r2, r2, #1
 80045e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2220      	movs	r2, #32
 80045e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d135      	bne.n	8004666 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	330c      	adds	r3, #12
 8004606:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	e853 3f00 	ldrex	r3, [r3]
 800460e:	613b      	str	r3, [r7, #16]
   return(result);
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	f023 0310 	bic.w	r3, r3, #16
 8004616:	627b      	str	r3, [r7, #36]	; 0x24
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	330c      	adds	r3, #12
 800461e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004620:	623a      	str	r2, [r7, #32]
 8004622:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004624:	69f9      	ldr	r1, [r7, #28]
 8004626:	6a3a      	ldr	r2, [r7, #32]
 8004628:	e841 2300 	strex	r3, r2, [r1]
 800462c:	61bb      	str	r3, [r7, #24]
   return(result);
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1e5      	bne.n	8004600 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0310 	and.w	r3, r3, #16
 800463e:	2b10      	cmp	r3, #16
 8004640:	d10a      	bne.n	8004658 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004642:	2300      	movs	r3, #0
 8004644:	60fb      	str	r3, [r7, #12]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	60fb      	str	r3, [r7, #12]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	60fb      	str	r3, [r7, #12]
 8004656:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800465c:	4619      	mov	r1, r3
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7ff fc48 	bl	8003ef4 <HAL_UARTEx_RxEventCallback>
 8004664:	e002      	b.n	800466c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7ff fc26 	bl	8003eb8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800466c:	2300      	movs	r3, #0
 800466e:	e002      	b.n	8004676 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004670:	2300      	movs	r3, #0
 8004672:	e000      	b.n	8004676 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004674:	2302      	movs	r3, #2
  }
}
 8004676:	4618      	mov	r0, r3
 8004678:	3730      	adds	r7, #48	; 0x30
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
	...

08004680 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004684:	b0c0      	sub	sp, #256	; 0x100
 8004686:	af00      	add	r7, sp, #0
 8004688:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800468c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800469c:	68d9      	ldr	r1, [r3, #12]
 800469e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	ea40 0301 	orr.w	r3, r0, r1
 80046a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	431a      	orrs	r2, r3
 80046b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	431a      	orrs	r2, r3
 80046c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80046cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80046d8:	f021 010c 	bic.w	r1, r1, #12
 80046dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80046e6:	430b      	orrs	r3, r1
 80046e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80046f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046fa:	6999      	ldr	r1, [r3, #24]
 80046fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	ea40 0301 	orr.w	r3, r0, r1
 8004706:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	4b8f      	ldr	r3, [pc, #572]	; (800494c <UART_SetConfig+0x2cc>)
 8004710:	429a      	cmp	r2, r3
 8004712:	d005      	beq.n	8004720 <UART_SetConfig+0xa0>
 8004714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	4b8d      	ldr	r3, [pc, #564]	; (8004950 <UART_SetConfig+0x2d0>)
 800471c:	429a      	cmp	r2, r3
 800471e:	d104      	bne.n	800472a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004720:	f7fe fd06 	bl	8003130 <HAL_RCC_GetPCLK2Freq>
 8004724:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004728:	e003      	b.n	8004732 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800472a:	f7fe fced 	bl	8003108 <HAL_RCC_GetPCLK1Freq>
 800472e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004736:	69db      	ldr	r3, [r3, #28]
 8004738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800473c:	f040 810c 	bne.w	8004958 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004740:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004744:	2200      	movs	r2, #0
 8004746:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800474a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800474e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004752:	4622      	mov	r2, r4
 8004754:	462b      	mov	r3, r5
 8004756:	1891      	adds	r1, r2, r2
 8004758:	65b9      	str	r1, [r7, #88]	; 0x58
 800475a:	415b      	adcs	r3, r3
 800475c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800475e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004762:	4621      	mov	r1, r4
 8004764:	eb12 0801 	adds.w	r8, r2, r1
 8004768:	4629      	mov	r1, r5
 800476a:	eb43 0901 	adc.w	r9, r3, r1
 800476e:	f04f 0200 	mov.w	r2, #0
 8004772:	f04f 0300 	mov.w	r3, #0
 8004776:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800477a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800477e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004782:	4690      	mov	r8, r2
 8004784:	4699      	mov	r9, r3
 8004786:	4623      	mov	r3, r4
 8004788:	eb18 0303 	adds.w	r3, r8, r3
 800478c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004790:	462b      	mov	r3, r5
 8004792:	eb49 0303 	adc.w	r3, r9, r3
 8004796:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800479a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047a6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80047aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80047ae:	460b      	mov	r3, r1
 80047b0:	18db      	adds	r3, r3, r3
 80047b2:	653b      	str	r3, [r7, #80]	; 0x50
 80047b4:	4613      	mov	r3, r2
 80047b6:	eb42 0303 	adc.w	r3, r2, r3
 80047ba:	657b      	str	r3, [r7, #84]	; 0x54
 80047bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80047c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80047c4:	f7fb fdc4 	bl	8000350 <__aeabi_uldivmod>
 80047c8:	4602      	mov	r2, r0
 80047ca:	460b      	mov	r3, r1
 80047cc:	4b61      	ldr	r3, [pc, #388]	; (8004954 <UART_SetConfig+0x2d4>)
 80047ce:	fba3 2302 	umull	r2, r3, r3, r2
 80047d2:	095b      	lsrs	r3, r3, #5
 80047d4:	011c      	lsls	r4, r3, #4
 80047d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047da:	2200      	movs	r2, #0
 80047dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047e0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80047e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80047e8:	4642      	mov	r2, r8
 80047ea:	464b      	mov	r3, r9
 80047ec:	1891      	adds	r1, r2, r2
 80047ee:	64b9      	str	r1, [r7, #72]	; 0x48
 80047f0:	415b      	adcs	r3, r3
 80047f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80047f8:	4641      	mov	r1, r8
 80047fa:	eb12 0a01 	adds.w	sl, r2, r1
 80047fe:	4649      	mov	r1, r9
 8004800:	eb43 0b01 	adc.w	fp, r3, r1
 8004804:	f04f 0200 	mov.w	r2, #0
 8004808:	f04f 0300 	mov.w	r3, #0
 800480c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004810:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004814:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004818:	4692      	mov	sl, r2
 800481a:	469b      	mov	fp, r3
 800481c:	4643      	mov	r3, r8
 800481e:	eb1a 0303 	adds.w	r3, sl, r3
 8004822:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004826:	464b      	mov	r3, r9
 8004828:	eb4b 0303 	adc.w	r3, fp, r3
 800482c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800483c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004840:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004844:	460b      	mov	r3, r1
 8004846:	18db      	adds	r3, r3, r3
 8004848:	643b      	str	r3, [r7, #64]	; 0x40
 800484a:	4613      	mov	r3, r2
 800484c:	eb42 0303 	adc.w	r3, r2, r3
 8004850:	647b      	str	r3, [r7, #68]	; 0x44
 8004852:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004856:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800485a:	f7fb fd79 	bl	8000350 <__aeabi_uldivmod>
 800485e:	4602      	mov	r2, r0
 8004860:	460b      	mov	r3, r1
 8004862:	4611      	mov	r1, r2
 8004864:	4b3b      	ldr	r3, [pc, #236]	; (8004954 <UART_SetConfig+0x2d4>)
 8004866:	fba3 2301 	umull	r2, r3, r3, r1
 800486a:	095b      	lsrs	r3, r3, #5
 800486c:	2264      	movs	r2, #100	; 0x64
 800486e:	fb02 f303 	mul.w	r3, r2, r3
 8004872:	1acb      	subs	r3, r1, r3
 8004874:	00db      	lsls	r3, r3, #3
 8004876:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800487a:	4b36      	ldr	r3, [pc, #216]	; (8004954 <UART_SetConfig+0x2d4>)
 800487c:	fba3 2302 	umull	r2, r3, r3, r2
 8004880:	095b      	lsrs	r3, r3, #5
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004888:	441c      	add	r4, r3
 800488a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800488e:	2200      	movs	r2, #0
 8004890:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004894:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004898:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800489c:	4642      	mov	r2, r8
 800489e:	464b      	mov	r3, r9
 80048a0:	1891      	adds	r1, r2, r2
 80048a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80048a4:	415b      	adcs	r3, r3
 80048a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048ac:	4641      	mov	r1, r8
 80048ae:	1851      	adds	r1, r2, r1
 80048b0:	6339      	str	r1, [r7, #48]	; 0x30
 80048b2:	4649      	mov	r1, r9
 80048b4:	414b      	adcs	r3, r1
 80048b6:	637b      	str	r3, [r7, #52]	; 0x34
 80048b8:	f04f 0200 	mov.w	r2, #0
 80048bc:	f04f 0300 	mov.w	r3, #0
 80048c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80048c4:	4659      	mov	r1, fp
 80048c6:	00cb      	lsls	r3, r1, #3
 80048c8:	4651      	mov	r1, sl
 80048ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048ce:	4651      	mov	r1, sl
 80048d0:	00ca      	lsls	r2, r1, #3
 80048d2:	4610      	mov	r0, r2
 80048d4:	4619      	mov	r1, r3
 80048d6:	4603      	mov	r3, r0
 80048d8:	4642      	mov	r2, r8
 80048da:	189b      	adds	r3, r3, r2
 80048dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048e0:	464b      	mov	r3, r9
 80048e2:	460a      	mov	r2, r1
 80048e4:	eb42 0303 	adc.w	r3, r2, r3
 80048e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80048f8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80048fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004900:	460b      	mov	r3, r1
 8004902:	18db      	adds	r3, r3, r3
 8004904:	62bb      	str	r3, [r7, #40]	; 0x28
 8004906:	4613      	mov	r3, r2
 8004908:	eb42 0303 	adc.w	r3, r2, r3
 800490c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800490e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004912:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004916:	f7fb fd1b 	bl	8000350 <__aeabi_uldivmod>
 800491a:	4602      	mov	r2, r0
 800491c:	460b      	mov	r3, r1
 800491e:	4b0d      	ldr	r3, [pc, #52]	; (8004954 <UART_SetConfig+0x2d4>)
 8004920:	fba3 1302 	umull	r1, r3, r3, r2
 8004924:	095b      	lsrs	r3, r3, #5
 8004926:	2164      	movs	r1, #100	; 0x64
 8004928:	fb01 f303 	mul.w	r3, r1, r3
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	3332      	adds	r3, #50	; 0x32
 8004932:	4a08      	ldr	r2, [pc, #32]	; (8004954 <UART_SetConfig+0x2d4>)
 8004934:	fba2 2303 	umull	r2, r3, r2, r3
 8004938:	095b      	lsrs	r3, r3, #5
 800493a:	f003 0207 	and.w	r2, r3, #7
 800493e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4422      	add	r2, r4
 8004946:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004948:	e106      	b.n	8004b58 <UART_SetConfig+0x4d8>
 800494a:	bf00      	nop
 800494c:	40011000 	.word	0x40011000
 8004950:	40011400 	.word	0x40011400
 8004954:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004958:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800495c:	2200      	movs	r2, #0
 800495e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004962:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004966:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800496a:	4642      	mov	r2, r8
 800496c:	464b      	mov	r3, r9
 800496e:	1891      	adds	r1, r2, r2
 8004970:	6239      	str	r1, [r7, #32]
 8004972:	415b      	adcs	r3, r3
 8004974:	627b      	str	r3, [r7, #36]	; 0x24
 8004976:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800497a:	4641      	mov	r1, r8
 800497c:	1854      	adds	r4, r2, r1
 800497e:	4649      	mov	r1, r9
 8004980:	eb43 0501 	adc.w	r5, r3, r1
 8004984:	f04f 0200 	mov.w	r2, #0
 8004988:	f04f 0300 	mov.w	r3, #0
 800498c:	00eb      	lsls	r3, r5, #3
 800498e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004992:	00e2      	lsls	r2, r4, #3
 8004994:	4614      	mov	r4, r2
 8004996:	461d      	mov	r5, r3
 8004998:	4643      	mov	r3, r8
 800499a:	18e3      	adds	r3, r4, r3
 800499c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80049a0:	464b      	mov	r3, r9
 80049a2:	eb45 0303 	adc.w	r3, r5, r3
 80049a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80049aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80049b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80049ba:	f04f 0200 	mov.w	r2, #0
 80049be:	f04f 0300 	mov.w	r3, #0
 80049c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80049c6:	4629      	mov	r1, r5
 80049c8:	008b      	lsls	r3, r1, #2
 80049ca:	4621      	mov	r1, r4
 80049cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049d0:	4621      	mov	r1, r4
 80049d2:	008a      	lsls	r2, r1, #2
 80049d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80049d8:	f7fb fcba 	bl	8000350 <__aeabi_uldivmod>
 80049dc:	4602      	mov	r2, r0
 80049de:	460b      	mov	r3, r1
 80049e0:	4b60      	ldr	r3, [pc, #384]	; (8004b64 <UART_SetConfig+0x4e4>)
 80049e2:	fba3 2302 	umull	r2, r3, r3, r2
 80049e6:	095b      	lsrs	r3, r3, #5
 80049e8:	011c      	lsls	r4, r3, #4
 80049ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049ee:	2200      	movs	r2, #0
 80049f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80049f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80049f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80049fc:	4642      	mov	r2, r8
 80049fe:	464b      	mov	r3, r9
 8004a00:	1891      	adds	r1, r2, r2
 8004a02:	61b9      	str	r1, [r7, #24]
 8004a04:	415b      	adcs	r3, r3
 8004a06:	61fb      	str	r3, [r7, #28]
 8004a08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a0c:	4641      	mov	r1, r8
 8004a0e:	1851      	adds	r1, r2, r1
 8004a10:	6139      	str	r1, [r7, #16]
 8004a12:	4649      	mov	r1, r9
 8004a14:	414b      	adcs	r3, r1
 8004a16:	617b      	str	r3, [r7, #20]
 8004a18:	f04f 0200 	mov.w	r2, #0
 8004a1c:	f04f 0300 	mov.w	r3, #0
 8004a20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a24:	4659      	mov	r1, fp
 8004a26:	00cb      	lsls	r3, r1, #3
 8004a28:	4651      	mov	r1, sl
 8004a2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a2e:	4651      	mov	r1, sl
 8004a30:	00ca      	lsls	r2, r1, #3
 8004a32:	4610      	mov	r0, r2
 8004a34:	4619      	mov	r1, r3
 8004a36:	4603      	mov	r3, r0
 8004a38:	4642      	mov	r2, r8
 8004a3a:	189b      	adds	r3, r3, r2
 8004a3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a40:	464b      	mov	r3, r9
 8004a42:	460a      	mov	r2, r1
 8004a44:	eb42 0303 	adc.w	r3, r2, r3
 8004a48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a56:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a58:	f04f 0200 	mov.w	r2, #0
 8004a5c:	f04f 0300 	mov.w	r3, #0
 8004a60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004a64:	4649      	mov	r1, r9
 8004a66:	008b      	lsls	r3, r1, #2
 8004a68:	4641      	mov	r1, r8
 8004a6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a6e:	4641      	mov	r1, r8
 8004a70:	008a      	lsls	r2, r1, #2
 8004a72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004a76:	f7fb fc6b 	bl	8000350 <__aeabi_uldivmod>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	4611      	mov	r1, r2
 8004a80:	4b38      	ldr	r3, [pc, #224]	; (8004b64 <UART_SetConfig+0x4e4>)
 8004a82:	fba3 2301 	umull	r2, r3, r3, r1
 8004a86:	095b      	lsrs	r3, r3, #5
 8004a88:	2264      	movs	r2, #100	; 0x64
 8004a8a:	fb02 f303 	mul.w	r3, r2, r3
 8004a8e:	1acb      	subs	r3, r1, r3
 8004a90:	011b      	lsls	r3, r3, #4
 8004a92:	3332      	adds	r3, #50	; 0x32
 8004a94:	4a33      	ldr	r2, [pc, #204]	; (8004b64 <UART_SetConfig+0x4e4>)
 8004a96:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9a:	095b      	lsrs	r3, r3, #5
 8004a9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004aa0:	441c      	add	r4, r3
 8004aa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	673b      	str	r3, [r7, #112]	; 0x70
 8004aaa:	677a      	str	r2, [r7, #116]	; 0x74
 8004aac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ab0:	4642      	mov	r2, r8
 8004ab2:	464b      	mov	r3, r9
 8004ab4:	1891      	adds	r1, r2, r2
 8004ab6:	60b9      	str	r1, [r7, #8]
 8004ab8:	415b      	adcs	r3, r3
 8004aba:	60fb      	str	r3, [r7, #12]
 8004abc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ac0:	4641      	mov	r1, r8
 8004ac2:	1851      	adds	r1, r2, r1
 8004ac4:	6039      	str	r1, [r7, #0]
 8004ac6:	4649      	mov	r1, r9
 8004ac8:	414b      	adcs	r3, r1
 8004aca:	607b      	str	r3, [r7, #4]
 8004acc:	f04f 0200 	mov.w	r2, #0
 8004ad0:	f04f 0300 	mov.w	r3, #0
 8004ad4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ad8:	4659      	mov	r1, fp
 8004ada:	00cb      	lsls	r3, r1, #3
 8004adc:	4651      	mov	r1, sl
 8004ade:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ae2:	4651      	mov	r1, sl
 8004ae4:	00ca      	lsls	r2, r1, #3
 8004ae6:	4610      	mov	r0, r2
 8004ae8:	4619      	mov	r1, r3
 8004aea:	4603      	mov	r3, r0
 8004aec:	4642      	mov	r2, r8
 8004aee:	189b      	adds	r3, r3, r2
 8004af0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004af2:	464b      	mov	r3, r9
 8004af4:	460a      	mov	r2, r1
 8004af6:	eb42 0303 	adc.w	r3, r2, r3
 8004afa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	663b      	str	r3, [r7, #96]	; 0x60
 8004b06:	667a      	str	r2, [r7, #100]	; 0x64
 8004b08:	f04f 0200 	mov.w	r2, #0
 8004b0c:	f04f 0300 	mov.w	r3, #0
 8004b10:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004b14:	4649      	mov	r1, r9
 8004b16:	008b      	lsls	r3, r1, #2
 8004b18:	4641      	mov	r1, r8
 8004b1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b1e:	4641      	mov	r1, r8
 8004b20:	008a      	lsls	r2, r1, #2
 8004b22:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004b26:	f7fb fc13 	bl	8000350 <__aeabi_uldivmod>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	4b0d      	ldr	r3, [pc, #52]	; (8004b64 <UART_SetConfig+0x4e4>)
 8004b30:	fba3 1302 	umull	r1, r3, r3, r2
 8004b34:	095b      	lsrs	r3, r3, #5
 8004b36:	2164      	movs	r1, #100	; 0x64
 8004b38:	fb01 f303 	mul.w	r3, r1, r3
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	011b      	lsls	r3, r3, #4
 8004b40:	3332      	adds	r3, #50	; 0x32
 8004b42:	4a08      	ldr	r2, [pc, #32]	; (8004b64 <UART_SetConfig+0x4e4>)
 8004b44:	fba2 2303 	umull	r2, r3, r2, r3
 8004b48:	095b      	lsrs	r3, r3, #5
 8004b4a:	f003 020f 	and.w	r2, r3, #15
 8004b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4422      	add	r2, r4
 8004b56:	609a      	str	r2, [r3, #8]
}
 8004b58:	bf00      	nop
 8004b5a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b64:	51eb851f 	.word	0x51eb851f

08004b68 <__NVIC_SetPriority>:
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	4603      	mov	r3, r0
 8004b70:	6039      	str	r1, [r7, #0]
 8004b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	db0a      	blt.n	8004b92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	b2da      	uxtb	r2, r3
 8004b80:	490c      	ldr	r1, [pc, #48]	; (8004bb4 <__NVIC_SetPriority+0x4c>)
 8004b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b86:	0112      	lsls	r2, r2, #4
 8004b88:	b2d2      	uxtb	r2, r2
 8004b8a:	440b      	add	r3, r1
 8004b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004b90:	e00a      	b.n	8004ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	b2da      	uxtb	r2, r3
 8004b96:	4908      	ldr	r1, [pc, #32]	; (8004bb8 <__NVIC_SetPriority+0x50>)
 8004b98:	79fb      	ldrb	r3, [r7, #7]
 8004b9a:	f003 030f 	and.w	r3, r3, #15
 8004b9e:	3b04      	subs	r3, #4
 8004ba0:	0112      	lsls	r2, r2, #4
 8004ba2:	b2d2      	uxtb	r2, r2
 8004ba4:	440b      	add	r3, r1
 8004ba6:	761a      	strb	r2, [r3, #24]
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	e000e100 	.word	0xe000e100
 8004bb8:	e000ed00 	.word	0xe000ed00

08004bbc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004bc0:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <SysTick_Handler+0x1c>)
 8004bc2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004bc4:	f001 fd4e 	bl	8006664 <xTaskGetSchedulerState>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d001      	beq.n	8004bd2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004bce:	f002 fb33 	bl	8007238 <xPortSysTickHandler>
  }
}
 8004bd2:	bf00      	nop
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	e000e010 	.word	0xe000e010

08004bdc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004be0:	2100      	movs	r1, #0
 8004be2:	f06f 0004 	mvn.w	r0, #4
 8004be6:	f7ff ffbf 	bl	8004b68 <__NVIC_SetPriority>
#endif
}
 8004bea:	bf00      	nop
 8004bec:	bd80      	pop	{r7, pc}
	...

08004bf0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bf6:	f3ef 8305 	mrs	r3, IPSR
 8004bfa:	603b      	str	r3, [r7, #0]
  return(result);
 8004bfc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004c02:	f06f 0305 	mvn.w	r3, #5
 8004c06:	607b      	str	r3, [r7, #4]
 8004c08:	e00c      	b.n	8004c24 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004c0a:	4b0a      	ldr	r3, [pc, #40]	; (8004c34 <osKernelInitialize+0x44>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d105      	bne.n	8004c1e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004c12:	4b08      	ldr	r3, [pc, #32]	; (8004c34 <osKernelInitialize+0x44>)
 8004c14:	2201      	movs	r2, #1
 8004c16:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	607b      	str	r3, [r7, #4]
 8004c1c:	e002      	b.n	8004c24 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004c1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c22:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004c24:	687b      	ldr	r3, [r7, #4]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	2000485c 	.word	0x2000485c

08004c38 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c3e:	f3ef 8305 	mrs	r3, IPSR
 8004c42:	603b      	str	r3, [r7, #0]
  return(result);
 8004c44:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d003      	beq.n	8004c52 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004c4a:	f06f 0305 	mvn.w	r3, #5
 8004c4e:	607b      	str	r3, [r7, #4]
 8004c50:	e010      	b.n	8004c74 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004c52:	4b0b      	ldr	r3, [pc, #44]	; (8004c80 <osKernelStart+0x48>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d109      	bne.n	8004c6e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004c5a:	f7ff ffbf 	bl	8004bdc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004c5e:	4b08      	ldr	r3, [pc, #32]	; (8004c80 <osKernelStart+0x48>)
 8004c60:	2202      	movs	r2, #2
 8004c62:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004c64:	f001 f87c 	bl	8005d60 <vTaskStartScheduler>
      stat = osOK;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	607b      	str	r3, [r7, #4]
 8004c6c:	e002      	b.n	8004c74 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004c6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c72:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004c74:	687b      	ldr	r3, [r7, #4]
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	2000485c 	.word	0x2000485c

08004c84 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b08e      	sub	sp, #56	; 0x38
 8004c88:	af04      	add	r7, sp, #16
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004c90:	2300      	movs	r3, #0
 8004c92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c94:	f3ef 8305 	mrs	r3, IPSR
 8004c98:	617b      	str	r3, [r7, #20]
  return(result);
 8004c9a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d17e      	bne.n	8004d9e <osThreadNew+0x11a>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d07b      	beq.n	8004d9e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004ca6:	2380      	movs	r3, #128	; 0x80
 8004ca8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004caa:	2318      	movs	r3, #24
 8004cac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004cb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cb6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d045      	beq.n	8004d4a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d002      	beq.n	8004ccc <osThreadNew+0x48>
        name = attr->name;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d002      	beq.n	8004cda <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d008      	beq.n	8004cf2 <osThreadNew+0x6e>
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	2b38      	cmp	r3, #56	; 0x38
 8004ce4:	d805      	bhi.n	8004cf2 <osThreadNew+0x6e>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <osThreadNew+0x72>
        return (NULL);
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	e054      	b.n	8004da0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d003      	beq.n	8004d06 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	089b      	lsrs	r3, r3, #2
 8004d04:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00e      	beq.n	8004d2c <osThreadNew+0xa8>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	2ba7      	cmp	r3, #167	; 0xa7
 8004d14:	d90a      	bls.n	8004d2c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d006      	beq.n	8004d2c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d002      	beq.n	8004d2c <osThreadNew+0xa8>
        mem = 1;
 8004d26:	2301      	movs	r3, #1
 8004d28:	61bb      	str	r3, [r7, #24]
 8004d2a:	e010      	b.n	8004d4e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10c      	bne.n	8004d4e <osThreadNew+0xca>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d108      	bne.n	8004d4e <osThreadNew+0xca>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d104      	bne.n	8004d4e <osThreadNew+0xca>
          mem = 0;
 8004d44:	2300      	movs	r3, #0
 8004d46:	61bb      	str	r3, [r7, #24]
 8004d48:	e001      	b.n	8004d4e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d110      	bne.n	8004d76 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d5c:	9202      	str	r2, [sp, #8]
 8004d5e:	9301      	str	r3, [sp, #4]
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	6a3a      	ldr	r2, [r7, #32]
 8004d68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f000 fe0c 	bl	8005988 <xTaskCreateStatic>
 8004d70:	4603      	mov	r3, r0
 8004d72:	613b      	str	r3, [r7, #16]
 8004d74:	e013      	b.n	8004d9e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d110      	bne.n	8004d9e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004d7c:	6a3b      	ldr	r3, [r7, #32]
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	f107 0310 	add.w	r3, r7, #16
 8004d84:	9301      	str	r3, [sp, #4]
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f000 fe57 	bl	8005a42 <xTaskCreate>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d001      	beq.n	8004d9e <osThreadNew+0x11a>
            hTask = NULL;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004d9e:	693b      	ldr	r3, [r7, #16]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3728      	adds	r7, #40	; 0x28
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004db0:	f3ef 8305 	mrs	r3, IPSR
 8004db4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004db6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d003      	beq.n	8004dc4 <osDelay+0x1c>
    stat = osErrorISR;
 8004dbc:	f06f 0305 	mvn.w	r3, #5
 8004dc0:	60fb      	str	r3, [r7, #12]
 8004dc2:	e007      	b.n	8004dd4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 ff92 	bl	8005cf8 <vTaskDelay>
    }
  }

  return (stat);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
	...

08004de0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4a07      	ldr	r2, [pc, #28]	; (8004e0c <vApplicationGetIdleTaskMemory+0x2c>)
 8004df0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	4a06      	ldr	r2, [pc, #24]	; (8004e10 <vApplicationGetIdleTaskMemory+0x30>)
 8004df6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2280      	movs	r2, #128	; 0x80
 8004dfc:	601a      	str	r2, [r3, #0]
}
 8004dfe:	bf00      	nop
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	20004860 	.word	0x20004860
 8004e10:	20004908 	.word	0x20004908

08004e14 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	4a07      	ldr	r2, [pc, #28]	; (8004e40 <vApplicationGetTimerTaskMemory+0x2c>)
 8004e24:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	4a06      	ldr	r2, [pc, #24]	; (8004e44 <vApplicationGetTimerTaskMemory+0x30>)
 8004e2a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e32:	601a      	str	r2, [r3, #0]
}
 8004e34:	bf00      	nop
 8004e36:	3714      	adds	r7, #20
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	20004b08 	.word	0x20004b08
 8004e44:	20004bb0 	.word	0x20004bb0

08004e48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f103 0208 	add.w	r2, r3, #8
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f103 0208 	add.w	r2, r3, #8
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	f103 0208 	add.w	r2, r3, #8
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b085      	sub	sp, #20
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
 8004eaa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	689a      	ldr	r2, [r3, #8]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	1c5a      	adds	r2, r3, #1
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	601a      	str	r2, [r3, #0]
}
 8004ede:	bf00      	nop
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004eea:	b480      	push	{r7}
 8004eec:	b085      	sub	sp, #20
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
 8004ef2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f00:	d103      	bne.n	8004f0a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	60fb      	str	r3, [r7, #12]
 8004f08:	e00c      	b.n	8004f24 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	3308      	adds	r3, #8
 8004f0e:	60fb      	str	r3, [r7, #12]
 8004f10:	e002      	b.n	8004f18 <vListInsert+0x2e>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	60fb      	str	r3, [r7, #12]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d2f6      	bcs.n	8004f12 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	685a      	ldr	r2, [r3, #4]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	1c5a      	adds	r2, r3, #1
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	601a      	str	r2, [r3, #0]
}
 8004f50:	bf00      	nop
 8004f52:	3714      	adds	r7, #20
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	6892      	ldr	r2, [r2, #8]
 8004f72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	6852      	ldr	r2, [r2, #4]
 8004f7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d103      	bne.n	8004f90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689a      	ldr	r2, [r3, #8]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	1e5a      	subs	r2, r3, #1
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3714      	adds	r7, #20
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10a      	bne.n	8004fda <xQueueGenericReset+0x2a>
	__asm volatile
 8004fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc8:	f383 8811 	msr	BASEPRI, r3
 8004fcc:	f3bf 8f6f 	isb	sy
 8004fd0:	f3bf 8f4f 	dsb	sy
 8004fd4:	60bb      	str	r3, [r7, #8]
}
 8004fd6:	bf00      	nop
 8004fd8:	e7fe      	b.n	8004fd8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004fda:	f002 f89b 	bl	8007114 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe6:	68f9      	ldr	r1, [r7, #12]
 8004fe8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004fea:	fb01 f303 	mul.w	r3, r1, r3
 8004fee:	441a      	add	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800500a:	3b01      	subs	r3, #1
 800500c:	68f9      	ldr	r1, [r7, #12]
 800500e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005010:	fb01 f303 	mul.w	r3, r1, r3
 8005014:	441a      	add	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	22ff      	movs	r2, #255	; 0xff
 800501e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	22ff      	movs	r2, #255	; 0xff
 8005026:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d114      	bne.n	800505a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d01a      	beq.n	800506e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	3310      	adds	r3, #16
 800503c:	4618      	mov	r0, r3
 800503e:	f001 f929 	bl	8006294 <xTaskRemoveFromEventList>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d012      	beq.n	800506e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005048:	4b0c      	ldr	r3, [pc, #48]	; (800507c <xQueueGenericReset+0xcc>)
 800504a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	f3bf 8f4f 	dsb	sy
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	e009      	b.n	800506e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	3310      	adds	r3, #16
 800505e:	4618      	mov	r0, r3
 8005060:	f7ff fef2 	bl	8004e48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	3324      	adds	r3, #36	; 0x24
 8005068:	4618      	mov	r0, r3
 800506a:	f7ff feed 	bl	8004e48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800506e:	f002 f881 	bl	8007174 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005072:	2301      	movs	r3, #1
}
 8005074:	4618      	mov	r0, r3
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	e000ed04 	.word	0xe000ed04

08005080 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005080:	b580      	push	{r7, lr}
 8005082:	b08e      	sub	sp, #56	; 0x38
 8005084:	af02      	add	r7, sp, #8
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
 800508c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10a      	bne.n	80050aa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005098:	f383 8811 	msr	BASEPRI, r3
 800509c:	f3bf 8f6f 	isb	sy
 80050a0:	f3bf 8f4f 	dsb	sy
 80050a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80050a6:	bf00      	nop
 80050a8:	e7fe      	b.n	80050a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10a      	bne.n	80050c6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80050b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b4:	f383 8811 	msr	BASEPRI, r3
 80050b8:	f3bf 8f6f 	isb	sy
 80050bc:	f3bf 8f4f 	dsb	sy
 80050c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80050c2:	bf00      	nop
 80050c4:	e7fe      	b.n	80050c4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d002      	beq.n	80050d2 <xQueueGenericCreateStatic+0x52>
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <xQueueGenericCreateStatic+0x56>
 80050d2:	2301      	movs	r3, #1
 80050d4:	e000      	b.n	80050d8 <xQueueGenericCreateStatic+0x58>
 80050d6:	2300      	movs	r3, #0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10a      	bne.n	80050f2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80050dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e0:	f383 8811 	msr	BASEPRI, r3
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	623b      	str	r3, [r7, #32]
}
 80050ee:	bf00      	nop
 80050f0:	e7fe      	b.n	80050f0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d102      	bne.n	80050fe <xQueueGenericCreateStatic+0x7e>
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <xQueueGenericCreateStatic+0x82>
 80050fe:	2301      	movs	r3, #1
 8005100:	e000      	b.n	8005104 <xQueueGenericCreateStatic+0x84>
 8005102:	2300      	movs	r3, #0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10a      	bne.n	800511e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510c:	f383 8811 	msr	BASEPRI, r3
 8005110:	f3bf 8f6f 	isb	sy
 8005114:	f3bf 8f4f 	dsb	sy
 8005118:	61fb      	str	r3, [r7, #28]
}
 800511a:	bf00      	nop
 800511c:	e7fe      	b.n	800511c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800511e:	2350      	movs	r3, #80	; 0x50
 8005120:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	2b50      	cmp	r3, #80	; 0x50
 8005126:	d00a      	beq.n	800513e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512c:	f383 8811 	msr	BASEPRI, r3
 8005130:	f3bf 8f6f 	isb	sy
 8005134:	f3bf 8f4f 	dsb	sy
 8005138:	61bb      	str	r3, [r7, #24]
}
 800513a:	bf00      	nop
 800513c:	e7fe      	b.n	800513c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800513e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00d      	beq.n	8005166 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800514a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800514c:	2201      	movs	r2, #1
 800514e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005152:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	4613      	mov	r3, r2
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	68b9      	ldr	r1, [r7, #8]
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f000 f805 	bl	8005170 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005168:	4618      	mov	r0, r3
 800516a:	3730      	adds	r7, #48	; 0x30
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
 800517c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d103      	bne.n	800518c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	601a      	str	r2, [r3, #0]
 800518a:	e002      	b.n	8005192 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800519e:	2101      	movs	r1, #1
 80051a0:	69b8      	ldr	r0, [r7, #24]
 80051a2:	f7ff ff05 	bl	8004fb0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	78fa      	ldrb	r2, [r7, #3]
 80051aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80051ae:	bf00      	nop
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
	...

080051b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b08e      	sub	sp, #56	; 0x38
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
 80051c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80051c6:	2300      	movs	r3, #0
 80051c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80051ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d10a      	bne.n	80051ea <xQueueGenericSend+0x32>
	__asm volatile
 80051d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d8:	f383 8811 	msr	BASEPRI, r3
 80051dc:	f3bf 8f6f 	isb	sy
 80051e0:	f3bf 8f4f 	dsb	sy
 80051e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80051e6:	bf00      	nop
 80051e8:	e7fe      	b.n	80051e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d103      	bne.n	80051f8 <xQueueGenericSend+0x40>
 80051f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d101      	bne.n	80051fc <xQueueGenericSend+0x44>
 80051f8:	2301      	movs	r3, #1
 80051fa:	e000      	b.n	80051fe <xQueueGenericSend+0x46>
 80051fc:	2300      	movs	r3, #0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10a      	bne.n	8005218 <xQueueGenericSend+0x60>
	__asm volatile
 8005202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005206:	f383 8811 	msr	BASEPRI, r3
 800520a:	f3bf 8f6f 	isb	sy
 800520e:	f3bf 8f4f 	dsb	sy
 8005212:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005214:	bf00      	nop
 8005216:	e7fe      	b.n	8005216 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	2b02      	cmp	r3, #2
 800521c:	d103      	bne.n	8005226 <xQueueGenericSend+0x6e>
 800521e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005222:	2b01      	cmp	r3, #1
 8005224:	d101      	bne.n	800522a <xQueueGenericSend+0x72>
 8005226:	2301      	movs	r3, #1
 8005228:	e000      	b.n	800522c <xQueueGenericSend+0x74>
 800522a:	2300      	movs	r3, #0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10a      	bne.n	8005246 <xQueueGenericSend+0x8e>
	__asm volatile
 8005230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005234:	f383 8811 	msr	BASEPRI, r3
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	623b      	str	r3, [r7, #32]
}
 8005242:	bf00      	nop
 8005244:	e7fe      	b.n	8005244 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005246:	f001 fa0d 	bl	8006664 <xTaskGetSchedulerState>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d102      	bne.n	8005256 <xQueueGenericSend+0x9e>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <xQueueGenericSend+0xa2>
 8005256:	2301      	movs	r3, #1
 8005258:	e000      	b.n	800525c <xQueueGenericSend+0xa4>
 800525a:	2300      	movs	r3, #0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d10a      	bne.n	8005276 <xQueueGenericSend+0xbe>
	__asm volatile
 8005260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005264:	f383 8811 	msr	BASEPRI, r3
 8005268:	f3bf 8f6f 	isb	sy
 800526c:	f3bf 8f4f 	dsb	sy
 8005270:	61fb      	str	r3, [r7, #28]
}
 8005272:	bf00      	nop
 8005274:	e7fe      	b.n	8005274 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005276:	f001 ff4d 	bl	8007114 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800527a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800527e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005282:	429a      	cmp	r2, r3
 8005284:	d302      	bcc.n	800528c <xQueueGenericSend+0xd4>
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2b02      	cmp	r3, #2
 800528a:	d129      	bne.n	80052e0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800528c:	683a      	ldr	r2, [r7, #0]
 800528e:	68b9      	ldr	r1, [r7, #8]
 8005290:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005292:	f000 fa0b 	bl	80056ac <prvCopyDataToQueue>
 8005296:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529c:	2b00      	cmp	r3, #0
 800529e:	d010      	beq.n	80052c2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a2:	3324      	adds	r3, #36	; 0x24
 80052a4:	4618      	mov	r0, r3
 80052a6:	f000 fff5 	bl	8006294 <xTaskRemoveFromEventList>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d013      	beq.n	80052d8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80052b0:	4b3f      	ldr	r3, [pc, #252]	; (80053b0 <xQueueGenericSend+0x1f8>)
 80052b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	f3bf 8f4f 	dsb	sy
 80052bc:	f3bf 8f6f 	isb	sy
 80052c0:	e00a      	b.n	80052d8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80052c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d007      	beq.n	80052d8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80052c8:	4b39      	ldr	r3, [pc, #228]	; (80053b0 <xQueueGenericSend+0x1f8>)
 80052ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052ce:	601a      	str	r2, [r3, #0]
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80052d8:	f001 ff4c 	bl	8007174 <vPortExitCritical>
				return pdPASS;
 80052dc:	2301      	movs	r3, #1
 80052de:	e063      	b.n	80053a8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d103      	bne.n	80052ee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052e6:	f001 ff45 	bl	8007174 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80052ea:	2300      	movs	r3, #0
 80052ec:	e05c      	b.n	80053a8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d106      	bne.n	8005302 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052f4:	f107 0314 	add.w	r3, r7, #20
 80052f8:	4618      	mov	r0, r3
 80052fa:	f001 f855 	bl	80063a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052fe:	2301      	movs	r3, #1
 8005300:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005302:	f001 ff37 	bl	8007174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005306:	f000 fd9b 	bl	8005e40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800530a:	f001 ff03 	bl	8007114 <vPortEnterCritical>
 800530e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005310:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005314:	b25b      	sxtb	r3, r3
 8005316:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800531a:	d103      	bne.n	8005324 <xQueueGenericSend+0x16c>
 800531c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005326:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800532a:	b25b      	sxtb	r3, r3
 800532c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005330:	d103      	bne.n	800533a <xQueueGenericSend+0x182>
 8005332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005334:	2200      	movs	r2, #0
 8005336:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800533a:	f001 ff1b 	bl	8007174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800533e:	1d3a      	adds	r2, r7, #4
 8005340:	f107 0314 	add.w	r3, r7, #20
 8005344:	4611      	mov	r1, r2
 8005346:	4618      	mov	r0, r3
 8005348:	f001 f844 	bl	80063d4 <xTaskCheckForTimeOut>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d124      	bne.n	800539c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005352:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005354:	f000 faa2 	bl	800589c <prvIsQueueFull>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d018      	beq.n	8005390 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800535e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005360:	3310      	adds	r3, #16
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	4611      	mov	r1, r2
 8005366:	4618      	mov	r0, r3
 8005368:	f000 ff44 	bl	80061f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800536c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800536e:	f000 fa2d 	bl	80057cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005372:	f000 fd73 	bl	8005e5c <xTaskResumeAll>
 8005376:	4603      	mov	r3, r0
 8005378:	2b00      	cmp	r3, #0
 800537a:	f47f af7c 	bne.w	8005276 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800537e:	4b0c      	ldr	r3, [pc, #48]	; (80053b0 <xQueueGenericSend+0x1f8>)
 8005380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	f3bf 8f4f 	dsb	sy
 800538a:	f3bf 8f6f 	isb	sy
 800538e:	e772      	b.n	8005276 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005390:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005392:	f000 fa1b 	bl	80057cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005396:	f000 fd61 	bl	8005e5c <xTaskResumeAll>
 800539a:	e76c      	b.n	8005276 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800539c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800539e:	f000 fa15 	bl	80057cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80053a2:	f000 fd5b 	bl	8005e5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80053a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3738      	adds	r7, #56	; 0x38
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	e000ed04 	.word	0xe000ed04

080053b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b090      	sub	sp, #64	; 0x40
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
 80053c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80053c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10a      	bne.n	80053e2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80053cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d0:	f383 8811 	msr	BASEPRI, r3
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80053de:	bf00      	nop
 80053e0:	e7fe      	b.n	80053e0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d103      	bne.n	80053f0 <xQueueGenericSendFromISR+0x3c>
 80053e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d101      	bne.n	80053f4 <xQueueGenericSendFromISR+0x40>
 80053f0:	2301      	movs	r3, #1
 80053f2:	e000      	b.n	80053f6 <xQueueGenericSendFromISR+0x42>
 80053f4:	2300      	movs	r3, #0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10a      	bne.n	8005410 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80053fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fe:	f383 8811 	msr	BASEPRI, r3
 8005402:	f3bf 8f6f 	isb	sy
 8005406:	f3bf 8f4f 	dsb	sy
 800540a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800540c:	bf00      	nop
 800540e:	e7fe      	b.n	800540e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	2b02      	cmp	r3, #2
 8005414:	d103      	bne.n	800541e <xQueueGenericSendFromISR+0x6a>
 8005416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800541a:	2b01      	cmp	r3, #1
 800541c:	d101      	bne.n	8005422 <xQueueGenericSendFromISR+0x6e>
 800541e:	2301      	movs	r3, #1
 8005420:	e000      	b.n	8005424 <xQueueGenericSendFromISR+0x70>
 8005422:	2300      	movs	r3, #0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d10a      	bne.n	800543e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542c:	f383 8811 	msr	BASEPRI, r3
 8005430:	f3bf 8f6f 	isb	sy
 8005434:	f3bf 8f4f 	dsb	sy
 8005438:	623b      	str	r3, [r7, #32]
}
 800543a:	bf00      	nop
 800543c:	e7fe      	b.n	800543c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800543e:	f001 ff4b 	bl	80072d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005442:	f3ef 8211 	mrs	r2, BASEPRI
 8005446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544a:	f383 8811 	msr	BASEPRI, r3
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	61fa      	str	r2, [r7, #28]
 8005458:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800545a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800545c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800545e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005466:	429a      	cmp	r2, r3
 8005468:	d302      	bcc.n	8005470 <xQueueGenericSendFromISR+0xbc>
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	2b02      	cmp	r3, #2
 800546e:	d12f      	bne.n	80054d0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005472:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800547a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800547c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005480:	683a      	ldr	r2, [r7, #0]
 8005482:	68b9      	ldr	r1, [r7, #8]
 8005484:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005486:	f000 f911 	bl	80056ac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800548a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800548e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005492:	d112      	bne.n	80054ba <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	2b00      	cmp	r3, #0
 800549a:	d016      	beq.n	80054ca <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800549c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549e:	3324      	adds	r3, #36	; 0x24
 80054a0:	4618      	mov	r0, r3
 80054a2:	f000 fef7 	bl	8006294 <xTaskRemoveFromEventList>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00e      	beq.n	80054ca <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00b      	beq.n	80054ca <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2201      	movs	r2, #1
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	e007      	b.n	80054ca <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80054ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80054be:	3301      	adds	r3, #1
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	b25a      	sxtb	r2, r3
 80054c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80054ca:	2301      	movs	r3, #1
 80054cc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80054ce:	e001      	b.n	80054d4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80054d0:	2300      	movs	r3, #0
 80054d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80054de:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80054e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3740      	adds	r7, #64	; 0x40
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
	...

080054ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b08c      	sub	sp, #48	; 0x30
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80054f8:	2300      	movs	r3, #0
 80054fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10a      	bne.n	800551c <xQueueReceive+0x30>
	__asm volatile
 8005506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550a:	f383 8811 	msr	BASEPRI, r3
 800550e:	f3bf 8f6f 	isb	sy
 8005512:	f3bf 8f4f 	dsb	sy
 8005516:	623b      	str	r3, [r7, #32]
}
 8005518:	bf00      	nop
 800551a:	e7fe      	b.n	800551a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d103      	bne.n	800552a <xQueueReceive+0x3e>
 8005522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005526:	2b00      	cmp	r3, #0
 8005528:	d101      	bne.n	800552e <xQueueReceive+0x42>
 800552a:	2301      	movs	r3, #1
 800552c:	e000      	b.n	8005530 <xQueueReceive+0x44>
 800552e:	2300      	movs	r3, #0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10a      	bne.n	800554a <xQueueReceive+0x5e>
	__asm volatile
 8005534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005538:	f383 8811 	msr	BASEPRI, r3
 800553c:	f3bf 8f6f 	isb	sy
 8005540:	f3bf 8f4f 	dsb	sy
 8005544:	61fb      	str	r3, [r7, #28]
}
 8005546:	bf00      	nop
 8005548:	e7fe      	b.n	8005548 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800554a:	f001 f88b 	bl	8006664 <xTaskGetSchedulerState>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d102      	bne.n	800555a <xQueueReceive+0x6e>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d101      	bne.n	800555e <xQueueReceive+0x72>
 800555a:	2301      	movs	r3, #1
 800555c:	e000      	b.n	8005560 <xQueueReceive+0x74>
 800555e:	2300      	movs	r3, #0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10a      	bne.n	800557a <xQueueReceive+0x8e>
	__asm volatile
 8005564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005568:	f383 8811 	msr	BASEPRI, r3
 800556c:	f3bf 8f6f 	isb	sy
 8005570:	f3bf 8f4f 	dsb	sy
 8005574:	61bb      	str	r3, [r7, #24]
}
 8005576:	bf00      	nop
 8005578:	e7fe      	b.n	8005578 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800557a:	f001 fdcb 	bl	8007114 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800557e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005582:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005586:	2b00      	cmp	r3, #0
 8005588:	d01f      	beq.n	80055ca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800558a:	68b9      	ldr	r1, [r7, #8]
 800558c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800558e:	f000 f8f7 	bl	8005780 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	1e5a      	subs	r2, r3, #1
 8005596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005598:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800559a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00f      	beq.n	80055c2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a4:	3310      	adds	r3, #16
 80055a6:	4618      	mov	r0, r3
 80055a8:	f000 fe74 	bl	8006294 <xTaskRemoveFromEventList>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d007      	beq.n	80055c2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80055b2:	4b3d      	ldr	r3, [pc, #244]	; (80056a8 <xQueueReceive+0x1bc>)
 80055b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055b8:	601a      	str	r2, [r3, #0]
 80055ba:	f3bf 8f4f 	dsb	sy
 80055be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80055c2:	f001 fdd7 	bl	8007174 <vPortExitCritical>
				return pdPASS;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e069      	b.n	800569e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d103      	bne.n	80055d8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80055d0:	f001 fdd0 	bl	8007174 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80055d4:	2300      	movs	r3, #0
 80055d6:	e062      	b.n	800569e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d106      	bne.n	80055ec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055de:	f107 0310 	add.w	r3, r7, #16
 80055e2:	4618      	mov	r0, r3
 80055e4:	f000 fee0 	bl	80063a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055e8:	2301      	movs	r3, #1
 80055ea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055ec:	f001 fdc2 	bl	8007174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055f0:	f000 fc26 	bl	8005e40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055f4:	f001 fd8e 	bl	8007114 <vPortEnterCritical>
 80055f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055fe:	b25b      	sxtb	r3, r3
 8005600:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005604:	d103      	bne.n	800560e <xQueueReceive+0x122>
 8005606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005608:	2200      	movs	r2, #0
 800560a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800560e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005610:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005614:	b25b      	sxtb	r3, r3
 8005616:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800561a:	d103      	bne.n	8005624 <xQueueReceive+0x138>
 800561c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561e:	2200      	movs	r2, #0
 8005620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005624:	f001 fda6 	bl	8007174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005628:	1d3a      	adds	r2, r7, #4
 800562a:	f107 0310 	add.w	r3, r7, #16
 800562e:	4611      	mov	r1, r2
 8005630:	4618      	mov	r0, r3
 8005632:	f000 fecf 	bl	80063d4 <xTaskCheckForTimeOut>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d123      	bne.n	8005684 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800563c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800563e:	f000 f917 	bl	8005870 <prvIsQueueEmpty>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d017      	beq.n	8005678 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564a:	3324      	adds	r3, #36	; 0x24
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	4611      	mov	r1, r2
 8005650:	4618      	mov	r0, r3
 8005652:	f000 fdcf 	bl	80061f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005656:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005658:	f000 f8b8 	bl	80057cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800565c:	f000 fbfe 	bl	8005e5c <xTaskResumeAll>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d189      	bne.n	800557a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005666:	4b10      	ldr	r3, [pc, #64]	; (80056a8 <xQueueReceive+0x1bc>)
 8005668:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800566c:	601a      	str	r2, [r3, #0]
 800566e:	f3bf 8f4f 	dsb	sy
 8005672:	f3bf 8f6f 	isb	sy
 8005676:	e780      	b.n	800557a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005678:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800567a:	f000 f8a7 	bl	80057cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800567e:	f000 fbed 	bl	8005e5c <xTaskResumeAll>
 8005682:	e77a      	b.n	800557a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005684:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005686:	f000 f8a1 	bl	80057cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800568a:	f000 fbe7 	bl	8005e5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800568e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005690:	f000 f8ee 	bl	8005870 <prvIsQueueEmpty>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	f43f af6f 	beq.w	800557a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800569c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3730      	adds	r7, #48	; 0x30
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	e000ed04 	.word	0xe000ed04

080056ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b086      	sub	sp, #24
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80056b8:	2300      	movs	r3, #0
 80056ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10d      	bne.n	80056e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d14d      	bne.n	800576e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 ffe2 	bl	80066a0 <xTaskPriorityDisinherit>
 80056dc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	609a      	str	r2, [r3, #8]
 80056e4:	e043      	b.n	800576e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d119      	bne.n	8005720 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6858      	ldr	r0, [r3, #4]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f4:	461a      	mov	r2, r3
 80056f6:	68b9      	ldr	r1, [r7, #8]
 80056f8:	f00f fe95 	bl	8015426 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005704:	441a      	add	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	685a      	ldr	r2, [r3, #4]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	429a      	cmp	r2, r3
 8005714:	d32b      	bcc.n	800576e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	605a      	str	r2, [r3, #4]
 800571e:	e026      	b.n	800576e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	68d8      	ldr	r0, [r3, #12]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005728:	461a      	mov	r2, r3
 800572a:	68b9      	ldr	r1, [r7, #8]
 800572c:	f00f fe7b 	bl	8015426 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	68da      	ldr	r2, [r3, #12]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005738:	425b      	negs	r3, r3
 800573a:	441a      	add	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	68da      	ldr	r2, [r3, #12]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	429a      	cmp	r2, r3
 800574a:	d207      	bcs.n	800575c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	689a      	ldr	r2, [r3, #8]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005754:	425b      	negs	r3, r3
 8005756:	441a      	add	r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b02      	cmp	r3, #2
 8005760:	d105      	bne.n	800576e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d002      	beq.n	800576e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	3b01      	subs	r3, #1
 800576c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	1c5a      	adds	r2, r3, #1
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005776:	697b      	ldr	r3, [r7, #20]
}
 8005778:	4618      	mov	r0, r3
 800577a:	3718      	adds	r7, #24
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578e:	2b00      	cmp	r3, #0
 8005790:	d018      	beq.n	80057c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68da      	ldr	r2, [r3, #12]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579a:	441a      	add	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	68da      	ldr	r2, [r3, #12]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d303      	bcc.n	80057b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	68d9      	ldr	r1, [r3, #12]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057bc:	461a      	mov	r2, r3
 80057be:	6838      	ldr	r0, [r7, #0]
 80057c0:	f00f fe31 	bl	8015426 <memcpy>
	}
}
 80057c4:	bf00      	nop
 80057c6:	3708      	adds	r7, #8
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80057d4:	f001 fc9e 	bl	8007114 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057e0:	e011      	b.n	8005806 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d012      	beq.n	8005810 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	3324      	adds	r3, #36	; 0x24
 80057ee:	4618      	mov	r0, r3
 80057f0:	f000 fd50 	bl	8006294 <xTaskRemoveFromEventList>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80057fa:	f000 fe4d 	bl	8006498 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80057fe:	7bfb      	ldrb	r3, [r7, #15]
 8005800:	3b01      	subs	r3, #1
 8005802:	b2db      	uxtb	r3, r3
 8005804:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800580a:	2b00      	cmp	r3, #0
 800580c:	dce9      	bgt.n	80057e2 <prvUnlockQueue+0x16>
 800580e:	e000      	b.n	8005812 <prvUnlockQueue+0x46>
					break;
 8005810:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	22ff      	movs	r2, #255	; 0xff
 8005816:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800581a:	f001 fcab 	bl	8007174 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800581e:	f001 fc79 	bl	8007114 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005828:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800582a:	e011      	b.n	8005850 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d012      	beq.n	800585a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	3310      	adds	r3, #16
 8005838:	4618      	mov	r0, r3
 800583a:	f000 fd2b 	bl	8006294 <xTaskRemoveFromEventList>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d001      	beq.n	8005848 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005844:	f000 fe28 	bl	8006498 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005848:	7bbb      	ldrb	r3, [r7, #14]
 800584a:	3b01      	subs	r3, #1
 800584c:	b2db      	uxtb	r3, r3
 800584e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005850:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005854:	2b00      	cmp	r3, #0
 8005856:	dce9      	bgt.n	800582c <prvUnlockQueue+0x60>
 8005858:	e000      	b.n	800585c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800585a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	22ff      	movs	r2, #255	; 0xff
 8005860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005864:	f001 fc86 	bl	8007174 <vPortExitCritical>
}
 8005868:	bf00      	nop
 800586a:	3710      	adds	r7, #16
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005878:	f001 fc4c 	bl	8007114 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005880:	2b00      	cmp	r3, #0
 8005882:	d102      	bne.n	800588a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005884:	2301      	movs	r3, #1
 8005886:	60fb      	str	r3, [r7, #12]
 8005888:	e001      	b.n	800588e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800588a:	2300      	movs	r3, #0
 800588c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800588e:	f001 fc71 	bl	8007174 <vPortExitCritical>

	return xReturn;
 8005892:	68fb      	ldr	r3, [r7, #12]
}
 8005894:	4618      	mov	r0, r3
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80058a4:	f001 fc36 	bl	8007114 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d102      	bne.n	80058ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80058b4:	2301      	movs	r3, #1
 80058b6:	60fb      	str	r3, [r7, #12]
 80058b8:	e001      	b.n	80058be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80058ba:	2300      	movs	r3, #0
 80058bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80058be:	f001 fc59 	bl	8007174 <vPortExitCritical>

	return xReturn;
 80058c2:	68fb      	ldr	r3, [r7, #12]
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058d6:	2300      	movs	r3, #0
 80058d8:	60fb      	str	r3, [r7, #12]
 80058da:	e014      	b.n	8005906 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80058dc:	4a0f      	ldr	r2, [pc, #60]	; (800591c <vQueueAddToRegistry+0x50>)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d10b      	bne.n	8005900 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80058e8:	490c      	ldr	r1, [pc, #48]	; (800591c <vQueueAddToRegistry+0x50>)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	683a      	ldr	r2, [r7, #0]
 80058ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80058f2:	4a0a      	ldr	r2, [pc, #40]	; (800591c <vQueueAddToRegistry+0x50>)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	00db      	lsls	r3, r3, #3
 80058f8:	4413      	add	r3, r2
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80058fe:	e006      	b.n	800590e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	3301      	adds	r3, #1
 8005904:	60fb      	str	r3, [r7, #12]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2b07      	cmp	r3, #7
 800590a:	d9e7      	bls.n	80058dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800590c:	bf00      	nop
 800590e:	bf00      	nop
 8005910:	3714      	adds	r7, #20
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	20004fb0 	.word	0x20004fb0

08005920 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005930:	f001 fbf0 	bl	8007114 <vPortEnterCritical>
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800593a:	b25b      	sxtb	r3, r3
 800593c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005940:	d103      	bne.n	800594a <vQueueWaitForMessageRestricted+0x2a>
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005950:	b25b      	sxtb	r3, r3
 8005952:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005956:	d103      	bne.n	8005960 <vQueueWaitForMessageRestricted+0x40>
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005960:	f001 fc08 	bl	8007174 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005968:	2b00      	cmp	r3, #0
 800596a:	d106      	bne.n	800597a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	3324      	adds	r3, #36	; 0x24
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	68b9      	ldr	r1, [r7, #8]
 8005974:	4618      	mov	r0, r3
 8005976:	f000 fc61 	bl	800623c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800597a:	6978      	ldr	r0, [r7, #20]
 800597c:	f7ff ff26 	bl	80057cc <prvUnlockQueue>
	}
 8005980:	bf00      	nop
 8005982:	3718      	adds	r7, #24
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005988:	b580      	push	{r7, lr}
 800598a:	b08e      	sub	sp, #56	; 0x38
 800598c:	af04      	add	r7, sp, #16
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
 8005994:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10a      	bne.n	80059b2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800599c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a0:	f383 8811 	msr	BASEPRI, r3
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	623b      	str	r3, [r7, #32]
}
 80059ae:	bf00      	nop
 80059b0:	e7fe      	b.n	80059b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80059b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10a      	bne.n	80059ce <xTaskCreateStatic+0x46>
	__asm volatile
 80059b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059bc:	f383 8811 	msr	BASEPRI, r3
 80059c0:	f3bf 8f6f 	isb	sy
 80059c4:	f3bf 8f4f 	dsb	sy
 80059c8:	61fb      	str	r3, [r7, #28]
}
 80059ca:	bf00      	nop
 80059cc:	e7fe      	b.n	80059cc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80059ce:	23a8      	movs	r3, #168	; 0xa8
 80059d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	2ba8      	cmp	r3, #168	; 0xa8
 80059d6:	d00a      	beq.n	80059ee <xTaskCreateStatic+0x66>
	__asm volatile
 80059d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059dc:	f383 8811 	msr	BASEPRI, r3
 80059e0:	f3bf 8f6f 	isb	sy
 80059e4:	f3bf 8f4f 	dsb	sy
 80059e8:	61bb      	str	r3, [r7, #24]
}
 80059ea:	bf00      	nop
 80059ec:	e7fe      	b.n	80059ec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80059ee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80059f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d01e      	beq.n	8005a34 <xTaskCreateStatic+0xac>
 80059f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d01b      	beq.n	8005a34 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80059fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a04:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a08:	2202      	movs	r2, #2
 8005a0a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a0e:	2300      	movs	r3, #0
 8005a10:	9303      	str	r3, [sp, #12]
 8005a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a14:	9302      	str	r3, [sp, #8]
 8005a16:	f107 0314 	add.w	r3, r7, #20
 8005a1a:	9301      	str	r3, [sp, #4]
 8005a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	68b9      	ldr	r1, [r7, #8]
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f000 f850 	bl	8005acc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a2e:	f000 f8f3 	bl	8005c18 <prvAddNewTaskToReadyList>
 8005a32:	e001      	b.n	8005a38 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005a34:	2300      	movs	r3, #0
 8005a36:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005a38:	697b      	ldr	r3, [r7, #20]
	}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3728      	adds	r7, #40	; 0x28
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b08c      	sub	sp, #48	; 0x30
 8005a46:	af04      	add	r7, sp, #16
 8005a48:	60f8      	str	r0, [r7, #12]
 8005a4a:	60b9      	str	r1, [r7, #8]
 8005a4c:	603b      	str	r3, [r7, #0]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005a52:	88fb      	ldrh	r3, [r7, #6]
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	4618      	mov	r0, r3
 8005a58:	f001 fc7e 	bl	8007358 <pvPortMalloc>
 8005a5c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00e      	beq.n	8005a82 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005a64:	20a8      	movs	r0, #168	; 0xa8
 8005a66:	f001 fc77 	bl	8007358 <pvPortMalloc>
 8005a6a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d003      	beq.n	8005a7a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	631a      	str	r2, [r3, #48]	; 0x30
 8005a78:	e005      	b.n	8005a86 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005a7a:	6978      	ldr	r0, [r7, #20]
 8005a7c:	f001 fd38 	bl	80074f0 <vPortFree>
 8005a80:	e001      	b.n	8005a86 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005a82:	2300      	movs	r3, #0
 8005a84:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d017      	beq.n	8005abc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005a94:	88fa      	ldrh	r2, [r7, #6]
 8005a96:	2300      	movs	r3, #0
 8005a98:	9303      	str	r3, [sp, #12]
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	9302      	str	r3, [sp, #8]
 8005a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa0:	9301      	str	r3, [sp, #4]
 8005aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	68b9      	ldr	r1, [r7, #8]
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f000 f80e 	bl	8005acc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ab0:	69f8      	ldr	r0, [r7, #28]
 8005ab2:	f000 f8b1 	bl	8005c18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	61bb      	str	r3, [r7, #24]
 8005aba:	e002      	b.n	8005ac2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005abc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ac0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ac2:	69bb      	ldr	r3, [r7, #24]
	}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3720      	adds	r7, #32
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b088      	sub	sp, #32
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
 8005ad8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005adc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	21a5      	movs	r1, #165	; 0xa5
 8005ae6:	f00f fb7f 	bl	80151e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005af4:	3b01      	subs	r3, #1
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4413      	add	r3, r2
 8005afa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	f023 0307 	bic.w	r3, r3, #7
 8005b02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	f003 0307 	and.w	r3, r3, #7
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00a      	beq.n	8005b24 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b12:	f383 8811 	msr	BASEPRI, r3
 8005b16:	f3bf 8f6f 	isb	sy
 8005b1a:	f3bf 8f4f 	dsb	sy
 8005b1e:	617b      	str	r3, [r7, #20]
}
 8005b20:	bf00      	nop
 8005b22:	e7fe      	b.n	8005b22 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d01f      	beq.n	8005b6a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	61fb      	str	r3, [r7, #28]
 8005b2e:	e012      	b.n	8005b56 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b30:	68ba      	ldr	r2, [r7, #8]
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	4413      	add	r3, r2
 8005b36:	7819      	ldrb	r1, [r3, #0]
 8005b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	3334      	adds	r3, #52	; 0x34
 8005b40:	460a      	mov	r2, r1
 8005b42:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005b44:	68ba      	ldr	r2, [r7, #8]
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	4413      	add	r3, r2
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d006      	beq.n	8005b5e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	3301      	adds	r3, #1
 8005b54:	61fb      	str	r3, [r7, #28]
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	2b0f      	cmp	r3, #15
 8005b5a:	d9e9      	bls.n	8005b30 <prvInitialiseNewTask+0x64>
 8005b5c:	e000      	b.n	8005b60 <prvInitialiseNewTask+0x94>
			{
				break;
 8005b5e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b68:	e003      	b.n	8005b72 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b74:	2b37      	cmp	r3, #55	; 0x37
 8005b76:	d901      	bls.n	8005b7c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b78:	2337      	movs	r3, #55	; 0x37
 8005b7a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b80:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b86:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b90:	3304      	adds	r3, #4
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7ff f978 	bl	8004e88 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9a:	3318      	adds	r3, #24
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7ff f973 	bl	8004e88 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ba6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005baa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bb6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bca:	3354      	adds	r3, #84	; 0x54
 8005bcc:	224c      	movs	r2, #76	; 0x4c
 8005bce:	2100      	movs	r1, #0
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f00f fb09 	bl	80151e8 <memset>
 8005bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd8:	4a0c      	ldr	r2, [pc, #48]	; (8005c0c <prvInitialiseNewTask+0x140>)
 8005bda:	659a      	str	r2, [r3, #88]	; 0x58
 8005bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bde:	4a0c      	ldr	r2, [pc, #48]	; (8005c10 <prvInitialiseNewTask+0x144>)
 8005be0:	65da      	str	r2, [r3, #92]	; 0x5c
 8005be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be4:	4a0b      	ldr	r2, [pc, #44]	; (8005c14 <prvInitialiseNewTask+0x148>)
 8005be6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005be8:	683a      	ldr	r2, [r7, #0]
 8005bea:	68f9      	ldr	r1, [r7, #12]
 8005bec:	69b8      	ldr	r0, [r7, #24]
 8005bee:	f001 f967 	bl	8006ec0 <pxPortInitialiseStack>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d002      	beq.n	8005c04 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c02:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c04:	bf00      	nop
 8005c06:	3720      	adds	r7, #32
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	2000ddc4 	.word	0x2000ddc4
 8005c10:	2000de2c 	.word	0x2000de2c
 8005c14:	2000de94 	.word	0x2000de94

08005c18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005c20:	f001 fa78 	bl	8007114 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005c24:	4b2d      	ldr	r3, [pc, #180]	; (8005cdc <prvAddNewTaskToReadyList+0xc4>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	4a2c      	ldr	r2, [pc, #176]	; (8005cdc <prvAddNewTaskToReadyList+0xc4>)
 8005c2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005c2e:	4b2c      	ldr	r3, [pc, #176]	; (8005ce0 <prvAddNewTaskToReadyList+0xc8>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d109      	bne.n	8005c4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005c36:	4a2a      	ldr	r2, [pc, #168]	; (8005ce0 <prvAddNewTaskToReadyList+0xc8>)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c3c:	4b27      	ldr	r3, [pc, #156]	; (8005cdc <prvAddNewTaskToReadyList+0xc4>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d110      	bne.n	8005c66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c44:	f000 fc4c 	bl	80064e0 <prvInitialiseTaskLists>
 8005c48:	e00d      	b.n	8005c66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c4a:	4b26      	ldr	r3, [pc, #152]	; (8005ce4 <prvAddNewTaskToReadyList+0xcc>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d109      	bne.n	8005c66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c52:	4b23      	ldr	r3, [pc, #140]	; (8005ce0 <prvAddNewTaskToReadyList+0xc8>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d802      	bhi.n	8005c66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c60:	4a1f      	ldr	r2, [pc, #124]	; (8005ce0 <prvAddNewTaskToReadyList+0xc8>)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c66:	4b20      	ldr	r3, [pc, #128]	; (8005ce8 <prvAddNewTaskToReadyList+0xd0>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	4a1e      	ldr	r2, [pc, #120]	; (8005ce8 <prvAddNewTaskToReadyList+0xd0>)
 8005c6e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005c70:	4b1d      	ldr	r3, [pc, #116]	; (8005ce8 <prvAddNewTaskToReadyList+0xd0>)
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c7c:	4b1b      	ldr	r3, [pc, #108]	; (8005cec <prvAddNewTaskToReadyList+0xd4>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d903      	bls.n	8005c8c <prvAddNewTaskToReadyList+0x74>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c88:	4a18      	ldr	r2, [pc, #96]	; (8005cec <prvAddNewTaskToReadyList+0xd4>)
 8005c8a:	6013      	str	r3, [r2, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c90:	4613      	mov	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4413      	add	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	4a15      	ldr	r2, [pc, #84]	; (8005cf0 <prvAddNewTaskToReadyList+0xd8>)
 8005c9a:	441a      	add	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	3304      	adds	r3, #4
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	4610      	mov	r0, r2
 8005ca4:	f7ff f8fd 	bl	8004ea2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005ca8:	f001 fa64 	bl	8007174 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005cac:	4b0d      	ldr	r3, [pc, #52]	; (8005ce4 <prvAddNewTaskToReadyList+0xcc>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00e      	beq.n	8005cd2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005cb4:	4b0a      	ldr	r3, [pc, #40]	; (8005ce0 <prvAddNewTaskToReadyList+0xc8>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d207      	bcs.n	8005cd2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005cc2:	4b0c      	ldr	r3, [pc, #48]	; (8005cf4 <prvAddNewTaskToReadyList+0xdc>)
 8005cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cc8:	601a      	str	r2, [r3, #0]
 8005cca:	f3bf 8f4f 	dsb	sy
 8005cce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cd2:	bf00      	nop
 8005cd4:	3708      	adds	r7, #8
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	200054c4 	.word	0x200054c4
 8005ce0:	20004ff0 	.word	0x20004ff0
 8005ce4:	200054d0 	.word	0x200054d0
 8005ce8:	200054e0 	.word	0x200054e0
 8005cec:	200054cc 	.word	0x200054cc
 8005cf0:	20004ff4 	.word	0x20004ff4
 8005cf4:	e000ed04 	.word	0xe000ed04

08005cf8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005d00:	2300      	movs	r3, #0
 8005d02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d017      	beq.n	8005d3a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005d0a:	4b13      	ldr	r3, [pc, #76]	; (8005d58 <vTaskDelay+0x60>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00a      	beq.n	8005d28 <vTaskDelay+0x30>
	__asm volatile
 8005d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d16:	f383 8811 	msr	BASEPRI, r3
 8005d1a:	f3bf 8f6f 	isb	sy
 8005d1e:	f3bf 8f4f 	dsb	sy
 8005d22:	60bb      	str	r3, [r7, #8]
}
 8005d24:	bf00      	nop
 8005d26:	e7fe      	b.n	8005d26 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005d28:	f000 f88a 	bl	8005e40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 fd24 	bl	800677c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005d34:	f000 f892 	bl	8005e5c <xTaskResumeAll>
 8005d38:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d107      	bne.n	8005d50 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005d40:	4b06      	ldr	r3, [pc, #24]	; (8005d5c <vTaskDelay+0x64>)
 8005d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d46:	601a      	str	r2, [r3, #0]
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d50:	bf00      	nop
 8005d52:	3710      	adds	r7, #16
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	200054ec 	.word	0x200054ec
 8005d5c:	e000ed04 	.word	0xe000ed04

08005d60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b08a      	sub	sp, #40	; 0x28
 8005d64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d66:	2300      	movs	r3, #0
 8005d68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d6e:	463a      	mov	r2, r7
 8005d70:	1d39      	adds	r1, r7, #4
 8005d72:	f107 0308 	add.w	r3, r7, #8
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7ff f832 	bl	8004de0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d7c:	6839      	ldr	r1, [r7, #0]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	9202      	str	r2, [sp, #8]
 8005d84:	9301      	str	r3, [sp, #4]
 8005d86:	2300      	movs	r3, #0
 8005d88:	9300      	str	r3, [sp, #0]
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	460a      	mov	r2, r1
 8005d8e:	4924      	ldr	r1, [pc, #144]	; (8005e20 <vTaskStartScheduler+0xc0>)
 8005d90:	4824      	ldr	r0, [pc, #144]	; (8005e24 <vTaskStartScheduler+0xc4>)
 8005d92:	f7ff fdf9 	bl	8005988 <xTaskCreateStatic>
 8005d96:	4603      	mov	r3, r0
 8005d98:	4a23      	ldr	r2, [pc, #140]	; (8005e28 <vTaskStartScheduler+0xc8>)
 8005d9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005d9c:	4b22      	ldr	r3, [pc, #136]	; (8005e28 <vTaskStartScheduler+0xc8>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d002      	beq.n	8005daa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005da4:	2301      	movs	r3, #1
 8005da6:	617b      	str	r3, [r7, #20]
 8005da8:	e001      	b.n	8005dae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005daa:	2300      	movs	r3, #0
 8005dac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d102      	bne.n	8005dba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005db4:	f000 fd36 	bl	8006824 <xTimerCreateTimerTask>
 8005db8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d11b      	bne.n	8005df8 <vTaskStartScheduler+0x98>
	__asm volatile
 8005dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc4:	f383 8811 	msr	BASEPRI, r3
 8005dc8:	f3bf 8f6f 	isb	sy
 8005dcc:	f3bf 8f4f 	dsb	sy
 8005dd0:	613b      	str	r3, [r7, #16]
}
 8005dd2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005dd4:	4b15      	ldr	r3, [pc, #84]	; (8005e2c <vTaskStartScheduler+0xcc>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	3354      	adds	r3, #84	; 0x54
 8005dda:	4a15      	ldr	r2, [pc, #84]	; (8005e30 <vTaskStartScheduler+0xd0>)
 8005ddc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005dde:	4b15      	ldr	r3, [pc, #84]	; (8005e34 <vTaskStartScheduler+0xd4>)
 8005de0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005de4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005de6:	4b14      	ldr	r3, [pc, #80]	; (8005e38 <vTaskStartScheduler+0xd8>)
 8005de8:	2201      	movs	r2, #1
 8005dea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005dec:	4b13      	ldr	r3, [pc, #76]	; (8005e3c <vTaskStartScheduler+0xdc>)
 8005dee:	2200      	movs	r2, #0
 8005df0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005df2:	f001 f8ed 	bl	8006fd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005df6:	e00e      	b.n	8005e16 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dfe:	d10a      	bne.n	8005e16 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	60fb      	str	r3, [r7, #12]
}
 8005e12:	bf00      	nop
 8005e14:	e7fe      	b.n	8005e14 <vTaskStartScheduler+0xb4>
}
 8005e16:	bf00      	nop
 8005e18:	3718      	adds	r7, #24
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	0801628c 	.word	0x0801628c
 8005e24:	080064b1 	.word	0x080064b1
 8005e28:	200054e8 	.word	0x200054e8
 8005e2c:	20004ff0 	.word	0x20004ff0
 8005e30:	200002b4 	.word	0x200002b4
 8005e34:	200054e4 	.word	0x200054e4
 8005e38:	200054d0 	.word	0x200054d0
 8005e3c:	200054c8 	.word	0x200054c8

08005e40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005e40:	b480      	push	{r7}
 8005e42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005e44:	4b04      	ldr	r3, [pc, #16]	; (8005e58 <vTaskSuspendAll+0x18>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	4a03      	ldr	r2, [pc, #12]	; (8005e58 <vTaskSuspendAll+0x18>)
 8005e4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005e4e:	bf00      	nop
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr
 8005e58:	200054ec 	.word	0x200054ec

08005e5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e62:	2300      	movs	r3, #0
 8005e64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e66:	2300      	movs	r3, #0
 8005e68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e6a:	4b42      	ldr	r3, [pc, #264]	; (8005f74 <xTaskResumeAll+0x118>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d10a      	bne.n	8005e88 <xTaskResumeAll+0x2c>
	__asm volatile
 8005e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e76:	f383 8811 	msr	BASEPRI, r3
 8005e7a:	f3bf 8f6f 	isb	sy
 8005e7e:	f3bf 8f4f 	dsb	sy
 8005e82:	603b      	str	r3, [r7, #0]
}
 8005e84:	bf00      	nop
 8005e86:	e7fe      	b.n	8005e86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e88:	f001 f944 	bl	8007114 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e8c:	4b39      	ldr	r3, [pc, #228]	; (8005f74 <xTaskResumeAll+0x118>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	3b01      	subs	r3, #1
 8005e92:	4a38      	ldr	r2, [pc, #224]	; (8005f74 <xTaskResumeAll+0x118>)
 8005e94:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e96:	4b37      	ldr	r3, [pc, #220]	; (8005f74 <xTaskResumeAll+0x118>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d162      	bne.n	8005f64 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e9e:	4b36      	ldr	r3, [pc, #216]	; (8005f78 <xTaskResumeAll+0x11c>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d05e      	beq.n	8005f64 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ea6:	e02f      	b.n	8005f08 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ea8:	4b34      	ldr	r3, [pc, #208]	; (8005f7c <xTaskResumeAll+0x120>)
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	3318      	adds	r3, #24
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7ff f851 	bl	8004f5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	3304      	adds	r3, #4
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7ff f84c 	bl	8004f5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ec8:	4b2d      	ldr	r3, [pc, #180]	; (8005f80 <xTaskResumeAll+0x124>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d903      	bls.n	8005ed8 <xTaskResumeAll+0x7c>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed4:	4a2a      	ldr	r2, [pc, #168]	; (8005f80 <xTaskResumeAll+0x124>)
 8005ed6:	6013      	str	r3, [r2, #0]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005edc:	4613      	mov	r3, r2
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	4413      	add	r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4a27      	ldr	r2, [pc, #156]	; (8005f84 <xTaskResumeAll+0x128>)
 8005ee6:	441a      	add	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	3304      	adds	r3, #4
 8005eec:	4619      	mov	r1, r3
 8005eee:	4610      	mov	r0, r2
 8005ef0:	f7fe ffd7 	bl	8004ea2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef8:	4b23      	ldr	r3, [pc, #140]	; (8005f88 <xTaskResumeAll+0x12c>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d302      	bcc.n	8005f08 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005f02:	4b22      	ldr	r3, [pc, #136]	; (8005f8c <xTaskResumeAll+0x130>)
 8005f04:	2201      	movs	r2, #1
 8005f06:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f08:	4b1c      	ldr	r3, [pc, #112]	; (8005f7c <xTaskResumeAll+0x120>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1cb      	bne.n	8005ea8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d001      	beq.n	8005f1a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005f16:	f000 fb85 	bl	8006624 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005f1a:	4b1d      	ldr	r3, [pc, #116]	; (8005f90 <xTaskResumeAll+0x134>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d010      	beq.n	8005f48 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005f26:	f000 f847 	bl	8005fb8 <xTaskIncrementTick>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d002      	beq.n	8005f36 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005f30:	4b16      	ldr	r3, [pc, #88]	; (8005f8c <xTaskResumeAll+0x130>)
 8005f32:	2201      	movs	r2, #1
 8005f34:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1f1      	bne.n	8005f26 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005f42:	4b13      	ldr	r3, [pc, #76]	; (8005f90 <xTaskResumeAll+0x134>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005f48:	4b10      	ldr	r3, [pc, #64]	; (8005f8c <xTaskResumeAll+0x130>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d009      	beq.n	8005f64 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005f50:	2301      	movs	r3, #1
 8005f52:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005f54:	4b0f      	ldr	r3, [pc, #60]	; (8005f94 <xTaskResumeAll+0x138>)
 8005f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f5a:	601a      	str	r2, [r3, #0]
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f64:	f001 f906 	bl	8007174 <vPortExitCritical>

	return xAlreadyYielded;
 8005f68:	68bb      	ldr	r3, [r7, #8]
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	200054ec 	.word	0x200054ec
 8005f78:	200054c4 	.word	0x200054c4
 8005f7c:	20005484 	.word	0x20005484
 8005f80:	200054cc 	.word	0x200054cc
 8005f84:	20004ff4 	.word	0x20004ff4
 8005f88:	20004ff0 	.word	0x20004ff0
 8005f8c:	200054d8 	.word	0x200054d8
 8005f90:	200054d4 	.word	0x200054d4
 8005f94:	e000ed04 	.word	0xe000ed04

08005f98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005f9e:	4b05      	ldr	r3, [pc, #20]	; (8005fb4 <xTaskGetTickCount+0x1c>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005fa4:	687b      	ldr	r3, [r7, #4]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	200054c8 	.word	0x200054c8

08005fb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b086      	sub	sp, #24
 8005fbc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fc2:	4b4f      	ldr	r3, [pc, #316]	; (8006100 <xTaskIncrementTick+0x148>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	f040 808f 	bne.w	80060ea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005fcc:	4b4d      	ldr	r3, [pc, #308]	; (8006104 <xTaskIncrementTick+0x14c>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005fd4:	4a4b      	ldr	r2, [pc, #300]	; (8006104 <xTaskIncrementTick+0x14c>)
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d120      	bne.n	8006022 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005fe0:	4b49      	ldr	r3, [pc, #292]	; (8006108 <xTaskIncrementTick+0x150>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00a      	beq.n	8006000 <xTaskIncrementTick+0x48>
	__asm volatile
 8005fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fee:	f383 8811 	msr	BASEPRI, r3
 8005ff2:	f3bf 8f6f 	isb	sy
 8005ff6:	f3bf 8f4f 	dsb	sy
 8005ffa:	603b      	str	r3, [r7, #0]
}
 8005ffc:	bf00      	nop
 8005ffe:	e7fe      	b.n	8005ffe <xTaskIncrementTick+0x46>
 8006000:	4b41      	ldr	r3, [pc, #260]	; (8006108 <xTaskIncrementTick+0x150>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	60fb      	str	r3, [r7, #12]
 8006006:	4b41      	ldr	r3, [pc, #260]	; (800610c <xTaskIncrementTick+0x154>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a3f      	ldr	r2, [pc, #252]	; (8006108 <xTaskIncrementTick+0x150>)
 800600c:	6013      	str	r3, [r2, #0]
 800600e:	4a3f      	ldr	r2, [pc, #252]	; (800610c <xTaskIncrementTick+0x154>)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6013      	str	r3, [r2, #0]
 8006014:	4b3e      	ldr	r3, [pc, #248]	; (8006110 <xTaskIncrementTick+0x158>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	3301      	adds	r3, #1
 800601a:	4a3d      	ldr	r2, [pc, #244]	; (8006110 <xTaskIncrementTick+0x158>)
 800601c:	6013      	str	r3, [r2, #0]
 800601e:	f000 fb01 	bl	8006624 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006022:	4b3c      	ldr	r3, [pc, #240]	; (8006114 <xTaskIncrementTick+0x15c>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	429a      	cmp	r2, r3
 800602a:	d349      	bcc.n	80060c0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800602c:	4b36      	ldr	r3, [pc, #216]	; (8006108 <xTaskIncrementTick+0x150>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d104      	bne.n	8006040 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006036:	4b37      	ldr	r3, [pc, #220]	; (8006114 <xTaskIncrementTick+0x15c>)
 8006038:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800603c:	601a      	str	r2, [r3, #0]
					break;
 800603e:	e03f      	b.n	80060c0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006040:	4b31      	ldr	r3, [pc, #196]	; (8006108 <xTaskIncrementTick+0x150>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	429a      	cmp	r2, r3
 8006056:	d203      	bcs.n	8006060 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006058:	4a2e      	ldr	r2, [pc, #184]	; (8006114 <xTaskIncrementTick+0x15c>)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800605e:	e02f      	b.n	80060c0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	3304      	adds	r3, #4
 8006064:	4618      	mov	r0, r3
 8006066:	f7fe ff79 	bl	8004f5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606e:	2b00      	cmp	r3, #0
 8006070:	d004      	beq.n	800607c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	3318      	adds	r3, #24
 8006076:	4618      	mov	r0, r3
 8006078:	f7fe ff70 	bl	8004f5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006080:	4b25      	ldr	r3, [pc, #148]	; (8006118 <xTaskIncrementTick+0x160>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	429a      	cmp	r2, r3
 8006086:	d903      	bls.n	8006090 <xTaskIncrementTick+0xd8>
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608c:	4a22      	ldr	r2, [pc, #136]	; (8006118 <xTaskIncrementTick+0x160>)
 800608e:	6013      	str	r3, [r2, #0]
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006094:	4613      	mov	r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	4413      	add	r3, r2
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4a1f      	ldr	r2, [pc, #124]	; (800611c <xTaskIncrementTick+0x164>)
 800609e:	441a      	add	r2, r3
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	3304      	adds	r3, #4
 80060a4:	4619      	mov	r1, r3
 80060a6:	4610      	mov	r0, r2
 80060a8:	f7fe fefb 	bl	8004ea2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060b0:	4b1b      	ldr	r3, [pc, #108]	; (8006120 <xTaskIncrementTick+0x168>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d3b8      	bcc.n	800602c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80060ba:	2301      	movs	r3, #1
 80060bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060be:	e7b5      	b.n	800602c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80060c0:	4b17      	ldr	r3, [pc, #92]	; (8006120 <xTaskIncrementTick+0x168>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060c6:	4915      	ldr	r1, [pc, #84]	; (800611c <xTaskIncrementTick+0x164>)
 80060c8:	4613      	mov	r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	4413      	add	r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	440b      	add	r3, r1
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d901      	bls.n	80060dc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80060d8:	2301      	movs	r3, #1
 80060da:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80060dc:	4b11      	ldr	r3, [pc, #68]	; (8006124 <xTaskIncrementTick+0x16c>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d007      	beq.n	80060f4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80060e4:	2301      	movs	r3, #1
 80060e6:	617b      	str	r3, [r7, #20]
 80060e8:	e004      	b.n	80060f4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80060ea:	4b0f      	ldr	r3, [pc, #60]	; (8006128 <xTaskIncrementTick+0x170>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	3301      	adds	r3, #1
 80060f0:	4a0d      	ldr	r2, [pc, #52]	; (8006128 <xTaskIncrementTick+0x170>)
 80060f2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80060f4:	697b      	ldr	r3, [r7, #20]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3718      	adds	r7, #24
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	200054ec 	.word	0x200054ec
 8006104:	200054c8 	.word	0x200054c8
 8006108:	2000547c 	.word	0x2000547c
 800610c:	20005480 	.word	0x20005480
 8006110:	200054dc 	.word	0x200054dc
 8006114:	200054e4 	.word	0x200054e4
 8006118:	200054cc 	.word	0x200054cc
 800611c:	20004ff4 	.word	0x20004ff4
 8006120:	20004ff0 	.word	0x20004ff0
 8006124:	200054d8 	.word	0x200054d8
 8006128:	200054d4 	.word	0x200054d4

0800612c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006132:	4b2a      	ldr	r3, [pc, #168]	; (80061dc <vTaskSwitchContext+0xb0>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800613a:	4b29      	ldr	r3, [pc, #164]	; (80061e0 <vTaskSwitchContext+0xb4>)
 800613c:	2201      	movs	r2, #1
 800613e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006140:	e046      	b.n	80061d0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006142:	4b27      	ldr	r3, [pc, #156]	; (80061e0 <vTaskSwitchContext+0xb4>)
 8006144:	2200      	movs	r2, #0
 8006146:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006148:	4b26      	ldr	r3, [pc, #152]	; (80061e4 <vTaskSwitchContext+0xb8>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	60fb      	str	r3, [r7, #12]
 800614e:	e010      	b.n	8006172 <vTaskSwitchContext+0x46>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10a      	bne.n	800616c <vTaskSwitchContext+0x40>
	__asm volatile
 8006156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615a:	f383 8811 	msr	BASEPRI, r3
 800615e:	f3bf 8f6f 	isb	sy
 8006162:	f3bf 8f4f 	dsb	sy
 8006166:	607b      	str	r3, [r7, #4]
}
 8006168:	bf00      	nop
 800616a:	e7fe      	b.n	800616a <vTaskSwitchContext+0x3e>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	3b01      	subs	r3, #1
 8006170:	60fb      	str	r3, [r7, #12]
 8006172:	491d      	ldr	r1, [pc, #116]	; (80061e8 <vTaskSwitchContext+0xbc>)
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	4613      	mov	r3, r2
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4413      	add	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	440b      	add	r3, r1
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d0e4      	beq.n	8006150 <vTaskSwitchContext+0x24>
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	4613      	mov	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4413      	add	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4a15      	ldr	r2, [pc, #84]	; (80061e8 <vTaskSwitchContext+0xbc>)
 8006192:	4413      	add	r3, r2
 8006194:	60bb      	str	r3, [r7, #8]
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	605a      	str	r2, [r3, #4]
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	685a      	ldr	r2, [r3, #4]
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	3308      	adds	r3, #8
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d104      	bne.n	80061b6 <vTaskSwitchContext+0x8a>
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	685a      	ldr	r2, [r3, #4]
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	605a      	str	r2, [r3, #4]
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	4a0b      	ldr	r2, [pc, #44]	; (80061ec <vTaskSwitchContext+0xc0>)
 80061be:	6013      	str	r3, [r2, #0]
 80061c0:	4a08      	ldr	r2, [pc, #32]	; (80061e4 <vTaskSwitchContext+0xb8>)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80061c6:	4b09      	ldr	r3, [pc, #36]	; (80061ec <vTaskSwitchContext+0xc0>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	3354      	adds	r3, #84	; 0x54
 80061cc:	4a08      	ldr	r2, [pc, #32]	; (80061f0 <vTaskSwitchContext+0xc4>)
 80061ce:	6013      	str	r3, [r2, #0]
}
 80061d0:	bf00      	nop
 80061d2:	3714      	adds	r7, #20
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr
 80061dc:	200054ec 	.word	0x200054ec
 80061e0:	200054d8 	.word	0x200054d8
 80061e4:	200054cc 	.word	0x200054cc
 80061e8:	20004ff4 	.word	0x20004ff4
 80061ec:	20004ff0 	.word	0x20004ff0
 80061f0:	200002b4 	.word	0x200002b4

080061f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d10a      	bne.n	800621a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006208:	f383 8811 	msr	BASEPRI, r3
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	f3bf 8f4f 	dsb	sy
 8006214:	60fb      	str	r3, [r7, #12]
}
 8006216:	bf00      	nop
 8006218:	e7fe      	b.n	8006218 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800621a:	4b07      	ldr	r3, [pc, #28]	; (8006238 <vTaskPlaceOnEventList+0x44>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	3318      	adds	r3, #24
 8006220:	4619      	mov	r1, r3
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f7fe fe61 	bl	8004eea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006228:	2101      	movs	r1, #1
 800622a:	6838      	ldr	r0, [r7, #0]
 800622c:	f000 faa6 	bl	800677c <prvAddCurrentTaskToDelayedList>
}
 8006230:	bf00      	nop
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	20004ff0 	.word	0x20004ff0

0800623c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800623c:	b580      	push	{r7, lr}
 800623e:	b086      	sub	sp, #24
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d10a      	bne.n	8006264 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800624e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006252:	f383 8811 	msr	BASEPRI, r3
 8006256:	f3bf 8f6f 	isb	sy
 800625a:	f3bf 8f4f 	dsb	sy
 800625e:	617b      	str	r3, [r7, #20]
}
 8006260:	bf00      	nop
 8006262:	e7fe      	b.n	8006262 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006264:	4b0a      	ldr	r3, [pc, #40]	; (8006290 <vTaskPlaceOnEventListRestricted+0x54>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	3318      	adds	r3, #24
 800626a:	4619      	mov	r1, r3
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	f7fe fe18 	bl	8004ea2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d002      	beq.n	800627e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006278:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800627c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800627e:	6879      	ldr	r1, [r7, #4]
 8006280:	68b8      	ldr	r0, [r7, #8]
 8006282:	f000 fa7b 	bl	800677c <prvAddCurrentTaskToDelayedList>
	}
 8006286:	bf00      	nop
 8006288:	3718      	adds	r7, #24
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	20004ff0 	.word	0x20004ff0

08006294 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b086      	sub	sp, #24
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d10a      	bne.n	80062c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80062aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ae:	f383 8811 	msr	BASEPRI, r3
 80062b2:	f3bf 8f6f 	isb	sy
 80062b6:	f3bf 8f4f 	dsb	sy
 80062ba:	60fb      	str	r3, [r7, #12]
}
 80062bc:	bf00      	nop
 80062be:	e7fe      	b.n	80062be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	3318      	adds	r3, #24
 80062c4:	4618      	mov	r0, r3
 80062c6:	f7fe fe49 	bl	8004f5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062ca:	4b1e      	ldr	r3, [pc, #120]	; (8006344 <xTaskRemoveFromEventList+0xb0>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d11d      	bne.n	800630e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	3304      	adds	r3, #4
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7fe fe40 	bl	8004f5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062e0:	4b19      	ldr	r3, [pc, #100]	; (8006348 <xTaskRemoveFromEventList+0xb4>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d903      	bls.n	80062f0 <xTaskRemoveFromEventList+0x5c>
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ec:	4a16      	ldr	r2, [pc, #88]	; (8006348 <xTaskRemoveFromEventList+0xb4>)
 80062ee:	6013      	str	r3, [r2, #0]
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f4:	4613      	mov	r3, r2
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	4413      	add	r3, r2
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	4a13      	ldr	r2, [pc, #76]	; (800634c <xTaskRemoveFromEventList+0xb8>)
 80062fe:	441a      	add	r2, r3
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	3304      	adds	r3, #4
 8006304:	4619      	mov	r1, r3
 8006306:	4610      	mov	r0, r2
 8006308:	f7fe fdcb 	bl	8004ea2 <vListInsertEnd>
 800630c:	e005      	b.n	800631a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	3318      	adds	r3, #24
 8006312:	4619      	mov	r1, r3
 8006314:	480e      	ldr	r0, [pc, #56]	; (8006350 <xTaskRemoveFromEventList+0xbc>)
 8006316:	f7fe fdc4 	bl	8004ea2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800631e:	4b0d      	ldr	r3, [pc, #52]	; (8006354 <xTaskRemoveFromEventList+0xc0>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006324:	429a      	cmp	r2, r3
 8006326:	d905      	bls.n	8006334 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006328:	2301      	movs	r3, #1
 800632a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800632c:	4b0a      	ldr	r3, [pc, #40]	; (8006358 <xTaskRemoveFromEventList+0xc4>)
 800632e:	2201      	movs	r2, #1
 8006330:	601a      	str	r2, [r3, #0]
 8006332:	e001      	b.n	8006338 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006334:	2300      	movs	r3, #0
 8006336:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006338:	697b      	ldr	r3, [r7, #20]
}
 800633a:	4618      	mov	r0, r3
 800633c:	3718      	adds	r7, #24
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	200054ec 	.word	0x200054ec
 8006348:	200054cc 	.word	0x200054cc
 800634c:	20004ff4 	.word	0x20004ff4
 8006350:	20005484 	.word	0x20005484
 8006354:	20004ff0 	.word	0x20004ff0
 8006358:	200054d8 	.word	0x200054d8

0800635c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10a      	bne.n	8006380 <vTaskSetTimeOutState+0x24>
	__asm volatile
 800636a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636e:	f383 8811 	msr	BASEPRI, r3
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	f3bf 8f4f 	dsb	sy
 800637a:	60fb      	str	r3, [r7, #12]
}
 800637c:	bf00      	nop
 800637e:	e7fe      	b.n	800637e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8006380:	f000 fec8 	bl	8007114 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006384:	4b06      	ldr	r3, [pc, #24]	; (80063a0 <vTaskSetTimeOutState+0x44>)
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800638c:	4b05      	ldr	r3, [pc, #20]	; (80063a4 <vTaskSetTimeOutState+0x48>)
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8006394:	f000 feee 	bl	8007174 <vPortExitCritical>
}
 8006398:	bf00      	nop
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	200054dc 	.word	0x200054dc
 80063a4:	200054c8 	.word	0x200054c8

080063a8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80063b0:	4b06      	ldr	r3, [pc, #24]	; (80063cc <vTaskInternalSetTimeOutState+0x24>)
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80063b8:	4b05      	ldr	r3, [pc, #20]	; (80063d0 <vTaskInternalSetTimeOutState+0x28>)
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	605a      	str	r2, [r3, #4]
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr
 80063cc:	200054dc 	.word	0x200054dc
 80063d0:	200054c8 	.word	0x200054c8

080063d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b088      	sub	sp, #32
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10a      	bne.n	80063fa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80063e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e8:	f383 8811 	msr	BASEPRI, r3
 80063ec:	f3bf 8f6f 	isb	sy
 80063f0:	f3bf 8f4f 	dsb	sy
 80063f4:	613b      	str	r3, [r7, #16]
}
 80063f6:	bf00      	nop
 80063f8:	e7fe      	b.n	80063f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d10a      	bne.n	8006416 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006404:	f383 8811 	msr	BASEPRI, r3
 8006408:	f3bf 8f6f 	isb	sy
 800640c:	f3bf 8f4f 	dsb	sy
 8006410:	60fb      	str	r3, [r7, #12]
}
 8006412:	bf00      	nop
 8006414:	e7fe      	b.n	8006414 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006416:	f000 fe7d 	bl	8007114 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800641a:	4b1d      	ldr	r3, [pc, #116]	; (8006490 <xTaskCheckForTimeOut+0xbc>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	69ba      	ldr	r2, [r7, #24]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006432:	d102      	bne.n	800643a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006434:	2300      	movs	r3, #0
 8006436:	61fb      	str	r3, [r7, #28]
 8006438:	e023      	b.n	8006482 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	4b15      	ldr	r3, [pc, #84]	; (8006494 <xTaskCheckForTimeOut+0xc0>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	429a      	cmp	r2, r3
 8006444:	d007      	beq.n	8006456 <xTaskCheckForTimeOut+0x82>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	69ba      	ldr	r2, [r7, #24]
 800644c:	429a      	cmp	r2, r3
 800644e:	d302      	bcc.n	8006456 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006450:	2301      	movs	r3, #1
 8006452:	61fb      	str	r3, [r7, #28]
 8006454:	e015      	b.n	8006482 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	429a      	cmp	r2, r3
 800645e:	d20b      	bcs.n	8006478 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	1ad2      	subs	r2, r2, r3
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f7ff ff9b 	bl	80063a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006472:	2300      	movs	r3, #0
 8006474:	61fb      	str	r3, [r7, #28]
 8006476:	e004      	b.n	8006482 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	2200      	movs	r2, #0
 800647c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800647e:	2301      	movs	r3, #1
 8006480:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006482:	f000 fe77 	bl	8007174 <vPortExitCritical>

	return xReturn;
 8006486:	69fb      	ldr	r3, [r7, #28]
}
 8006488:	4618      	mov	r0, r3
 800648a:	3720      	adds	r7, #32
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	200054c8 	.word	0x200054c8
 8006494:	200054dc 	.word	0x200054dc

08006498 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006498:	b480      	push	{r7}
 800649a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800649c:	4b03      	ldr	r3, [pc, #12]	; (80064ac <vTaskMissedYield+0x14>)
 800649e:	2201      	movs	r2, #1
 80064a0:	601a      	str	r2, [r3, #0]
}
 80064a2:	bf00      	nop
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr
 80064ac:	200054d8 	.word	0x200054d8

080064b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80064b8:	f000 f852 	bl	8006560 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80064bc:	4b06      	ldr	r3, [pc, #24]	; (80064d8 <prvIdleTask+0x28>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d9f9      	bls.n	80064b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80064c4:	4b05      	ldr	r3, [pc, #20]	; (80064dc <prvIdleTask+0x2c>)
 80064c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ca:	601a      	str	r2, [r3, #0]
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80064d4:	e7f0      	b.n	80064b8 <prvIdleTask+0x8>
 80064d6:	bf00      	nop
 80064d8:	20004ff4 	.word	0x20004ff4
 80064dc:	e000ed04 	.word	0xe000ed04

080064e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064e6:	2300      	movs	r3, #0
 80064e8:	607b      	str	r3, [r7, #4]
 80064ea:	e00c      	b.n	8006506 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	4613      	mov	r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	4413      	add	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4a12      	ldr	r2, [pc, #72]	; (8006540 <prvInitialiseTaskLists+0x60>)
 80064f8:	4413      	add	r3, r2
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7fe fca4 	bl	8004e48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	3301      	adds	r3, #1
 8006504:	607b      	str	r3, [r7, #4]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2b37      	cmp	r3, #55	; 0x37
 800650a:	d9ef      	bls.n	80064ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800650c:	480d      	ldr	r0, [pc, #52]	; (8006544 <prvInitialiseTaskLists+0x64>)
 800650e:	f7fe fc9b 	bl	8004e48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006512:	480d      	ldr	r0, [pc, #52]	; (8006548 <prvInitialiseTaskLists+0x68>)
 8006514:	f7fe fc98 	bl	8004e48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006518:	480c      	ldr	r0, [pc, #48]	; (800654c <prvInitialiseTaskLists+0x6c>)
 800651a:	f7fe fc95 	bl	8004e48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800651e:	480c      	ldr	r0, [pc, #48]	; (8006550 <prvInitialiseTaskLists+0x70>)
 8006520:	f7fe fc92 	bl	8004e48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006524:	480b      	ldr	r0, [pc, #44]	; (8006554 <prvInitialiseTaskLists+0x74>)
 8006526:	f7fe fc8f 	bl	8004e48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800652a:	4b0b      	ldr	r3, [pc, #44]	; (8006558 <prvInitialiseTaskLists+0x78>)
 800652c:	4a05      	ldr	r2, [pc, #20]	; (8006544 <prvInitialiseTaskLists+0x64>)
 800652e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006530:	4b0a      	ldr	r3, [pc, #40]	; (800655c <prvInitialiseTaskLists+0x7c>)
 8006532:	4a05      	ldr	r2, [pc, #20]	; (8006548 <prvInitialiseTaskLists+0x68>)
 8006534:	601a      	str	r2, [r3, #0]
}
 8006536:	bf00      	nop
 8006538:	3708      	adds	r7, #8
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	20004ff4 	.word	0x20004ff4
 8006544:	20005454 	.word	0x20005454
 8006548:	20005468 	.word	0x20005468
 800654c:	20005484 	.word	0x20005484
 8006550:	20005498 	.word	0x20005498
 8006554:	200054b0 	.word	0x200054b0
 8006558:	2000547c 	.word	0x2000547c
 800655c:	20005480 	.word	0x20005480

08006560 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006566:	e019      	b.n	800659c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006568:	f000 fdd4 	bl	8007114 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800656c:	4b10      	ldr	r3, [pc, #64]	; (80065b0 <prvCheckTasksWaitingTermination+0x50>)
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	3304      	adds	r3, #4
 8006578:	4618      	mov	r0, r3
 800657a:	f7fe fcef 	bl	8004f5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800657e:	4b0d      	ldr	r3, [pc, #52]	; (80065b4 <prvCheckTasksWaitingTermination+0x54>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	3b01      	subs	r3, #1
 8006584:	4a0b      	ldr	r2, [pc, #44]	; (80065b4 <prvCheckTasksWaitingTermination+0x54>)
 8006586:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006588:	4b0b      	ldr	r3, [pc, #44]	; (80065b8 <prvCheckTasksWaitingTermination+0x58>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	3b01      	subs	r3, #1
 800658e:	4a0a      	ldr	r2, [pc, #40]	; (80065b8 <prvCheckTasksWaitingTermination+0x58>)
 8006590:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006592:	f000 fdef 	bl	8007174 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 f810 	bl	80065bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800659c:	4b06      	ldr	r3, [pc, #24]	; (80065b8 <prvCheckTasksWaitingTermination+0x58>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d1e1      	bne.n	8006568 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80065a4:	bf00      	nop
 80065a6:	bf00      	nop
 80065a8:	3708      	adds	r7, #8
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	20005498 	.word	0x20005498
 80065b4:	200054c4 	.word	0x200054c4
 80065b8:	200054ac 	.word	0x200054ac

080065bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	3354      	adds	r3, #84	; 0x54
 80065c8:	4618      	mov	r0, r3
 80065ca:	f00e fe5b 	bl	8015284 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d108      	bne.n	80065ea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065dc:	4618      	mov	r0, r3
 80065de:	f000 ff87 	bl	80074f0 <vPortFree>
				vPortFree( pxTCB );
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 ff84 	bl	80074f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80065e8:	e018      	b.n	800661c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d103      	bne.n	80065fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 ff7b 	bl	80074f0 <vPortFree>
	}
 80065fa:	e00f      	b.n	800661c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006602:	2b02      	cmp	r3, #2
 8006604:	d00a      	beq.n	800661c <prvDeleteTCB+0x60>
	__asm volatile
 8006606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660a:	f383 8811 	msr	BASEPRI, r3
 800660e:	f3bf 8f6f 	isb	sy
 8006612:	f3bf 8f4f 	dsb	sy
 8006616:	60fb      	str	r3, [r7, #12]
}
 8006618:	bf00      	nop
 800661a:	e7fe      	b.n	800661a <prvDeleteTCB+0x5e>
	}
 800661c:	bf00      	nop
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800662a:	4b0c      	ldr	r3, [pc, #48]	; (800665c <prvResetNextTaskUnblockTime+0x38>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d104      	bne.n	800663e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006634:	4b0a      	ldr	r3, [pc, #40]	; (8006660 <prvResetNextTaskUnblockTime+0x3c>)
 8006636:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800663a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800663c:	e008      	b.n	8006650 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800663e:	4b07      	ldr	r3, [pc, #28]	; (800665c <prvResetNextTaskUnblockTime+0x38>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	4a04      	ldr	r2, [pc, #16]	; (8006660 <prvResetNextTaskUnblockTime+0x3c>)
 800664e:	6013      	str	r3, [r2, #0]
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr
 800665c:	2000547c 	.word	0x2000547c
 8006660:	200054e4 	.word	0x200054e4

08006664 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800666a:	4b0b      	ldr	r3, [pc, #44]	; (8006698 <xTaskGetSchedulerState+0x34>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d102      	bne.n	8006678 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006672:	2301      	movs	r3, #1
 8006674:	607b      	str	r3, [r7, #4]
 8006676:	e008      	b.n	800668a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006678:	4b08      	ldr	r3, [pc, #32]	; (800669c <xTaskGetSchedulerState+0x38>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d102      	bne.n	8006686 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006680:	2302      	movs	r3, #2
 8006682:	607b      	str	r3, [r7, #4]
 8006684:	e001      	b.n	800668a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006686:	2300      	movs	r3, #0
 8006688:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800668a:	687b      	ldr	r3, [r7, #4]
	}
 800668c:	4618      	mov	r0, r3
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr
 8006698:	200054d0 	.word	0x200054d0
 800669c:	200054ec 	.word	0x200054ec

080066a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80066ac:	2300      	movs	r3, #0
 80066ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d056      	beq.n	8006764 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80066b6:	4b2e      	ldr	r3, [pc, #184]	; (8006770 <xTaskPriorityDisinherit+0xd0>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d00a      	beq.n	80066d6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80066c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c4:	f383 8811 	msr	BASEPRI, r3
 80066c8:	f3bf 8f6f 	isb	sy
 80066cc:	f3bf 8f4f 	dsb	sy
 80066d0:	60fb      	str	r3, [r7, #12]
}
 80066d2:	bf00      	nop
 80066d4:	e7fe      	b.n	80066d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10a      	bne.n	80066f4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80066de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	60bb      	str	r3, [r7, #8]
}
 80066f0:	bf00      	nop
 80066f2:	e7fe      	b.n	80066f2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066f8:	1e5a      	subs	r2, r3, #1
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006706:	429a      	cmp	r2, r3
 8006708:	d02c      	beq.n	8006764 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800670e:	2b00      	cmp	r3, #0
 8006710:	d128      	bne.n	8006764 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	3304      	adds	r3, #4
 8006716:	4618      	mov	r0, r3
 8006718:	f7fe fc20 	bl	8004f5c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006728:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006734:	4b0f      	ldr	r3, [pc, #60]	; (8006774 <xTaskPriorityDisinherit+0xd4>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	429a      	cmp	r2, r3
 800673a:	d903      	bls.n	8006744 <xTaskPriorityDisinherit+0xa4>
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006740:	4a0c      	ldr	r2, [pc, #48]	; (8006774 <xTaskPriorityDisinherit+0xd4>)
 8006742:	6013      	str	r3, [r2, #0]
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006748:	4613      	mov	r3, r2
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	4413      	add	r3, r2
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	4a09      	ldr	r2, [pc, #36]	; (8006778 <xTaskPriorityDisinherit+0xd8>)
 8006752:	441a      	add	r2, r3
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	3304      	adds	r3, #4
 8006758:	4619      	mov	r1, r3
 800675a:	4610      	mov	r0, r2
 800675c:	f7fe fba1 	bl	8004ea2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006760:	2301      	movs	r3, #1
 8006762:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006764:	697b      	ldr	r3, [r7, #20]
	}
 8006766:	4618      	mov	r0, r3
 8006768:	3718      	adds	r7, #24
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	20004ff0 	.word	0x20004ff0
 8006774:	200054cc 	.word	0x200054cc
 8006778:	20004ff4 	.word	0x20004ff4

0800677c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006786:	4b21      	ldr	r3, [pc, #132]	; (800680c <prvAddCurrentTaskToDelayedList+0x90>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800678c:	4b20      	ldr	r3, [pc, #128]	; (8006810 <prvAddCurrentTaskToDelayedList+0x94>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	3304      	adds	r3, #4
 8006792:	4618      	mov	r0, r3
 8006794:	f7fe fbe2 	bl	8004f5c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800679e:	d10a      	bne.n	80067b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d007      	beq.n	80067b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067a6:	4b1a      	ldr	r3, [pc, #104]	; (8006810 <prvAddCurrentTaskToDelayedList+0x94>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	3304      	adds	r3, #4
 80067ac:	4619      	mov	r1, r3
 80067ae:	4819      	ldr	r0, [pc, #100]	; (8006814 <prvAddCurrentTaskToDelayedList+0x98>)
 80067b0:	f7fe fb77 	bl	8004ea2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80067b4:	e026      	b.n	8006804 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4413      	add	r3, r2
 80067bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80067be:	4b14      	ldr	r3, [pc, #80]	; (8006810 <prvAddCurrentTaskToDelayedList+0x94>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68ba      	ldr	r2, [r7, #8]
 80067c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80067c6:	68ba      	ldr	r2, [r7, #8]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d209      	bcs.n	80067e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067ce:	4b12      	ldr	r3, [pc, #72]	; (8006818 <prvAddCurrentTaskToDelayedList+0x9c>)
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	4b0f      	ldr	r3, [pc, #60]	; (8006810 <prvAddCurrentTaskToDelayedList+0x94>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	3304      	adds	r3, #4
 80067d8:	4619      	mov	r1, r3
 80067da:	4610      	mov	r0, r2
 80067dc:	f7fe fb85 	bl	8004eea <vListInsert>
}
 80067e0:	e010      	b.n	8006804 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067e2:	4b0e      	ldr	r3, [pc, #56]	; (800681c <prvAddCurrentTaskToDelayedList+0xa0>)
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	4b0a      	ldr	r3, [pc, #40]	; (8006810 <prvAddCurrentTaskToDelayedList+0x94>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	3304      	adds	r3, #4
 80067ec:	4619      	mov	r1, r3
 80067ee:	4610      	mov	r0, r2
 80067f0:	f7fe fb7b 	bl	8004eea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80067f4:	4b0a      	ldr	r3, [pc, #40]	; (8006820 <prvAddCurrentTaskToDelayedList+0xa4>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d202      	bcs.n	8006804 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80067fe:	4a08      	ldr	r2, [pc, #32]	; (8006820 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	6013      	str	r3, [r2, #0]
}
 8006804:	bf00      	nop
 8006806:	3710      	adds	r7, #16
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	200054c8 	.word	0x200054c8
 8006810:	20004ff0 	.word	0x20004ff0
 8006814:	200054b0 	.word	0x200054b0
 8006818:	20005480 	.word	0x20005480
 800681c:	2000547c 	.word	0x2000547c
 8006820:	200054e4 	.word	0x200054e4

08006824 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b08a      	sub	sp, #40	; 0x28
 8006828:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800682a:	2300      	movs	r3, #0
 800682c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800682e:	f000 fb07 	bl	8006e40 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006832:	4b1c      	ldr	r3, [pc, #112]	; (80068a4 <xTimerCreateTimerTask+0x80>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d021      	beq.n	800687e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800683a:	2300      	movs	r3, #0
 800683c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800683e:	2300      	movs	r3, #0
 8006840:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006842:	1d3a      	adds	r2, r7, #4
 8006844:	f107 0108 	add.w	r1, r7, #8
 8006848:	f107 030c 	add.w	r3, r7, #12
 800684c:	4618      	mov	r0, r3
 800684e:	f7fe fae1 	bl	8004e14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006852:	6879      	ldr	r1, [r7, #4]
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	9202      	str	r2, [sp, #8]
 800685a:	9301      	str	r3, [sp, #4]
 800685c:	2302      	movs	r3, #2
 800685e:	9300      	str	r3, [sp, #0]
 8006860:	2300      	movs	r3, #0
 8006862:	460a      	mov	r2, r1
 8006864:	4910      	ldr	r1, [pc, #64]	; (80068a8 <xTimerCreateTimerTask+0x84>)
 8006866:	4811      	ldr	r0, [pc, #68]	; (80068ac <xTimerCreateTimerTask+0x88>)
 8006868:	f7ff f88e 	bl	8005988 <xTaskCreateStatic>
 800686c:	4603      	mov	r3, r0
 800686e:	4a10      	ldr	r2, [pc, #64]	; (80068b0 <xTimerCreateTimerTask+0x8c>)
 8006870:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006872:	4b0f      	ldr	r3, [pc, #60]	; (80068b0 <xTimerCreateTimerTask+0x8c>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d001      	beq.n	800687e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800687a:	2301      	movs	r3, #1
 800687c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d10a      	bne.n	800689a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006888:	f383 8811 	msr	BASEPRI, r3
 800688c:	f3bf 8f6f 	isb	sy
 8006890:	f3bf 8f4f 	dsb	sy
 8006894:	613b      	str	r3, [r7, #16]
}
 8006896:	bf00      	nop
 8006898:	e7fe      	b.n	8006898 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800689a:	697b      	ldr	r3, [r7, #20]
}
 800689c:	4618      	mov	r0, r3
 800689e:	3718      	adds	r7, #24
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	20005520 	.word	0x20005520
 80068a8:	08016294 	.word	0x08016294
 80068ac:	080069e9 	.word	0x080069e9
 80068b0:	20005524 	.word	0x20005524

080068b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b08a      	sub	sp, #40	; 0x28
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	60b9      	str	r1, [r7, #8]
 80068be:	607a      	str	r2, [r7, #4]
 80068c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80068c2:	2300      	movs	r3, #0
 80068c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10a      	bne.n	80068e2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80068cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d0:	f383 8811 	msr	BASEPRI, r3
 80068d4:	f3bf 8f6f 	isb	sy
 80068d8:	f3bf 8f4f 	dsb	sy
 80068dc:	623b      	str	r3, [r7, #32]
}
 80068de:	bf00      	nop
 80068e0:	e7fe      	b.n	80068e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80068e2:	4b1a      	ldr	r3, [pc, #104]	; (800694c <xTimerGenericCommand+0x98>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d02a      	beq.n	8006940 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	2b05      	cmp	r3, #5
 80068fa:	dc18      	bgt.n	800692e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80068fc:	f7ff feb2 	bl	8006664 <xTaskGetSchedulerState>
 8006900:	4603      	mov	r3, r0
 8006902:	2b02      	cmp	r3, #2
 8006904:	d109      	bne.n	800691a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006906:	4b11      	ldr	r3, [pc, #68]	; (800694c <xTimerGenericCommand+0x98>)
 8006908:	6818      	ldr	r0, [r3, #0]
 800690a:	f107 0110 	add.w	r1, r7, #16
 800690e:	2300      	movs	r3, #0
 8006910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006912:	f7fe fc51 	bl	80051b8 <xQueueGenericSend>
 8006916:	6278      	str	r0, [r7, #36]	; 0x24
 8006918:	e012      	b.n	8006940 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800691a:	4b0c      	ldr	r3, [pc, #48]	; (800694c <xTimerGenericCommand+0x98>)
 800691c:	6818      	ldr	r0, [r3, #0]
 800691e:	f107 0110 	add.w	r1, r7, #16
 8006922:	2300      	movs	r3, #0
 8006924:	2200      	movs	r2, #0
 8006926:	f7fe fc47 	bl	80051b8 <xQueueGenericSend>
 800692a:	6278      	str	r0, [r7, #36]	; 0x24
 800692c:	e008      	b.n	8006940 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800692e:	4b07      	ldr	r3, [pc, #28]	; (800694c <xTimerGenericCommand+0x98>)
 8006930:	6818      	ldr	r0, [r3, #0]
 8006932:	f107 0110 	add.w	r1, r7, #16
 8006936:	2300      	movs	r3, #0
 8006938:	683a      	ldr	r2, [r7, #0]
 800693a:	f7fe fd3b 	bl	80053b4 <xQueueGenericSendFromISR>
 800693e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006942:	4618      	mov	r0, r3
 8006944:	3728      	adds	r7, #40	; 0x28
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	20005520 	.word	0x20005520

08006950 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b088      	sub	sp, #32
 8006954:	af02      	add	r7, sp, #8
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800695a:	4b22      	ldr	r3, [pc, #136]	; (80069e4 <prvProcessExpiredTimer+0x94>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	3304      	adds	r3, #4
 8006968:	4618      	mov	r0, r3
 800696a:	f7fe faf7 	bl	8004f5c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006974:	f003 0304 	and.w	r3, r3, #4
 8006978:	2b00      	cmp	r3, #0
 800697a:	d022      	beq.n	80069c2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	699a      	ldr	r2, [r3, #24]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	18d1      	adds	r1, r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	683a      	ldr	r2, [r7, #0]
 8006988:	6978      	ldr	r0, [r7, #20]
 800698a:	f000 f8d1 	bl	8006b30 <prvInsertTimerInActiveList>
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d01f      	beq.n	80069d4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006994:	2300      	movs	r3, #0
 8006996:	9300      	str	r3, [sp, #0]
 8006998:	2300      	movs	r3, #0
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	2100      	movs	r1, #0
 800699e:	6978      	ldr	r0, [r7, #20]
 80069a0:	f7ff ff88 	bl	80068b4 <xTimerGenericCommand>
 80069a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d113      	bne.n	80069d4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80069ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b0:	f383 8811 	msr	BASEPRI, r3
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	60fb      	str	r3, [r7, #12]
}
 80069be:	bf00      	nop
 80069c0:	e7fe      	b.n	80069c0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069c8:	f023 0301 	bic.w	r3, r3, #1
 80069cc:	b2da      	uxtb	r2, r3
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	6a1b      	ldr	r3, [r3, #32]
 80069d8:	6978      	ldr	r0, [r7, #20]
 80069da:	4798      	blx	r3
}
 80069dc:	bf00      	nop
 80069de:	3718      	adds	r7, #24
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	20005518 	.word	0x20005518

080069e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069f0:	f107 0308 	add.w	r3, r7, #8
 80069f4:	4618      	mov	r0, r3
 80069f6:	f000 f857 	bl	8006aa8 <prvGetNextExpireTime>
 80069fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	4619      	mov	r1, r3
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f000 f803 	bl	8006a0c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006a06:	f000 f8d5 	bl	8006bb4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a0a:	e7f1      	b.n	80069f0 <prvTimerTask+0x8>

08006a0c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006a16:	f7ff fa13 	bl	8005e40 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a1a:	f107 0308 	add.w	r3, r7, #8
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 f866 	bl	8006af0 <prvSampleTimeNow>
 8006a24:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d130      	bne.n	8006a8e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d10a      	bne.n	8006a48 <prvProcessTimerOrBlockTask+0x3c>
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d806      	bhi.n	8006a48 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006a3a:	f7ff fa0f 	bl	8005e5c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006a3e:	68f9      	ldr	r1, [r7, #12]
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f7ff ff85 	bl	8006950 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006a46:	e024      	b.n	8006a92 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d008      	beq.n	8006a60 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006a4e:	4b13      	ldr	r3, [pc, #76]	; (8006a9c <prvProcessTimerOrBlockTask+0x90>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d101      	bne.n	8006a5c <prvProcessTimerOrBlockTask+0x50>
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e000      	b.n	8006a5e <prvProcessTimerOrBlockTask+0x52>
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006a60:	4b0f      	ldr	r3, [pc, #60]	; (8006aa0 <prvProcessTimerOrBlockTask+0x94>)
 8006a62:	6818      	ldr	r0, [r3, #0]
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	683a      	ldr	r2, [r7, #0]
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	f7fe ff57 	bl	8005920 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006a72:	f7ff f9f3 	bl	8005e5c <xTaskResumeAll>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d10a      	bne.n	8006a92 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006a7c:	4b09      	ldr	r3, [pc, #36]	; (8006aa4 <prvProcessTimerOrBlockTask+0x98>)
 8006a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a82:	601a      	str	r2, [r3, #0]
 8006a84:	f3bf 8f4f 	dsb	sy
 8006a88:	f3bf 8f6f 	isb	sy
}
 8006a8c:	e001      	b.n	8006a92 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006a8e:	f7ff f9e5 	bl	8005e5c <xTaskResumeAll>
}
 8006a92:	bf00      	nop
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	2000551c 	.word	0x2000551c
 8006aa0:	20005520 	.word	0x20005520
 8006aa4:	e000ed04 	.word	0xe000ed04

08006aa8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006ab0:	4b0e      	ldr	r3, [pc, #56]	; (8006aec <prvGetNextExpireTime+0x44>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d101      	bne.n	8006abe <prvGetNextExpireTime+0x16>
 8006aba:	2201      	movs	r2, #1
 8006abc:	e000      	b.n	8006ac0 <prvGetNextExpireTime+0x18>
 8006abe:	2200      	movs	r2, #0
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d105      	bne.n	8006ad8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006acc:	4b07      	ldr	r3, [pc, #28]	; (8006aec <prvGetNextExpireTime+0x44>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	60fb      	str	r3, [r7, #12]
 8006ad6:	e001      	b.n	8006adc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006adc:	68fb      	ldr	r3, [r7, #12]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	20005518 	.word	0x20005518

08006af0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006af8:	f7ff fa4e 	bl	8005f98 <xTaskGetTickCount>
 8006afc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006afe:	4b0b      	ldr	r3, [pc, #44]	; (8006b2c <prvSampleTimeNow+0x3c>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d205      	bcs.n	8006b14 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006b08:	f000 f936 	bl	8006d78 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	601a      	str	r2, [r3, #0]
 8006b12:	e002      	b.n	8006b1a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006b1a:	4a04      	ldr	r2, [pc, #16]	; (8006b2c <prvSampleTimeNow+0x3c>)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006b20:	68fb      	ldr	r3, [r7, #12]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	20005528 	.word	0x20005528

08006b30 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b086      	sub	sp, #24
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	607a      	str	r2, [r7, #4]
 8006b3c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	68ba      	ldr	r2, [r7, #8]
 8006b46:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006b4e:	68ba      	ldr	r2, [r7, #8]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d812      	bhi.n	8006b7c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	1ad2      	subs	r2, r2, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d302      	bcc.n	8006b6a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006b64:	2301      	movs	r3, #1
 8006b66:	617b      	str	r3, [r7, #20]
 8006b68:	e01b      	b.n	8006ba2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b6a:	4b10      	ldr	r3, [pc, #64]	; (8006bac <prvInsertTimerInActiveList+0x7c>)
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	3304      	adds	r3, #4
 8006b72:	4619      	mov	r1, r3
 8006b74:	4610      	mov	r0, r2
 8006b76:	f7fe f9b8 	bl	8004eea <vListInsert>
 8006b7a:	e012      	b.n	8006ba2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d206      	bcs.n	8006b92 <prvInsertTimerInActiveList+0x62>
 8006b84:	68ba      	ldr	r2, [r7, #8]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d302      	bcc.n	8006b92 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	617b      	str	r3, [r7, #20]
 8006b90:	e007      	b.n	8006ba2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b92:	4b07      	ldr	r3, [pc, #28]	; (8006bb0 <prvInsertTimerInActiveList+0x80>)
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	3304      	adds	r3, #4
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	4610      	mov	r0, r2
 8006b9e:	f7fe f9a4 	bl	8004eea <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006ba2:	697b      	ldr	r3, [r7, #20]
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3718      	adds	r7, #24
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	2000551c 	.word	0x2000551c
 8006bb0:	20005518 	.word	0x20005518

08006bb4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b08e      	sub	sp, #56	; 0x38
 8006bb8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006bba:	e0ca      	b.n	8006d52 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	da18      	bge.n	8006bf4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006bc2:	1d3b      	adds	r3, r7, #4
 8006bc4:	3304      	adds	r3, #4
 8006bc6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10a      	bne.n	8006be4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd2:	f383 8811 	msr	BASEPRI, r3
 8006bd6:	f3bf 8f6f 	isb	sy
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	61fb      	str	r3, [r7, #28]
}
 8006be0:	bf00      	nop
 8006be2:	e7fe      	b.n	8006be2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bea:	6850      	ldr	r0, [r2, #4]
 8006bec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bee:	6892      	ldr	r2, [r2, #8]
 8006bf0:	4611      	mov	r1, r2
 8006bf2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	f2c0 80ab 	blt.w	8006d52 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c02:	695b      	ldr	r3, [r3, #20]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d004      	beq.n	8006c12 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0a:	3304      	adds	r3, #4
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f7fe f9a5 	bl	8004f5c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c12:	463b      	mov	r3, r7
 8006c14:	4618      	mov	r0, r3
 8006c16:	f7ff ff6b 	bl	8006af0 <prvSampleTimeNow>
 8006c1a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b09      	cmp	r3, #9
 8006c20:	f200 8096 	bhi.w	8006d50 <prvProcessReceivedCommands+0x19c>
 8006c24:	a201      	add	r2, pc, #4	; (adr r2, 8006c2c <prvProcessReceivedCommands+0x78>)
 8006c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2a:	bf00      	nop
 8006c2c:	08006c55 	.word	0x08006c55
 8006c30:	08006c55 	.word	0x08006c55
 8006c34:	08006c55 	.word	0x08006c55
 8006c38:	08006cc9 	.word	0x08006cc9
 8006c3c:	08006cdd 	.word	0x08006cdd
 8006c40:	08006d27 	.word	0x08006d27
 8006c44:	08006c55 	.word	0x08006c55
 8006c48:	08006c55 	.word	0x08006c55
 8006c4c:	08006cc9 	.word	0x08006cc9
 8006c50:	08006cdd 	.word	0x08006cdd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c5a:	f043 0301 	orr.w	r3, r3, #1
 8006c5e:	b2da      	uxtb	r2, r3
 8006c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c66:	68ba      	ldr	r2, [r7, #8]
 8006c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6a:	699b      	ldr	r3, [r3, #24]
 8006c6c:	18d1      	adds	r1, r2, r3
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c74:	f7ff ff5c 	bl	8006b30 <prvInsertTimerInActiveList>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d069      	beq.n	8006d52 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c84:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c8c:	f003 0304 	and.w	r3, r3, #4
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d05e      	beq.n	8006d52 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006c94:	68ba      	ldr	r2, [r7, #8]
 8006c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	441a      	add	r2, r3
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	9300      	str	r3, [sp, #0]
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ca6:	f7ff fe05 	bl	80068b4 <xTimerGenericCommand>
 8006caa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006cac:	6a3b      	ldr	r3, [r7, #32]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d14f      	bne.n	8006d52 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb6:	f383 8811 	msr	BASEPRI, r3
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	61bb      	str	r3, [r7, #24]
}
 8006cc4:	bf00      	nop
 8006cc6:	e7fe      	b.n	8006cc6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cce:	f023 0301 	bic.w	r3, r3, #1
 8006cd2:	b2da      	uxtb	r2, r3
 8006cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006cda:	e03a      	b.n	8006d52 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ce2:	f043 0301 	orr.w	r3, r3, #1
 8006ce6:	b2da      	uxtb	r2, r3
 8006ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006cee:	68ba      	ldr	r2, [r7, #8]
 8006cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf6:	699b      	ldr	r3, [r3, #24]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d10a      	bne.n	8006d12 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d00:	f383 8811 	msr	BASEPRI, r3
 8006d04:	f3bf 8f6f 	isb	sy
 8006d08:	f3bf 8f4f 	dsb	sy
 8006d0c:	617b      	str	r3, [r7, #20]
}
 8006d0e:	bf00      	nop
 8006d10:	e7fe      	b.n	8006d10 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d14:	699a      	ldr	r2, [r3, #24]
 8006d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d18:	18d1      	adds	r1, r2, r3
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d20:	f7ff ff06 	bl	8006b30 <prvInsertTimerInActiveList>
					break;
 8006d24:	e015      	b.n	8006d52 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d2c:	f003 0302 	and.w	r3, r3, #2
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d103      	bne.n	8006d3c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006d34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d36:	f000 fbdb 	bl	80074f0 <vPortFree>
 8006d3a:	e00a      	b.n	8006d52 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d42:	f023 0301 	bic.w	r3, r3, #1
 8006d46:	b2da      	uxtb	r2, r3
 8006d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006d4e:	e000      	b.n	8006d52 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006d50:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d52:	4b08      	ldr	r3, [pc, #32]	; (8006d74 <prvProcessReceivedCommands+0x1c0>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	1d39      	adds	r1, r7, #4
 8006d58:	2200      	movs	r2, #0
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7fe fbc6 	bl	80054ec <xQueueReceive>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	f47f af2a 	bne.w	8006bbc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006d68:	bf00      	nop
 8006d6a:	bf00      	nop
 8006d6c:	3730      	adds	r7, #48	; 0x30
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	20005520 	.word	0x20005520

08006d78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b088      	sub	sp, #32
 8006d7c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d7e:	e048      	b.n	8006e12 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d80:	4b2d      	ldr	r3, [pc, #180]	; (8006e38 <prvSwitchTimerLists+0xc0>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d8a:	4b2b      	ldr	r3, [pc, #172]	; (8006e38 <prvSwitchTimerLists+0xc0>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	3304      	adds	r3, #4
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7fe f8df 	bl	8004f5c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6a1b      	ldr	r3, [r3, #32]
 8006da2:	68f8      	ldr	r0, [r7, #12]
 8006da4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006dac:	f003 0304 	and.w	r3, r3, #4
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d02e      	beq.n	8006e12 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	4413      	add	r3, r2
 8006dbc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006dbe:	68ba      	ldr	r2, [r7, #8]
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d90e      	bls.n	8006de4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	68ba      	ldr	r2, [r7, #8]
 8006dca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006dd2:	4b19      	ldr	r3, [pc, #100]	; (8006e38 <prvSwitchTimerLists+0xc0>)
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	3304      	adds	r3, #4
 8006dda:	4619      	mov	r1, r3
 8006ddc:	4610      	mov	r0, r2
 8006dde:	f7fe f884 	bl	8004eea <vListInsert>
 8006de2:	e016      	b.n	8006e12 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006de4:	2300      	movs	r3, #0
 8006de6:	9300      	str	r3, [sp, #0]
 8006de8:	2300      	movs	r3, #0
 8006dea:	693a      	ldr	r2, [r7, #16]
 8006dec:	2100      	movs	r1, #0
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	f7ff fd60 	bl	80068b4 <xTimerGenericCommand>
 8006df4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10a      	bne.n	8006e12 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e00:	f383 8811 	msr	BASEPRI, r3
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	603b      	str	r3, [r7, #0]
}
 8006e0e:	bf00      	nop
 8006e10:	e7fe      	b.n	8006e10 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e12:	4b09      	ldr	r3, [pc, #36]	; (8006e38 <prvSwitchTimerLists+0xc0>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d1b1      	bne.n	8006d80 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006e1c:	4b06      	ldr	r3, [pc, #24]	; (8006e38 <prvSwitchTimerLists+0xc0>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006e22:	4b06      	ldr	r3, [pc, #24]	; (8006e3c <prvSwitchTimerLists+0xc4>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a04      	ldr	r2, [pc, #16]	; (8006e38 <prvSwitchTimerLists+0xc0>)
 8006e28:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006e2a:	4a04      	ldr	r2, [pc, #16]	; (8006e3c <prvSwitchTimerLists+0xc4>)
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	6013      	str	r3, [r2, #0]
}
 8006e30:	bf00      	nop
 8006e32:	3718      	adds	r7, #24
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	20005518 	.word	0x20005518
 8006e3c:	2000551c 	.word	0x2000551c

08006e40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006e46:	f000 f965 	bl	8007114 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006e4a:	4b15      	ldr	r3, [pc, #84]	; (8006ea0 <prvCheckForValidListAndQueue+0x60>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d120      	bne.n	8006e94 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006e52:	4814      	ldr	r0, [pc, #80]	; (8006ea4 <prvCheckForValidListAndQueue+0x64>)
 8006e54:	f7fd fff8 	bl	8004e48 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006e58:	4813      	ldr	r0, [pc, #76]	; (8006ea8 <prvCheckForValidListAndQueue+0x68>)
 8006e5a:	f7fd fff5 	bl	8004e48 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006e5e:	4b13      	ldr	r3, [pc, #76]	; (8006eac <prvCheckForValidListAndQueue+0x6c>)
 8006e60:	4a10      	ldr	r2, [pc, #64]	; (8006ea4 <prvCheckForValidListAndQueue+0x64>)
 8006e62:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006e64:	4b12      	ldr	r3, [pc, #72]	; (8006eb0 <prvCheckForValidListAndQueue+0x70>)
 8006e66:	4a10      	ldr	r2, [pc, #64]	; (8006ea8 <prvCheckForValidListAndQueue+0x68>)
 8006e68:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	9300      	str	r3, [sp, #0]
 8006e6e:	4b11      	ldr	r3, [pc, #68]	; (8006eb4 <prvCheckForValidListAndQueue+0x74>)
 8006e70:	4a11      	ldr	r2, [pc, #68]	; (8006eb8 <prvCheckForValidListAndQueue+0x78>)
 8006e72:	2110      	movs	r1, #16
 8006e74:	200a      	movs	r0, #10
 8006e76:	f7fe f903 	bl	8005080 <xQueueGenericCreateStatic>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	4a08      	ldr	r2, [pc, #32]	; (8006ea0 <prvCheckForValidListAndQueue+0x60>)
 8006e7e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006e80:	4b07      	ldr	r3, [pc, #28]	; (8006ea0 <prvCheckForValidListAndQueue+0x60>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d005      	beq.n	8006e94 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006e88:	4b05      	ldr	r3, [pc, #20]	; (8006ea0 <prvCheckForValidListAndQueue+0x60>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	490b      	ldr	r1, [pc, #44]	; (8006ebc <prvCheckForValidListAndQueue+0x7c>)
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7fe fd1c 	bl	80058cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e94:	f000 f96e 	bl	8007174 <vPortExitCritical>
}
 8006e98:	bf00      	nop
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	20005520 	.word	0x20005520
 8006ea4:	200054f0 	.word	0x200054f0
 8006ea8:	20005504 	.word	0x20005504
 8006eac:	20005518 	.word	0x20005518
 8006eb0:	2000551c 	.word	0x2000551c
 8006eb4:	200055cc 	.word	0x200055cc
 8006eb8:	2000552c 	.word	0x2000552c
 8006ebc:	0801629c 	.word	0x0801629c

08006ec0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	3b04      	subs	r3, #4
 8006ed0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006ed8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	3b04      	subs	r3, #4
 8006ede:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	f023 0201 	bic.w	r2, r3, #1
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	3b04      	subs	r3, #4
 8006eee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ef0:	4a0c      	ldr	r2, [pc, #48]	; (8006f24 <pxPortInitialiseStack+0x64>)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	3b14      	subs	r3, #20
 8006efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	3b04      	subs	r3, #4
 8006f06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f06f 0202 	mvn.w	r2, #2
 8006f0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	3b20      	subs	r3, #32
 8006f14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f16:	68fb      	ldr	r3, [r7, #12]
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3714      	adds	r7, #20
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr
 8006f24:	08006f29 	.word	0x08006f29

08006f28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f32:	4b12      	ldr	r3, [pc, #72]	; (8006f7c <prvTaskExitError+0x54>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f3a:	d00a      	beq.n	8006f52 <prvTaskExitError+0x2a>
	__asm volatile
 8006f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f40:	f383 8811 	msr	BASEPRI, r3
 8006f44:	f3bf 8f6f 	isb	sy
 8006f48:	f3bf 8f4f 	dsb	sy
 8006f4c:	60fb      	str	r3, [r7, #12]
}
 8006f4e:	bf00      	nop
 8006f50:	e7fe      	b.n	8006f50 <prvTaskExitError+0x28>
	__asm volatile
 8006f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f56:	f383 8811 	msr	BASEPRI, r3
 8006f5a:	f3bf 8f6f 	isb	sy
 8006f5e:	f3bf 8f4f 	dsb	sy
 8006f62:	60bb      	str	r3, [r7, #8]
}
 8006f64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f66:	bf00      	nop
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d0fc      	beq.n	8006f68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f6e:	bf00      	nop
 8006f70:	bf00      	nop
 8006f72:	3714      	adds	r7, #20
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr
 8006f7c:	20000010 	.word	0x20000010

08006f80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f80:	4b07      	ldr	r3, [pc, #28]	; (8006fa0 <pxCurrentTCBConst2>)
 8006f82:	6819      	ldr	r1, [r3, #0]
 8006f84:	6808      	ldr	r0, [r1, #0]
 8006f86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f8a:	f380 8809 	msr	PSP, r0
 8006f8e:	f3bf 8f6f 	isb	sy
 8006f92:	f04f 0000 	mov.w	r0, #0
 8006f96:	f380 8811 	msr	BASEPRI, r0
 8006f9a:	4770      	bx	lr
 8006f9c:	f3af 8000 	nop.w

08006fa0 <pxCurrentTCBConst2>:
 8006fa0:	20004ff0 	.word	0x20004ff0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006fa4:	bf00      	nop
 8006fa6:	bf00      	nop

08006fa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006fa8:	4808      	ldr	r0, [pc, #32]	; (8006fcc <prvPortStartFirstTask+0x24>)
 8006faa:	6800      	ldr	r0, [r0, #0]
 8006fac:	6800      	ldr	r0, [r0, #0]
 8006fae:	f380 8808 	msr	MSP, r0
 8006fb2:	f04f 0000 	mov.w	r0, #0
 8006fb6:	f380 8814 	msr	CONTROL, r0
 8006fba:	b662      	cpsie	i
 8006fbc:	b661      	cpsie	f
 8006fbe:	f3bf 8f4f 	dsb	sy
 8006fc2:	f3bf 8f6f 	isb	sy
 8006fc6:	df00      	svc	0
 8006fc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006fca:	bf00      	nop
 8006fcc:	e000ed08 	.word	0xe000ed08

08006fd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006fd6:	4b46      	ldr	r3, [pc, #280]	; (80070f0 <xPortStartScheduler+0x120>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a46      	ldr	r2, [pc, #280]	; (80070f4 <xPortStartScheduler+0x124>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d10a      	bne.n	8006ff6 <xPortStartScheduler+0x26>
	__asm volatile
 8006fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe4:	f383 8811 	msr	BASEPRI, r3
 8006fe8:	f3bf 8f6f 	isb	sy
 8006fec:	f3bf 8f4f 	dsb	sy
 8006ff0:	613b      	str	r3, [r7, #16]
}
 8006ff2:	bf00      	nop
 8006ff4:	e7fe      	b.n	8006ff4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006ff6:	4b3e      	ldr	r3, [pc, #248]	; (80070f0 <xPortStartScheduler+0x120>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a3f      	ldr	r2, [pc, #252]	; (80070f8 <xPortStartScheduler+0x128>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d10a      	bne.n	8007016 <xPortStartScheduler+0x46>
	__asm volatile
 8007000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	60fb      	str	r3, [r7, #12]
}
 8007012:	bf00      	nop
 8007014:	e7fe      	b.n	8007014 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007016:	4b39      	ldr	r3, [pc, #228]	; (80070fc <xPortStartScheduler+0x12c>)
 8007018:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	b2db      	uxtb	r3, r3
 8007020:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	22ff      	movs	r2, #255	; 0xff
 8007026:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	b2db      	uxtb	r3, r3
 800702e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007030:	78fb      	ldrb	r3, [r7, #3]
 8007032:	b2db      	uxtb	r3, r3
 8007034:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007038:	b2da      	uxtb	r2, r3
 800703a:	4b31      	ldr	r3, [pc, #196]	; (8007100 <xPortStartScheduler+0x130>)
 800703c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800703e:	4b31      	ldr	r3, [pc, #196]	; (8007104 <xPortStartScheduler+0x134>)
 8007040:	2207      	movs	r2, #7
 8007042:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007044:	e009      	b.n	800705a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007046:	4b2f      	ldr	r3, [pc, #188]	; (8007104 <xPortStartScheduler+0x134>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	3b01      	subs	r3, #1
 800704c:	4a2d      	ldr	r2, [pc, #180]	; (8007104 <xPortStartScheduler+0x134>)
 800704e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007050:	78fb      	ldrb	r3, [r7, #3]
 8007052:	b2db      	uxtb	r3, r3
 8007054:	005b      	lsls	r3, r3, #1
 8007056:	b2db      	uxtb	r3, r3
 8007058:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800705a:	78fb      	ldrb	r3, [r7, #3]
 800705c:	b2db      	uxtb	r3, r3
 800705e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007062:	2b80      	cmp	r3, #128	; 0x80
 8007064:	d0ef      	beq.n	8007046 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007066:	4b27      	ldr	r3, [pc, #156]	; (8007104 <xPortStartScheduler+0x134>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f1c3 0307 	rsb	r3, r3, #7
 800706e:	2b04      	cmp	r3, #4
 8007070:	d00a      	beq.n	8007088 <xPortStartScheduler+0xb8>
	__asm volatile
 8007072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007076:	f383 8811 	msr	BASEPRI, r3
 800707a:	f3bf 8f6f 	isb	sy
 800707e:	f3bf 8f4f 	dsb	sy
 8007082:	60bb      	str	r3, [r7, #8]
}
 8007084:	bf00      	nop
 8007086:	e7fe      	b.n	8007086 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007088:	4b1e      	ldr	r3, [pc, #120]	; (8007104 <xPortStartScheduler+0x134>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	021b      	lsls	r3, r3, #8
 800708e:	4a1d      	ldr	r2, [pc, #116]	; (8007104 <xPortStartScheduler+0x134>)
 8007090:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007092:	4b1c      	ldr	r3, [pc, #112]	; (8007104 <xPortStartScheduler+0x134>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800709a:	4a1a      	ldr	r2, [pc, #104]	; (8007104 <xPortStartScheduler+0x134>)
 800709c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	b2da      	uxtb	r2, r3
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80070a6:	4b18      	ldr	r3, [pc, #96]	; (8007108 <xPortStartScheduler+0x138>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a17      	ldr	r2, [pc, #92]	; (8007108 <xPortStartScheduler+0x138>)
 80070ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80070b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80070b2:	4b15      	ldr	r3, [pc, #84]	; (8007108 <xPortStartScheduler+0x138>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a14      	ldr	r2, [pc, #80]	; (8007108 <xPortStartScheduler+0x138>)
 80070b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80070bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80070be:	f000 f8dd 	bl	800727c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80070c2:	4b12      	ldr	r3, [pc, #72]	; (800710c <xPortStartScheduler+0x13c>)
 80070c4:	2200      	movs	r2, #0
 80070c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80070c8:	f000 f8fc 	bl	80072c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80070cc:	4b10      	ldr	r3, [pc, #64]	; (8007110 <xPortStartScheduler+0x140>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a0f      	ldr	r2, [pc, #60]	; (8007110 <xPortStartScheduler+0x140>)
 80070d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80070d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80070d8:	f7ff ff66 	bl	8006fa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80070dc:	f7ff f826 	bl	800612c <vTaskSwitchContext>
	prvTaskExitError();
 80070e0:	f7ff ff22 	bl	8006f28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3718      	adds	r7, #24
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	e000ed00 	.word	0xe000ed00
 80070f4:	410fc271 	.word	0x410fc271
 80070f8:	410fc270 	.word	0x410fc270
 80070fc:	e000e400 	.word	0xe000e400
 8007100:	2000561c 	.word	0x2000561c
 8007104:	20005620 	.word	0x20005620
 8007108:	e000ed20 	.word	0xe000ed20
 800710c:	20000010 	.word	0x20000010
 8007110:	e000ef34 	.word	0xe000ef34

08007114 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
	__asm volatile
 800711a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711e:	f383 8811 	msr	BASEPRI, r3
 8007122:	f3bf 8f6f 	isb	sy
 8007126:	f3bf 8f4f 	dsb	sy
 800712a:	607b      	str	r3, [r7, #4]
}
 800712c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800712e:	4b0f      	ldr	r3, [pc, #60]	; (800716c <vPortEnterCritical+0x58>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	3301      	adds	r3, #1
 8007134:	4a0d      	ldr	r2, [pc, #52]	; (800716c <vPortEnterCritical+0x58>)
 8007136:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007138:	4b0c      	ldr	r3, [pc, #48]	; (800716c <vPortEnterCritical+0x58>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d10f      	bne.n	8007160 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007140:	4b0b      	ldr	r3, [pc, #44]	; (8007170 <vPortEnterCritical+0x5c>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	b2db      	uxtb	r3, r3
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00a      	beq.n	8007160 <vPortEnterCritical+0x4c>
	__asm volatile
 800714a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714e:	f383 8811 	msr	BASEPRI, r3
 8007152:	f3bf 8f6f 	isb	sy
 8007156:	f3bf 8f4f 	dsb	sy
 800715a:	603b      	str	r3, [r7, #0]
}
 800715c:	bf00      	nop
 800715e:	e7fe      	b.n	800715e <vPortEnterCritical+0x4a>
	}
}
 8007160:	bf00      	nop
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr
 800716c:	20000010 	.word	0x20000010
 8007170:	e000ed04 	.word	0xe000ed04

08007174 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800717a:	4b12      	ldr	r3, [pc, #72]	; (80071c4 <vPortExitCritical+0x50>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d10a      	bne.n	8007198 <vPortExitCritical+0x24>
	__asm volatile
 8007182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007186:	f383 8811 	msr	BASEPRI, r3
 800718a:	f3bf 8f6f 	isb	sy
 800718e:	f3bf 8f4f 	dsb	sy
 8007192:	607b      	str	r3, [r7, #4]
}
 8007194:	bf00      	nop
 8007196:	e7fe      	b.n	8007196 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007198:	4b0a      	ldr	r3, [pc, #40]	; (80071c4 <vPortExitCritical+0x50>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	3b01      	subs	r3, #1
 800719e:	4a09      	ldr	r2, [pc, #36]	; (80071c4 <vPortExitCritical+0x50>)
 80071a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80071a2:	4b08      	ldr	r3, [pc, #32]	; (80071c4 <vPortExitCritical+0x50>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d105      	bne.n	80071b6 <vPortExitCritical+0x42>
 80071aa:	2300      	movs	r3, #0
 80071ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	f383 8811 	msr	BASEPRI, r3
}
 80071b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80071b6:	bf00      	nop
 80071b8:	370c      	adds	r7, #12
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	20000010 	.word	0x20000010
	...

080071d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80071d0:	f3ef 8009 	mrs	r0, PSP
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	4b15      	ldr	r3, [pc, #84]	; (8007230 <pxCurrentTCBConst>)
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	f01e 0f10 	tst.w	lr, #16
 80071e0:	bf08      	it	eq
 80071e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80071e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ea:	6010      	str	r0, [r2, #0]
 80071ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80071f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80071f4:	f380 8811 	msr	BASEPRI, r0
 80071f8:	f3bf 8f4f 	dsb	sy
 80071fc:	f3bf 8f6f 	isb	sy
 8007200:	f7fe ff94 	bl	800612c <vTaskSwitchContext>
 8007204:	f04f 0000 	mov.w	r0, #0
 8007208:	f380 8811 	msr	BASEPRI, r0
 800720c:	bc09      	pop	{r0, r3}
 800720e:	6819      	ldr	r1, [r3, #0]
 8007210:	6808      	ldr	r0, [r1, #0]
 8007212:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007216:	f01e 0f10 	tst.w	lr, #16
 800721a:	bf08      	it	eq
 800721c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007220:	f380 8809 	msr	PSP, r0
 8007224:	f3bf 8f6f 	isb	sy
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	f3af 8000 	nop.w

08007230 <pxCurrentTCBConst>:
 8007230:	20004ff0 	.word	0x20004ff0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007234:	bf00      	nop
 8007236:	bf00      	nop

08007238 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
	__asm volatile
 800723e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007242:	f383 8811 	msr	BASEPRI, r3
 8007246:	f3bf 8f6f 	isb	sy
 800724a:	f3bf 8f4f 	dsb	sy
 800724e:	607b      	str	r3, [r7, #4]
}
 8007250:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007252:	f7fe feb1 	bl	8005fb8 <xTaskIncrementTick>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d003      	beq.n	8007264 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800725c:	4b06      	ldr	r3, [pc, #24]	; (8007278 <xPortSysTickHandler+0x40>)
 800725e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007262:	601a      	str	r2, [r3, #0]
 8007264:	2300      	movs	r3, #0
 8007266:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	f383 8811 	msr	BASEPRI, r3
}
 800726e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007270:	bf00      	nop
 8007272:	3708      	adds	r7, #8
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	e000ed04 	.word	0xe000ed04

0800727c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800727c:	b480      	push	{r7}
 800727e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007280:	4b0b      	ldr	r3, [pc, #44]	; (80072b0 <vPortSetupTimerInterrupt+0x34>)
 8007282:	2200      	movs	r2, #0
 8007284:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007286:	4b0b      	ldr	r3, [pc, #44]	; (80072b4 <vPortSetupTimerInterrupt+0x38>)
 8007288:	2200      	movs	r2, #0
 800728a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800728c:	4b0a      	ldr	r3, [pc, #40]	; (80072b8 <vPortSetupTimerInterrupt+0x3c>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a0a      	ldr	r2, [pc, #40]	; (80072bc <vPortSetupTimerInterrupt+0x40>)
 8007292:	fba2 2303 	umull	r2, r3, r2, r3
 8007296:	099b      	lsrs	r3, r3, #6
 8007298:	4a09      	ldr	r2, [pc, #36]	; (80072c0 <vPortSetupTimerInterrupt+0x44>)
 800729a:	3b01      	subs	r3, #1
 800729c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800729e:	4b04      	ldr	r3, [pc, #16]	; (80072b0 <vPortSetupTimerInterrupt+0x34>)
 80072a0:	2207      	movs	r2, #7
 80072a2:	601a      	str	r2, [r3, #0]
}
 80072a4:	bf00      	nop
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	e000e010 	.word	0xe000e010
 80072b4:	e000e018 	.word	0xe000e018
 80072b8:	20000004 	.word	0x20000004
 80072bc:	10624dd3 	.word	0x10624dd3
 80072c0:	e000e014 	.word	0xe000e014

080072c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80072c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80072d4 <vPortEnableVFP+0x10>
 80072c8:	6801      	ldr	r1, [r0, #0]
 80072ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80072ce:	6001      	str	r1, [r0, #0]
 80072d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80072d2:	bf00      	nop
 80072d4:	e000ed88 	.word	0xe000ed88

080072d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80072de:	f3ef 8305 	mrs	r3, IPSR
 80072e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2b0f      	cmp	r3, #15
 80072e8:	d914      	bls.n	8007314 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80072ea:	4a17      	ldr	r2, [pc, #92]	; (8007348 <vPortValidateInterruptPriority+0x70>)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	4413      	add	r3, r2
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80072f4:	4b15      	ldr	r3, [pc, #84]	; (800734c <vPortValidateInterruptPriority+0x74>)
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	7afa      	ldrb	r2, [r7, #11]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d20a      	bcs.n	8007314 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80072fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	607b      	str	r3, [r7, #4]
}
 8007310:	bf00      	nop
 8007312:	e7fe      	b.n	8007312 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007314:	4b0e      	ldr	r3, [pc, #56]	; (8007350 <vPortValidateInterruptPriority+0x78>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800731c:	4b0d      	ldr	r3, [pc, #52]	; (8007354 <vPortValidateInterruptPriority+0x7c>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	429a      	cmp	r2, r3
 8007322:	d90a      	bls.n	800733a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007328:	f383 8811 	msr	BASEPRI, r3
 800732c:	f3bf 8f6f 	isb	sy
 8007330:	f3bf 8f4f 	dsb	sy
 8007334:	603b      	str	r3, [r7, #0]
}
 8007336:	bf00      	nop
 8007338:	e7fe      	b.n	8007338 <vPortValidateInterruptPriority+0x60>
	}
 800733a:	bf00      	nop
 800733c:	3714      	adds	r7, #20
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	e000e3f0 	.word	0xe000e3f0
 800734c:	2000561c 	.word	0x2000561c
 8007350:	e000ed0c 	.word	0xe000ed0c
 8007354:	20005620 	.word	0x20005620

08007358 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b08a      	sub	sp, #40	; 0x28
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007360:	2300      	movs	r3, #0
 8007362:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007364:	f7fe fd6c 	bl	8005e40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007368:	4b5b      	ldr	r3, [pc, #364]	; (80074d8 <pvPortMalloc+0x180>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d101      	bne.n	8007374 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007370:	f000 f920 	bl	80075b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007374:	4b59      	ldr	r3, [pc, #356]	; (80074dc <pvPortMalloc+0x184>)
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4013      	ands	r3, r2
 800737c:	2b00      	cmp	r3, #0
 800737e:	f040 8093 	bne.w	80074a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d01d      	beq.n	80073c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007388:	2208      	movs	r2, #8
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4413      	add	r3, r2
 800738e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f003 0307 	and.w	r3, r3, #7
 8007396:	2b00      	cmp	r3, #0
 8007398:	d014      	beq.n	80073c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f023 0307 	bic.w	r3, r3, #7
 80073a0:	3308      	adds	r3, #8
 80073a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f003 0307 	and.w	r3, r3, #7
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00a      	beq.n	80073c4 <pvPortMalloc+0x6c>
	__asm volatile
 80073ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b2:	f383 8811 	msr	BASEPRI, r3
 80073b6:	f3bf 8f6f 	isb	sy
 80073ba:	f3bf 8f4f 	dsb	sy
 80073be:	617b      	str	r3, [r7, #20]
}
 80073c0:	bf00      	nop
 80073c2:	e7fe      	b.n	80073c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d06e      	beq.n	80074a8 <pvPortMalloc+0x150>
 80073ca:	4b45      	ldr	r3, [pc, #276]	; (80074e0 <pvPortMalloc+0x188>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d869      	bhi.n	80074a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80073d4:	4b43      	ldr	r3, [pc, #268]	; (80074e4 <pvPortMalloc+0x18c>)
 80073d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80073d8:	4b42      	ldr	r3, [pc, #264]	; (80074e4 <pvPortMalloc+0x18c>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073de:	e004      	b.n	80073ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80073e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80073e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d903      	bls.n	80073fc <pvPortMalloc+0xa4>
 80073f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d1f1      	bne.n	80073e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80073fc:	4b36      	ldr	r3, [pc, #216]	; (80074d8 <pvPortMalloc+0x180>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007402:	429a      	cmp	r2, r3
 8007404:	d050      	beq.n	80074a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007406:	6a3b      	ldr	r3, [r7, #32]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2208      	movs	r2, #8
 800740c:	4413      	add	r3, r2
 800740e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	6a3b      	ldr	r3, [r7, #32]
 8007416:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741a:	685a      	ldr	r2, [r3, #4]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	1ad2      	subs	r2, r2, r3
 8007420:	2308      	movs	r3, #8
 8007422:	005b      	lsls	r3, r3, #1
 8007424:	429a      	cmp	r2, r3
 8007426:	d91f      	bls.n	8007468 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4413      	add	r3, r2
 800742e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	f003 0307 	and.w	r3, r3, #7
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00a      	beq.n	8007450 <pvPortMalloc+0xf8>
	__asm volatile
 800743a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743e:	f383 8811 	msr	BASEPRI, r3
 8007442:	f3bf 8f6f 	isb	sy
 8007446:	f3bf 8f4f 	dsb	sy
 800744a:	613b      	str	r3, [r7, #16]
}
 800744c:	bf00      	nop
 800744e:	e7fe      	b.n	800744e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007452:	685a      	ldr	r2, [r3, #4]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	1ad2      	subs	r2, r2, r3
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800745c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007462:	69b8      	ldr	r0, [r7, #24]
 8007464:	f000 f908 	bl	8007678 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007468:	4b1d      	ldr	r3, [pc, #116]	; (80074e0 <pvPortMalloc+0x188>)
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	4a1b      	ldr	r2, [pc, #108]	; (80074e0 <pvPortMalloc+0x188>)
 8007474:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007476:	4b1a      	ldr	r3, [pc, #104]	; (80074e0 <pvPortMalloc+0x188>)
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	4b1b      	ldr	r3, [pc, #108]	; (80074e8 <pvPortMalloc+0x190>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	429a      	cmp	r2, r3
 8007480:	d203      	bcs.n	800748a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007482:	4b17      	ldr	r3, [pc, #92]	; (80074e0 <pvPortMalloc+0x188>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a18      	ldr	r2, [pc, #96]	; (80074e8 <pvPortMalloc+0x190>)
 8007488:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800748a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748c:	685a      	ldr	r2, [r3, #4]
 800748e:	4b13      	ldr	r3, [pc, #76]	; (80074dc <pvPortMalloc+0x184>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	431a      	orrs	r2, r3
 8007494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007496:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749a:	2200      	movs	r2, #0
 800749c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800749e:	4b13      	ldr	r3, [pc, #76]	; (80074ec <pvPortMalloc+0x194>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	3301      	adds	r3, #1
 80074a4:	4a11      	ldr	r2, [pc, #68]	; (80074ec <pvPortMalloc+0x194>)
 80074a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80074a8:	f7fe fcd8 	bl	8005e5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	f003 0307 	and.w	r3, r3, #7
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00a      	beq.n	80074cc <pvPortMalloc+0x174>
	__asm volatile
 80074b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ba:	f383 8811 	msr	BASEPRI, r3
 80074be:	f3bf 8f6f 	isb	sy
 80074c2:	f3bf 8f4f 	dsb	sy
 80074c6:	60fb      	str	r3, [r7, #12]
}
 80074c8:	bf00      	nop
 80074ca:	e7fe      	b.n	80074ca <pvPortMalloc+0x172>
	return pvReturn;
 80074cc:	69fb      	ldr	r3, [r7, #28]
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3728      	adds	r7, #40	; 0x28
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	2000922c 	.word	0x2000922c
 80074dc:	20009240 	.word	0x20009240
 80074e0:	20009230 	.word	0x20009230
 80074e4:	20009224 	.word	0x20009224
 80074e8:	20009234 	.word	0x20009234
 80074ec:	20009238 	.word	0x20009238

080074f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d04d      	beq.n	800759e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007502:	2308      	movs	r3, #8
 8007504:	425b      	negs	r3, r3
 8007506:	697a      	ldr	r2, [r7, #20]
 8007508:	4413      	add	r3, r2
 800750a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	685a      	ldr	r2, [r3, #4]
 8007514:	4b24      	ldr	r3, [pc, #144]	; (80075a8 <vPortFree+0xb8>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4013      	ands	r3, r2
 800751a:	2b00      	cmp	r3, #0
 800751c:	d10a      	bne.n	8007534 <vPortFree+0x44>
	__asm volatile
 800751e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007522:	f383 8811 	msr	BASEPRI, r3
 8007526:	f3bf 8f6f 	isb	sy
 800752a:	f3bf 8f4f 	dsb	sy
 800752e:	60fb      	str	r3, [r7, #12]
}
 8007530:	bf00      	nop
 8007532:	e7fe      	b.n	8007532 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00a      	beq.n	8007552 <vPortFree+0x62>
	__asm volatile
 800753c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007540:	f383 8811 	msr	BASEPRI, r3
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	60bb      	str	r3, [r7, #8]
}
 800754e:	bf00      	nop
 8007550:	e7fe      	b.n	8007550 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	685a      	ldr	r2, [r3, #4]
 8007556:	4b14      	ldr	r3, [pc, #80]	; (80075a8 <vPortFree+0xb8>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4013      	ands	r3, r2
 800755c:	2b00      	cmp	r3, #0
 800755e:	d01e      	beq.n	800759e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d11a      	bne.n	800759e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	685a      	ldr	r2, [r3, #4]
 800756c:	4b0e      	ldr	r3, [pc, #56]	; (80075a8 <vPortFree+0xb8>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	43db      	mvns	r3, r3
 8007572:	401a      	ands	r2, r3
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007578:	f7fe fc62 	bl	8005e40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	685a      	ldr	r2, [r3, #4]
 8007580:	4b0a      	ldr	r3, [pc, #40]	; (80075ac <vPortFree+0xbc>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4413      	add	r3, r2
 8007586:	4a09      	ldr	r2, [pc, #36]	; (80075ac <vPortFree+0xbc>)
 8007588:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800758a:	6938      	ldr	r0, [r7, #16]
 800758c:	f000 f874 	bl	8007678 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007590:	4b07      	ldr	r3, [pc, #28]	; (80075b0 <vPortFree+0xc0>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	3301      	adds	r3, #1
 8007596:	4a06      	ldr	r2, [pc, #24]	; (80075b0 <vPortFree+0xc0>)
 8007598:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800759a:	f7fe fc5f 	bl	8005e5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800759e:	bf00      	nop
 80075a0:	3718      	adds	r7, #24
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	20009240 	.word	0x20009240
 80075ac:	20009230 	.word	0x20009230
 80075b0:	2000923c 	.word	0x2000923c

080075b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80075ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80075be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80075c0:	4b27      	ldr	r3, [pc, #156]	; (8007660 <prvHeapInit+0xac>)
 80075c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f003 0307 	and.w	r3, r3, #7
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00c      	beq.n	80075e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	3307      	adds	r3, #7
 80075d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f023 0307 	bic.w	r3, r3, #7
 80075da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	4a1f      	ldr	r2, [pc, #124]	; (8007660 <prvHeapInit+0xac>)
 80075e4:	4413      	add	r3, r2
 80075e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80075ec:	4a1d      	ldr	r2, [pc, #116]	; (8007664 <prvHeapInit+0xb0>)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80075f2:	4b1c      	ldr	r3, [pc, #112]	; (8007664 <prvHeapInit+0xb0>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	4413      	add	r3, r2
 80075fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007600:	2208      	movs	r2, #8
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	1a9b      	subs	r3, r3, r2
 8007606:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f023 0307 	bic.w	r3, r3, #7
 800760e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	4a15      	ldr	r2, [pc, #84]	; (8007668 <prvHeapInit+0xb4>)
 8007614:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007616:	4b14      	ldr	r3, [pc, #80]	; (8007668 <prvHeapInit+0xb4>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2200      	movs	r2, #0
 800761c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800761e:	4b12      	ldr	r3, [pc, #72]	; (8007668 <prvHeapInit+0xb4>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2200      	movs	r2, #0
 8007624:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	1ad2      	subs	r2, r2, r3
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007634:	4b0c      	ldr	r3, [pc, #48]	; (8007668 <prvHeapInit+0xb4>)
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	4a0a      	ldr	r2, [pc, #40]	; (800766c <prvHeapInit+0xb8>)
 8007642:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	4a09      	ldr	r2, [pc, #36]	; (8007670 <prvHeapInit+0xbc>)
 800764a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800764c:	4b09      	ldr	r3, [pc, #36]	; (8007674 <prvHeapInit+0xc0>)
 800764e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007652:	601a      	str	r2, [r3, #0]
}
 8007654:	bf00      	nop
 8007656:	3714      	adds	r7, #20
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr
 8007660:	20005624 	.word	0x20005624
 8007664:	20009224 	.word	0x20009224
 8007668:	2000922c 	.word	0x2000922c
 800766c:	20009234 	.word	0x20009234
 8007670:	20009230 	.word	0x20009230
 8007674:	20009240 	.word	0x20009240

08007678 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007680:	4b28      	ldr	r3, [pc, #160]	; (8007724 <prvInsertBlockIntoFreeList+0xac>)
 8007682:	60fb      	str	r3, [r7, #12]
 8007684:	e002      	b.n	800768c <prvInsertBlockIntoFreeList+0x14>
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	60fb      	str	r3, [r7, #12]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	429a      	cmp	r2, r3
 8007694:	d8f7      	bhi.n	8007686 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	4413      	add	r3, r2
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d108      	bne.n	80076ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	685a      	ldr	r2, [r3, #4]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	441a      	add	r2, r3
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	68ba      	ldr	r2, [r7, #8]
 80076c4:	441a      	add	r2, r3
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d118      	bne.n	8007700 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	4b15      	ldr	r3, [pc, #84]	; (8007728 <prvInsertBlockIntoFreeList+0xb0>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d00d      	beq.n	80076f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	685a      	ldr	r2, [r3, #4]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	441a      	add	r2, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	601a      	str	r2, [r3, #0]
 80076f4:	e008      	b.n	8007708 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80076f6:	4b0c      	ldr	r3, [pc, #48]	; (8007728 <prvInsertBlockIntoFreeList+0xb0>)
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	601a      	str	r2, [r3, #0]
 80076fe:	e003      	b.n	8007708 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	429a      	cmp	r2, r3
 800770e:	d002      	beq.n	8007716 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007716:	bf00      	nop
 8007718:	3714      	adds	r7, #20
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop
 8007724:	20009224 	.word	0x20009224
 8007728:	2000922c 	.word	0x2000922c

0800772c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800772c:	4b04      	ldr	r3, [pc, #16]	; (8007740 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	b10a      	cbz	r2, 8007736 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 8007732:	4803      	ldr	r0, [pc, #12]	; (8007740 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 8007734:	4770      	bx	lr
 8007736:	4a03      	ldr	r2, [pc, #12]	; (8007744 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 8007738:	4801      	ldr	r0, [pc, #4]	; (8007740 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800773a:	6812      	ldr	r2, [r2, #0]
 800773c:	601a      	str	r2, [r3, #0]
 800773e:	4770      	bx	lr
 8007740:	2000001c 	.word	0x2000001c
 8007744:	200001d0 	.word	0x200001d0

08007748 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8007748:	4a02      	ldr	r2, [pc, #8]	; (8007754 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800774a:	4b03      	ldr	r3, [pc, #12]	; (8007758 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800774c:	6812      	ldr	r2, [r2, #0]
 800774e:	601a      	str	r2, [r3, #0]
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	200001d0 	.word	0x200001d0
 8007758:	2000001c 	.word	0x2000001c

0800775c <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800775c:	f003 bd06 	b.w	800b16c <geometry_msgs__msg__Twist__init>

08007760 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 8007760:	f003 bd28 	b.w	800b1b4 <geometry_msgs__msg__Twist__fini>

08007764 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8007764:	b510      	push	{r4, lr}
 8007766:	f000 f819 	bl	800779c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800776a:	4c07      	ldr	r4, [pc, #28]	; (8007788 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800776c:	60e0      	str	r0, [r4, #12]
 800776e:	f000 f815 	bl	800779c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8007772:	4b06      	ldr	r3, [pc, #24]	; (800778c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 8007774:	64a0      	str	r0, [r4, #72]	; 0x48
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	b10a      	cbz	r2, 800777e <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800777a:	4804      	ldr	r0, [pc, #16]	; (800778c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800777c:	bd10      	pop	{r4, pc}
 800777e:	4a04      	ldr	r2, [pc, #16]	; (8007790 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 8007780:	4802      	ldr	r0, [pc, #8]	; (800778c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 8007782:	6812      	ldr	r2, [r2, #0]
 8007784:	601a      	str	r2, [r3, #0]
 8007786:	bd10      	pop	{r4, pc}
 8007788:	20000028 	.word	0x20000028
 800778c:	200000a0 	.word	0x200000a0
 8007790:	200001d4 	.word	0x200001d4

08007794 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 8007794:	f003 bd1a 	b.w	800b1cc <geometry_msgs__msg__Vector3__init>

08007798 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 8007798:	f003 bd1c 	b.w	800b1d4 <geometry_msgs__msg__Vector3__fini>

0800779c <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800779c:	4b04      	ldr	r3, [pc, #16]	; (80077b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	b10a      	cbz	r2, 80077a6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 80077a2:	4803      	ldr	r0, [pc, #12]	; (80077b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 80077a4:	4770      	bx	lr
 80077a6:	4a03      	ldr	r2, [pc, #12]	; (80077b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 80077a8:	4801      	ldr	r0, [pc, #4]	; (80077b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 80077aa:	6812      	ldr	r2, [r2, #0]
 80077ac:	601a      	str	r2, [r3, #0]
 80077ae:	4770      	bx	lr
 80077b0:	20000160 	.word	0x20000160
 80077b4:	200001d4 	.word	0x200001d4

080077b8 <get_serialized_size_geometry_msgs__msg__Twist>:
 80077b8:	b570      	push	{r4, r5, r6, lr}
 80077ba:	4604      	mov	r4, r0
 80077bc:	b148      	cbz	r0, 80077d2 <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 80077be:	460d      	mov	r5, r1
 80077c0:	f000 f860 	bl	8007884 <get_serialized_size_geometry_msgs__msg__Vector3>
 80077c4:	4606      	mov	r6, r0
 80077c6:	1829      	adds	r1, r5, r0
 80077c8:	f104 0018 	add.w	r0, r4, #24
 80077cc:	f000 f85a 	bl	8007884 <get_serialized_size_geometry_msgs__msg__Vector3>
 80077d0:	4430      	add	r0, r6
 80077d2:	bd70      	pop	{r4, r5, r6, pc}

080077d4 <_Twist__cdr_deserialize>:
 80077d4:	b570      	push	{r4, r5, r6, lr}
 80077d6:	460c      	mov	r4, r1
 80077d8:	b189      	cbz	r1, 80077fe <_Twist__cdr_deserialize+0x2a>
 80077da:	4605      	mov	r5, r0
 80077dc:	f000 f8de 	bl	800799c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 80077e0:	6843      	ldr	r3, [r0, #4]
 80077e2:	4621      	mov	r1, r4
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	4628      	mov	r0, r5
 80077e8:	4798      	blx	r3
 80077ea:	f000 f8d7 	bl	800799c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 80077ee:	6843      	ldr	r3, [r0, #4]
 80077f0:	f104 0118 	add.w	r1, r4, #24
 80077f4:	4628      	mov	r0, r5
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80077fc:	4718      	bx	r3
 80077fe:	4608      	mov	r0, r1
 8007800:	bd70      	pop	{r4, r5, r6, pc}
 8007802:	bf00      	nop

08007804 <_Twist__cdr_serialize>:
 8007804:	b510      	push	{r4, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	9101      	str	r1, [sp, #4]
 800780a:	b190      	cbz	r0, 8007832 <_Twist__cdr_serialize+0x2e>
 800780c:	4604      	mov	r4, r0
 800780e:	f000 f8c5 	bl	800799c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8007812:	6843      	ldr	r3, [r0, #4]
 8007814:	9901      	ldr	r1, [sp, #4]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	4620      	mov	r0, r4
 800781a:	4798      	blx	r3
 800781c:	f000 f8be 	bl	800799c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8007820:	6843      	ldr	r3, [r0, #4]
 8007822:	9901      	ldr	r1, [sp, #4]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	f104 0018 	add.w	r0, r4, #24
 800782a:	b002      	add	sp, #8
 800782c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007830:	4718      	bx	r3
 8007832:	b002      	add	sp, #8
 8007834:	bd10      	pop	{r4, pc}
 8007836:	bf00      	nop

08007838 <_Twist__get_serialized_size>:
 8007838:	b538      	push	{r3, r4, r5, lr}
 800783a:	4604      	mov	r4, r0
 800783c:	b148      	cbz	r0, 8007852 <_Twist__get_serialized_size+0x1a>
 800783e:	2100      	movs	r1, #0
 8007840:	f000 f820 	bl	8007884 <get_serialized_size_geometry_msgs__msg__Vector3>
 8007844:	4605      	mov	r5, r0
 8007846:	4601      	mov	r1, r0
 8007848:	f104 0018 	add.w	r0, r4, #24
 800784c:	f000 f81a 	bl	8007884 <get_serialized_size_geometry_msgs__msg__Vector3>
 8007850:	4428      	add	r0, r5
 8007852:	bd38      	pop	{r3, r4, r5, pc}

08007854 <_Twist__max_serialized_size>:
 8007854:	b510      	push	{r4, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	2301      	movs	r3, #1
 800785a:	2100      	movs	r1, #0
 800785c:	f10d 0007 	add.w	r0, sp, #7
 8007860:	f88d 3007 	strb.w	r3, [sp, #7]
 8007864:	f000 f87e 	bl	8007964 <max_serialized_size_geometry_msgs__msg__Vector3>
 8007868:	4604      	mov	r4, r0
 800786a:	4601      	mov	r1, r0
 800786c:	f10d 0007 	add.w	r0, sp, #7
 8007870:	f000 f878 	bl	8007964 <max_serialized_size_geometry_msgs__msg__Vector3>
 8007874:	4420      	add	r0, r4
 8007876:	b002      	add	sp, #8
 8007878:	bd10      	pop	{r4, pc}
 800787a:	bf00      	nop

0800787c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800787c:	4800      	ldr	r0, [pc, #0]	; (8007880 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800787e:	4770      	bx	lr
 8007880:	2000016c 	.word	0x2000016c

08007884 <get_serialized_size_geometry_msgs__msg__Vector3>:
 8007884:	b1b8      	cbz	r0, 80078b6 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 8007886:	b538      	push	{r3, r4, r5, lr}
 8007888:	460d      	mov	r5, r1
 800788a:	4628      	mov	r0, r5
 800788c:	2108      	movs	r1, #8
 800788e:	f001 f9fd 	bl	8008c8c <ucdr_alignment>
 8007892:	f105 0308 	add.w	r3, r5, #8
 8007896:	181c      	adds	r4, r3, r0
 8007898:	2108      	movs	r1, #8
 800789a:	4620      	mov	r0, r4
 800789c:	f001 f9f6 	bl	8008c8c <ucdr_alignment>
 80078a0:	3008      	adds	r0, #8
 80078a2:	4404      	add	r4, r0
 80078a4:	2108      	movs	r1, #8
 80078a6:	4620      	mov	r0, r4
 80078a8:	f001 f9f0 	bl	8008c8c <ucdr_alignment>
 80078ac:	f1c5 0508 	rsb	r5, r5, #8
 80078b0:	4428      	add	r0, r5
 80078b2:	4420      	add	r0, r4
 80078b4:	bd38      	pop	{r3, r4, r5, pc}
 80078b6:	4770      	bx	lr

080078b8 <_Vector3__cdr_deserialize>:
 80078b8:	b538      	push	{r3, r4, r5, lr}
 80078ba:	460c      	mov	r4, r1
 80078bc:	b171      	cbz	r1, 80078dc <_Vector3__cdr_deserialize+0x24>
 80078be:	4605      	mov	r5, r0
 80078c0:	f001 f8c6 	bl	8008a50 <ucdr_deserialize_double>
 80078c4:	f104 0108 	add.w	r1, r4, #8
 80078c8:	4628      	mov	r0, r5
 80078ca:	f001 f8c1 	bl	8008a50 <ucdr_deserialize_double>
 80078ce:	f104 0110 	add.w	r1, r4, #16
 80078d2:	4628      	mov	r0, r5
 80078d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078d8:	f001 b8ba 	b.w	8008a50 <ucdr_deserialize_double>
 80078dc:	4608      	mov	r0, r1
 80078de:	bd38      	pop	{r3, r4, r5, pc}

080078e0 <_Vector3__cdr_serialize>:
 80078e0:	b198      	cbz	r0, 800790a <_Vector3__cdr_serialize+0x2a>
 80078e2:	b538      	push	{r3, r4, r5, lr}
 80078e4:	ed90 0b00 	vldr	d0, [r0]
 80078e8:	460d      	mov	r5, r1
 80078ea:	4604      	mov	r4, r0
 80078ec:	4608      	mov	r0, r1
 80078ee:	f000 ffdf 	bl	80088b0 <ucdr_serialize_double>
 80078f2:	ed94 0b02 	vldr	d0, [r4, #8]
 80078f6:	4628      	mov	r0, r5
 80078f8:	f000 ffda 	bl	80088b0 <ucdr_serialize_double>
 80078fc:	ed94 0b04 	vldr	d0, [r4, #16]
 8007900:	4628      	mov	r0, r5
 8007902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007906:	f000 bfd3 	b.w	80088b0 <ucdr_serialize_double>
 800790a:	4770      	bx	lr

0800790c <_Vector3__get_serialized_size>:
 800790c:	b198      	cbz	r0, 8007936 <_Vector3__get_serialized_size+0x2a>
 800790e:	b510      	push	{r4, lr}
 8007910:	2108      	movs	r1, #8
 8007912:	2000      	movs	r0, #0
 8007914:	f001 f9ba 	bl	8008c8c <ucdr_alignment>
 8007918:	f100 0408 	add.w	r4, r0, #8
 800791c:	2108      	movs	r1, #8
 800791e:	4620      	mov	r0, r4
 8007920:	f001 f9b4 	bl	8008c8c <ucdr_alignment>
 8007924:	3008      	adds	r0, #8
 8007926:	4404      	add	r4, r0
 8007928:	2108      	movs	r1, #8
 800792a:	4620      	mov	r0, r4
 800792c:	f001 f9ae 	bl	8008c8c <ucdr_alignment>
 8007930:	3008      	adds	r0, #8
 8007932:	4420      	add	r0, r4
 8007934:	bd10      	pop	{r4, pc}
 8007936:	4770      	bx	lr

08007938 <_Vector3__max_serialized_size>:
 8007938:	b538      	push	{r3, r4, r5, lr}
 800793a:	2108      	movs	r1, #8
 800793c:	2000      	movs	r0, #0
 800793e:	f001 f9a5 	bl	8008c8c <ucdr_alignment>
 8007942:	f100 0508 	add.w	r5, r0, #8
 8007946:	2108      	movs	r1, #8
 8007948:	4628      	mov	r0, r5
 800794a:	f001 f99f 	bl	8008c8c <ucdr_alignment>
 800794e:	f100 0408 	add.w	r4, r0, #8
 8007952:	442c      	add	r4, r5
 8007954:	2108      	movs	r1, #8
 8007956:	4620      	mov	r0, r4
 8007958:	f001 f998 	bl	8008c8c <ucdr_alignment>
 800795c:	3008      	adds	r0, #8
 800795e:	4420      	add	r0, r4
 8007960:	bd38      	pop	{r3, r4, r5, pc}
 8007962:	bf00      	nop

08007964 <max_serialized_size_geometry_msgs__msg__Vector3>:
 8007964:	b570      	push	{r4, r5, r6, lr}
 8007966:	2301      	movs	r3, #1
 8007968:	460c      	mov	r4, r1
 800796a:	7003      	strb	r3, [r0, #0]
 800796c:	2108      	movs	r1, #8
 800796e:	4620      	mov	r0, r4
 8007970:	f001 f98c 	bl	8008c8c <ucdr_alignment>
 8007974:	f104 0508 	add.w	r5, r4, #8
 8007978:	1946      	adds	r6, r0, r5
 800797a:	2108      	movs	r1, #8
 800797c:	4630      	mov	r0, r6
 800797e:	f001 f985 	bl	8008c8c <ucdr_alignment>
 8007982:	f100 0508 	add.w	r5, r0, #8
 8007986:	4435      	add	r5, r6
 8007988:	2108      	movs	r1, #8
 800798a:	4628      	mov	r0, r5
 800798c:	f001 f97e 	bl	8008c8c <ucdr_alignment>
 8007990:	f1c4 0408 	rsb	r4, r4, #8
 8007994:	4420      	add	r0, r4
 8007996:	4428      	add	r0, r5
 8007998:	bd70      	pop	{r4, r5, r6, pc}
 800799a:	bf00      	nop

0800799c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800799c:	4800      	ldr	r0, [pc, #0]	; (80079a0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800799e:	4770      	bx	lr
 80079a0:	20000194 	.word	0x20000194

080079a4 <ucdr_serialize_bool>:
 80079a4:	b538      	push	{r3, r4, r5, lr}
 80079a6:	460d      	mov	r5, r1
 80079a8:	2101      	movs	r1, #1
 80079aa:	4604      	mov	r4, r0
 80079ac:	f001 f922 	bl	8008bf4 <ucdr_check_final_buffer_behavior>
 80079b0:	b148      	cbz	r0, 80079c6 <ucdr_serialize_bool+0x22>
 80079b2:	68a3      	ldr	r3, [r4, #8]
 80079b4:	701d      	strb	r5, [r3, #0]
 80079b6:	68a2      	ldr	r2, [r4, #8]
 80079b8:	6923      	ldr	r3, [r4, #16]
 80079ba:	2101      	movs	r1, #1
 80079bc:	440a      	add	r2, r1
 80079be:	440b      	add	r3, r1
 80079c0:	60a2      	str	r2, [r4, #8]
 80079c2:	6123      	str	r3, [r4, #16]
 80079c4:	7561      	strb	r1, [r4, #21]
 80079c6:	7da0      	ldrb	r0, [r4, #22]
 80079c8:	f080 0001 	eor.w	r0, r0, #1
 80079cc:	bd38      	pop	{r3, r4, r5, pc}
 80079ce:	bf00      	nop

080079d0 <ucdr_deserialize_bool>:
 80079d0:	b538      	push	{r3, r4, r5, lr}
 80079d2:	460d      	mov	r5, r1
 80079d4:	2101      	movs	r1, #1
 80079d6:	4604      	mov	r4, r0
 80079d8:	f001 f90c 	bl	8008bf4 <ucdr_check_final_buffer_behavior>
 80079dc:	b160      	cbz	r0, 80079f8 <ucdr_deserialize_bool+0x28>
 80079de:	68a2      	ldr	r2, [r4, #8]
 80079e0:	6923      	ldr	r3, [r4, #16]
 80079e2:	f812 1b01 	ldrb.w	r1, [r2], #1
 80079e6:	3900      	subs	r1, #0
 80079e8:	bf18      	it	ne
 80079ea:	2101      	movne	r1, #1
 80079ec:	7029      	strb	r1, [r5, #0]
 80079ee:	3301      	adds	r3, #1
 80079f0:	2101      	movs	r1, #1
 80079f2:	60a2      	str	r2, [r4, #8]
 80079f4:	6123      	str	r3, [r4, #16]
 80079f6:	7561      	strb	r1, [r4, #21]
 80079f8:	7da0      	ldrb	r0, [r4, #22]
 80079fa:	f080 0001 	eor.w	r0, r0, #1
 80079fe:	bd38      	pop	{r3, r4, r5, pc}

08007a00 <ucdr_serialize_uint8_t>:
 8007a00:	b538      	push	{r3, r4, r5, lr}
 8007a02:	460d      	mov	r5, r1
 8007a04:	2101      	movs	r1, #1
 8007a06:	4604      	mov	r4, r0
 8007a08:	f001 f8f4 	bl	8008bf4 <ucdr_check_final_buffer_behavior>
 8007a0c:	b148      	cbz	r0, 8007a22 <ucdr_serialize_uint8_t+0x22>
 8007a0e:	68a3      	ldr	r3, [r4, #8]
 8007a10:	701d      	strb	r5, [r3, #0]
 8007a12:	68a2      	ldr	r2, [r4, #8]
 8007a14:	6923      	ldr	r3, [r4, #16]
 8007a16:	2101      	movs	r1, #1
 8007a18:	440a      	add	r2, r1
 8007a1a:	440b      	add	r3, r1
 8007a1c:	60a2      	str	r2, [r4, #8]
 8007a1e:	6123      	str	r3, [r4, #16]
 8007a20:	7561      	strb	r1, [r4, #21]
 8007a22:	7da0      	ldrb	r0, [r4, #22]
 8007a24:	f080 0001 	eor.w	r0, r0, #1
 8007a28:	bd38      	pop	{r3, r4, r5, pc}
 8007a2a:	bf00      	nop

08007a2c <ucdr_deserialize_uint8_t>:
 8007a2c:	b538      	push	{r3, r4, r5, lr}
 8007a2e:	460d      	mov	r5, r1
 8007a30:	2101      	movs	r1, #1
 8007a32:	4604      	mov	r4, r0
 8007a34:	f001 f8de 	bl	8008bf4 <ucdr_check_final_buffer_behavior>
 8007a38:	b150      	cbz	r0, 8007a50 <ucdr_deserialize_uint8_t+0x24>
 8007a3a:	68a3      	ldr	r3, [r4, #8]
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	702b      	strb	r3, [r5, #0]
 8007a40:	68a2      	ldr	r2, [r4, #8]
 8007a42:	6923      	ldr	r3, [r4, #16]
 8007a44:	2101      	movs	r1, #1
 8007a46:	440a      	add	r2, r1
 8007a48:	440b      	add	r3, r1
 8007a4a:	60a2      	str	r2, [r4, #8]
 8007a4c:	6123      	str	r3, [r4, #16]
 8007a4e:	7561      	strb	r1, [r4, #21]
 8007a50:	7da0      	ldrb	r0, [r4, #22]
 8007a52:	f080 0001 	eor.w	r0, r0, #1
 8007a56:	bd38      	pop	{r3, r4, r5, pc}

08007a58 <ucdr_serialize_uint16_t>:
 8007a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a5c:	b082      	sub	sp, #8
 8007a5e:	460b      	mov	r3, r1
 8007a60:	2102      	movs	r1, #2
 8007a62:	4604      	mov	r4, r0
 8007a64:	f8ad 3006 	strh.w	r3, [sp, #6]
 8007a68:	f001 f918 	bl	8008c9c <ucdr_buffer_alignment>
 8007a6c:	4601      	mov	r1, r0
 8007a6e:	4620      	mov	r0, r4
 8007a70:	7d67      	ldrb	r7, [r4, #21]
 8007a72:	f001 f957 	bl	8008d24 <ucdr_advance_buffer>
 8007a76:	2102      	movs	r1, #2
 8007a78:	4620      	mov	r0, r4
 8007a7a:	f001 f8af 	bl	8008bdc <ucdr_check_buffer_available_for>
 8007a7e:	bb78      	cbnz	r0, 8007ae0 <ucdr_serialize_uint16_t+0x88>
 8007a80:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8007a84:	42ab      	cmp	r3, r5
 8007a86:	d926      	bls.n	8007ad6 <ucdr_serialize_uint16_t+0x7e>
 8007a88:	1b5e      	subs	r6, r3, r5
 8007a8a:	60a3      	str	r3, [r4, #8]
 8007a8c:	6923      	ldr	r3, [r4, #16]
 8007a8e:	f1c6 0802 	rsb	r8, r6, #2
 8007a92:	4433      	add	r3, r6
 8007a94:	6123      	str	r3, [r4, #16]
 8007a96:	4641      	mov	r1, r8
 8007a98:	4620      	mov	r0, r4
 8007a9a:	f001 f8ab 	bl	8008bf4 <ucdr_check_final_buffer_behavior>
 8007a9e:	2800      	cmp	r0, #0
 8007aa0:	d03b      	beq.n	8007b1a <ucdr_serialize_uint16_t+0xc2>
 8007aa2:	7d23      	ldrb	r3, [r4, #20]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d04a      	beq.n	8007b3e <ucdr_serialize_uint16_t+0xe6>
 8007aa8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007aac:	702b      	strb	r3, [r5, #0]
 8007aae:	2e00      	cmp	r6, #0
 8007ab0:	d040      	beq.n	8007b34 <ucdr_serialize_uint16_t+0xdc>
 8007ab2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007ab6:	706b      	strb	r3, [r5, #1]
 8007ab8:	6923      	ldr	r3, [r4, #16]
 8007aba:	68a2      	ldr	r2, [r4, #8]
 8007abc:	7da0      	ldrb	r0, [r4, #22]
 8007abe:	3302      	adds	r3, #2
 8007ac0:	1b9e      	subs	r6, r3, r6
 8007ac2:	4442      	add	r2, r8
 8007ac4:	2302      	movs	r3, #2
 8007ac6:	f080 0001 	eor.w	r0, r0, #1
 8007aca:	60a2      	str	r2, [r4, #8]
 8007acc:	6126      	str	r6, [r4, #16]
 8007ace:	7563      	strb	r3, [r4, #21]
 8007ad0:	b002      	add	sp, #8
 8007ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ad6:	2102      	movs	r1, #2
 8007ad8:	4620      	mov	r0, r4
 8007ada:	f001 f88b 	bl	8008bf4 <ucdr_check_final_buffer_behavior>
 8007ade:	b190      	cbz	r0, 8007b06 <ucdr_serialize_uint16_t+0xae>
 8007ae0:	7d23      	ldrb	r3, [r4, #20]
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	68a3      	ldr	r3, [r4, #8]
 8007ae6:	d014      	beq.n	8007b12 <ucdr_serialize_uint16_t+0xba>
 8007ae8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8007aec:	701a      	strb	r2, [r3, #0]
 8007aee:	68a3      	ldr	r3, [r4, #8]
 8007af0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007af4:	705a      	strb	r2, [r3, #1]
 8007af6:	68a2      	ldr	r2, [r4, #8]
 8007af8:	6923      	ldr	r3, [r4, #16]
 8007afa:	3202      	adds	r2, #2
 8007afc:	3302      	adds	r3, #2
 8007afe:	2102      	movs	r1, #2
 8007b00:	60a2      	str	r2, [r4, #8]
 8007b02:	6123      	str	r3, [r4, #16]
 8007b04:	7561      	strb	r1, [r4, #21]
 8007b06:	7da0      	ldrb	r0, [r4, #22]
 8007b08:	f080 0001 	eor.w	r0, r0, #1
 8007b0c:	b002      	add	sp, #8
 8007b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b12:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007b16:	801a      	strh	r2, [r3, #0]
 8007b18:	e7ed      	b.n	8007af6 <ucdr_serialize_uint16_t+0x9e>
 8007b1a:	68a2      	ldr	r2, [r4, #8]
 8007b1c:	6923      	ldr	r3, [r4, #16]
 8007b1e:	7da0      	ldrb	r0, [r4, #22]
 8007b20:	7567      	strb	r7, [r4, #21]
 8007b22:	1b92      	subs	r2, r2, r6
 8007b24:	1b9b      	subs	r3, r3, r6
 8007b26:	f080 0001 	eor.w	r0, r0, #1
 8007b2a:	60a2      	str	r2, [r4, #8]
 8007b2c:	6123      	str	r3, [r4, #16]
 8007b2e:	b002      	add	sp, #8
 8007b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b34:	68a3      	ldr	r3, [r4, #8]
 8007b36:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007b3a:	701a      	strb	r2, [r3, #0]
 8007b3c:	e7bc      	b.n	8007ab8 <ucdr_serialize_uint16_t+0x60>
 8007b3e:	4628      	mov	r0, r5
 8007b40:	f10d 0506 	add.w	r5, sp, #6
 8007b44:	4629      	mov	r1, r5
 8007b46:	4632      	mov	r2, r6
 8007b48:	f00d fc6d 	bl	8015426 <memcpy>
 8007b4c:	68a0      	ldr	r0, [r4, #8]
 8007b4e:	4642      	mov	r2, r8
 8007b50:	19a9      	adds	r1, r5, r6
 8007b52:	f00d fc68 	bl	8015426 <memcpy>
 8007b56:	e7af      	b.n	8007ab8 <ucdr_serialize_uint16_t+0x60>

08007b58 <ucdr_serialize_endian_uint16_t>:
 8007b58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b5c:	b083      	sub	sp, #12
 8007b5e:	460d      	mov	r5, r1
 8007b60:	2102      	movs	r1, #2
 8007b62:	4604      	mov	r4, r0
 8007b64:	f8ad 2006 	strh.w	r2, [sp, #6]
 8007b68:	f001 f898 	bl	8008c9c <ucdr_buffer_alignment>
 8007b6c:	4601      	mov	r1, r0
 8007b6e:	4620      	mov	r0, r4
 8007b70:	f894 8015 	ldrb.w	r8, [r4, #21]
 8007b74:	f001 f8d6 	bl	8008d24 <ucdr_advance_buffer>
 8007b78:	2102      	movs	r1, #2
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	f001 f82e 	bl	8008bdc <ucdr_check_buffer_available_for>
 8007b80:	bb70      	cbnz	r0, 8007be0 <ucdr_serialize_endian_uint16_t+0x88>
 8007b82:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8007b86:	42be      	cmp	r6, r7
 8007b88:	d925      	bls.n	8007bd6 <ucdr_serialize_endian_uint16_t+0x7e>
 8007b8a:	6923      	ldr	r3, [r4, #16]
 8007b8c:	60a6      	str	r6, [r4, #8]
 8007b8e:	1bf6      	subs	r6, r6, r7
 8007b90:	4433      	add	r3, r6
 8007b92:	f1c6 0902 	rsb	r9, r6, #2
 8007b96:	6123      	str	r3, [r4, #16]
 8007b98:	4649      	mov	r1, r9
 8007b9a:	4620      	mov	r0, r4
 8007b9c:	f001 f82a 	bl	8008bf4 <ucdr_check_final_buffer_behavior>
 8007ba0:	2800      	cmp	r0, #0
 8007ba2:	d039      	beq.n	8007c18 <ucdr_serialize_endian_uint16_t+0xc0>
 8007ba4:	2d01      	cmp	r5, #1
 8007ba6:	d04a      	beq.n	8007c3e <ucdr_serialize_endian_uint16_t+0xe6>
 8007ba8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007bac:	703b      	strb	r3, [r7, #0]
 8007bae:	2e00      	cmp	r6, #0
 8007bb0:	d040      	beq.n	8007c34 <ucdr_serialize_endian_uint16_t+0xdc>
 8007bb2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007bb6:	707b      	strb	r3, [r7, #1]
 8007bb8:	6923      	ldr	r3, [r4, #16]
 8007bba:	68a2      	ldr	r2, [r4, #8]
 8007bbc:	7da0      	ldrb	r0, [r4, #22]
 8007bbe:	3302      	adds	r3, #2
 8007bc0:	444a      	add	r2, r9
 8007bc2:	1b9b      	subs	r3, r3, r6
 8007bc4:	2102      	movs	r1, #2
 8007bc6:	f080 0001 	eor.w	r0, r0, #1
 8007bca:	60a2      	str	r2, [r4, #8]
 8007bcc:	6123      	str	r3, [r4, #16]
 8007bce:	7561      	strb	r1, [r4, #21]
 8007bd0:	b003      	add	sp, #12
 8007bd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bd6:	2102      	movs	r1, #2
 8007bd8:	4620      	mov	r0, r4
 8007bda:	f001 f80b 	bl	8008bf4 <ucdr_check_final_buffer_behavior>
 8007bde:	b188      	cbz	r0, 8007c04 <ucdr_serialize_endian_uint16_t+0xac>
 8007be0:	2d01      	cmp	r5, #1
 8007be2:	68a3      	ldr	r3, [r4, #8]
 8007be4:	d014      	beq.n	8007c10 <ucdr_serialize_endian_uint16_t+0xb8>
 8007be6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8007bea:	701a      	strb	r2, [r3, #0]
 8007bec:	68a3      	ldr	r3, [r4, #8]
 8007bee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007bf2:	705a      	strb	r2, [r3, #1]
 8007bf4:	68a2      	ldr	r2, [r4, #8]
 8007bf6:	6923      	ldr	r3, [r4, #16]
 8007bf8:	3202      	adds	r2, #2
 8007bfa:	3302      	adds	r3, #2
 8007bfc:	2102      	movs	r1, #2
 8007bfe:	60a2      	str	r2, [r4, #8]
 8007c00:	6123      	str	r3, [r4, #16]
 8007c02:	7561      	strb	r1, [r4, #21]
 8007c04:	7da0      	ldrb	r0, [r4, #22]
 8007c06:	f080 0001 	eor.w	r0, r0, #1
 8007c0a:	b003      	add	sp, #12
 8007c0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c10:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007c14:	801a      	strh	r2, [r3, #0]
 8007c16:	e7ed      	b.n	8007bf4 <ucdr_serialize_endian_uint16_t+0x9c>
 8007c18:	68a2      	ldr	r2, [r4, #8]
 8007c1a:	6923      	ldr	r3, [r4, #16]
 8007c1c:	7da0      	ldrb	r0, [r4, #22]
 8007c1e:	f884 8015 	strb.w	r8, [r4, #21]
 8007c22:	1b92      	subs	r2, r2, r6
 8007c24:	1b9b      	subs	r3, r3, r6
 8007c26:	f080 0001 	eor.w	r0, r0, #1
 8007c2a:	60a2      	str	r2, [r4, #8]
 8007c2c:	6123      	str	r3, [r4, #16]
 8007c2e:	b003      	add	sp, #12
 8007c30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c34:	68a3      	ldr	r3, [r4, #8]
 8007c36:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007c3a:	701a      	strb	r2, [r3, #0]
 8007c3c:	e7bc      	b.n	8007bb8 <ucdr_serialize_endian_uint16_t+0x60>
 8007c3e:	f10d 0506 	add.w	r5, sp, #6
 8007c42:	4629      	mov	r1, r5
 8007c44:	4632      	mov	r2, r6
 8007c46:	4638      	mov	r0, r7
 8007c48:	f00d fbed 	bl	8015426 <memcpy>
 8007c4c:	68a0      	ldr	r0, [r4, #8]
 8007c4e:	464a      	mov	r2, r9
 8007c50:	19a9      	adds	r1, r5, r6
 8007c52:	f00d fbe8 	bl	8015426 <memcpy>
 8007c56:	e7af      	b.n	8007bb8 <ucdr_serialize_endian_uint16_t+0x60>

08007c58 <ucdr_deserialize_uint16_t>:
 8007c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c5c:	460d      	mov	r5, r1
 8007c5e:	2102      	movs	r1, #2
 8007c60:	4604      	mov	r4, r0
 8007c62:	f001 f81b 	bl	8008c9c <ucdr_buffer_alignment>
 8007c66:	4601      	mov	r1, r0
 8007c68:	4620      	mov	r0, r4
 8007c6a:	f894 8015 	ldrb.w	r8, [r4, #21]
 8007c6e:	f001 f859 	bl	8008d24 <ucdr_advance_buffer>
 8007c72:	2102      	movs	r1, #2
 8007c74:	4620      	mov	r0, r4
 8007c76:	f000 ffb1 	bl	8008bdc <ucdr_check_buffer_available_for>
 8007c7a:	bb60      	cbnz	r0, 8007cd6 <ucdr_deserialize_uint16_t+0x7e>
 8007c7c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8007c80:	42be      	cmp	r6, r7
 8007c82:	d923      	bls.n	8007ccc <ucdr_deserialize_uint16_t+0x74>
 8007c84:	6923      	ldr	r3, [r4, #16]
 8007c86:	60a6      	str	r6, [r4, #8]
 8007c88:	1bf6      	subs	r6, r6, r7
 8007c8a:	4433      	add	r3, r6
 8007c8c:	f1c6 0902 	rsb	r9, r6, #2
 8007c90:	6123      	str	r3, [r4, #16]
 8007c92:	4649      	mov	r1, r9
 8007c94:	4620      	mov	r0, r4
 8007c96:	f000 ffad 	bl	8008bf4 <ucdr_check_final_buffer_behavior>
 8007c9a:	2800      	cmp	r0, #0
 8007c9c:	d034      	beq.n	8007d08 <ucdr_deserialize_uint16_t+0xb0>
 8007c9e:	7d23      	ldrb	r3, [r4, #20]
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d042      	beq.n	8007d2a <ucdr_deserialize_uint16_t+0xd2>
 8007ca4:	787b      	ldrb	r3, [r7, #1]
 8007ca6:	702b      	strb	r3, [r5, #0]
 8007ca8:	2e00      	cmp	r6, #0
 8007caa:	d03a      	beq.n	8007d22 <ucdr_deserialize_uint16_t+0xca>
 8007cac:	783b      	ldrb	r3, [r7, #0]
 8007cae:	706b      	strb	r3, [r5, #1]
 8007cb0:	6923      	ldr	r3, [r4, #16]
 8007cb2:	68a2      	ldr	r2, [r4, #8]
 8007cb4:	7da0      	ldrb	r0, [r4, #22]
 8007cb6:	2102      	movs	r1, #2
 8007cb8:	3302      	adds	r3, #2
 8007cba:	444a      	add	r2, r9
 8007cbc:	1b9b      	subs	r3, r3, r6
 8007cbe:	7561      	strb	r1, [r4, #21]
 8007cc0:	60a2      	str	r2, [r4, #8]
 8007cc2:	6123      	str	r3, [r4, #16]
 8007cc4:	f080 0001 	eor.w	r0, r0, #1
 8007cc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ccc:	2102      	movs	r1, #2
 8007cce:	4620      	mov	r0, r4
 8007cd0:	f000 ff90 	bl	8008bf4 <ucdr_check_final_buffer_behavior>
 8007cd4:	b180      	cbz	r0, 8007cf8 <ucdr_deserialize_uint16_t+0xa0>
 8007cd6:	7d23      	ldrb	r3, [r4, #20]
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	68a3      	ldr	r3, [r4, #8]
 8007cdc:	d011      	beq.n	8007d02 <ucdr_deserialize_uint16_t+0xaa>
 8007cde:	785b      	ldrb	r3, [r3, #1]
 8007ce0:	702b      	strb	r3, [r5, #0]
 8007ce2:	68a3      	ldr	r3, [r4, #8]
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	706b      	strb	r3, [r5, #1]
 8007ce8:	68a2      	ldr	r2, [r4, #8]
 8007cea:	6923      	ldr	r3, [r4, #16]
 8007cec:	3202      	adds	r2, #2
 8007cee:	3302      	adds	r3, #2
 8007cf0:	2102      	movs	r1, #2
 8007cf2:	60a2      	str	r2, [r4, #8]
 8007cf4:	6123      	str	r3, [r4, #16]
 8007cf6:	7561      	strb	r1, [r4, #21]
 8007cf8:	7da0      	ldrb	r0, [r4, #22]
 8007cfa:	f080 0001 	eor.w	r0, r0, #1
 8007cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d02:	881b      	ldrh	r3, [r3, #0]
 8007d04:	802b      	strh	r3, [r5, #0]
 8007d06:	e7ef      	b.n	8007ce8 <ucdr_deserialize_uint16_t+0x90>
 8007d08:	68a2      	ldr	r2, [r4, #8]
 8007d0a:	6923      	ldr	r3, [r4, #16]
 8007d0c:	7da0      	ldrb	r0, [r4, #22]
 8007d0e:	f884 8015 	strb.w	r8, [r4, #21]
 8007d12:	1b92      	subs	r2, r2, r6
 8007d14:	1b9b      	subs	r3, r3, r6
 8007d16:	60a2      	str	r2, [r4, #8]
 8007d18:	6123      	str	r3, [r4, #16]
 8007d1a:	f080 0001 	eor.w	r0, r0, #1
 8007d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d22:	68a3      	ldr	r3, [r4, #8]
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	706b      	strb	r3, [r5, #1]
 8007d28:	e7c2      	b.n	8007cb0 <ucdr_deserialize_uint16_t+0x58>
 8007d2a:	4639      	mov	r1, r7
 8007d2c:	4632      	mov	r2, r6
 8007d2e:	4628      	mov	r0, r5
 8007d30:	f00d fb79 	bl	8015426 <memcpy>
 8007d34:	68a1      	ldr	r1, [r4, #8]
 8007d36:	464a      	mov	r2, r9
 8007d38:	19a8      	adds	r0, r5, r6
 8007d3a:	f00d fb74 	bl	8015426 <memcpy>
 8007d3e:	e7b7      	b.n	8007cb0 <ucdr_deserialize_uint16_t+0x58>

08007d40 <ucdr_deserialize_endian_uint16_t>:
 8007d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d44:	460e      	mov	r6, r1
 8007d46:	2102      	movs	r1, #2
 8007d48:	4604      	mov	r4, r0
 8007d4a:	4615      	mov	r5, r2
 8007d4c:	f000 ffa6 	bl	8008c9c <ucdr_buffer_alignment>
 8007d50:	4601      	mov	r1, r0
 8007d52:	4620      	mov	r0, r4
 8007d54:	f894 9015 	ldrb.w	r9, [r4, #21]
 8007d58:	f000 ffe4 	bl	8008d24 <ucdr_advance_buffer>
 8007d5c:	2102      	movs	r1, #2
 8007d5e:	4620      	mov	r0, r4
 8007d60:	f000 ff3c 	bl	8008bdc <ucdr_check_buffer_available_for>
 8007d64:	bb70      	cbnz	r0, 8007dc4 <ucdr_deserialize_endian_uint16_t+0x84>
 8007d66:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 8007d6a:	4547      	cmp	r7, r8
 8007d6c:	d925      	bls.n	8007dba <ucdr_deserialize_endian_uint16_t+0x7a>
 8007d6e:	6923      	ldr	r3, [r4, #16]
 8007d70:	60a7      	str	r7, [r4, #8]
 8007d72:	eba7 0708 	sub.w	r7, r7, r8
 8007d76:	443b      	add	r3, r7
 8007d78:	f1c7 0a02 	rsb	sl, r7, #2
 8007d7c:	6123      	str	r3, [r4, #16]
 8007d7e:	4651      	mov	r1, sl
 8007d80:	4620      	mov	r0, r4
 8007d82:	f000 ff37 	bl	8008bf4 <ucdr_check_final_buffer_behavior>
 8007d86:	2800      	cmp	r0, #0
 8007d88:	d034      	beq.n	8007df4 <ucdr_deserialize_endian_uint16_t+0xb4>
 8007d8a:	2e01      	cmp	r6, #1
 8007d8c:	d043      	beq.n	8007e16 <ucdr_deserialize_endian_uint16_t+0xd6>
 8007d8e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007d92:	702b      	strb	r3, [r5, #0]
 8007d94:	2f00      	cmp	r7, #0
 8007d96:	d03a      	beq.n	8007e0e <ucdr_deserialize_endian_uint16_t+0xce>
 8007d98:	f898 3000 	ldrb.w	r3, [r8]
 8007d9c:	706b      	strb	r3, [r5, #1]
 8007d9e:	6923      	ldr	r3, [r4, #16]
 8007da0:	68a2      	ldr	r2, [r4, #8]
 8007da2:	7da0      	ldrb	r0, [r4, #22]
 8007da4:	2102      	movs	r1, #2
 8007da6:	3302      	adds	r3, #2
 8007da8:	4452      	add	r2, sl
 8007daa:	1bdb      	subs	r3, r3, r7
 8007dac:	7561      	strb	r1, [r4, #21]
 8007dae:	60a2      	str	r2, [r4, #8]
 8007db0:	6123      	str	r3, [r4, #16]
 8007db2:	f080 0001 	eor.w	r0, r0, #1
 8007db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dba:	2102      	movs	r1, #2
 8007dbc:	4620      	mov	r0, r4
 8007dbe:	f000 ff19 	bl	8008bf4 <ucdr_check_final_buffer_behavior>
 8007dc2:	b178      	cbz	r0, 8007de4 <ucdr_deserialize_endian_uint16_t+0xa4>
 8007dc4:	2e01      	cmp	r6, #1
 8007dc6:	68a3      	ldr	r3, [r4, #8]
 8007dc8:	d011      	beq.n	8007dee <ucdr_deserialize_endian_uint16_t+0xae>
 8007dca:	785b      	ldrb	r3, [r3, #1]
 8007dcc:	702b      	strb	r3, [r5, #0]
 8007dce:	68a3      	ldr	r3, [r4, #8]
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	706b      	strb	r3, [r5, #1]
 8007dd4:	68a2      	ldr	r2, [r4, #8]
 8007dd6:	6923      	ldr	r3, [r4, #16]
 8007dd8:	3202      	adds	r2, #2
 8007dda:	3302      	adds	r3, #2
 8007ddc:	2102      	movs	r1, #2
 8007dde:	60a2      	str	r2, [r4, #8]
 8007de0:	6123      	str	r3, [r4, #16]
 8007de2:	7561      	strb	r1, [r4, #21]
 8007de4:	7da0      	ldrb	r0, [r4, #22]
 8007de6:	f080 0001 	eor.w	r0, r0, #1
 8007dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dee:	881b      	ldrh	r3, [r3, #0]
 8007df0:	802b      	strh	r3, [r5, #0]
 8007df2:	e7ef      	b.n	8007dd4 <ucdr_deserialize_endian_uint16_t+0x94>
 8007df4:	68a2      	ldr	r2, [r4, #8]
 8007df6:	6923      	ldr	r3, [r4, #16]
 8007df8:	7da0      	ldrb	r0, [r4, #22]
 8007dfa:	f884 9015 	strb.w	r9, [r4, #21]
 8007dfe:	1bd2      	subs	r2, r2, r7
 8007e00:	1bdb      	subs	r3, r3, r7
 8007e02:	60a2      	str	r2, [r4, #8]
 8007e04:	6123      	str	r3, [r4, #16]
 8007e06:	f080 0001 	eor.w	r0, r0, #1
 8007e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e0e:	68a3      	ldr	r3, [r4, #8]
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	706b      	strb	r3, [r5, #1]
 8007e14:	e7c3      	b.n	8007d9e <ucdr_deserialize_endian_uint16_t+0x5e>
 8007e16:	4641      	mov	r1, r8
 8007e18:	463a      	mov	r2, r7
 8007e1a:	4628      	mov	r0, r5
 8007e1c:	f00d fb03 	bl	8015426 <memcpy>
 8007e20:	68a1      	ldr	r1, [r4, #8]
 8007e22:	4652      	mov	r2, sl
 8007e24:	19e8      	adds	r0, r5, r7
 8007e26:	f00d fafe 	bl	8015426 <memcpy>
 8007e2a:	e7b8      	b.n	8007d9e <ucdr_deserialize_endian_uint16_t+0x5e>

08007e2c <ucdr_serialize_uint32_t>:
 8007e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e30:	b082      	sub	sp, #8
 8007e32:	4604      	mov	r4, r0
 8007e34:	9101      	str	r1, [sp, #4]
 8007e36:	2104      	movs	r1, #4
 8007e38:	f000 ff30 	bl	8008c9c <ucdr_buffer_alignment>
 8007e3c:	4601      	mov	r1, r0
 8007e3e:	4620      	mov	r0, r4
 8007e40:	7d67      	ldrb	r7, [r4, #21]
 8007e42:	f000 ff6f 	bl	8008d24 <ucdr_advance_buffer>
 8007e46:	2104      	movs	r1, #4
 8007e48:	4620      	mov	r0, r4
 8007e4a:	f000 fec7 	bl	8008bdc <ucdr_check_buffer_available_for>
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	d139      	bne.n	8007ec6 <ucdr_serialize_uint32_t+0x9a>
 8007e52:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8007e56:	42ab      	cmp	r3, r5
 8007e58:	d930      	bls.n	8007ebc <ucdr_serialize_uint32_t+0x90>
 8007e5a:	1b5e      	subs	r6, r3, r5
 8007e5c:	60a3      	str	r3, [r4, #8]
 8007e5e:	6923      	ldr	r3, [r4, #16]
 8007e60:	f1c6 0804 	rsb	r8, r6, #4
 8007e64:	4433      	add	r3, r6
 8007e66:	6123      	str	r3, [r4, #16]
 8007e68:	4641      	mov	r1, r8
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	f000 fec2 	bl	8008bf4 <ucdr_check_final_buffer_behavior>
 8007e70:	2800      	cmp	r0, #0
 8007e72:	d04c      	beq.n	8007f0e <ucdr_serialize_uint32_t+0xe2>
 8007e74:	7d23      	ldrb	r3, [r4, #20]
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d063      	beq.n	8007f42 <ucdr_serialize_uint32_t+0x116>
 8007e7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007e7e:	702b      	strb	r3, [r5, #0]
 8007e80:	2e00      	cmp	r6, #0
 8007e82:	d051      	beq.n	8007f28 <ucdr_serialize_uint32_t+0xfc>
 8007e84:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007e88:	706b      	strb	r3, [r5, #1]
 8007e8a:	2e01      	cmp	r6, #1
 8007e8c:	d050      	beq.n	8007f30 <ucdr_serialize_uint32_t+0x104>
 8007e8e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007e92:	70ab      	strb	r3, [r5, #2]
 8007e94:	2e02      	cmp	r6, #2
 8007e96:	d04f      	beq.n	8007f38 <ucdr_serialize_uint32_t+0x10c>
 8007e98:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007e9c:	70eb      	strb	r3, [r5, #3]
 8007e9e:	6923      	ldr	r3, [r4, #16]
 8007ea0:	68a2      	ldr	r2, [r4, #8]
 8007ea2:	7da0      	ldrb	r0, [r4, #22]
 8007ea4:	3304      	adds	r3, #4
 8007ea6:	1b9e      	subs	r6, r3, r6
 8007ea8:	4442      	add	r2, r8
 8007eaa:	2304      	movs	r3, #4
 8007eac:	f080 0001 	eor.w	r0, r0, #1
 8007eb0:	60a2      	str	r2, [r4, #8]
 8007eb2:	6126      	str	r6, [r4, #16]
 8007eb4:	7563      	strb	r3, [r4, #21]
 8007eb6:	b002      	add	sp, #8
 8007eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ebc:	2104      	movs	r1, #4
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	f000 fe98 	bl	8008bf4 <ucdr_check_final_buffer_behavior>
 8007ec4:	b1d0      	cbz	r0, 8007efc <ucdr_serialize_uint32_t+0xd0>
 8007ec6:	7d23      	ldrb	r3, [r4, #20]
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	68a3      	ldr	r3, [r4, #8]
 8007ecc:	d01c      	beq.n	8007f08 <ucdr_serialize_uint32_t+0xdc>
 8007ece:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8007ed2:	701a      	strb	r2, [r3, #0]
 8007ed4:	68a3      	ldr	r3, [r4, #8]
 8007ed6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007eda:	705a      	strb	r2, [r3, #1]
 8007edc:	68a3      	ldr	r3, [r4, #8]
 8007ede:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8007ee2:	709a      	strb	r2, [r3, #2]
 8007ee4:	68a3      	ldr	r3, [r4, #8]
 8007ee6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007eea:	70da      	strb	r2, [r3, #3]
 8007eec:	68a2      	ldr	r2, [r4, #8]
 8007eee:	6923      	ldr	r3, [r4, #16]
 8007ef0:	3204      	adds	r2, #4
 8007ef2:	3304      	adds	r3, #4
 8007ef4:	2104      	movs	r1, #4
 8007ef6:	60a2      	str	r2, [r4, #8]
 8007ef8:	6123      	str	r3, [r4, #16]
 8007efa:	7561      	strb	r1, [r4, #21]
 8007efc:	7da0      	ldrb	r0, [r4, #22]
 8007efe:	f080 0001 	eor.w	r0, r0, #1
 8007f02:	b002      	add	sp, #8
 8007f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f08:	9a01      	ldr	r2, [sp, #4]
 8007f0a:	601a      	str	r2, [r3, #0]
 8007f0c:	e7ee      	b.n	8007eec <ucdr_serialize_uint32_t+0xc0>
 8007f0e:	68a2      	ldr	r2, [r4, #8]
 8007f10:	6923      	ldr	r3, [r4, #16]
 8007f12:	7da0      	ldrb	r0, [r4, #22]
 8007f14:	7567      	strb	r7, [r4, #21]
 8007f16:	1b92      	subs	r2, r2, r6
 8007f18:	1b9b      	subs	r3, r3, r6
 8007f1a:	f080 0001 	eor.w	r0, r0, #1
 8007f1e:	60a2      	str	r2, [r4, #8]
 8007f20:	6123      	str	r3, [r4, #16]
 8007f22:	b002      	add	sp, #8
 8007f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f28:	68a3      	ldr	r3, [r4, #8]
 8007f2a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8007f2e:	701a      	strb	r2, [r3, #0]
 8007f30:	68a3      	ldr	r3, [r4, #8]
 8007f32:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8007f36:	701a      	strb	r2, [r3, #0]
 8007f38:	68a3      	ldr	r3, [r4, #8]
 8007f3a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007f3e:	701a      	strb	r2, [r3, #0]
 8007f40:	e7ad      	b.n	8007e9e <ucdr_serialize_uint32_t+0x72>
 8007f42:	4628      	mov	r0, r5
 8007f44:	ad01      	add	r5, sp, #4
 8007f46:	4629      	mov	r1, r5
 8007f48:	4632      	mov	r2, r6
 8007f4a:	f00d fa6c 	bl	8015426 <memcpy>
 8007f4e:	68a0      	ldr	r0, [r4, #8]
 8007f50:	4642      	mov	r2, r8
 8007f52:	19a9      	adds	r1, r5, r6
 8007f54:	f00d fa67 	bl	8015426 <memcpy>
 8007f58:	e7a1      	b.n	8007e9e <ucdr_serialize_uint32_t+0x72>
 8007f5a:	bf00      	nop

08007f5c <ucdr_serialize_endian_uint32_t>:
 8007f5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f60:	b083      	sub	sp, #12
 8007f62:	460d      	mov	r5, r1
 8007f64:	2104      	movs	r1, #4
 8007f66:	4604      	mov	r4, r0
 8007f68:	9201      	str	r2, [sp, #4]
 8007f6a:	f000 fe97 	bl	8008c9c <ucdr_buffer_alignment>
 8007f6e:	4601      	mov	r1, r0
 8007f70:	4620      	mov	r0, r4
 8007f72:	f894 8015 	ldrb.w	r8, [r4, #21]
 8007f76:	f000 fed5 	bl	8008d24 <ucdr_advance_buffer>
 8007f7a:	2104      	movs	r1, #4
 8007f7c:	4620      	mov	r0, r4
 8007f7e:	f000 fe2d 	bl	8008bdc <ucdr_check_buffer_available_for>
 8007f82:	2800      	cmp	r0, #0
 8007f84:	d138      	bne.n	8007ff8 <ucdr_serialize_endian_uint32_t+0x9c>
 8007f86:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8007f8a:	42b7      	cmp	r7, r6
 8007f8c:	d92f      	bls.n	8007fee <ucdr_serialize_endian_uint32_t+0x92>
 8007f8e:	6923      	ldr	r3, [r4, #16]
 8007f90:	60a7      	str	r7, [r4, #8]
 8007f92:	1bbf      	subs	r7, r7, r6
 8007f94:	443b      	add	r3, r7
 8007f96:	f1c7 0904 	rsb	r9, r7, #4
 8007f9a:	6123      	str	r3, [r4, #16]
 8007f9c:	4649      	mov	r1, r9
 8007f9e:	4620      	mov	r0, r4
 8007fa0:	f000 fe28 	bl	8008bf4 <ucdr_check_final_buffer_behavior>
 8007fa4:	2800      	cmp	r0, #0
 8007fa6:	d04a      	beq.n	800803e <ucdr_serialize_endian_uint32_t+0xe2>
 8007fa8:	2d01      	cmp	r5, #1
 8007faa:	d063      	beq.n	8008074 <ucdr_serialize_endian_uint32_t+0x118>
 8007fac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007fb0:	7033      	strb	r3, [r6, #0]
 8007fb2:	2f00      	cmp	r7, #0
 8007fb4:	d051      	beq.n	800805a <ucdr_serialize_endian_uint32_t+0xfe>
 8007fb6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007fba:	7073      	strb	r3, [r6, #1]
 8007fbc:	2f01      	cmp	r7, #1
 8007fbe:	d050      	beq.n	8008062 <ucdr_serialize_endian_uint32_t+0x106>
 8007fc0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007fc4:	70b3      	strb	r3, [r6, #2]
 8007fc6:	2f02      	cmp	r7, #2
 8007fc8:	d04f      	beq.n	800806a <ucdr_serialize_endian_uint32_t+0x10e>
 8007fca:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007fce:	70f3      	strb	r3, [r6, #3]
 8007fd0:	6923      	ldr	r3, [r4, #16]
 8007fd2:	68a2      	ldr	r2, [r4, #8]
 8007fd4:	7da0      	ldrb	r0, [r4, #22]
 8007fd6:	3304      	adds	r3, #4
 8007fd8:	444a      	add	r2, r9
 8007fda:	1bdb      	subs	r3, r3, r7
 8007fdc:	2104      	movs	r1, #4
 8007fde:	f080 0001 	eor.w	r0, r0, #1
 8007fe2:	60a2      	str	r2, [r4, #8]
 8007fe4:	6123      	str	r3, [r4, #16]
 8007fe6:	7561      	strb	r1, [r4, #21]
 8007fe8:	b003      	add	sp, #12
 8007fea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fee:	2104      	movs	r1, #4
 8007ff0:	4620      	mov	r0, r4
 8007ff2:	f000 fdff 	bl	8008bf4 <ucdr_check_final_buffer_behavior>
 8007ff6:	b1c8      	cbz	r0, 800802c <ucdr_serialize_endian_uint32_t+0xd0>
 8007ff8:	2d01      	cmp	r5, #1
 8007ffa:	68a3      	ldr	r3, [r4, #8]
 8007ffc:	d01c      	beq.n	8008038 <ucdr_serialize_endian_uint32_t+0xdc>
 8007ffe:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008002:	701a      	strb	r2, [r3, #0]
 8008004:	68a3      	ldr	r3, [r4, #8]
 8008006:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800800a:	705a      	strb	r2, [r3, #1]
 800800c:	68a3      	ldr	r3, [r4, #8]
 800800e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008012:	709a      	strb	r2, [r3, #2]
 8008014:	68a3      	ldr	r3, [r4, #8]
 8008016:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800801a:	70da      	strb	r2, [r3, #3]
 800801c:	68a2      	ldr	r2, [r4, #8]
 800801e:	6923      	ldr	r3, [r4, #16]
 8008020:	3204      	adds	r2, #4
 8008022:	3304      	adds	r3, #4
 8008024:	2104      	movs	r1, #4
 8008026:	60a2      	str	r2, [r4, #8]
 8008028:	6123      	str	r3, [r4, #16]
 800802a:	7561      	strb	r1, [r4, #21]
 800802c:	7da0      	ldrb	r0, [r4, #22]
 800802e:	f080 0001 	eor.w	r0, r0, #1
 8008032:	b003      	add	sp, #12
 8008034:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008038:	9a01      	ldr	r2, [sp, #4]
 800803a:	601a      	str	r2, [r3, #0]
 800803c:	e7ee      	b.n	800801c <ucdr_serialize_endian_uint32_t+0xc0>
 800803e:	68a2      	ldr	r2, [r4, #8]
 8008040:	6923      	ldr	r3, [r4, #16]
 8008042:	7da0      	ldrb	r0, [r4, #22]
 8008044:	f884 8015 	strb.w	r8, [r4, #21]
 8008048:	1bd2      	subs	r2, r2, r7
 800804a:	1bdb      	subs	r3, r3, r7
 800804c:	f080 0001 	eor.w	r0, r0, #1
 8008050:	60a2      	str	r2, [r4, #8]
 8008052:	6123      	str	r3, [r4, #16]
 8008054:	b003      	add	sp, #12
 8008056:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800805a:	68a3      	ldr	r3, [r4, #8]
 800805c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008060:	701a      	strb	r2, [r3, #0]
 8008062:	68a3      	ldr	r3, [r4, #8]
 8008064:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008068:	701a      	strb	r2, [r3, #0]
 800806a:	68a3      	ldr	r3, [r4, #8]
 800806c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008070:	701a      	strb	r2, [r3, #0]
 8008072:	e7ad      	b.n	8007fd0 <ucdr_serialize_endian_uint32_t+0x74>
 8008074:	ad01      	add	r5, sp, #4
 8008076:	4629      	mov	r1, r5
 8008078:	463a      	mov	r2, r7
 800807a:	4630      	mov	r0, r6
 800807c:	f00d f9d3 	bl	8015426 <memcpy>
 8008080:	68a0      	ldr	r0, [r4, #8]
 8008082:	464a      	mov	r2, r9
 8008084:	19e9      	adds	r1, r5, r7
 8008086:	f00d f9ce 	bl	8015426 <memcpy>
 800808a:	e7a1      	b.n	8007fd0 <ucdr_serialize_endian_uint32_t+0x74>

0800808c <ucdr_deserialize_uint32_t>:
 800808c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008090:	460d      	mov	r5, r1
 8008092:	2104      	movs	r1, #4
 8008094:	4604      	mov	r4, r0
 8008096:	f000 fe01 	bl	8008c9c <ucdr_buffer_alignment>
 800809a:	4601      	mov	r1, r0
 800809c:	4620      	mov	r0, r4
 800809e:	f894 8015 	ldrb.w	r8, [r4, #21]
 80080a2:	f000 fe3f 	bl	8008d24 <ucdr_advance_buffer>
 80080a6:	2104      	movs	r1, #4
 80080a8:	4620      	mov	r0, r4
 80080aa:	f000 fd97 	bl	8008bdc <ucdr_check_buffer_available_for>
 80080ae:	2800      	cmp	r0, #0
 80080b0:	d138      	bne.n	8008124 <ucdr_deserialize_uint32_t+0x98>
 80080b2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80080b6:	42b7      	cmp	r7, r6
 80080b8:	d92f      	bls.n	800811a <ucdr_deserialize_uint32_t+0x8e>
 80080ba:	6923      	ldr	r3, [r4, #16]
 80080bc:	60a7      	str	r7, [r4, #8]
 80080be:	1bbf      	subs	r7, r7, r6
 80080c0:	443b      	add	r3, r7
 80080c2:	f1c7 0904 	rsb	r9, r7, #4
 80080c6:	6123      	str	r3, [r4, #16]
 80080c8:	4649      	mov	r1, r9
 80080ca:	4620      	mov	r0, r4
 80080cc:	f000 fd92 	bl	8008bf4 <ucdr_check_final_buffer_behavior>
 80080d0:	2800      	cmp	r0, #0
 80080d2:	d046      	beq.n	8008162 <ucdr_deserialize_uint32_t+0xd6>
 80080d4:	7d23      	ldrb	r3, [r4, #20]
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d05c      	beq.n	8008194 <ucdr_deserialize_uint32_t+0x108>
 80080da:	78f3      	ldrb	r3, [r6, #3]
 80080dc:	702b      	strb	r3, [r5, #0]
 80080de:	2f00      	cmp	r7, #0
 80080e0:	d04c      	beq.n	800817c <ucdr_deserialize_uint32_t+0xf0>
 80080e2:	78b3      	ldrb	r3, [r6, #2]
 80080e4:	706b      	strb	r3, [r5, #1]
 80080e6:	2f01      	cmp	r7, #1
 80080e8:	f105 0302 	add.w	r3, r5, #2
 80080ec:	d04a      	beq.n	8008184 <ucdr_deserialize_uint32_t+0xf8>
 80080ee:	7873      	ldrb	r3, [r6, #1]
 80080f0:	70ab      	strb	r3, [r5, #2]
 80080f2:	2f02      	cmp	r7, #2
 80080f4:	f105 0303 	add.w	r3, r5, #3
 80080f8:	d048      	beq.n	800818c <ucdr_deserialize_uint32_t+0x100>
 80080fa:	7833      	ldrb	r3, [r6, #0]
 80080fc:	70eb      	strb	r3, [r5, #3]
 80080fe:	6923      	ldr	r3, [r4, #16]
 8008100:	68a2      	ldr	r2, [r4, #8]
 8008102:	7da0      	ldrb	r0, [r4, #22]
 8008104:	2104      	movs	r1, #4
 8008106:	3304      	adds	r3, #4
 8008108:	444a      	add	r2, r9
 800810a:	1bdb      	subs	r3, r3, r7
 800810c:	7561      	strb	r1, [r4, #21]
 800810e:	60a2      	str	r2, [r4, #8]
 8008110:	6123      	str	r3, [r4, #16]
 8008112:	f080 0001 	eor.w	r0, r0, #1
 8008116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800811a:	2104      	movs	r1, #4
 800811c:	4620      	mov	r0, r4
 800811e:	f000 fd69 	bl	8008bf4 <ucdr_check_final_buffer_behavior>
 8008122:	b1b0      	cbz	r0, 8008152 <ucdr_deserialize_uint32_t+0xc6>
 8008124:	7d23      	ldrb	r3, [r4, #20]
 8008126:	2b01      	cmp	r3, #1
 8008128:	68a3      	ldr	r3, [r4, #8]
 800812a:	d017      	beq.n	800815c <ucdr_deserialize_uint32_t+0xd0>
 800812c:	78db      	ldrb	r3, [r3, #3]
 800812e:	702b      	strb	r3, [r5, #0]
 8008130:	68a3      	ldr	r3, [r4, #8]
 8008132:	789b      	ldrb	r3, [r3, #2]
 8008134:	706b      	strb	r3, [r5, #1]
 8008136:	68a3      	ldr	r3, [r4, #8]
 8008138:	785b      	ldrb	r3, [r3, #1]
 800813a:	70ab      	strb	r3, [r5, #2]
 800813c:	68a3      	ldr	r3, [r4, #8]
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	70eb      	strb	r3, [r5, #3]
 8008142:	68a2      	ldr	r2, [r4, #8]
 8008144:	6923      	ldr	r3, [r4, #16]
 8008146:	3204      	adds	r2, #4
 8008148:	3304      	adds	r3, #4
 800814a:	2104      	movs	r1, #4
 800814c:	60a2      	str	r2, [r4, #8]
 800814e:	6123      	str	r3, [r4, #16]
 8008150:	7561      	strb	r1, [r4, #21]
 8008152:	7da0      	ldrb	r0, [r4, #22]
 8008154:	f080 0001 	eor.w	r0, r0, #1
 8008158:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	602b      	str	r3, [r5, #0]
 8008160:	e7ef      	b.n	8008142 <ucdr_deserialize_uint32_t+0xb6>
 8008162:	68a2      	ldr	r2, [r4, #8]
 8008164:	6923      	ldr	r3, [r4, #16]
 8008166:	7da0      	ldrb	r0, [r4, #22]
 8008168:	f884 8015 	strb.w	r8, [r4, #21]
 800816c:	1bd2      	subs	r2, r2, r7
 800816e:	1bdb      	subs	r3, r3, r7
 8008170:	60a2      	str	r2, [r4, #8]
 8008172:	6123      	str	r3, [r4, #16]
 8008174:	f080 0001 	eor.w	r0, r0, #1
 8008178:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800817c:	68a3      	ldr	r3, [r4, #8]
 800817e:	789b      	ldrb	r3, [r3, #2]
 8008180:	706b      	strb	r3, [r5, #1]
 8008182:	1cab      	adds	r3, r5, #2
 8008184:	68a2      	ldr	r2, [r4, #8]
 8008186:	7852      	ldrb	r2, [r2, #1]
 8008188:	f803 2b01 	strb.w	r2, [r3], #1
 800818c:	68a2      	ldr	r2, [r4, #8]
 800818e:	7812      	ldrb	r2, [r2, #0]
 8008190:	701a      	strb	r2, [r3, #0]
 8008192:	e7b4      	b.n	80080fe <ucdr_deserialize_uint32_t+0x72>
 8008194:	4631      	mov	r1, r6
 8008196:	463a      	mov	r2, r7
 8008198:	4628      	mov	r0, r5
 800819a:	f00d f944 	bl	8015426 <memcpy>
 800819e:	68a1      	ldr	r1, [r4, #8]
 80081a0:	464a      	mov	r2, r9
 80081a2:	19e8      	adds	r0, r5, r7
 80081a4:	f00d f93f 	bl	8015426 <memcpy>
 80081a8:	e7a9      	b.n	80080fe <ucdr_deserialize_uint32_t+0x72>
 80081aa:	bf00      	nop

080081ac <ucdr_deserialize_endian_uint32_t>:
 80081ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081b0:	460e      	mov	r6, r1
 80081b2:	2104      	movs	r1, #4
 80081b4:	4604      	mov	r4, r0
 80081b6:	4615      	mov	r5, r2
 80081b8:	f000 fd70 	bl	8008c9c <ucdr_buffer_alignment>
 80081bc:	4601      	mov	r1, r0
 80081be:	4620      	mov	r0, r4
 80081c0:	f894 9015 	ldrb.w	r9, [r4, #21]
 80081c4:	f000 fdae 	bl	8008d24 <ucdr_advance_buffer>
 80081c8:	2104      	movs	r1, #4
 80081ca:	4620      	mov	r0, r4
 80081cc:	f000 fd06 	bl	8008bdc <ucdr_check_buffer_available_for>
 80081d0:	2800      	cmp	r0, #0
 80081d2:	d13c      	bne.n	800824e <ucdr_deserialize_endian_uint32_t+0xa2>
 80081d4:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 80081d8:	42bb      	cmp	r3, r7
 80081da:	d933      	bls.n	8008244 <ucdr_deserialize_endian_uint32_t+0x98>
 80081dc:	eba3 0807 	sub.w	r8, r3, r7
 80081e0:	60a3      	str	r3, [r4, #8]
 80081e2:	6923      	ldr	r3, [r4, #16]
 80081e4:	f1c8 0a04 	rsb	sl, r8, #4
 80081e8:	4443      	add	r3, r8
 80081ea:	6123      	str	r3, [r4, #16]
 80081ec:	4651      	mov	r1, sl
 80081ee:	4620      	mov	r0, r4
 80081f0:	f000 fd00 	bl	8008bf4 <ucdr_check_final_buffer_behavior>
 80081f4:	2800      	cmp	r0, #0
 80081f6:	d048      	beq.n	800828a <ucdr_deserialize_endian_uint32_t+0xde>
 80081f8:	2e01      	cmp	r6, #1
 80081fa:	d061      	beq.n	80082c0 <ucdr_deserialize_endian_uint32_t+0x114>
 80081fc:	78fb      	ldrb	r3, [r7, #3]
 80081fe:	702b      	strb	r3, [r5, #0]
 8008200:	f1b8 0f00 	cmp.w	r8, #0
 8008204:	d050      	beq.n	80082a8 <ucdr_deserialize_endian_uint32_t+0xfc>
 8008206:	78bb      	ldrb	r3, [r7, #2]
 8008208:	706b      	strb	r3, [r5, #1]
 800820a:	f1b8 0f01 	cmp.w	r8, #1
 800820e:	f105 0302 	add.w	r3, r5, #2
 8008212:	d04d      	beq.n	80082b0 <ucdr_deserialize_endian_uint32_t+0x104>
 8008214:	787b      	ldrb	r3, [r7, #1]
 8008216:	70ab      	strb	r3, [r5, #2]
 8008218:	f1b8 0f02 	cmp.w	r8, #2
 800821c:	f105 0303 	add.w	r3, r5, #3
 8008220:	d04a      	beq.n	80082b8 <ucdr_deserialize_endian_uint32_t+0x10c>
 8008222:	783b      	ldrb	r3, [r7, #0]
 8008224:	70eb      	strb	r3, [r5, #3]
 8008226:	6923      	ldr	r3, [r4, #16]
 8008228:	68a2      	ldr	r2, [r4, #8]
 800822a:	7da0      	ldrb	r0, [r4, #22]
 800822c:	2104      	movs	r1, #4
 800822e:	3304      	adds	r3, #4
 8008230:	4452      	add	r2, sl
 8008232:	eba3 0308 	sub.w	r3, r3, r8
 8008236:	7561      	strb	r1, [r4, #21]
 8008238:	60a2      	str	r2, [r4, #8]
 800823a:	6123      	str	r3, [r4, #16]
 800823c:	f080 0001 	eor.w	r0, r0, #1
 8008240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008244:	2104      	movs	r1, #4
 8008246:	4620      	mov	r0, r4
 8008248:	f000 fcd4 	bl	8008bf4 <ucdr_check_final_buffer_behavior>
 800824c:	b1a8      	cbz	r0, 800827a <ucdr_deserialize_endian_uint32_t+0xce>
 800824e:	2e01      	cmp	r6, #1
 8008250:	68a3      	ldr	r3, [r4, #8]
 8008252:	d017      	beq.n	8008284 <ucdr_deserialize_endian_uint32_t+0xd8>
 8008254:	78db      	ldrb	r3, [r3, #3]
 8008256:	702b      	strb	r3, [r5, #0]
 8008258:	68a3      	ldr	r3, [r4, #8]
 800825a:	789b      	ldrb	r3, [r3, #2]
 800825c:	706b      	strb	r3, [r5, #1]
 800825e:	68a3      	ldr	r3, [r4, #8]
 8008260:	785b      	ldrb	r3, [r3, #1]
 8008262:	70ab      	strb	r3, [r5, #2]
 8008264:	68a3      	ldr	r3, [r4, #8]
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	70eb      	strb	r3, [r5, #3]
 800826a:	68a2      	ldr	r2, [r4, #8]
 800826c:	6923      	ldr	r3, [r4, #16]
 800826e:	3204      	adds	r2, #4
 8008270:	3304      	adds	r3, #4
 8008272:	2104      	movs	r1, #4
 8008274:	60a2      	str	r2, [r4, #8]
 8008276:	6123      	str	r3, [r4, #16]
 8008278:	7561      	strb	r1, [r4, #21]
 800827a:	7da0      	ldrb	r0, [r4, #22]
 800827c:	f080 0001 	eor.w	r0, r0, #1
 8008280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	602b      	str	r3, [r5, #0]
 8008288:	e7ef      	b.n	800826a <ucdr_deserialize_endian_uint32_t+0xbe>
 800828a:	68a2      	ldr	r2, [r4, #8]
 800828c:	6923      	ldr	r3, [r4, #16]
 800828e:	7da0      	ldrb	r0, [r4, #22]
 8008290:	f884 9015 	strb.w	r9, [r4, #21]
 8008294:	eba2 0208 	sub.w	r2, r2, r8
 8008298:	eba3 0308 	sub.w	r3, r3, r8
 800829c:	60a2      	str	r2, [r4, #8]
 800829e:	6123      	str	r3, [r4, #16]
 80082a0:	f080 0001 	eor.w	r0, r0, #1
 80082a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082a8:	68a3      	ldr	r3, [r4, #8]
 80082aa:	789b      	ldrb	r3, [r3, #2]
 80082ac:	706b      	strb	r3, [r5, #1]
 80082ae:	1cab      	adds	r3, r5, #2
 80082b0:	68a2      	ldr	r2, [r4, #8]
 80082b2:	7852      	ldrb	r2, [r2, #1]
 80082b4:	f803 2b01 	strb.w	r2, [r3], #1
 80082b8:	68a2      	ldr	r2, [r4, #8]
 80082ba:	7812      	ldrb	r2, [r2, #0]
 80082bc:	701a      	strb	r2, [r3, #0]
 80082be:	e7b2      	b.n	8008226 <ucdr_deserialize_endian_uint32_t+0x7a>
 80082c0:	4639      	mov	r1, r7
 80082c2:	4642      	mov	r2, r8
 80082c4:	4628      	mov	r0, r5
 80082c6:	f00d f8ae 	bl	8015426 <memcpy>
 80082ca:	68a1      	ldr	r1, [r4, #8]
 80082cc:	4652      	mov	r2, sl
 80082ce:	eb05 0008 	add.w	r0, r5, r8
 80082d2:	f00d f8a8 	bl	8015426 <memcpy>
 80082d6:	e7a6      	b.n	8008226 <ucdr_deserialize_endian_uint32_t+0x7a>

080082d8 <ucdr_serialize_uint64_t>:
 80082d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082dc:	2108      	movs	r1, #8
 80082de:	b082      	sub	sp, #8
 80082e0:	4604      	mov	r4, r0
 80082e2:	e9cd 2300 	strd	r2, r3, [sp]
 80082e6:	f000 fcd9 	bl	8008c9c <ucdr_buffer_alignment>
 80082ea:	4601      	mov	r1, r0
 80082ec:	4620      	mov	r0, r4
 80082ee:	7d67      	ldrb	r7, [r4, #21]
 80082f0:	f000 fd18 	bl	8008d24 <ucdr_advance_buffer>
 80082f4:	2108      	movs	r1, #8
 80082f6:	4620      	mov	r0, r4
 80082f8:	f000 fc70 	bl	8008bdc <ucdr_check_buffer_available_for>
 80082fc:	2800      	cmp	r0, #0
 80082fe:	d14e      	bne.n	800839e <ucdr_serialize_uint64_t+0xc6>
 8008300:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8008304:	42ab      	cmp	r3, r5
 8008306:	d945      	bls.n	8008394 <ucdr_serialize_uint64_t+0xbc>
 8008308:	1b5e      	subs	r6, r3, r5
 800830a:	60a3      	str	r3, [r4, #8]
 800830c:	6923      	ldr	r3, [r4, #16]
 800830e:	f1c6 0808 	rsb	r8, r6, #8
 8008312:	4433      	add	r3, r6
 8008314:	6123      	str	r3, [r4, #16]
 8008316:	4641      	mov	r1, r8
 8008318:	4620      	mov	r0, r4
 800831a:	f000 fc6b 	bl	8008bf4 <ucdr_check_final_buffer_behavior>
 800831e:	2800      	cmp	r0, #0
 8008320:	d074      	beq.n	800840c <ucdr_serialize_uint64_t+0x134>
 8008322:	7d23      	ldrb	r3, [r4, #20]
 8008324:	2b01      	cmp	r3, #1
 8008326:	f000 809b 	beq.w	8008460 <ucdr_serialize_uint64_t+0x188>
 800832a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800832e:	702b      	strb	r3, [r5, #0]
 8008330:	2e00      	cmp	r6, #0
 8008332:	d078      	beq.n	8008426 <ucdr_serialize_uint64_t+0x14e>
 8008334:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008338:	706b      	strb	r3, [r5, #1]
 800833a:	2e01      	cmp	r6, #1
 800833c:	d077      	beq.n	800842e <ucdr_serialize_uint64_t+0x156>
 800833e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008342:	70ab      	strb	r3, [r5, #2]
 8008344:	2e02      	cmp	r6, #2
 8008346:	d076      	beq.n	8008436 <ucdr_serialize_uint64_t+0x15e>
 8008348:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800834c:	70eb      	strb	r3, [r5, #3]
 800834e:	2e03      	cmp	r6, #3
 8008350:	d075      	beq.n	800843e <ucdr_serialize_uint64_t+0x166>
 8008352:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8008356:	712b      	strb	r3, [r5, #4]
 8008358:	2e04      	cmp	r6, #4
 800835a:	d074      	beq.n	8008446 <ucdr_serialize_uint64_t+0x16e>
 800835c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8008360:	716b      	strb	r3, [r5, #5]
 8008362:	2e05      	cmp	r6, #5
 8008364:	d073      	beq.n	800844e <ucdr_serialize_uint64_t+0x176>
 8008366:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800836a:	71ab      	strb	r3, [r5, #6]
 800836c:	2e06      	cmp	r6, #6
 800836e:	d072      	beq.n	8008456 <ucdr_serialize_uint64_t+0x17e>
 8008370:	f89d 3000 	ldrb.w	r3, [sp]
 8008374:	71eb      	strb	r3, [r5, #7]
 8008376:	6923      	ldr	r3, [r4, #16]
 8008378:	68a2      	ldr	r2, [r4, #8]
 800837a:	7da0      	ldrb	r0, [r4, #22]
 800837c:	3308      	adds	r3, #8
 800837e:	1b9e      	subs	r6, r3, r6
 8008380:	4442      	add	r2, r8
 8008382:	2308      	movs	r3, #8
 8008384:	f080 0001 	eor.w	r0, r0, #1
 8008388:	60a2      	str	r2, [r4, #8]
 800838a:	6126      	str	r6, [r4, #16]
 800838c:	7563      	strb	r3, [r4, #21]
 800838e:	b002      	add	sp, #8
 8008390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008394:	2108      	movs	r1, #8
 8008396:	4620      	mov	r0, r4
 8008398:	f000 fc2c 	bl	8008bf4 <ucdr_check_final_buffer_behavior>
 800839c:	b350      	cbz	r0, 80083f4 <ucdr_serialize_uint64_t+0x11c>
 800839e:	7d23      	ldrb	r3, [r4, #20]
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d02d      	beq.n	8008400 <ucdr_serialize_uint64_t+0x128>
 80083a4:	68a3      	ldr	r3, [r4, #8]
 80083a6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80083aa:	701a      	strb	r2, [r3, #0]
 80083ac:	68a3      	ldr	r3, [r4, #8]
 80083ae:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80083b2:	705a      	strb	r2, [r3, #1]
 80083b4:	68a3      	ldr	r3, [r4, #8]
 80083b6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80083ba:	709a      	strb	r2, [r3, #2]
 80083bc:	68a3      	ldr	r3, [r4, #8]
 80083be:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80083c2:	70da      	strb	r2, [r3, #3]
 80083c4:	68a3      	ldr	r3, [r4, #8]
 80083c6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80083ca:	711a      	strb	r2, [r3, #4]
 80083cc:	68a3      	ldr	r3, [r4, #8]
 80083ce:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80083d2:	715a      	strb	r2, [r3, #5]
 80083d4:	68a3      	ldr	r3, [r4, #8]
 80083d6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80083da:	719a      	strb	r2, [r3, #6]
 80083dc:	68a3      	ldr	r3, [r4, #8]
 80083de:	f89d 2000 	ldrb.w	r2, [sp]
 80083e2:	71da      	strb	r2, [r3, #7]
 80083e4:	68a2      	ldr	r2, [r4, #8]
 80083e6:	6923      	ldr	r3, [r4, #16]
 80083e8:	3208      	adds	r2, #8
 80083ea:	3308      	adds	r3, #8
 80083ec:	2108      	movs	r1, #8
 80083ee:	60a2      	str	r2, [r4, #8]
 80083f0:	6123      	str	r3, [r4, #16]
 80083f2:	7561      	strb	r1, [r4, #21]
 80083f4:	7da0      	ldrb	r0, [r4, #22]
 80083f6:	f080 0001 	eor.w	r0, r0, #1
 80083fa:	b002      	add	sp, #8
 80083fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008400:	466b      	mov	r3, sp
 8008402:	cb03      	ldmia	r3!, {r0, r1}
 8008404:	68a3      	ldr	r3, [r4, #8]
 8008406:	6018      	str	r0, [r3, #0]
 8008408:	6059      	str	r1, [r3, #4]
 800840a:	e7eb      	b.n	80083e4 <ucdr_serialize_uint64_t+0x10c>
 800840c:	68a2      	ldr	r2, [r4, #8]
 800840e:	6923      	ldr	r3, [r4, #16]
 8008410:	7da0      	ldrb	r0, [r4, #22]
 8008412:	7567      	strb	r7, [r4, #21]
 8008414:	1b92      	subs	r2, r2, r6
 8008416:	1b9b      	subs	r3, r3, r6
 8008418:	f080 0001 	eor.w	r0, r0, #1
 800841c:	60a2      	str	r2, [r4, #8]
 800841e:	6123      	str	r3, [r4, #16]
 8008420:	b002      	add	sp, #8
 8008422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008426:	68a3      	ldr	r3, [r4, #8]
 8008428:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800842c:	701a      	strb	r2, [r3, #0]
 800842e:	68a3      	ldr	r3, [r4, #8]
 8008430:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008434:	701a      	strb	r2, [r3, #0]
 8008436:	68a3      	ldr	r3, [r4, #8]
 8008438:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800843c:	701a      	strb	r2, [r3, #0]
 800843e:	68a3      	ldr	r3, [r4, #8]
 8008440:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8008444:	701a      	strb	r2, [r3, #0]
 8008446:	68a3      	ldr	r3, [r4, #8]
 8008448:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800844c:	701a      	strb	r2, [r3, #0]
 800844e:	68a3      	ldr	r3, [r4, #8]
 8008450:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8008454:	701a      	strb	r2, [r3, #0]
 8008456:	68a3      	ldr	r3, [r4, #8]
 8008458:	f89d 2000 	ldrb.w	r2, [sp]
 800845c:	701a      	strb	r2, [r3, #0]
 800845e:	e78a      	b.n	8008376 <ucdr_serialize_uint64_t+0x9e>
 8008460:	4628      	mov	r0, r5
 8008462:	466d      	mov	r5, sp
 8008464:	4629      	mov	r1, r5
 8008466:	4632      	mov	r2, r6
 8008468:	f00c ffdd 	bl	8015426 <memcpy>
 800846c:	68a0      	ldr	r0, [r4, #8]
 800846e:	4642      	mov	r2, r8
 8008470:	19a9      	adds	r1, r5, r6
 8008472:	f00c ffd8 	bl	8015426 <memcpy>
 8008476:	e77e      	b.n	8008376 <ucdr_serialize_uint64_t+0x9e>

08008478 <ucdr_serialize_int16_t>:
 8008478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800847c:	b082      	sub	sp, #8
 800847e:	460b      	mov	r3, r1
 8008480:	2102      	movs	r1, #2
 8008482:	4604      	mov	r4, r0
 8008484:	f8ad 3006 	strh.w	r3, [sp, #6]
 8008488:	f000 fc08 	bl	8008c9c <ucdr_buffer_alignment>
 800848c:	4601      	mov	r1, r0
 800848e:	4620      	mov	r0, r4
 8008490:	7d67      	ldrb	r7, [r4, #21]
 8008492:	f000 fc47 	bl	8008d24 <ucdr_advance_buffer>
 8008496:	2102      	movs	r1, #2
 8008498:	4620      	mov	r0, r4
 800849a:	f000 fb9f 	bl	8008bdc <ucdr_check_buffer_available_for>
 800849e:	bb78      	cbnz	r0, 8008500 <ucdr_serialize_int16_t+0x88>
 80084a0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80084a4:	42ab      	cmp	r3, r5
 80084a6:	d926      	bls.n	80084f6 <ucdr_serialize_int16_t+0x7e>
 80084a8:	1b5e      	subs	r6, r3, r5
 80084aa:	60a3      	str	r3, [r4, #8]
 80084ac:	6923      	ldr	r3, [r4, #16]
 80084ae:	f1c6 0802 	rsb	r8, r6, #2
 80084b2:	4433      	add	r3, r6
 80084b4:	6123      	str	r3, [r4, #16]
 80084b6:	4641      	mov	r1, r8
 80084b8:	4620      	mov	r0, r4
 80084ba:	f000 fb9b 	bl	8008bf4 <ucdr_check_final_buffer_behavior>
 80084be:	2800      	cmp	r0, #0
 80084c0:	d03b      	beq.n	800853a <ucdr_serialize_int16_t+0xc2>
 80084c2:	7d23      	ldrb	r3, [r4, #20]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d04a      	beq.n	800855e <ucdr_serialize_int16_t+0xe6>
 80084c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80084cc:	702b      	strb	r3, [r5, #0]
 80084ce:	2e00      	cmp	r6, #0
 80084d0:	d040      	beq.n	8008554 <ucdr_serialize_int16_t+0xdc>
 80084d2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80084d6:	706b      	strb	r3, [r5, #1]
 80084d8:	6923      	ldr	r3, [r4, #16]
 80084da:	68a2      	ldr	r2, [r4, #8]
 80084dc:	7da0      	ldrb	r0, [r4, #22]
 80084de:	3302      	adds	r3, #2
 80084e0:	1b9e      	subs	r6, r3, r6
 80084e2:	4442      	add	r2, r8
 80084e4:	2302      	movs	r3, #2
 80084e6:	f080 0001 	eor.w	r0, r0, #1
 80084ea:	60a2      	str	r2, [r4, #8]
 80084ec:	6126      	str	r6, [r4, #16]
 80084ee:	7563      	strb	r3, [r4, #21]
 80084f0:	b002      	add	sp, #8
 80084f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084f6:	2102      	movs	r1, #2
 80084f8:	4620      	mov	r0, r4
 80084fa:	f000 fb7b 	bl	8008bf4 <ucdr_check_final_buffer_behavior>
 80084fe:	b190      	cbz	r0, 8008526 <ucdr_serialize_int16_t+0xae>
 8008500:	7d23      	ldrb	r3, [r4, #20]
 8008502:	2b01      	cmp	r3, #1
 8008504:	68a3      	ldr	r3, [r4, #8]
 8008506:	d014      	beq.n	8008532 <ucdr_serialize_int16_t+0xba>
 8008508:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800850c:	701a      	strb	r2, [r3, #0]
 800850e:	68a3      	ldr	r3, [r4, #8]
 8008510:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008514:	705a      	strb	r2, [r3, #1]
 8008516:	68a2      	ldr	r2, [r4, #8]
 8008518:	6923      	ldr	r3, [r4, #16]
 800851a:	3202      	adds	r2, #2
 800851c:	3302      	adds	r3, #2
 800851e:	2102      	movs	r1, #2
 8008520:	60a2      	str	r2, [r4, #8]
 8008522:	6123      	str	r3, [r4, #16]
 8008524:	7561      	strb	r1, [r4, #21]
 8008526:	7da0      	ldrb	r0, [r4, #22]
 8008528:	f080 0001 	eor.w	r0, r0, #1
 800852c:	b002      	add	sp, #8
 800852e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008532:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8008536:	801a      	strh	r2, [r3, #0]
 8008538:	e7ed      	b.n	8008516 <ucdr_serialize_int16_t+0x9e>
 800853a:	68a2      	ldr	r2, [r4, #8]
 800853c:	6923      	ldr	r3, [r4, #16]
 800853e:	7da0      	ldrb	r0, [r4, #22]
 8008540:	7567      	strb	r7, [r4, #21]
 8008542:	1b92      	subs	r2, r2, r6
 8008544:	1b9b      	subs	r3, r3, r6
 8008546:	f080 0001 	eor.w	r0, r0, #1
 800854a:	60a2      	str	r2, [r4, #8]
 800854c:	6123      	str	r3, [r4, #16]
 800854e:	b002      	add	sp, #8
 8008550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008554:	68a3      	ldr	r3, [r4, #8]
 8008556:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800855a:	701a      	strb	r2, [r3, #0]
 800855c:	e7bc      	b.n	80084d8 <ucdr_serialize_int16_t+0x60>
 800855e:	4628      	mov	r0, r5
 8008560:	f10d 0506 	add.w	r5, sp, #6
 8008564:	4629      	mov	r1, r5
 8008566:	4632      	mov	r2, r6
 8008568:	f00c ff5d 	bl	8015426 <memcpy>
 800856c:	68a0      	ldr	r0, [r4, #8]
 800856e:	4642      	mov	r2, r8
 8008570:	19a9      	adds	r1, r5, r6
 8008572:	f00c ff58 	bl	8015426 <memcpy>
 8008576:	e7af      	b.n	80084d8 <ucdr_serialize_int16_t+0x60>

08008578 <ucdr_deserialize_int16_t>:
 8008578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800857c:	460d      	mov	r5, r1
 800857e:	2102      	movs	r1, #2
 8008580:	4604      	mov	r4, r0
 8008582:	f000 fb8b 	bl	8008c9c <ucdr_buffer_alignment>
 8008586:	4601      	mov	r1, r0
 8008588:	4620      	mov	r0, r4
 800858a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800858e:	f000 fbc9 	bl	8008d24 <ucdr_advance_buffer>
 8008592:	2102      	movs	r1, #2
 8008594:	4620      	mov	r0, r4
 8008596:	f000 fb21 	bl	8008bdc <ucdr_check_buffer_available_for>
 800859a:	bb60      	cbnz	r0, 80085f6 <ucdr_deserialize_int16_t+0x7e>
 800859c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80085a0:	42be      	cmp	r6, r7
 80085a2:	d923      	bls.n	80085ec <ucdr_deserialize_int16_t+0x74>
 80085a4:	6923      	ldr	r3, [r4, #16]
 80085a6:	60a6      	str	r6, [r4, #8]
 80085a8:	1bf6      	subs	r6, r6, r7
 80085aa:	4433      	add	r3, r6
 80085ac:	f1c6 0902 	rsb	r9, r6, #2
 80085b0:	6123      	str	r3, [r4, #16]
 80085b2:	4649      	mov	r1, r9
 80085b4:	4620      	mov	r0, r4
 80085b6:	f000 fb1d 	bl	8008bf4 <ucdr_check_final_buffer_behavior>
 80085ba:	2800      	cmp	r0, #0
 80085bc:	d034      	beq.n	8008628 <ucdr_deserialize_int16_t+0xb0>
 80085be:	7d23      	ldrb	r3, [r4, #20]
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d042      	beq.n	800864a <ucdr_deserialize_int16_t+0xd2>
 80085c4:	787b      	ldrb	r3, [r7, #1]
 80085c6:	702b      	strb	r3, [r5, #0]
 80085c8:	2e00      	cmp	r6, #0
 80085ca:	d03a      	beq.n	8008642 <ucdr_deserialize_int16_t+0xca>
 80085cc:	783b      	ldrb	r3, [r7, #0]
 80085ce:	706b      	strb	r3, [r5, #1]
 80085d0:	6923      	ldr	r3, [r4, #16]
 80085d2:	68a2      	ldr	r2, [r4, #8]
 80085d4:	7da0      	ldrb	r0, [r4, #22]
 80085d6:	2102      	movs	r1, #2
 80085d8:	3302      	adds	r3, #2
 80085da:	444a      	add	r2, r9
 80085dc:	1b9b      	subs	r3, r3, r6
 80085de:	7561      	strb	r1, [r4, #21]
 80085e0:	60a2      	str	r2, [r4, #8]
 80085e2:	6123      	str	r3, [r4, #16]
 80085e4:	f080 0001 	eor.w	r0, r0, #1
 80085e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085ec:	2102      	movs	r1, #2
 80085ee:	4620      	mov	r0, r4
 80085f0:	f000 fb00 	bl	8008bf4 <ucdr_check_final_buffer_behavior>
 80085f4:	b180      	cbz	r0, 8008618 <ucdr_deserialize_int16_t+0xa0>
 80085f6:	7d23      	ldrb	r3, [r4, #20]
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	68a3      	ldr	r3, [r4, #8]
 80085fc:	d011      	beq.n	8008622 <ucdr_deserialize_int16_t+0xaa>
 80085fe:	785b      	ldrb	r3, [r3, #1]
 8008600:	702b      	strb	r3, [r5, #0]
 8008602:	68a3      	ldr	r3, [r4, #8]
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	706b      	strb	r3, [r5, #1]
 8008608:	68a2      	ldr	r2, [r4, #8]
 800860a:	6923      	ldr	r3, [r4, #16]
 800860c:	3202      	adds	r2, #2
 800860e:	3302      	adds	r3, #2
 8008610:	2102      	movs	r1, #2
 8008612:	60a2      	str	r2, [r4, #8]
 8008614:	6123      	str	r3, [r4, #16]
 8008616:	7561      	strb	r1, [r4, #21]
 8008618:	7da0      	ldrb	r0, [r4, #22]
 800861a:	f080 0001 	eor.w	r0, r0, #1
 800861e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008622:	881b      	ldrh	r3, [r3, #0]
 8008624:	802b      	strh	r3, [r5, #0]
 8008626:	e7ef      	b.n	8008608 <ucdr_deserialize_int16_t+0x90>
 8008628:	68a2      	ldr	r2, [r4, #8]
 800862a:	6923      	ldr	r3, [r4, #16]
 800862c:	7da0      	ldrb	r0, [r4, #22]
 800862e:	f884 8015 	strb.w	r8, [r4, #21]
 8008632:	1b92      	subs	r2, r2, r6
 8008634:	1b9b      	subs	r3, r3, r6
 8008636:	60a2      	str	r2, [r4, #8]
 8008638:	6123      	str	r3, [r4, #16]
 800863a:	f080 0001 	eor.w	r0, r0, #1
 800863e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008642:	68a3      	ldr	r3, [r4, #8]
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	706b      	strb	r3, [r5, #1]
 8008648:	e7c2      	b.n	80085d0 <ucdr_deserialize_int16_t+0x58>
 800864a:	4639      	mov	r1, r7
 800864c:	4632      	mov	r2, r6
 800864e:	4628      	mov	r0, r5
 8008650:	f00c fee9 	bl	8015426 <memcpy>
 8008654:	68a1      	ldr	r1, [r4, #8]
 8008656:	464a      	mov	r2, r9
 8008658:	19a8      	adds	r0, r5, r6
 800865a:	f00c fee4 	bl	8015426 <memcpy>
 800865e:	e7b7      	b.n	80085d0 <ucdr_deserialize_int16_t+0x58>

08008660 <ucdr_serialize_int32_t>:
 8008660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008664:	b082      	sub	sp, #8
 8008666:	4604      	mov	r4, r0
 8008668:	9101      	str	r1, [sp, #4]
 800866a:	2104      	movs	r1, #4
 800866c:	f000 fb16 	bl	8008c9c <ucdr_buffer_alignment>
 8008670:	4601      	mov	r1, r0
 8008672:	4620      	mov	r0, r4
 8008674:	7d67      	ldrb	r7, [r4, #21]
 8008676:	f000 fb55 	bl	8008d24 <ucdr_advance_buffer>
 800867a:	2104      	movs	r1, #4
 800867c:	4620      	mov	r0, r4
 800867e:	f000 faad 	bl	8008bdc <ucdr_check_buffer_available_for>
 8008682:	2800      	cmp	r0, #0
 8008684:	d139      	bne.n	80086fa <ucdr_serialize_int32_t+0x9a>
 8008686:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800868a:	42ab      	cmp	r3, r5
 800868c:	d930      	bls.n	80086f0 <ucdr_serialize_int32_t+0x90>
 800868e:	1b5e      	subs	r6, r3, r5
 8008690:	60a3      	str	r3, [r4, #8]
 8008692:	6923      	ldr	r3, [r4, #16]
 8008694:	f1c6 0804 	rsb	r8, r6, #4
 8008698:	4433      	add	r3, r6
 800869a:	6123      	str	r3, [r4, #16]
 800869c:	4641      	mov	r1, r8
 800869e:	4620      	mov	r0, r4
 80086a0:	f000 faa8 	bl	8008bf4 <ucdr_check_final_buffer_behavior>
 80086a4:	2800      	cmp	r0, #0
 80086a6:	d04c      	beq.n	8008742 <ucdr_serialize_int32_t+0xe2>
 80086a8:	7d23      	ldrb	r3, [r4, #20]
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d063      	beq.n	8008776 <ucdr_serialize_int32_t+0x116>
 80086ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80086b2:	702b      	strb	r3, [r5, #0]
 80086b4:	2e00      	cmp	r6, #0
 80086b6:	d051      	beq.n	800875c <ucdr_serialize_int32_t+0xfc>
 80086b8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80086bc:	706b      	strb	r3, [r5, #1]
 80086be:	2e01      	cmp	r6, #1
 80086c0:	d050      	beq.n	8008764 <ucdr_serialize_int32_t+0x104>
 80086c2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80086c6:	70ab      	strb	r3, [r5, #2]
 80086c8:	2e02      	cmp	r6, #2
 80086ca:	d04f      	beq.n	800876c <ucdr_serialize_int32_t+0x10c>
 80086cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80086d0:	70eb      	strb	r3, [r5, #3]
 80086d2:	6923      	ldr	r3, [r4, #16]
 80086d4:	68a2      	ldr	r2, [r4, #8]
 80086d6:	7da0      	ldrb	r0, [r4, #22]
 80086d8:	3304      	adds	r3, #4
 80086da:	1b9e      	subs	r6, r3, r6
 80086dc:	4442      	add	r2, r8
 80086de:	2304      	movs	r3, #4
 80086e0:	f080 0001 	eor.w	r0, r0, #1
 80086e4:	60a2      	str	r2, [r4, #8]
 80086e6:	6126      	str	r6, [r4, #16]
 80086e8:	7563      	strb	r3, [r4, #21]
 80086ea:	b002      	add	sp, #8
 80086ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086f0:	2104      	movs	r1, #4
 80086f2:	4620      	mov	r0, r4
 80086f4:	f000 fa7e 	bl	8008bf4 <ucdr_check_final_buffer_behavior>
 80086f8:	b1d0      	cbz	r0, 8008730 <ucdr_serialize_int32_t+0xd0>
 80086fa:	7d23      	ldrb	r3, [r4, #20]
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	68a3      	ldr	r3, [r4, #8]
 8008700:	d01c      	beq.n	800873c <ucdr_serialize_int32_t+0xdc>
 8008702:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008706:	701a      	strb	r2, [r3, #0]
 8008708:	68a3      	ldr	r3, [r4, #8]
 800870a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800870e:	705a      	strb	r2, [r3, #1]
 8008710:	68a3      	ldr	r3, [r4, #8]
 8008712:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008716:	709a      	strb	r2, [r3, #2]
 8008718:	68a3      	ldr	r3, [r4, #8]
 800871a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800871e:	70da      	strb	r2, [r3, #3]
 8008720:	68a2      	ldr	r2, [r4, #8]
 8008722:	6923      	ldr	r3, [r4, #16]
 8008724:	3204      	adds	r2, #4
 8008726:	3304      	adds	r3, #4
 8008728:	2104      	movs	r1, #4
 800872a:	60a2      	str	r2, [r4, #8]
 800872c:	6123      	str	r3, [r4, #16]
 800872e:	7561      	strb	r1, [r4, #21]
 8008730:	7da0      	ldrb	r0, [r4, #22]
 8008732:	f080 0001 	eor.w	r0, r0, #1
 8008736:	b002      	add	sp, #8
 8008738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800873c:	9a01      	ldr	r2, [sp, #4]
 800873e:	601a      	str	r2, [r3, #0]
 8008740:	e7ee      	b.n	8008720 <ucdr_serialize_int32_t+0xc0>
 8008742:	68a2      	ldr	r2, [r4, #8]
 8008744:	6923      	ldr	r3, [r4, #16]
 8008746:	7da0      	ldrb	r0, [r4, #22]
 8008748:	7567      	strb	r7, [r4, #21]
 800874a:	1b92      	subs	r2, r2, r6
 800874c:	1b9b      	subs	r3, r3, r6
 800874e:	f080 0001 	eor.w	r0, r0, #1
 8008752:	60a2      	str	r2, [r4, #8]
 8008754:	6123      	str	r3, [r4, #16]
 8008756:	b002      	add	sp, #8
 8008758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800875c:	68a3      	ldr	r3, [r4, #8]
 800875e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008762:	701a      	strb	r2, [r3, #0]
 8008764:	68a3      	ldr	r3, [r4, #8]
 8008766:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800876a:	701a      	strb	r2, [r3, #0]
 800876c:	68a3      	ldr	r3, [r4, #8]
 800876e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008772:	701a      	strb	r2, [r3, #0]
 8008774:	e7ad      	b.n	80086d2 <ucdr_serialize_int32_t+0x72>
 8008776:	4628      	mov	r0, r5
 8008778:	ad01      	add	r5, sp, #4
 800877a:	4629      	mov	r1, r5
 800877c:	4632      	mov	r2, r6
 800877e:	f00c fe52 	bl	8015426 <memcpy>
 8008782:	68a0      	ldr	r0, [r4, #8]
 8008784:	4642      	mov	r2, r8
 8008786:	19a9      	adds	r1, r5, r6
 8008788:	f00c fe4d 	bl	8015426 <memcpy>
 800878c:	e7a1      	b.n	80086d2 <ucdr_serialize_int32_t+0x72>
 800878e:	bf00      	nop

08008790 <ucdr_deserialize_int32_t>:
 8008790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008794:	460d      	mov	r5, r1
 8008796:	2104      	movs	r1, #4
 8008798:	4604      	mov	r4, r0
 800879a:	f000 fa7f 	bl	8008c9c <ucdr_buffer_alignment>
 800879e:	4601      	mov	r1, r0
 80087a0:	4620      	mov	r0, r4
 80087a2:	f894 8015 	ldrb.w	r8, [r4, #21]
 80087a6:	f000 fabd 	bl	8008d24 <ucdr_advance_buffer>
 80087aa:	2104      	movs	r1, #4
 80087ac:	4620      	mov	r0, r4
 80087ae:	f000 fa15 	bl	8008bdc <ucdr_check_buffer_available_for>
 80087b2:	2800      	cmp	r0, #0
 80087b4:	d138      	bne.n	8008828 <ucdr_deserialize_int32_t+0x98>
 80087b6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80087ba:	42b7      	cmp	r7, r6
 80087bc:	d92f      	bls.n	800881e <ucdr_deserialize_int32_t+0x8e>
 80087be:	6923      	ldr	r3, [r4, #16]
 80087c0:	60a7      	str	r7, [r4, #8]
 80087c2:	1bbf      	subs	r7, r7, r6
 80087c4:	443b      	add	r3, r7
 80087c6:	f1c7 0904 	rsb	r9, r7, #4
 80087ca:	6123      	str	r3, [r4, #16]
 80087cc:	4649      	mov	r1, r9
 80087ce:	4620      	mov	r0, r4
 80087d0:	f000 fa10 	bl	8008bf4 <ucdr_check_final_buffer_behavior>
 80087d4:	2800      	cmp	r0, #0
 80087d6:	d046      	beq.n	8008866 <ucdr_deserialize_int32_t+0xd6>
 80087d8:	7d23      	ldrb	r3, [r4, #20]
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d05c      	beq.n	8008898 <ucdr_deserialize_int32_t+0x108>
 80087de:	78f3      	ldrb	r3, [r6, #3]
 80087e0:	702b      	strb	r3, [r5, #0]
 80087e2:	2f00      	cmp	r7, #0
 80087e4:	d04c      	beq.n	8008880 <ucdr_deserialize_int32_t+0xf0>
 80087e6:	78b3      	ldrb	r3, [r6, #2]
 80087e8:	706b      	strb	r3, [r5, #1]
 80087ea:	2f01      	cmp	r7, #1
 80087ec:	f105 0302 	add.w	r3, r5, #2
 80087f0:	d04a      	beq.n	8008888 <ucdr_deserialize_int32_t+0xf8>
 80087f2:	7873      	ldrb	r3, [r6, #1]
 80087f4:	70ab      	strb	r3, [r5, #2]
 80087f6:	2f02      	cmp	r7, #2
 80087f8:	f105 0303 	add.w	r3, r5, #3
 80087fc:	d048      	beq.n	8008890 <ucdr_deserialize_int32_t+0x100>
 80087fe:	7833      	ldrb	r3, [r6, #0]
 8008800:	70eb      	strb	r3, [r5, #3]
 8008802:	6923      	ldr	r3, [r4, #16]
 8008804:	68a2      	ldr	r2, [r4, #8]
 8008806:	7da0      	ldrb	r0, [r4, #22]
 8008808:	2104      	movs	r1, #4
 800880a:	3304      	adds	r3, #4
 800880c:	444a      	add	r2, r9
 800880e:	1bdb      	subs	r3, r3, r7
 8008810:	7561      	strb	r1, [r4, #21]
 8008812:	60a2      	str	r2, [r4, #8]
 8008814:	6123      	str	r3, [r4, #16]
 8008816:	f080 0001 	eor.w	r0, r0, #1
 800881a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800881e:	2104      	movs	r1, #4
 8008820:	4620      	mov	r0, r4
 8008822:	f000 f9e7 	bl	8008bf4 <ucdr_check_final_buffer_behavior>
 8008826:	b1b0      	cbz	r0, 8008856 <ucdr_deserialize_int32_t+0xc6>
 8008828:	7d23      	ldrb	r3, [r4, #20]
 800882a:	2b01      	cmp	r3, #1
 800882c:	68a3      	ldr	r3, [r4, #8]
 800882e:	d017      	beq.n	8008860 <ucdr_deserialize_int32_t+0xd0>
 8008830:	78db      	ldrb	r3, [r3, #3]
 8008832:	702b      	strb	r3, [r5, #0]
 8008834:	68a3      	ldr	r3, [r4, #8]
 8008836:	789b      	ldrb	r3, [r3, #2]
 8008838:	706b      	strb	r3, [r5, #1]
 800883a:	68a3      	ldr	r3, [r4, #8]
 800883c:	785b      	ldrb	r3, [r3, #1]
 800883e:	70ab      	strb	r3, [r5, #2]
 8008840:	68a3      	ldr	r3, [r4, #8]
 8008842:	781b      	ldrb	r3, [r3, #0]
 8008844:	70eb      	strb	r3, [r5, #3]
 8008846:	68a2      	ldr	r2, [r4, #8]
 8008848:	6923      	ldr	r3, [r4, #16]
 800884a:	3204      	adds	r2, #4
 800884c:	3304      	adds	r3, #4
 800884e:	2104      	movs	r1, #4
 8008850:	60a2      	str	r2, [r4, #8]
 8008852:	6123      	str	r3, [r4, #16]
 8008854:	7561      	strb	r1, [r4, #21]
 8008856:	7da0      	ldrb	r0, [r4, #22]
 8008858:	f080 0001 	eor.w	r0, r0, #1
 800885c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	602b      	str	r3, [r5, #0]
 8008864:	e7ef      	b.n	8008846 <ucdr_deserialize_int32_t+0xb6>
 8008866:	68a2      	ldr	r2, [r4, #8]
 8008868:	6923      	ldr	r3, [r4, #16]
 800886a:	7da0      	ldrb	r0, [r4, #22]
 800886c:	f884 8015 	strb.w	r8, [r4, #21]
 8008870:	1bd2      	subs	r2, r2, r7
 8008872:	1bdb      	subs	r3, r3, r7
 8008874:	60a2      	str	r2, [r4, #8]
 8008876:	6123      	str	r3, [r4, #16]
 8008878:	f080 0001 	eor.w	r0, r0, #1
 800887c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008880:	68a3      	ldr	r3, [r4, #8]
 8008882:	789b      	ldrb	r3, [r3, #2]
 8008884:	706b      	strb	r3, [r5, #1]
 8008886:	1cab      	adds	r3, r5, #2
 8008888:	68a2      	ldr	r2, [r4, #8]
 800888a:	7852      	ldrb	r2, [r2, #1]
 800888c:	f803 2b01 	strb.w	r2, [r3], #1
 8008890:	68a2      	ldr	r2, [r4, #8]
 8008892:	7812      	ldrb	r2, [r2, #0]
 8008894:	701a      	strb	r2, [r3, #0]
 8008896:	e7b4      	b.n	8008802 <ucdr_deserialize_int32_t+0x72>
 8008898:	4631      	mov	r1, r6
 800889a:	463a      	mov	r2, r7
 800889c:	4628      	mov	r0, r5
 800889e:	f00c fdc2 	bl	8015426 <memcpy>
 80088a2:	68a1      	ldr	r1, [r4, #8]
 80088a4:	464a      	mov	r2, r9
 80088a6:	19e8      	adds	r0, r5, r7
 80088a8:	f00c fdbd 	bl	8015426 <memcpy>
 80088ac:	e7a9      	b.n	8008802 <ucdr_deserialize_int32_t+0x72>
 80088ae:	bf00      	nop

080088b0 <ucdr_serialize_double>:
 80088b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088b4:	2108      	movs	r1, #8
 80088b6:	b082      	sub	sp, #8
 80088b8:	4604      	mov	r4, r0
 80088ba:	ed8d 0b00 	vstr	d0, [sp]
 80088be:	f000 f9ed 	bl	8008c9c <ucdr_buffer_alignment>
 80088c2:	4601      	mov	r1, r0
 80088c4:	4620      	mov	r0, r4
 80088c6:	7d67      	ldrb	r7, [r4, #21]
 80088c8:	f000 fa2c 	bl	8008d24 <ucdr_advance_buffer>
 80088cc:	2108      	movs	r1, #8
 80088ce:	4620      	mov	r0, r4
 80088d0:	f000 f984 	bl	8008bdc <ucdr_check_buffer_available_for>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	d14e      	bne.n	8008976 <ucdr_serialize_double+0xc6>
 80088d8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80088dc:	42ab      	cmp	r3, r5
 80088de:	d945      	bls.n	800896c <ucdr_serialize_double+0xbc>
 80088e0:	1b5e      	subs	r6, r3, r5
 80088e2:	60a3      	str	r3, [r4, #8]
 80088e4:	6923      	ldr	r3, [r4, #16]
 80088e6:	f1c6 0808 	rsb	r8, r6, #8
 80088ea:	4433      	add	r3, r6
 80088ec:	6123      	str	r3, [r4, #16]
 80088ee:	4641      	mov	r1, r8
 80088f0:	4620      	mov	r0, r4
 80088f2:	f000 f97f 	bl	8008bf4 <ucdr_check_final_buffer_behavior>
 80088f6:	2800      	cmp	r0, #0
 80088f8:	d074      	beq.n	80089e4 <ucdr_serialize_double+0x134>
 80088fa:	7d23      	ldrb	r3, [r4, #20]
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	f000 809b 	beq.w	8008a38 <ucdr_serialize_double+0x188>
 8008902:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008906:	702b      	strb	r3, [r5, #0]
 8008908:	2e00      	cmp	r6, #0
 800890a:	d078      	beq.n	80089fe <ucdr_serialize_double+0x14e>
 800890c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008910:	706b      	strb	r3, [r5, #1]
 8008912:	2e01      	cmp	r6, #1
 8008914:	d077      	beq.n	8008a06 <ucdr_serialize_double+0x156>
 8008916:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800891a:	70ab      	strb	r3, [r5, #2]
 800891c:	2e02      	cmp	r6, #2
 800891e:	d076      	beq.n	8008a0e <ucdr_serialize_double+0x15e>
 8008920:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8008924:	70eb      	strb	r3, [r5, #3]
 8008926:	2e03      	cmp	r6, #3
 8008928:	d075      	beq.n	8008a16 <ucdr_serialize_double+0x166>
 800892a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800892e:	712b      	strb	r3, [r5, #4]
 8008930:	2e04      	cmp	r6, #4
 8008932:	d074      	beq.n	8008a1e <ucdr_serialize_double+0x16e>
 8008934:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8008938:	716b      	strb	r3, [r5, #5]
 800893a:	2e05      	cmp	r6, #5
 800893c:	d073      	beq.n	8008a26 <ucdr_serialize_double+0x176>
 800893e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8008942:	71ab      	strb	r3, [r5, #6]
 8008944:	2e06      	cmp	r6, #6
 8008946:	d072      	beq.n	8008a2e <ucdr_serialize_double+0x17e>
 8008948:	f89d 3000 	ldrb.w	r3, [sp]
 800894c:	71eb      	strb	r3, [r5, #7]
 800894e:	6923      	ldr	r3, [r4, #16]
 8008950:	68a2      	ldr	r2, [r4, #8]
 8008952:	7da0      	ldrb	r0, [r4, #22]
 8008954:	3308      	adds	r3, #8
 8008956:	1b9e      	subs	r6, r3, r6
 8008958:	4442      	add	r2, r8
 800895a:	2308      	movs	r3, #8
 800895c:	f080 0001 	eor.w	r0, r0, #1
 8008960:	60a2      	str	r2, [r4, #8]
 8008962:	6126      	str	r6, [r4, #16]
 8008964:	7563      	strb	r3, [r4, #21]
 8008966:	b002      	add	sp, #8
 8008968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800896c:	2108      	movs	r1, #8
 800896e:	4620      	mov	r0, r4
 8008970:	f000 f940 	bl	8008bf4 <ucdr_check_final_buffer_behavior>
 8008974:	b350      	cbz	r0, 80089cc <ucdr_serialize_double+0x11c>
 8008976:	7d23      	ldrb	r3, [r4, #20]
 8008978:	2b01      	cmp	r3, #1
 800897a:	d02d      	beq.n	80089d8 <ucdr_serialize_double+0x128>
 800897c:	68a3      	ldr	r3, [r4, #8]
 800897e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8008982:	701a      	strb	r2, [r3, #0]
 8008984:	68a3      	ldr	r3, [r4, #8]
 8008986:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800898a:	705a      	strb	r2, [r3, #1]
 800898c:	68a3      	ldr	r3, [r4, #8]
 800898e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008992:	709a      	strb	r2, [r3, #2]
 8008994:	68a3      	ldr	r3, [r4, #8]
 8008996:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800899a:	70da      	strb	r2, [r3, #3]
 800899c:	68a3      	ldr	r3, [r4, #8]
 800899e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80089a2:	711a      	strb	r2, [r3, #4]
 80089a4:	68a3      	ldr	r3, [r4, #8]
 80089a6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80089aa:	715a      	strb	r2, [r3, #5]
 80089ac:	68a3      	ldr	r3, [r4, #8]
 80089ae:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80089b2:	719a      	strb	r2, [r3, #6]
 80089b4:	68a3      	ldr	r3, [r4, #8]
 80089b6:	f89d 2000 	ldrb.w	r2, [sp]
 80089ba:	71da      	strb	r2, [r3, #7]
 80089bc:	68a2      	ldr	r2, [r4, #8]
 80089be:	6923      	ldr	r3, [r4, #16]
 80089c0:	3208      	adds	r2, #8
 80089c2:	3308      	adds	r3, #8
 80089c4:	2108      	movs	r1, #8
 80089c6:	60a2      	str	r2, [r4, #8]
 80089c8:	6123      	str	r3, [r4, #16]
 80089ca:	7561      	strb	r1, [r4, #21]
 80089cc:	7da0      	ldrb	r0, [r4, #22]
 80089ce:	f080 0001 	eor.w	r0, r0, #1
 80089d2:	b002      	add	sp, #8
 80089d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089d8:	466b      	mov	r3, sp
 80089da:	cb03      	ldmia	r3!, {r0, r1}
 80089dc:	68a3      	ldr	r3, [r4, #8]
 80089de:	6018      	str	r0, [r3, #0]
 80089e0:	6059      	str	r1, [r3, #4]
 80089e2:	e7eb      	b.n	80089bc <ucdr_serialize_double+0x10c>
 80089e4:	68a2      	ldr	r2, [r4, #8]
 80089e6:	6923      	ldr	r3, [r4, #16]
 80089e8:	7da0      	ldrb	r0, [r4, #22]
 80089ea:	7567      	strb	r7, [r4, #21]
 80089ec:	1b92      	subs	r2, r2, r6
 80089ee:	1b9b      	subs	r3, r3, r6
 80089f0:	f080 0001 	eor.w	r0, r0, #1
 80089f4:	60a2      	str	r2, [r4, #8]
 80089f6:	6123      	str	r3, [r4, #16]
 80089f8:	b002      	add	sp, #8
 80089fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089fe:	68a3      	ldr	r3, [r4, #8]
 8008a00:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8008a04:	701a      	strb	r2, [r3, #0]
 8008a06:	68a3      	ldr	r3, [r4, #8]
 8008a08:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8008a0c:	701a      	strb	r2, [r3, #0]
 8008a0e:	68a3      	ldr	r3, [r4, #8]
 8008a10:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008a14:	701a      	strb	r2, [r3, #0]
 8008a16:	68a3      	ldr	r3, [r4, #8]
 8008a18:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8008a1c:	701a      	strb	r2, [r3, #0]
 8008a1e:	68a3      	ldr	r3, [r4, #8]
 8008a20:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8008a24:	701a      	strb	r2, [r3, #0]
 8008a26:	68a3      	ldr	r3, [r4, #8]
 8008a28:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8008a2c:	701a      	strb	r2, [r3, #0]
 8008a2e:	68a3      	ldr	r3, [r4, #8]
 8008a30:	f89d 2000 	ldrb.w	r2, [sp]
 8008a34:	701a      	strb	r2, [r3, #0]
 8008a36:	e78a      	b.n	800894e <ucdr_serialize_double+0x9e>
 8008a38:	4628      	mov	r0, r5
 8008a3a:	466d      	mov	r5, sp
 8008a3c:	4629      	mov	r1, r5
 8008a3e:	4632      	mov	r2, r6
 8008a40:	f00c fcf1 	bl	8015426 <memcpy>
 8008a44:	68a0      	ldr	r0, [r4, #8]
 8008a46:	4642      	mov	r2, r8
 8008a48:	19a9      	adds	r1, r5, r6
 8008a4a:	f00c fcec 	bl	8015426 <memcpy>
 8008a4e:	e77e      	b.n	800894e <ucdr_serialize_double+0x9e>

08008a50 <ucdr_deserialize_double>:
 8008a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a54:	460d      	mov	r5, r1
 8008a56:	2108      	movs	r1, #8
 8008a58:	4604      	mov	r4, r0
 8008a5a:	f000 f91f 	bl	8008c9c <ucdr_buffer_alignment>
 8008a5e:	4601      	mov	r1, r0
 8008a60:	4620      	mov	r0, r4
 8008a62:	f894 9015 	ldrb.w	r9, [r4, #21]
 8008a66:	f000 f95d 	bl	8008d24 <ucdr_advance_buffer>
 8008a6a:	2108      	movs	r1, #8
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	f000 f8b5 	bl	8008bdc <ucdr_check_buffer_available_for>
 8008a72:	2800      	cmp	r0, #0
 8008a74:	d151      	bne.n	8008b1a <ucdr_deserialize_double+0xca>
 8008a76:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8008a7a:	42be      	cmp	r6, r7
 8008a7c:	d948      	bls.n	8008b10 <ucdr_deserialize_double+0xc0>
 8008a7e:	6923      	ldr	r3, [r4, #16]
 8008a80:	60a6      	str	r6, [r4, #8]
 8008a82:	1bf6      	subs	r6, r6, r7
 8008a84:	4433      	add	r3, r6
 8008a86:	f1c6 0808 	rsb	r8, r6, #8
 8008a8a:	6123      	str	r3, [r4, #16]
 8008a8c:	4641      	mov	r1, r8
 8008a8e:	4620      	mov	r0, r4
 8008a90:	f000 f8b0 	bl	8008bf4 <ucdr_check_final_buffer_behavior>
 8008a94:	2800      	cmp	r0, #0
 8008a96:	d06d      	beq.n	8008b74 <ucdr_deserialize_double+0x124>
 8008a98:	7d23      	ldrb	r3, [r4, #20]
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	f000 8093 	beq.w	8008bc6 <ucdr_deserialize_double+0x176>
 8008aa0:	79fb      	ldrb	r3, [r7, #7]
 8008aa2:	702b      	strb	r3, [r5, #0]
 8008aa4:	2e00      	cmp	r6, #0
 8008aa6:	d072      	beq.n	8008b8e <ucdr_deserialize_double+0x13e>
 8008aa8:	79bb      	ldrb	r3, [r7, #6]
 8008aaa:	706b      	strb	r3, [r5, #1]
 8008aac:	2e01      	cmp	r6, #1
 8008aae:	f105 0302 	add.w	r3, r5, #2
 8008ab2:	d070      	beq.n	8008b96 <ucdr_deserialize_double+0x146>
 8008ab4:	797b      	ldrb	r3, [r7, #5]
 8008ab6:	70ab      	strb	r3, [r5, #2]
 8008ab8:	2e02      	cmp	r6, #2
 8008aba:	f105 0303 	add.w	r3, r5, #3
 8008abe:	d06e      	beq.n	8008b9e <ucdr_deserialize_double+0x14e>
 8008ac0:	793b      	ldrb	r3, [r7, #4]
 8008ac2:	70eb      	strb	r3, [r5, #3]
 8008ac4:	2e03      	cmp	r6, #3
 8008ac6:	f105 0304 	add.w	r3, r5, #4
 8008aca:	d06c      	beq.n	8008ba6 <ucdr_deserialize_double+0x156>
 8008acc:	78fb      	ldrb	r3, [r7, #3]
 8008ace:	712b      	strb	r3, [r5, #4]
 8008ad0:	2e04      	cmp	r6, #4
 8008ad2:	f105 0305 	add.w	r3, r5, #5
 8008ad6:	d06a      	beq.n	8008bae <ucdr_deserialize_double+0x15e>
 8008ad8:	78bb      	ldrb	r3, [r7, #2]
 8008ada:	716b      	strb	r3, [r5, #5]
 8008adc:	2e05      	cmp	r6, #5
 8008ade:	f105 0306 	add.w	r3, r5, #6
 8008ae2:	d068      	beq.n	8008bb6 <ucdr_deserialize_double+0x166>
 8008ae4:	787b      	ldrb	r3, [r7, #1]
 8008ae6:	71ab      	strb	r3, [r5, #6]
 8008ae8:	2e06      	cmp	r6, #6
 8008aea:	f105 0307 	add.w	r3, r5, #7
 8008aee:	d066      	beq.n	8008bbe <ucdr_deserialize_double+0x16e>
 8008af0:	783b      	ldrb	r3, [r7, #0]
 8008af2:	71eb      	strb	r3, [r5, #7]
 8008af4:	6923      	ldr	r3, [r4, #16]
 8008af6:	68a2      	ldr	r2, [r4, #8]
 8008af8:	7da0      	ldrb	r0, [r4, #22]
 8008afa:	3308      	adds	r3, #8
 8008afc:	1b9e      	subs	r6, r3, r6
 8008afe:	2308      	movs	r3, #8
 8008b00:	4442      	add	r2, r8
 8008b02:	7563      	strb	r3, [r4, #21]
 8008b04:	60a2      	str	r2, [r4, #8]
 8008b06:	6126      	str	r6, [r4, #16]
 8008b08:	f080 0001 	eor.w	r0, r0, #1
 8008b0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b10:	2108      	movs	r1, #8
 8008b12:	4620      	mov	r0, r4
 8008b14:	f000 f86e 	bl	8008bf4 <ucdr_check_final_buffer_behavior>
 8008b18:	b310      	cbz	r0, 8008b60 <ucdr_deserialize_double+0x110>
 8008b1a:	7d23      	ldrb	r3, [r4, #20]
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	68a3      	ldr	r3, [r4, #8]
 8008b20:	d023      	beq.n	8008b6a <ucdr_deserialize_double+0x11a>
 8008b22:	79db      	ldrb	r3, [r3, #7]
 8008b24:	702b      	strb	r3, [r5, #0]
 8008b26:	68a3      	ldr	r3, [r4, #8]
 8008b28:	799b      	ldrb	r3, [r3, #6]
 8008b2a:	706b      	strb	r3, [r5, #1]
 8008b2c:	68a3      	ldr	r3, [r4, #8]
 8008b2e:	795b      	ldrb	r3, [r3, #5]
 8008b30:	70ab      	strb	r3, [r5, #2]
 8008b32:	68a3      	ldr	r3, [r4, #8]
 8008b34:	791b      	ldrb	r3, [r3, #4]
 8008b36:	70eb      	strb	r3, [r5, #3]
 8008b38:	68a3      	ldr	r3, [r4, #8]
 8008b3a:	78db      	ldrb	r3, [r3, #3]
 8008b3c:	712b      	strb	r3, [r5, #4]
 8008b3e:	68a3      	ldr	r3, [r4, #8]
 8008b40:	789b      	ldrb	r3, [r3, #2]
 8008b42:	716b      	strb	r3, [r5, #5]
 8008b44:	68a3      	ldr	r3, [r4, #8]
 8008b46:	785b      	ldrb	r3, [r3, #1]
 8008b48:	71ab      	strb	r3, [r5, #6]
 8008b4a:	68a3      	ldr	r3, [r4, #8]
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	71eb      	strb	r3, [r5, #7]
 8008b50:	68a2      	ldr	r2, [r4, #8]
 8008b52:	6923      	ldr	r3, [r4, #16]
 8008b54:	3208      	adds	r2, #8
 8008b56:	3308      	adds	r3, #8
 8008b58:	2108      	movs	r1, #8
 8008b5a:	60a2      	str	r2, [r4, #8]
 8008b5c:	6123      	str	r3, [r4, #16]
 8008b5e:	7561      	strb	r1, [r4, #21]
 8008b60:	7da0      	ldrb	r0, [r4, #22]
 8008b62:	f080 0001 	eor.w	r0, r0, #1
 8008b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	606b      	str	r3, [r5, #4]
 8008b70:	602a      	str	r2, [r5, #0]
 8008b72:	e7ed      	b.n	8008b50 <ucdr_deserialize_double+0x100>
 8008b74:	68a2      	ldr	r2, [r4, #8]
 8008b76:	6923      	ldr	r3, [r4, #16]
 8008b78:	7da0      	ldrb	r0, [r4, #22]
 8008b7a:	f884 9015 	strb.w	r9, [r4, #21]
 8008b7e:	1b92      	subs	r2, r2, r6
 8008b80:	1b9b      	subs	r3, r3, r6
 8008b82:	60a2      	str	r2, [r4, #8]
 8008b84:	6123      	str	r3, [r4, #16]
 8008b86:	f080 0001 	eor.w	r0, r0, #1
 8008b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b8e:	68a3      	ldr	r3, [r4, #8]
 8008b90:	799b      	ldrb	r3, [r3, #6]
 8008b92:	706b      	strb	r3, [r5, #1]
 8008b94:	1cab      	adds	r3, r5, #2
 8008b96:	68a2      	ldr	r2, [r4, #8]
 8008b98:	7952      	ldrb	r2, [r2, #5]
 8008b9a:	f803 2b01 	strb.w	r2, [r3], #1
 8008b9e:	68a2      	ldr	r2, [r4, #8]
 8008ba0:	7912      	ldrb	r2, [r2, #4]
 8008ba2:	f803 2b01 	strb.w	r2, [r3], #1
 8008ba6:	68a2      	ldr	r2, [r4, #8]
 8008ba8:	78d2      	ldrb	r2, [r2, #3]
 8008baa:	f803 2b01 	strb.w	r2, [r3], #1
 8008bae:	68a2      	ldr	r2, [r4, #8]
 8008bb0:	7892      	ldrb	r2, [r2, #2]
 8008bb2:	f803 2b01 	strb.w	r2, [r3], #1
 8008bb6:	68a2      	ldr	r2, [r4, #8]
 8008bb8:	7852      	ldrb	r2, [r2, #1]
 8008bba:	f803 2b01 	strb.w	r2, [r3], #1
 8008bbe:	68a2      	ldr	r2, [r4, #8]
 8008bc0:	7812      	ldrb	r2, [r2, #0]
 8008bc2:	701a      	strb	r2, [r3, #0]
 8008bc4:	e796      	b.n	8008af4 <ucdr_deserialize_double+0xa4>
 8008bc6:	4639      	mov	r1, r7
 8008bc8:	4632      	mov	r2, r6
 8008bca:	4628      	mov	r0, r5
 8008bcc:	f00c fc2b 	bl	8015426 <memcpy>
 8008bd0:	68a1      	ldr	r1, [r4, #8]
 8008bd2:	4642      	mov	r2, r8
 8008bd4:	19a8      	adds	r0, r5, r6
 8008bd6:	f00c fc26 	bl	8015426 <memcpy>
 8008bda:	e78b      	b.n	8008af4 <ucdr_deserialize_double+0xa4>

08008bdc <ucdr_check_buffer_available_for>:
 8008bdc:	7d83      	ldrb	r3, [r0, #22]
 8008bde:	b93b      	cbnz	r3, 8008bf0 <ucdr_check_buffer_available_for+0x14>
 8008be0:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8008be4:	4419      	add	r1, r3
 8008be6:	4288      	cmp	r0, r1
 8008be8:	bf34      	ite	cc
 8008bea:	2000      	movcc	r0, #0
 8008bec:	2001      	movcs	r0, #1
 8008bee:	4770      	bx	lr
 8008bf0:	2000      	movs	r0, #0
 8008bf2:	4770      	bx	lr

08008bf4 <ucdr_check_final_buffer_behavior>:
 8008bf4:	7d83      	ldrb	r3, [r0, #22]
 8008bf6:	b943      	cbnz	r3, 8008c0a <ucdr_check_final_buffer_behavior+0x16>
 8008bf8:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8008bfc:	4291      	cmp	r1, r2
 8008bfe:	b510      	push	{r4, lr}
 8008c00:	4604      	mov	r4, r0
 8008c02:	d205      	bcs.n	8008c10 <ucdr_check_final_buffer_behavior+0x1c>
 8008c04:	2301      	movs	r3, #1
 8008c06:	4618      	mov	r0, r3
 8008c08:	bd10      	pop	{r4, pc}
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	4770      	bx	lr
 8008c10:	6982      	ldr	r2, [r0, #24]
 8008c12:	b13a      	cbz	r2, 8008c24 <ucdr_check_final_buffer_behavior+0x30>
 8008c14:	69c1      	ldr	r1, [r0, #28]
 8008c16:	4790      	blx	r2
 8008c18:	f080 0301 	eor.w	r3, r0, #1
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	75a0      	strb	r0, [r4, #22]
 8008c20:	4618      	mov	r0, r3
 8008c22:	bd10      	pop	{r4, pc}
 8008c24:	2001      	movs	r0, #1
 8008c26:	75a0      	strb	r0, [r4, #22]
 8008c28:	e7fa      	b.n	8008c20 <ucdr_check_final_buffer_behavior+0x2c>
 8008c2a:	bf00      	nop

08008c2c <ucdr_set_on_full_buffer_callback>:
 8008c2c:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop

08008c34 <ucdr_init_buffer_origin_offset_endian>:
 8008c34:	b410      	push	{r4}
 8008c36:	9c01      	ldr	r4, [sp, #4]
 8008c38:	6001      	str	r1, [r0, #0]
 8008c3a:	440a      	add	r2, r1
 8008c3c:	6042      	str	r2, [r0, #4]
 8008c3e:	190a      	adds	r2, r1, r4
 8008c40:	441c      	add	r4, r3
 8008c42:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8008c46:	6082      	str	r2, [r0, #8]
 8008c48:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8008c4c:	7503      	strb	r3, [r0, #20]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8008c54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c58:	7542      	strb	r2, [r0, #21]
 8008c5a:	7582      	strb	r2, [r0, #22]
 8008c5c:	4770      	bx	lr
 8008c5e:	bf00      	nop

08008c60 <ucdr_init_buffer_origin_offset>:
 8008c60:	b510      	push	{r4, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	9c04      	ldr	r4, [sp, #16]
 8008c66:	9400      	str	r4, [sp, #0]
 8008c68:	2401      	movs	r4, #1
 8008c6a:	9401      	str	r4, [sp, #4]
 8008c6c:	f7ff ffe2 	bl	8008c34 <ucdr_init_buffer_origin_offset_endian>
 8008c70:	b002      	add	sp, #8
 8008c72:	bd10      	pop	{r4, pc}

08008c74 <ucdr_init_buffer_origin>:
 8008c74:	b510      	push	{r4, lr}
 8008c76:	b082      	sub	sp, #8
 8008c78:	2400      	movs	r4, #0
 8008c7a:	9400      	str	r4, [sp, #0]
 8008c7c:	f7ff fff0 	bl	8008c60 <ucdr_init_buffer_origin_offset>
 8008c80:	b002      	add	sp, #8
 8008c82:	bd10      	pop	{r4, pc}

08008c84 <ucdr_init_buffer>:
 8008c84:	2300      	movs	r3, #0
 8008c86:	f7ff bff5 	b.w	8008c74 <ucdr_init_buffer_origin>
 8008c8a:	bf00      	nop

08008c8c <ucdr_alignment>:
 8008c8c:	fbb0 f3f1 	udiv	r3, r0, r1
 8008c90:	fb03 0011 	mls	r0, r3, r1, r0
 8008c94:	1a08      	subs	r0, r1, r0
 8008c96:	3901      	subs	r1, #1
 8008c98:	4008      	ands	r0, r1
 8008c9a:	4770      	bx	lr

08008c9c <ucdr_buffer_alignment>:
 8008c9c:	7d43      	ldrb	r3, [r0, #21]
 8008c9e:	428b      	cmp	r3, r1
 8008ca0:	d208      	bcs.n	8008cb4 <ucdr_buffer_alignment+0x18>
 8008ca2:	6900      	ldr	r0, [r0, #16]
 8008ca4:	fbb0 f3f1 	udiv	r3, r0, r1
 8008ca8:	fb01 0013 	mls	r0, r1, r3, r0
 8008cac:	1a08      	subs	r0, r1, r0
 8008cae:	3901      	subs	r1, #1
 8008cb0:	4008      	ands	r0, r1
 8008cb2:	4770      	bx	lr
 8008cb4:	2000      	movs	r0, #0
 8008cb6:	4770      	bx	lr

08008cb8 <ucdr_align_to>:
 8008cb8:	b538      	push	{r3, r4, r5, lr}
 8008cba:	4604      	mov	r4, r0
 8008cbc:	460d      	mov	r5, r1
 8008cbe:	f7ff ffed 	bl	8008c9c <ucdr_buffer_alignment>
 8008cc2:	68a3      	ldr	r3, [r4, #8]
 8008cc4:	6921      	ldr	r1, [r4, #16]
 8008cc6:	7565      	strb	r5, [r4, #21]
 8008cc8:	181a      	adds	r2, r3, r0
 8008cca:	6863      	ldr	r3, [r4, #4]
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	4408      	add	r0, r1
 8008cd0:	bf28      	it	cs
 8008cd2:	4613      	movcs	r3, r2
 8008cd4:	6120      	str	r0, [r4, #16]
 8008cd6:	60a3      	str	r3, [r4, #8]
 8008cd8:	bd38      	pop	{r3, r4, r5, pc}
 8008cda:	bf00      	nop

08008cdc <ucdr_buffer_length>:
 8008cdc:	6882      	ldr	r2, [r0, #8]
 8008cde:	6800      	ldr	r0, [r0, #0]
 8008ce0:	1a10      	subs	r0, r2, r0
 8008ce2:	4770      	bx	lr

08008ce4 <ucdr_buffer_remaining>:
 8008ce4:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8008ce8:	1a10      	subs	r0, r2, r0
 8008cea:	4770      	bx	lr

08008cec <ucdr_check_final_buffer_behavior_array>:
 8008cec:	b538      	push	{r3, r4, r5, lr}
 8008cee:	7d83      	ldrb	r3, [r0, #22]
 8008cf0:	b963      	cbnz	r3, 8008d0c <ucdr_check_final_buffer_behavior_array+0x20>
 8008cf2:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	4604      	mov	r4, r0
 8008cfa:	460d      	mov	r5, r1
 8008cfc:	d308      	bcc.n	8008d10 <ucdr_check_final_buffer_behavior_array+0x24>
 8008cfe:	b139      	cbz	r1, 8008d10 <ucdr_check_final_buffer_behavior_array+0x24>
 8008d00:	6983      	ldr	r3, [r0, #24]
 8008d02:	b163      	cbz	r3, 8008d1e <ucdr_check_final_buffer_behavior_array+0x32>
 8008d04:	69c1      	ldr	r1, [r0, #28]
 8008d06:	4798      	blx	r3
 8008d08:	75a0      	strb	r0, [r4, #22]
 8008d0a:	b108      	cbz	r0, 8008d10 <ucdr_check_final_buffer_behavior_array+0x24>
 8008d0c:	2000      	movs	r0, #0
 8008d0e:	bd38      	pop	{r3, r4, r5, pc}
 8008d10:	4620      	mov	r0, r4
 8008d12:	f7ff ffe7 	bl	8008ce4 <ucdr_buffer_remaining>
 8008d16:	42a8      	cmp	r0, r5
 8008d18:	bf28      	it	cs
 8008d1a:	4628      	movcs	r0, r5
 8008d1c:	bd38      	pop	{r3, r4, r5, pc}
 8008d1e:	2301      	movs	r3, #1
 8008d20:	7583      	strb	r3, [r0, #22]
 8008d22:	e7f3      	b.n	8008d0c <ucdr_check_final_buffer_behavior_array+0x20>

08008d24 <ucdr_advance_buffer>:
 8008d24:	b538      	push	{r3, r4, r5, lr}
 8008d26:	4604      	mov	r4, r0
 8008d28:	460d      	mov	r5, r1
 8008d2a:	f7ff ff57 	bl	8008bdc <ucdr_check_buffer_available_for>
 8008d2e:	b178      	cbz	r0, 8008d50 <ucdr_advance_buffer+0x2c>
 8008d30:	6923      	ldr	r3, [r4, #16]
 8008d32:	68a2      	ldr	r2, [r4, #8]
 8008d34:	442b      	add	r3, r5
 8008d36:	6123      	str	r3, [r4, #16]
 8008d38:	2301      	movs	r3, #1
 8008d3a:	442a      	add	r2, r5
 8008d3c:	7563      	strb	r3, [r4, #21]
 8008d3e:	60a2      	str	r2, [r4, #8]
 8008d40:	bd38      	pop	{r3, r4, r5, pc}
 8008d42:	68a2      	ldr	r2, [r4, #8]
 8008d44:	6923      	ldr	r3, [r4, #16]
 8008d46:	4402      	add	r2, r0
 8008d48:	4403      	add	r3, r0
 8008d4a:	1a2d      	subs	r5, r5, r0
 8008d4c:	60a2      	str	r2, [r4, #8]
 8008d4e:	6123      	str	r3, [r4, #16]
 8008d50:	4629      	mov	r1, r5
 8008d52:	2201      	movs	r2, #1
 8008d54:	4620      	mov	r0, r4
 8008d56:	f7ff ffc9 	bl	8008cec <ucdr_check_final_buffer_behavior_array>
 8008d5a:	2800      	cmp	r0, #0
 8008d5c:	d1f1      	bne.n	8008d42 <ucdr_advance_buffer+0x1e>
 8008d5e:	2301      	movs	r3, #1
 8008d60:	7563      	strb	r3, [r4, #21]
 8008d62:	bd38      	pop	{r3, r4, r5, pc}

08008d64 <rcl_get_zero_initialized_publisher>:
 8008d64:	4b01      	ldr	r3, [pc, #4]	; (8008d6c <rcl_get_zero_initialized_publisher+0x8>)
 8008d66:	6818      	ldr	r0, [r3, #0]
 8008d68:	4770      	bx	lr
 8008d6a:	bf00      	nop
 8008d6c:	080164c4 	.word	0x080164c4

08008d70 <rcl_publisher_init>:
 8008d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d74:	b088      	sub	sp, #32
 8008d76:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008d78:	2d00      	cmp	r5, #0
 8008d7a:	d069      	beq.n	8008e50 <rcl_publisher_init+0xe0>
 8008d7c:	f105 0950 	add.w	r9, r5, #80	; 0x50
 8008d80:	4604      	mov	r4, r0
 8008d82:	4648      	mov	r0, r9
 8008d84:	460e      	mov	r6, r1
 8008d86:	4690      	mov	r8, r2
 8008d88:	461f      	mov	r7, r3
 8008d8a:	f001 fb05 	bl	800a398 <rcutils_allocator_is_valid>
 8008d8e:	2800      	cmp	r0, #0
 8008d90:	d05e      	beq.n	8008e50 <rcl_publisher_init+0xe0>
 8008d92:	2c00      	cmp	r4, #0
 8008d94:	d05c      	beq.n	8008e50 <rcl_publisher_init+0xe0>
 8008d96:	f8d4 a000 	ldr.w	sl, [r4]
 8008d9a:	f1ba 0f00 	cmp.w	sl, #0
 8008d9e:	d004      	beq.n	8008daa <rcl_publisher_init+0x3a>
 8008da0:	2764      	movs	r7, #100	; 0x64
 8008da2:	4638      	mov	r0, r7
 8008da4:	b008      	add	sp, #32
 8008da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008daa:	4630      	mov	r0, r6
 8008dac:	f005 fe2c 	bl	800ea08 <rcl_node_is_valid>
 8008db0:	2800      	cmp	r0, #0
 8008db2:	d052      	beq.n	8008e5a <rcl_publisher_init+0xea>
 8008db4:	f1b8 0f00 	cmp.w	r8, #0
 8008db8:	d04a      	beq.n	8008e50 <rcl_publisher_init+0xe0>
 8008dba:	2f00      	cmp	r7, #0
 8008dbc:	d048      	beq.n	8008e50 <rcl_publisher_init+0xe0>
 8008dbe:	e9cd aa03 	strd	sl, sl, [sp, #12]
 8008dc2:	aa07      	add	r2, sp, #28
 8008dc4:	9205      	str	r2, [sp, #20]
 8008dc6:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8008dca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008dce:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8008dd2:	f8cd a01c 	str.w	sl, [sp, #28]
 8008dd6:	4639      	mov	r1, r7
 8008dd8:	e899 000c 	ldmia.w	r9, {r2, r3}
 8008ddc:	4630      	mov	r0, r6
 8008dde:	f005 fe67 	bl	800eab0 <rcl_node_resolve_name>
 8008de2:	4607      	mov	r7, r0
 8008de4:	2800      	cmp	r0, #0
 8008de6:	d14f      	bne.n	8008e88 <rcl_publisher_init+0x118>
 8008de8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8008dea:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8008dec:	20c8      	movs	r0, #200	; 0xc8
 8008dee:	4798      	blx	r3
 8008df0:	6020      	str	r0, [r4, #0]
 8008df2:	2800      	cmp	r0, #0
 8008df4:	d04e      	beq.n	8008e94 <rcl_publisher_init+0x124>
 8008df6:	4630      	mov	r0, r6
 8008df8:	f005 fe28 	bl	800ea4c <rcl_node_get_rmw_handle>
 8008dfc:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8008e00:	9300      	str	r3, [sp, #0]
 8008e02:	9a07      	ldr	r2, [sp, #28]
 8008e04:	6827      	ldr	r7, [r4, #0]
 8008e06:	462b      	mov	r3, r5
 8008e08:	4641      	mov	r1, r8
 8008e0a:	f001 fc77 	bl	800a6fc <rmw_create_publisher>
 8008e0e:	6823      	ldr	r3, [r4, #0]
 8008e10:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 8008e14:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8008e18:	b370      	cbz	r0, 8008e78 <rcl_publisher_init+0x108>
 8008e1a:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8008e1e:	f001 fd4b 	bl	800a8b8 <rmw_publisher_get_actual_qos>
 8008e22:	6823      	ldr	r3, [r4, #0]
 8008e24:	4607      	mov	r7, r0
 8008e26:	b9d0      	cbnz	r0, 8008e5e <rcl_publisher_init+0xee>
 8008e28:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
 8008e2c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8008e30:	4629      	mov	r1, r5
 8008e32:	2270      	movs	r2, #112	; 0x70
 8008e34:	4618      	mov	r0, r3
 8008e36:	f00c faf6 	bl	8015426 <memcpy>
 8008e3a:	6832      	ldr	r2, [r6, #0]
 8008e3c:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 8008e40:	9807      	ldr	r0, [sp, #28]
 8008e42:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8008e44:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8008e46:	4798      	blx	r3
 8008e48:	4638      	mov	r0, r7
 8008e4a:	b008      	add	sp, #32
 8008e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e50:	270b      	movs	r7, #11
 8008e52:	4638      	mov	r0, r7
 8008e54:	b008      	add	sp, #32
 8008e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e5a:	27c8      	movs	r7, #200	; 0xc8
 8008e5c:	e7a1      	b.n	8008da2 <rcl_publisher_init+0x32>
 8008e5e:	b18b      	cbz	r3, 8008e84 <rcl_publisher_init+0x114>
 8008e60:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8008e64:	b142      	cbz	r2, 8008e78 <rcl_publisher_init+0x108>
 8008e66:	4630      	mov	r0, r6
 8008e68:	f005 fdf0 	bl	800ea4c <rcl_node_get_rmw_handle>
 8008e6c:	6823      	ldr	r3, [r4, #0]
 8008e6e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8008e72:	f001 fd31 	bl	800a8d8 <rmw_destroy_publisher>
 8008e76:	6823      	ldr	r3, [r4, #0]
 8008e78:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8008e7a:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	4790      	blx	r2
 8008e80:	2300      	movs	r3, #0
 8008e82:	6023      	str	r3, [r4, #0]
 8008e84:	2701      	movs	r7, #1
 8008e86:	e7db      	b.n	8008e40 <rcl_publisher_init+0xd0>
 8008e88:	2867      	cmp	r0, #103	; 0x67
 8008e8a:	d0d9      	beq.n	8008e40 <rcl_publisher_init+0xd0>
 8008e8c:	2869      	cmp	r0, #105	; 0x69
 8008e8e:	d003      	beq.n	8008e98 <rcl_publisher_init+0x128>
 8008e90:	280a      	cmp	r0, #10
 8008e92:	d1f7      	bne.n	8008e84 <rcl_publisher_init+0x114>
 8008e94:	270a      	movs	r7, #10
 8008e96:	e7d3      	b.n	8008e40 <rcl_publisher_init+0xd0>
 8008e98:	2767      	movs	r7, #103	; 0x67
 8008e9a:	e7d1      	b.n	8008e40 <rcl_publisher_init+0xd0>

08008e9c <rcl_publisher_get_default_options>:
 8008e9c:	b570      	push	{r4, r5, r6, lr}
 8008e9e:	4d14      	ldr	r5, [pc, #80]	; (8008ef0 <rcl_publisher_get_default_options+0x54>)
 8008ea0:	4914      	ldr	r1, [pc, #80]	; (8008ef4 <rcl_publisher_get_default_options+0x58>)
 8008ea2:	b088      	sub	sp, #32
 8008ea4:	4604      	mov	r4, r0
 8008ea6:	2250      	movs	r2, #80	; 0x50
 8008ea8:	4628      	mov	r0, r5
 8008eaa:	f00c fabc 	bl	8015426 <memcpy>
 8008eae:	a802      	add	r0, sp, #8
 8008eb0:	f001 fa64 	bl	800a37c <rcutils_get_default_allocator>
 8008eb4:	f10d 0c08 	add.w	ip, sp, #8
 8008eb8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8008ebc:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8008ec0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8008ec4:	466e      	mov	r6, sp
 8008ec6:	f8dc 3000 	ldr.w	r3, [ip]
 8008eca:	f8ce 3000 	str.w	r3, [lr]
 8008ece:	4630      	mov	r0, r6
 8008ed0:	f001 fb96 	bl	800a600 <rmw_get_default_publisher_options>
 8008ed4:	e896 0003 	ldmia.w	r6, {r0, r1}
 8008ed8:	f105 0364 	add.w	r3, r5, #100	; 0x64
 8008edc:	e883 0003 	stmia.w	r3, {r0, r1}
 8008ee0:	2270      	movs	r2, #112	; 0x70
 8008ee2:	4629      	mov	r1, r5
 8008ee4:	4620      	mov	r0, r4
 8008ee6:	f00c fa9e 	bl	8015426 <memcpy>
 8008eea:	4620      	mov	r0, r4
 8008eec:	b008      	add	sp, #32
 8008eee:	bd70      	pop	{r4, r5, r6, pc}
 8008ef0:	20009248 	.word	0x20009248
 8008ef4:	080164c8 	.word	0x080164c8

08008ef8 <rcl_publish>:
 8008ef8:	b1f8      	cbz	r0, 8008f3a <rcl_publish+0x42>
 8008efa:	6803      	ldr	r3, [r0, #0]
 8008efc:	b570      	push	{r4, r5, r6, lr}
 8008efe:	4604      	mov	r4, r0
 8008f00:	b1b3      	cbz	r3, 8008f30 <rcl_publish+0x38>
 8008f02:	4616      	mov	r6, r2
 8008f04:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8008f08:	b192      	cbz	r2, 8008f30 <rcl_publish+0x38>
 8008f0a:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8008f0e:	460d      	mov	r5, r1
 8008f10:	f005 f892 	bl	800e038 <rcl_context_is_valid>
 8008f14:	b160      	cbz	r0, 8008f30 <rcl_publish+0x38>
 8008f16:	6823      	ldr	r3, [r4, #0]
 8008f18:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8008f1c:	b140      	cbz	r0, 8008f30 <rcl_publish+0x38>
 8008f1e:	b155      	cbz	r5, 8008f36 <rcl_publish+0x3e>
 8008f20:	4632      	mov	r2, r6
 8008f22:	4629      	mov	r1, r5
 8008f24:	f001 fb8a 	bl	800a63c <rmw_publish>
 8008f28:	3800      	subs	r0, #0
 8008f2a:	bf18      	it	ne
 8008f2c:	2001      	movne	r0, #1
 8008f2e:	bd70      	pop	{r4, r5, r6, pc}
 8008f30:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008f34:	bd70      	pop	{r4, r5, r6, pc}
 8008f36:	200b      	movs	r0, #11
 8008f38:	bd70      	pop	{r4, r5, r6, pc}
 8008f3a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008f3e:	4770      	bx	lr

08008f40 <rcl_publisher_is_valid>:
 8008f40:	b1a0      	cbz	r0, 8008f6c <rcl_publisher_is_valid+0x2c>
 8008f42:	6803      	ldr	r3, [r0, #0]
 8008f44:	b510      	push	{r4, lr}
 8008f46:	4604      	mov	r4, r0
 8008f48:	b173      	cbz	r3, 8008f68 <rcl_publisher_is_valid+0x28>
 8008f4a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8008f4e:	b15a      	cbz	r2, 8008f68 <rcl_publisher_is_valid+0x28>
 8008f50:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8008f54:	f005 f870 	bl	800e038 <rcl_context_is_valid>
 8008f58:	b130      	cbz	r0, 8008f68 <rcl_publisher_is_valid+0x28>
 8008f5a:	6823      	ldr	r3, [r4, #0]
 8008f5c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8008f60:	3800      	subs	r0, #0
 8008f62:	bf18      	it	ne
 8008f64:	2001      	movne	r0, #1
 8008f66:	bd10      	pop	{r4, pc}
 8008f68:	2000      	movs	r0, #0
 8008f6a:	bd10      	pop	{r4, pc}
 8008f6c:	2000      	movs	r0, #0
 8008f6e:	4770      	bx	lr

08008f70 <rcl_publisher_is_valid_except_context>:
 8008f70:	b130      	cbz	r0, 8008f80 <rcl_publisher_is_valid_except_context+0x10>
 8008f72:	6800      	ldr	r0, [r0, #0]
 8008f74:	b120      	cbz	r0, 8008f80 <rcl_publisher_is_valid_except_context+0x10>
 8008f76:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 8008f7a:	3800      	subs	r0, #0
 8008f7c:	bf18      	it	ne
 8008f7e:	2001      	movne	r0, #1
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop

08008f84 <_rcl_timer_time_jump>:
 8008f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f88:	4605      	mov	r5, r0
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	4614      	mov	r4, r2
 8008f8e:	b131      	cbz	r1, 8008f9e <_rcl_timer_time_jump+0x1a>
 8008f90:	7803      	ldrb	r3, [r0, #0]
 8008f92:	3b02      	subs	r3, #2
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d93f      	bls.n	8009018 <_rcl_timer_time_jump+0x94>
 8008f98:	b004      	add	sp, #16
 8008f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f9e:	6813      	ldr	r3, [r2, #0]
 8008fa0:	a902      	add	r1, sp, #8
 8008fa2:	6818      	ldr	r0, [r3, #0]
 8008fa4:	f006 f964 	bl	800f270 <rcl_clock_get_now>
 8008fa8:	2800      	cmp	r0, #0
 8008faa:	d1f5      	bne.n	8008f98 <_rcl_timer_time_jump+0x14>
 8008fac:	6820      	ldr	r0, [r4, #0]
 8008fae:	2105      	movs	r1, #5
 8008fb0:	3020      	adds	r0, #32
 8008fb2:	f001 f9ff 	bl	800a3b4 <__atomic_load_8>
 8008fb6:	6823      	ldr	r3, [r4, #0]
 8008fb8:	4681      	mov	r9, r0
 8008fba:	4688      	mov	r8, r1
 8008fbc:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8008fc0:	2105      	movs	r1, #5
 8008fc2:	f001 f9f7 	bl	800a3b4 <__atomic_load_8>
 8008fc6:	4607      	mov	r7, r0
 8008fc8:	6820      	ldr	r0, [r4, #0]
 8008fca:	460e      	mov	r6, r1
 8008fcc:	3018      	adds	r0, #24
 8008fce:	2105      	movs	r1, #5
 8008fd0:	f001 f9f0 	bl	800a3b4 <__atomic_load_8>
 8008fd4:	782b      	ldrb	r3, [r5, #0]
 8008fd6:	9a02      	ldr	r2, [sp, #8]
 8008fd8:	3b02      	subs	r3, #2
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	460d      	mov	r5, r1
 8008fde:	9b03      	ldr	r3, [sp, #12]
 8008fe0:	4682      	mov	sl, r0
 8008fe2:	d937      	bls.n	8009054 <_rcl_timer_time_jump+0xd0>
 8008fe4:	42ba      	cmp	r2, r7
 8008fe6:	eb73 0106 	sbcs.w	r1, r3, r6
 8008fea:	da5f      	bge.n	80090ac <_rcl_timer_time_jump+0x128>
 8008fec:	454a      	cmp	r2, r9
 8008fee:	eb73 0108 	sbcs.w	r1, r3, r8
 8008ff2:	dad1      	bge.n	8008f98 <_rcl_timer_time_jump+0x14>
 8008ff4:	6820      	ldr	r0, [r4, #0]
 8008ff6:	eb1a 0202 	adds.w	r2, sl, r2
 8008ffa:	eb43 0305 	adc.w	r3, r3, r5
 8008ffe:	2505      	movs	r5, #5
 8009000:	3028      	adds	r0, #40	; 0x28
 8009002:	9500      	str	r5, [sp, #0]
 8009004:	f001 fa0c 	bl	800a420 <__atomic_store_8>
 8009008:	6820      	ldr	r0, [r4, #0]
 800900a:	9500      	str	r5, [sp, #0]
 800900c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009010:	3020      	adds	r0, #32
 8009012:	f001 fa05 	bl	800a420 <__atomic_store_8>
 8009016:	e7bf      	b.n	8008f98 <_rcl_timer_time_jump+0x14>
 8009018:	6813      	ldr	r3, [r2, #0]
 800901a:	a902      	add	r1, sp, #8
 800901c:	6818      	ldr	r0, [r3, #0]
 800901e:	f006 f927 	bl	800f270 <rcl_clock_get_now>
 8009022:	2800      	cmp	r0, #0
 8009024:	d1b8      	bne.n	8008f98 <_rcl_timer_time_jump+0x14>
 8009026:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800902a:	4313      	orrs	r3, r2
 800902c:	d0b4      	beq.n	8008f98 <_rcl_timer_time_jump+0x14>
 800902e:	6820      	ldr	r0, [r4, #0]
 8009030:	2105      	movs	r1, #5
 8009032:	3028      	adds	r0, #40	; 0x28
 8009034:	f001 f9be 	bl	800a3b4 <__atomic_load_8>
 8009038:	9d02      	ldr	r5, [sp, #8]
 800903a:	9b03      	ldr	r3, [sp, #12]
 800903c:	4602      	mov	r2, r0
 800903e:	6820      	ldr	r0, [r4, #0]
 8009040:	1b52      	subs	r2, r2, r5
 8009042:	f04f 0405 	mov.w	r4, #5
 8009046:	9400      	str	r4, [sp, #0]
 8009048:	eb61 0303 	sbc.w	r3, r1, r3
 800904c:	3030      	adds	r0, #48	; 0x30
 800904e:	f001 f9e7 	bl	800a420 <__atomic_store_8>
 8009052:	e7a1      	b.n	8008f98 <_rcl_timer_time_jump+0x14>
 8009054:	4313      	orrs	r3, r2
 8009056:	d09f      	beq.n	8008f98 <_rcl_timer_time_jump+0x14>
 8009058:	6820      	ldr	r0, [r4, #0]
 800905a:	f04f 0805 	mov.w	r8, #5
 800905e:	2300      	movs	r3, #0
 8009060:	f8cd 8000 	str.w	r8, [sp]
 8009064:	3030      	adds	r0, #48	; 0x30
 8009066:	2200      	movs	r2, #0
 8009068:	f001 fa10 	bl	800a48c <__atomic_exchange_8>
 800906c:	ea51 0300 	orrs.w	r3, r1, r0
 8009070:	4606      	mov	r6, r0
 8009072:	460f      	mov	r7, r1
 8009074:	d090      	beq.n	8008f98 <_rcl_timer_time_jump+0x14>
 8009076:	9a02      	ldr	r2, [sp, #8]
 8009078:	9b03      	ldr	r3, [sp, #12]
 800907a:	f8cd 8000 	str.w	r8, [sp]
 800907e:	1a12      	subs	r2, r2, r0
 8009080:	6820      	ldr	r0, [r4, #0]
 8009082:	eb63 0301 	sbc.w	r3, r3, r1
 8009086:	eb12 020a 	adds.w	r2, r2, sl
 800908a:	eb43 0305 	adc.w	r3, r3, r5
 800908e:	3028      	adds	r0, #40	; 0x28
 8009090:	f001 f9c6 	bl	800a420 <__atomic_store_8>
 8009094:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009098:	f8cd 8000 	str.w	r8, [sp]
 800909c:	6820      	ldr	r0, [r4, #0]
 800909e:	1b92      	subs	r2, r2, r6
 80090a0:	eb63 0307 	sbc.w	r3, r3, r7
 80090a4:	3020      	adds	r0, #32
 80090a6:	f001 f9bb 	bl	800a420 <__atomic_store_8>
 80090aa:	e775      	b.n	8008f98 <_rcl_timer_time_jump+0x14>
 80090ac:	6820      	ldr	r0, [r4, #0]
 80090ae:	3008      	adds	r0, #8
 80090b0:	f005 f920 	bl	800e2f4 <rcl_trigger_guard_condition>
 80090b4:	e770      	b.n	8008f98 <_rcl_timer_time_jump+0x14>
 80090b6:	bf00      	nop

080090b8 <rcl_get_zero_initialized_timer>:
 80090b8:	4b01      	ldr	r3, [pc, #4]	; (80090c0 <rcl_get_zero_initialized_timer+0x8>)
 80090ba:	6818      	ldr	r0, [r3, #0]
 80090bc:	4770      	bx	lr
 80090be:	bf00      	nop
 80090c0:	08016518 	.word	0x08016518
 80090c4:	00000000 	.word	0x00000000

080090c8 <rcl_timer_init>:
 80090c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090cc:	b0aa      	sub	sp, #168	; 0xa8
 80090ce:	4604      	mov	r4, r0
 80090d0:	a835      	add	r0, sp, #212	; 0xd4
 80090d2:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	; 0xc8
 80090d6:	460d      	mov	r5, r1
 80090d8:	4692      	mov	sl, r2
 80090da:	f001 f95d 	bl	800a398 <rcutils_allocator_is_valid>
 80090de:	2800      	cmp	r0, #0
 80090e0:	d064      	beq.n	80091ac <rcl_timer_init+0xe4>
 80090e2:	2c00      	cmp	r4, #0
 80090e4:	d062      	beq.n	80091ac <rcl_timer_init+0xe4>
 80090e6:	2d00      	cmp	r5, #0
 80090e8:	d060      	beq.n	80091ac <rcl_timer_init+0xe4>
 80090ea:	2f00      	cmp	r7, #0
 80090ec:	db5e      	blt.n	80091ac <rcl_timer_init+0xe4>
 80090ee:	6823      	ldr	r3, [r4, #0]
 80090f0:	b123      	cbz	r3, 80090fc <rcl_timer_init+0x34>
 80090f2:	2664      	movs	r6, #100	; 0x64
 80090f4:	4630      	mov	r0, r6
 80090f6:	b02a      	add	sp, #168	; 0xa8
 80090f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090fc:	a908      	add	r1, sp, #32
 80090fe:	4628      	mov	r0, r5
 8009100:	f006 f8b6 	bl	800f270 <rcl_clock_get_now>
 8009104:	4606      	mov	r6, r0
 8009106:	2800      	cmp	r0, #0
 8009108:	d1f4      	bne.n	80090f4 <rcl_timer_init+0x2c>
 800910a:	ae06      	add	r6, sp, #24
 800910c:	4630      	mov	r0, r6
 800910e:	e9cd 5a16 	strd	r5, sl, [sp, #88]	; 0x58
 8009112:	f004 fff7 	bl	800e104 <rcl_get_zero_initialized_guard_condition>
 8009116:	e896 0003 	ldmia.w	r6, {r0, r1}
 800911a:	f10d 0960 	add.w	r9, sp, #96	; 0x60
 800911e:	ae0b      	add	r6, sp, #44	; 0x2c
 8009120:	e889 0003 	stmia.w	r9, {r0, r1}
 8009124:	4630      	mov	r0, r6
 8009126:	f005 f8c9 	bl	800e2bc <rcl_guard_condition_get_default_options>
 800912a:	ab0d      	add	r3, sp, #52	; 0x34
 800912c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009130:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8009134:	4651      	mov	r1, sl
 8009136:	e896 000c 	ldmia.w	r6, {r2, r3}
 800913a:	4648      	mov	r0, r9
 800913c:	f004 ffec 	bl	800e118 <rcl_guard_condition_init>
 8009140:	4606      	mov	r6, r0
 8009142:	2800      	cmp	r0, #0
 8009144:	d1d6      	bne.n	80090f4 <rcl_timer_init+0x2c>
 8009146:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	2b01      	cmp	r3, #1
 800914c:	d033      	beq.n	80091b6 <rcl_timer_init+0xee>
 800914e:	9934      	ldr	r1, [sp, #208]	; 0xd0
 8009150:	911a      	str	r1, [sp, #104]	; 0x68
 8009152:	4642      	mov	r2, r8
 8009154:	463b      	mov	r3, r7
 8009156:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 800915a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800915e:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 8009210 <rcl_timer_init+0x148>
 8009162:	eb12 0008 	adds.w	r0, r2, r8
 8009166:	eb47 0103 	adc.w	r1, r7, r3
 800916a:	f10d 0ed4 	add.w	lr, sp, #212	; 0xd4
 800916e:	ed8d 7b22 	vstr	d7, [sp, #136]	; 0x88
 8009172:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8009176:	e9cd 0120 	strd	r0, r1, [sp, #128]	; 0x80
 800917a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800917e:	f10d 0c94 	add.w	ip, sp, #148	; 0x94
 8009182:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009186:	f8de 3000 	ldr.w	r3, [lr]
 800918a:	f8cc 3000 	str.w	r3, [ip]
 800918e:	f04f 0a00 	mov.w	sl, #0
 8009192:	4619      	mov	r1, r3
 8009194:	f88d a090 	strb.w	sl, [sp, #144]	; 0x90
 8009198:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 800919a:	2050      	movs	r0, #80	; 0x50
 800919c:	4798      	blx	r3
 800919e:	6020      	str	r0, [r4, #0]
 80091a0:	b358      	cbz	r0, 80091fa <rcl_timer_init+0x132>
 80091a2:	2250      	movs	r2, #80	; 0x50
 80091a4:	a916      	add	r1, sp, #88	; 0x58
 80091a6:	f00c f93e 	bl	8015426 <memcpy>
 80091aa:	e7a3      	b.n	80090f4 <rcl_timer_init+0x2c>
 80091ac:	260b      	movs	r6, #11
 80091ae:	4630      	mov	r0, r6
 80091b0:	b02a      	add	sp, #168	; 0xa8
 80091b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091b6:	2001      	movs	r0, #1
 80091b8:	2100      	movs	r1, #0
 80091ba:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80091be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80091c6:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 80091ca:	4a13      	ldr	r2, [pc, #76]	; (8009218 <rcl_timer_init+0x150>)
 80091cc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 80091d0:	9405      	str	r4, [sp, #20]
 80091d2:	9204      	str	r2, [sp, #16]
 80091d4:	ab12      	add	r3, sp, #72	; 0x48
 80091d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80091d8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80091dc:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 80091e0:	e89c 000c 	ldmia.w	ip, {r2, r3}
 80091e4:	4628      	mov	r0, r5
 80091e6:	f006 f84f 	bl	800f288 <rcl_clock_add_jump_callback>
 80091ea:	4682      	mov	sl, r0
 80091ec:	2800      	cmp	r0, #0
 80091ee:	d0ae      	beq.n	800914e <rcl_timer_init+0x86>
 80091f0:	4648      	mov	r0, r9
 80091f2:	f005 f83d 	bl	800e270 <rcl_guard_condition_fini>
 80091f6:	4656      	mov	r6, sl
 80091f8:	e77c      	b.n	80090f4 <rcl_timer_init+0x2c>
 80091fa:	4648      	mov	r0, r9
 80091fc:	f005 f838 	bl	800e270 <rcl_guard_condition_fini>
 8009200:	4905      	ldr	r1, [pc, #20]	; (8009218 <rcl_timer_init+0x150>)
 8009202:	4622      	mov	r2, r4
 8009204:	4628      	mov	r0, r5
 8009206:	f006 f8a1 	bl	800f34c <rcl_clock_remove_jump_callback>
 800920a:	260a      	movs	r6, #10
 800920c:	e772      	b.n	80090f4 <rcl_timer_init+0x2c>
 800920e:	bf00      	nop
	...
 8009218:	08008f85 	.word	0x08008f85

0800921c <rcl_timer_call>:
 800921c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009220:	b087      	sub	sp, #28
 8009222:	2800      	cmp	r0, #0
 8009224:	d06d      	beq.n	8009302 <rcl_timer_call+0xe6>
 8009226:	6803      	ldr	r3, [r0, #0]
 8009228:	4604      	mov	r4, r0
 800922a:	2b00      	cmp	r3, #0
 800922c:	d063      	beq.n	80092f6 <rcl_timer_call+0xda>
 800922e:	f3bf 8f5b 	dmb	ish
 8009232:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009236:	f3bf 8f5b 	dmb	ish
 800923a:	2b00      	cmp	r3, #0
 800923c:	d150      	bne.n	80092e0 <rcl_timer_call+0xc4>
 800923e:	6803      	ldr	r3, [r0, #0]
 8009240:	a904      	add	r1, sp, #16
 8009242:	6818      	ldr	r0, [r3, #0]
 8009244:	f006 f814 	bl	800f270 <rcl_clock_get_now>
 8009248:	4605      	mov	r5, r0
 800924a:	2800      	cmp	r0, #0
 800924c:	d14a      	bne.n	80092e4 <rcl_timer_call+0xc8>
 800924e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009252:	2b00      	cmp	r3, #0
 8009254:	db4a      	blt.n	80092ec <rcl_timer_call+0xd0>
 8009256:	6820      	ldr	r0, [r4, #0]
 8009258:	f04f 0a05 	mov.w	sl, #5
 800925c:	f8cd a000 	str.w	sl, [sp]
 8009260:	3020      	adds	r0, #32
 8009262:	f001 f913 	bl	800a48c <__atomic_exchange_8>
 8009266:	6823      	ldr	r3, [r4, #0]
 8009268:	f3bf 8f5b 	dmb	ish
 800926c:	4680      	mov	r8, r0
 800926e:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8009272:	f3bf 8f5b 	dmb	ish
 8009276:	6820      	ldr	r0, [r4, #0]
 8009278:	4689      	mov	r9, r1
 800927a:	3028      	adds	r0, #40	; 0x28
 800927c:	4651      	mov	r1, sl
 800927e:	f001 f899 	bl	800a3b4 <__atomic_load_8>
 8009282:	4606      	mov	r6, r0
 8009284:	6820      	ldr	r0, [r4, #0]
 8009286:	460f      	mov	r7, r1
 8009288:	3018      	adds	r0, #24
 800928a:	4651      	mov	r1, sl
 800928c:	f001 f892 	bl	800a3b4 <__atomic_load_8>
 8009290:	1836      	adds	r6, r6, r0
 8009292:	4602      	mov	r2, r0
 8009294:	4682      	mov	sl, r0
 8009296:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 800929a:	eb47 0701 	adc.w	r7, r7, r1
 800929e:	4286      	cmp	r6, r0
 80092a0:	460b      	mov	r3, r1
 80092a2:	eb77 010c 	sbcs.w	r1, r7, ip
 80092a6:	da04      	bge.n	80092b2 <rcl_timer_call+0x96>
 80092a8:	ea53 0102 	orrs.w	r1, r3, r2
 80092ac:	d12e      	bne.n	800930c <rcl_timer_call+0xf0>
 80092ae:	4606      	mov	r6, r0
 80092b0:	4667      	mov	r7, ip
 80092b2:	6820      	ldr	r0, [r4, #0]
 80092b4:	2105      	movs	r1, #5
 80092b6:	4632      	mov	r2, r6
 80092b8:	463b      	mov	r3, r7
 80092ba:	3028      	adds	r0, #40	; 0x28
 80092bc:	9100      	str	r1, [sp, #0]
 80092be:	f001 f8af 	bl	800a420 <__atomic_store_8>
 80092c2:	f1bb 0f00 	cmp.w	fp, #0
 80092c6:	d00d      	beq.n	80092e4 <rcl_timer_call+0xc8>
 80092c8:	9a04      	ldr	r2, [sp, #16]
 80092ca:	9b05      	ldr	r3, [sp, #20]
 80092cc:	ebb2 0208 	subs.w	r2, r2, r8
 80092d0:	4620      	mov	r0, r4
 80092d2:	eb63 0309 	sbc.w	r3, r3, r9
 80092d6:	47d8      	blx	fp
 80092d8:	4628      	mov	r0, r5
 80092da:	b007      	add	sp, #28
 80092dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e0:	f240 3521 	movw	r5, #801	; 0x321
 80092e4:	4628      	mov	r0, r5
 80092e6:	b007      	add	sp, #28
 80092e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ec:	2501      	movs	r5, #1
 80092ee:	4628      	mov	r0, r5
 80092f0:	b007      	add	sp, #28
 80092f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092f6:	f44f 7548 	mov.w	r5, #800	; 0x320
 80092fa:	4628      	mov	r0, r5
 80092fc:	b007      	add	sp, #28
 80092fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009302:	250b      	movs	r5, #11
 8009304:	4628      	mov	r0, r5
 8009306:	b007      	add	sp, #28
 8009308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800930c:	1b80      	subs	r0, r0, r6
 800930e:	eb6c 0107 	sbc.w	r1, ip, r7
 8009312:	3801      	subs	r0, #1
 8009314:	f161 0100 	sbc.w	r1, r1, #0
 8009318:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800931c:	f7f6 ffc8 	bl	80002b0 <__aeabi_ldivmod>
 8009320:	9b02      	ldr	r3, [sp, #8]
 8009322:	3001      	adds	r0, #1
 8009324:	f141 0100 	adc.w	r1, r1, #0
 8009328:	fb00 f303 	mul.w	r3, r0, r3
 800932c:	fb01 330a 	mla	r3, r1, sl, r3
 8009330:	fba0 0a0a 	umull	r0, sl, r0, sl
 8009334:	1986      	adds	r6, r0, r6
 8009336:	4453      	add	r3, sl
 8009338:	eb43 0707 	adc.w	r7, r3, r7
 800933c:	e7b9      	b.n	80092b2 <rcl_timer_call+0x96>
 800933e:	bf00      	nop

08009340 <rcl_timer_is_ready>:
 8009340:	b570      	push	{r4, r5, r6, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	b378      	cbz	r0, 80093a6 <rcl_timer_is_ready+0x66>
 8009346:	6803      	ldr	r3, [r0, #0]
 8009348:	4604      	mov	r4, r0
 800934a:	b383      	cbz	r3, 80093ae <rcl_timer_is_ready+0x6e>
 800934c:	460d      	mov	r5, r1
 800934e:	b351      	cbz	r1, 80093a6 <rcl_timer_is_ready+0x66>
 8009350:	f3bf 8f5b 	dmb	ish
 8009354:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009358:	f3bf 8f5b 	dmb	ish
 800935c:	b953      	cbnz	r3, 8009374 <rcl_timer_is_ready+0x34>
 800935e:	6803      	ldr	r3, [r0, #0]
 8009360:	4669      	mov	r1, sp
 8009362:	6818      	ldr	r0, [r3, #0]
 8009364:	f005 ff84 	bl	800f270 <rcl_clock_get_now>
 8009368:	4606      	mov	r6, r0
 800936a:	b140      	cbz	r0, 800937e <rcl_timer_is_ready+0x3e>
 800936c:	f240 3321 	movw	r3, #801	; 0x321
 8009370:	4298      	cmp	r0, r3
 8009372:	d101      	bne.n	8009378 <rcl_timer_is_ready+0x38>
 8009374:	2600      	movs	r6, #0
 8009376:	702e      	strb	r6, [r5, #0]
 8009378:	4630      	mov	r0, r6
 800937a:	b002      	add	sp, #8
 800937c:	bd70      	pop	{r4, r5, r6, pc}
 800937e:	6820      	ldr	r0, [r4, #0]
 8009380:	2105      	movs	r1, #5
 8009382:	3028      	adds	r0, #40	; 0x28
 8009384:	f001 f816 	bl	800a3b4 <__atomic_load_8>
 8009388:	9b00      	ldr	r3, [sp, #0]
 800938a:	1ac0      	subs	r0, r0, r3
 800938c:	9b01      	ldr	r3, [sp, #4]
 800938e:	eb61 0103 	sbc.w	r1, r1, r3
 8009392:	2801      	cmp	r0, #1
 8009394:	f171 0300 	sbcs.w	r3, r1, #0
 8009398:	bfb4      	ite	lt
 800939a:	2301      	movlt	r3, #1
 800939c:	2300      	movge	r3, #0
 800939e:	4630      	mov	r0, r6
 80093a0:	702b      	strb	r3, [r5, #0]
 80093a2:	b002      	add	sp, #8
 80093a4:	bd70      	pop	{r4, r5, r6, pc}
 80093a6:	260b      	movs	r6, #11
 80093a8:	4630      	mov	r0, r6
 80093aa:	b002      	add	sp, #8
 80093ac:	bd70      	pop	{r4, r5, r6, pc}
 80093ae:	f44f 7648 	mov.w	r6, #800	; 0x320
 80093b2:	e7e1      	b.n	8009378 <rcl_timer_is_ready+0x38>

080093b4 <rcl_timer_get_time_until_next_call>:
 80093b4:	b570      	push	{r4, r5, r6, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	b330      	cbz	r0, 8009408 <rcl_timer_get_time_until_next_call+0x54>
 80093ba:	6803      	ldr	r3, [r0, #0]
 80093bc:	4604      	mov	r4, r0
 80093be:	b33b      	cbz	r3, 8009410 <rcl_timer_get_time_until_next_call+0x5c>
 80093c0:	460d      	mov	r5, r1
 80093c2:	b309      	cbz	r1, 8009408 <rcl_timer_get_time_until_next_call+0x54>
 80093c4:	f3bf 8f5b 	dmb	ish
 80093c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80093cc:	f3bf 8f5b 	dmb	ish
 80093d0:	b9ab      	cbnz	r3, 80093fe <rcl_timer_get_time_until_next_call+0x4a>
 80093d2:	6803      	ldr	r3, [r0, #0]
 80093d4:	4669      	mov	r1, sp
 80093d6:	6818      	ldr	r0, [r3, #0]
 80093d8:	f005 ff4a 	bl	800f270 <rcl_clock_get_now>
 80093dc:	4606      	mov	r6, r0
 80093de:	b958      	cbnz	r0, 80093f8 <rcl_timer_get_time_until_next_call+0x44>
 80093e0:	6820      	ldr	r0, [r4, #0]
 80093e2:	2105      	movs	r1, #5
 80093e4:	3028      	adds	r0, #40	; 0x28
 80093e6:	f000 ffe5 	bl	800a3b4 <__atomic_load_8>
 80093ea:	9b00      	ldr	r3, [sp, #0]
 80093ec:	1ac0      	subs	r0, r0, r3
 80093ee:	9b01      	ldr	r3, [sp, #4]
 80093f0:	6028      	str	r0, [r5, #0]
 80093f2:	eb61 0103 	sbc.w	r1, r1, r3
 80093f6:	6069      	str	r1, [r5, #4]
 80093f8:	4630      	mov	r0, r6
 80093fa:	b002      	add	sp, #8
 80093fc:	bd70      	pop	{r4, r5, r6, pc}
 80093fe:	f240 3621 	movw	r6, #801	; 0x321
 8009402:	4630      	mov	r0, r6
 8009404:	b002      	add	sp, #8
 8009406:	bd70      	pop	{r4, r5, r6, pc}
 8009408:	260b      	movs	r6, #11
 800940a:	4630      	mov	r0, r6
 800940c:	b002      	add	sp, #8
 800940e:	bd70      	pop	{r4, r5, r6, pc}
 8009410:	f44f 7648 	mov.w	r6, #800	; 0x320
 8009414:	e7f0      	b.n	80093f8 <rcl_timer_get_time_until_next_call+0x44>
 8009416:	bf00      	nop

08009418 <rcl_timer_get_guard_condition>:
 8009418:	b130      	cbz	r0, 8009428 <rcl_timer_get_guard_condition+0x10>
 800941a:	6800      	ldr	r0, [r0, #0]
 800941c:	b120      	cbz	r0, 8009428 <rcl_timer_get_guard_condition+0x10>
 800941e:	68c3      	ldr	r3, [r0, #12]
 8009420:	b10b      	cbz	r3, 8009426 <rcl_timer_get_guard_condition+0xe>
 8009422:	3008      	adds	r0, #8
 8009424:	4770      	bx	lr
 8009426:	4618      	mov	r0, r3
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop

0800942c <_rclc_check_for_new_data>:
 800942c:	2800      	cmp	r0, #0
 800942e:	d046      	beq.n	80094be <_rclc_check_for_new_data+0x92>
 8009430:	b510      	push	{r4, lr}
 8009432:	7802      	ldrb	r2, [r0, #0]
 8009434:	b084      	sub	sp, #16
 8009436:	4603      	mov	r3, r0
 8009438:	2a0a      	cmp	r2, #10
 800943a:	d842      	bhi.n	80094c2 <_rclc_check_for_new_data+0x96>
 800943c:	e8df f002 	tbb	[pc, r2]
 8009440:	14181212 	.word	0x14181212
 8009444:	06060614 	.word	0x06060614
 8009448:	2e1a      	.short	0x2e1a
 800944a:	16          	.byte	0x16
 800944b:	00          	.byte	0x00
 800944c:	6a0a      	ldr	r2, [r1, #32]
 800944e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009450:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009454:	2000      	movs	r0, #0
 8009456:	1a12      	subs	r2, r2, r0
 8009458:	bf18      	it	ne
 800945a:	2201      	movne	r2, #1
 800945c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8009460:	b004      	add	sp, #16
 8009462:	bd10      	pop	{r4, pc}
 8009464:	680a      	ldr	r2, [r1, #0]
 8009466:	e7f2      	b.n	800944e <_rclc_check_for_new_data+0x22>
 8009468:	698a      	ldr	r2, [r1, #24]
 800946a:	e7f0      	b.n	800944e <_rclc_check_for_new_data+0x22>
 800946c:	688a      	ldr	r2, [r1, #8]
 800946e:	e7ee      	b.n	800944e <_rclc_check_for_new_data+0x22>
 8009470:	690a      	ldr	r2, [r1, #16]
 8009472:	e7ec      	b.n	800944e <_rclc_check_for_new_data+0x22>
 8009474:	685c      	ldr	r4, [r3, #4]
 8009476:	4608      	mov	r0, r1
 8009478:	f104 0244 	add.w	r2, r4, #68	; 0x44
 800947c:	f104 0143 	add.w	r1, r4, #67	; 0x43
 8009480:	f104 0342 	add.w	r3, r4, #66	; 0x42
 8009484:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8009488:	9300      	str	r3, [sp, #0]
 800948a:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800948e:	f104 0341 	add.w	r3, r4, #65	; 0x41
 8009492:	f104 0110 	add.w	r1, r4, #16
 8009496:	f006 ff8f 	bl	80103b8 <rcl_action_client_wait_set_get_entities_ready>
 800949a:	e7e1      	b.n	8009460 <_rclc_check_for_new_data+0x34>
 800949c:	685c      	ldr	r4, [r3, #4]
 800949e:	f104 0223 	add.w	r2, r4, #35	; 0x23
 80094a2:	f104 0322 	add.w	r3, r4, #34	; 0x22
 80094a6:	e9cd 3200 	strd	r3, r2, [sp]
 80094aa:	4608      	mov	r0, r1
 80094ac:	f104 0321 	add.w	r3, r4, #33	; 0x21
 80094b0:	f104 0220 	add.w	r2, r4, #32
 80094b4:	f104 0110 	add.w	r1, r4, #16
 80094b8:	f007 f994 	bl	80107e4 <rcl_action_server_wait_set_get_entities_ready>
 80094bc:	e7d0      	b.n	8009460 <_rclc_check_for_new_data+0x34>
 80094be:	200b      	movs	r0, #11
 80094c0:	4770      	bx	lr
 80094c2:	2001      	movs	r0, #1
 80094c4:	e7cc      	b.n	8009460 <_rclc_check_for_new_data+0x34>
 80094c6:	bf00      	nop

080094c8 <_rclc_take_new_data>:
 80094c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094ca:	b09b      	sub	sp, #108	; 0x6c
 80094cc:	2800      	cmp	r0, #0
 80094ce:	f000 8088 	beq.w	80095e2 <_rclc_take_new_data+0x11a>
 80094d2:	7803      	ldrb	r3, [r0, #0]
 80094d4:	4604      	mov	r4, r0
 80094d6:	2b0a      	cmp	r3, #10
 80094d8:	f200 8167 	bhi.w	80097aa <_rclc_take_new_data+0x2e2>
 80094dc:	e8df f003 	tbb	[pc, r3]
 80094e0:	44152d2d 	.word	0x44152d2d
 80094e4:	19191944 	.word	0x19191944
 80094e8:	065a      	.short	0x065a
 80094ea:	15          	.byte	0x15
 80094eb:	00          	.byte	0x00
 80094ec:	6840      	ldr	r0, [r0, #4]
 80094ee:	f890 3020 	ldrb.w	r3, [r0, #32]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	f040 80b2 	bne.w	800965c <_rclc_take_new_data+0x194>
 80094f8:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	f040 80e4 	bne.w	80096ca <_rclc_take_new_data+0x202>
 8009502:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8009506:	2b00      	cmp	r3, #0
 8009508:	d16f      	bne.n	80095ea <_rclc_take_new_data+0x122>
 800950a:	2500      	movs	r5, #0
 800950c:	4628      	mov	r0, r5
 800950e:	b01b      	add	sp, #108	; 0x6c
 8009510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009512:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8009514:	6a0b      	ldr	r3, [r1, #32]
 8009516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d0f5      	beq.n	800950a <_rclc_take_new_data+0x42>
 800951e:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8009522:	f104 0110 	add.w	r1, r4, #16
 8009526:	f005 fc6d 	bl	800ee04 <rcl_take_request>
 800952a:	4605      	mov	r5, r0
 800952c:	2800      	cmp	r0, #0
 800952e:	d0ec      	beq.n	800950a <_rclc_take_new_data+0x42>
 8009530:	f240 2359 	movw	r3, #601	; 0x259
 8009534:	4298      	cmp	r0, r3
 8009536:	d013      	beq.n	8009560 <_rclc_take_new_data+0x98>
 8009538:	e029      	b.n	800958e <_rclc_take_new_data+0xc6>
 800953a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800953c:	680b      	ldr	r3, [r1, #0]
 800953e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d0e1      	beq.n	800950a <_rclc_take_new_data+0x42>
 8009546:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800954a:	2300      	movs	r3, #0
 800954c:	aa0a      	add	r2, sp, #40	; 0x28
 800954e:	f005 fd97 	bl	800f080 <rcl_take>
 8009552:	4605      	mov	r5, r0
 8009554:	2800      	cmp	r0, #0
 8009556:	d0d9      	beq.n	800950c <_rclc_take_new_data+0x44>
 8009558:	f240 1391 	movw	r3, #401	; 0x191
 800955c:	4298      	cmp	r0, r3
 800955e:	d116      	bne.n	800958e <_rclc_take_new_data+0xc6>
 8009560:	2300      	movs	r3, #0
 8009562:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8009566:	e7d1      	b.n	800950c <_rclc_take_new_data+0x44>
 8009568:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800956a:	698b      	ldr	r3, [r1, #24]
 800956c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d0ca      	beq.n	800950a <_rclc_take_new_data+0x42>
 8009574:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 8009578:	f104 0110 	add.w	r1, r4, #16
 800957c:	f004 fcec 	bl	800df58 <rcl_take_response>
 8009580:	4605      	mov	r5, r0
 8009582:	2800      	cmp	r0, #0
 8009584:	d0c1      	beq.n	800950a <_rclc_take_new_data+0x42>
 8009586:	f240 13f5 	movw	r3, #501	; 0x1f5
 800958a:	4298      	cmp	r0, r3
 800958c:	d0be      	beq.n	800950c <_rclc_take_new_data+0x44>
 800958e:	f000 ffcb 	bl	800a528 <rcutils_reset_error>
 8009592:	e7bb      	b.n	800950c <_rclc_take_new_data+0x44>
 8009594:	6840      	ldr	r0, [r0, #4]
 8009596:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800959a:	2b00      	cmp	r3, #0
 800959c:	d17d      	bne.n	800969a <_rclc_take_new_data+0x1d2>
 800959e:	69c3      	ldr	r3, [r0, #28]
 80095a0:	b11b      	cbz	r3, 80095aa <_rclc_take_new_data+0xe2>
 80095a2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d144      	bne.n	8009634 <_rclc_take_new_data+0x16c>
 80095aa:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	f040 80ac 	bne.w	800970c <_rclc_take_new_data+0x244>
 80095b4:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d0a6      	beq.n	800950a <_rclc_take_new_data+0x42>
 80095bc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80095be:	a90a      	add	r1, sp, #40	; 0x28
 80095c0:	3010      	adds	r0, #16
 80095c2:	f006 fdd1 	bl	8010168 <rcl_action_take_result_response>
 80095c6:	4605      	mov	r5, r0
 80095c8:	2800      	cmp	r0, #0
 80095ca:	d1e0      	bne.n	800958e <_rclc_take_new_data+0xc6>
 80095cc:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80095d0:	6860      	ldr	r0, [r4, #4]
 80095d2:	f007 fa2b 	bl	8010a2c <rclc_action_find_handle_by_result_request_sequence_number>
 80095d6:	2800      	cmp	r0, #0
 80095d8:	d098      	beq.n	800950c <_rclc_take_new_data+0x44>
 80095da:	2301      	movs	r3, #1
 80095dc:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 80095e0:	e794      	b.n	800950c <_rclc_take_new_data+0x44>
 80095e2:	250b      	movs	r5, #11
 80095e4:	4628      	mov	r0, r5
 80095e6:	b01b      	add	sp, #108	; 0x6c
 80095e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095ea:	ae04      	add	r6, sp, #16
 80095ec:	aa0a      	add	r2, sp, #40	; 0x28
 80095ee:	3010      	adds	r0, #16
 80095f0:	4631      	mov	r1, r6
 80095f2:	f007 f82b 	bl	801064c <rcl_action_take_cancel_request>
 80095f6:	4605      	mov	r5, r0
 80095f8:	2800      	cmp	r0, #0
 80095fa:	d1c8      	bne.n	800958e <_rclc_take_new_data+0xc6>
 80095fc:	6860      	ldr	r0, [r4, #4]
 80095fe:	a90a      	add	r1, sp, #40	; 0x28
 8009600:	f007 f9d2 	bl	80109a8 <rclc_action_find_goal_handle_by_uuid>
 8009604:	4607      	mov	r7, r0
 8009606:	2800      	cmp	r0, #0
 8009608:	f000 80bb 	beq.w	8009782 <_rclc_take_new_data+0x2ba>
 800960c:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8009610:	2101      	movs	r1, #1
 8009612:	f007 f953 	bl	80108bc <rcl_action_transition_goal_state>
 8009616:	2803      	cmp	r0, #3
 8009618:	4684      	mov	ip, r0
 800961a:	f040 80a7 	bne.w	800976c <_rclc_take_new_data+0x2a4>
 800961e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009620:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8009624:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009626:	e896 0003 	ldmia.w	r6, {r0, r1}
 800962a:	e884 0003 	stmia.w	r4, {r0, r1}
 800962e:	f887 c008 	strb.w	ip, [r7, #8]
 8009632:	e76b      	b.n	800950c <_rclc_take_new_data+0x44>
 8009634:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8009636:	3010      	adds	r0, #16
 8009638:	f006 fe16 	bl	8010268 <rcl_action_take_feedback>
 800963c:	4605      	mov	r5, r0
 800963e:	2800      	cmp	r0, #0
 8009640:	d1a5      	bne.n	800958e <_rclc_take_new_data+0xc6>
 8009642:	6860      	ldr	r0, [r4, #4]
 8009644:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8009646:	f007 f9af 	bl	80109a8 <rclc_action_find_goal_handle_by_uuid>
 800964a:	4603      	mov	r3, r0
 800964c:	2800      	cmp	r0, #0
 800964e:	f000 80a3 	beq.w	8009798 <_rclc_take_new_data+0x2d0>
 8009652:	2201      	movs	r2, #1
 8009654:	6860      	ldr	r0, [r4, #4]
 8009656:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800965a:	e7a6      	b.n	80095aa <_rclc_take_new_data+0xe2>
 800965c:	f007 f97e 	bl	801095c <rclc_action_take_goal_handle>
 8009660:	4606      	mov	r6, r0
 8009662:	6860      	ldr	r0, [r4, #4]
 8009664:	2e00      	cmp	r6, #0
 8009666:	f43f af47 	beq.w	80094f8 <_rclc_take_new_data+0x30>
 800966a:	6070      	str	r0, [r6, #4]
 800966c:	69f2      	ldr	r2, [r6, #28]
 800966e:	f106 0128 	add.w	r1, r6, #40	; 0x28
 8009672:	3010      	adds	r0, #16
 8009674:	f006 ff34 	bl	80104e0 <rcl_action_take_goal_request>
 8009678:	4605      	mov	r5, r0
 800967a:	2800      	cmp	r0, #0
 800967c:	f040 808e 	bne.w	800979c <_rclc_take_new_data+0x2d4>
 8009680:	69f7      	ldr	r7, [r6, #28]
 8009682:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009684:	7235      	strb	r5, [r6, #8]
 8009686:	f8c6 0009 	str.w	r0, [r6, #9]
 800968a:	f8c6 100d 	str.w	r1, [r6, #13]
 800968e:	6860      	ldr	r0, [r4, #4]
 8009690:	f8c6 2011 	str.w	r2, [r6, #17]
 8009694:	f8c6 3015 	str.w	r3, [r6, #21]
 8009698:	e72e      	b.n	80094f8 <_rclc_take_new_data+0x30>
 800969a:	aa04      	add	r2, sp, #16
 800969c:	a90a      	add	r1, sp, #40	; 0x28
 800969e:	3010      	adds	r0, #16
 80096a0:	f006 fcea 	bl	8010078 <rcl_action_take_goal_response>
 80096a4:	4605      	mov	r5, r0
 80096a6:	2800      	cmp	r0, #0
 80096a8:	f47f af71 	bne.w	800958e <_rclc_take_new_data+0xc6>
 80096ac:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80096b0:	6860      	ldr	r0, [r4, #4]
 80096b2:	f007 f9a9 	bl	8010a08 <rclc_action_find_handle_by_goal_request_sequence_number>
 80096b6:	b130      	cbz	r0, 80096c6 <_rclc_take_new_data+0x1fe>
 80096b8:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80096bc:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 80096c0:	2201      	movs	r2, #1
 80096c2:	f880 2020 	strb.w	r2, [r0, #32]
 80096c6:	6860      	ldr	r0, [r4, #4]
 80096c8:	e769      	b.n	800959e <_rclc_take_new_data+0xd6>
 80096ca:	aa04      	add	r2, sp, #16
 80096cc:	3010      	adds	r0, #16
 80096ce:	a90a      	add	r1, sp, #40	; 0x28
 80096d0:	f006 ff7c 	bl	80105cc <rcl_action_take_result_request>
 80096d4:	4605      	mov	r5, r0
 80096d6:	2800      	cmp	r0, #0
 80096d8:	f47f af59 	bne.w	800958e <_rclc_take_new_data+0xc6>
 80096dc:	6860      	ldr	r0, [r4, #4]
 80096de:	a904      	add	r1, sp, #16
 80096e0:	f007 f962 	bl	80109a8 <rclc_action_find_goal_handle_by_uuid>
 80096e4:	4607      	mov	r7, r0
 80096e6:	b160      	cbz	r0, 8009702 <_rclc_take_new_data+0x23a>
 80096e8:	ad0a      	add	r5, sp, #40	; 0x28
 80096ea:	f100 0640 	add.w	r6, r0, #64	; 0x40
 80096ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80096f0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80096f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80096f6:	f04f 0c02 	mov.w	ip, #2
 80096fa:	e886 0003 	stmia.w	r6, {r0, r1}
 80096fe:	f887 c008 	strb.w	ip, [r7, #8]
 8009702:	6860      	ldr	r0, [r4, #4]
 8009704:	2300      	movs	r3, #0
 8009706:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 800970a:	e6fa      	b.n	8009502 <_rclc_take_new_data+0x3a>
 800970c:	f100 0230 	add.w	r2, r0, #48	; 0x30
 8009710:	a90a      	add	r1, sp, #40	; 0x28
 8009712:	3010      	adds	r0, #16
 8009714:	f006 fd68 	bl	80101e8 <rcl_action_take_cancel_response>
 8009718:	4605      	mov	r5, r0
 800971a:	2800      	cmp	r0, #0
 800971c:	f47f af37 	bne.w	800958e <_rclc_take_new_data+0xc6>
 8009720:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009724:	6860      	ldr	r0, [r4, #4]
 8009726:	f007 f993 	bl	8010a50 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800972a:	4606      	mov	r6, r0
 800972c:	6860      	ldr	r0, [r4, #4]
 800972e:	2e00      	cmp	r6, #0
 8009730:	f43f af40 	beq.w	80095b4 <_rclc_take_new_data+0xec>
 8009734:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009736:	2701      	movs	r7, #1
 8009738:	84b7      	strh	r7, [r6, #36]	; 0x24
 800973a:	2b00      	cmp	r3, #0
 800973c:	f43f af3a 	beq.w	80095b4 <_rclc_take_new_data+0xec>
 8009740:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009742:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8009746:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800974a:	f007 f92d 	bl	80109a8 <rclc_action_find_goal_handle_by_uuid>
 800974e:	b138      	cbz	r0, 8009760 <_rclc_take_new_data+0x298>
 8009750:	6860      	ldr	r0, [r4, #4]
 8009752:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009754:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
 8009758:	3501      	adds	r5, #1
 800975a:	42ab      	cmp	r3, r5
 800975c:	d8f0      	bhi.n	8009740 <_rclc_take_new_data+0x278>
 800975e:	e729      	b.n	80095b4 <_rclc_take_new_data+0xec>
 8009760:	6860      	ldr	r0, [r4, #4]
 8009762:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009764:	3501      	adds	r5, #1
 8009766:	42ab      	cmp	r3, r5
 8009768:	d8ea      	bhi.n	8009740 <_rclc_take_new_data+0x278>
 800976a:	e723      	b.n	80095b4 <_rclc_take_new_data+0xec>
 800976c:	ab06      	add	r3, sp, #24
 800976e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009770:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8009774:	2103      	movs	r1, #3
 8009776:	e896 000c 	ldmia.w	r6, {r2, r3}
 800977a:	6860      	ldr	r0, [r4, #4]
 800977c:	f007 f9dc 	bl	8010b38 <rclc_action_server_goal_cancel_reject>
 8009780:	e6c4      	b.n	800950c <_rclc_take_new_data+0x44>
 8009782:	ab06      	add	r3, sp, #24
 8009784:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009786:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800978a:	2102      	movs	r1, #2
 800978c:	e896 000c 	ldmia.w	r6, {r2, r3}
 8009790:	6860      	ldr	r0, [r4, #4]
 8009792:	f007 f9d1 	bl	8010b38 <rclc_action_server_goal_cancel_reject>
 8009796:	e6b9      	b.n	800950c <_rclc_take_new_data+0x44>
 8009798:	6860      	ldr	r0, [r4, #4]
 800979a:	e706      	b.n	80095aa <_rclc_take_new_data+0xe2>
 800979c:	6860      	ldr	r0, [r4, #4]
 800979e:	4631      	mov	r1, r6
 80097a0:	f007 f8ec 	bl	801097c <rclc_action_remove_used_goal_handle>
 80097a4:	f000 fec0 	bl	800a528 <rcutils_reset_error>
 80097a8:	e6b0      	b.n	800950c <_rclc_take_new_data+0x44>
 80097aa:	2501      	movs	r5, #1
 80097ac:	e6ae      	b.n	800950c <_rclc_take_new_data+0x44>
 80097ae:	bf00      	nop

080097b0 <_rclc_execute.part.0>:
 80097b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097b2:	7803      	ldrb	r3, [r0, #0]
 80097b4:	b087      	sub	sp, #28
 80097b6:	4604      	mov	r4, r0
 80097b8:	2b0a      	cmp	r3, #10
 80097ba:	f200 8136 	bhi.w	8009a2a <_rclc_execute.part.0+0x27a>
 80097be:	e8df f003 	tbb	[pc, r3]
 80097c2:	435e      	.short	0x435e
 80097c4:	06a1664f 	.word	0x06a1664f
 80097c8:	6c1e0606 	.word	0x6c1e0606
 80097cc:	59          	.byte	0x59
 80097cd:	00          	.byte	0x00
 80097ce:	2b06      	cmp	r3, #6
 80097d0:	f000 8122 	beq.w	8009a18 <_rclc_execute.part.0+0x268>
 80097d4:	2b07      	cmp	r3, #7
 80097d6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80097d8:	f040 8118 	bne.w	8009a0c <_rclc_execute.part.0+0x25c>
 80097dc:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 80097e0:	6880      	ldr	r0, [r0, #8]
 80097e2:	4798      	blx	r3
 80097e4:	f104 0110 	add.w	r1, r4, #16
 80097e8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80097ea:	6860      	ldr	r0, [r4, #4]
 80097ec:	f005 fb4a 	bl	800ee84 <rcl_send_response>
 80097f0:	2800      	cmp	r0, #0
 80097f2:	d033      	beq.n	800985c <_rclc_execute.part.0+0xac>
 80097f4:	9005      	str	r0, [sp, #20]
 80097f6:	f000 fe97 	bl	800a528 <rcutils_reset_error>
 80097fa:	9805      	ldr	r0, [sp, #20]
 80097fc:	e02e      	b.n	800985c <_rclc_execute.part.0+0xac>
 80097fe:	6840      	ldr	r0, [r0, #4]
 8009800:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8009804:	2b00      	cmp	r3, #0
 8009806:	f000 8086 	beq.w	8009916 <_rclc_execute.part.0+0x166>
 800980a:	2600      	movs	r6, #0
 800980c:	2701      	movs	r7, #1
 800980e:	e004      	b.n	800981a <_rclc_execute.part.0+0x6a>
 8009810:	f007 f87e 	bl	8010910 <rclc_action_send_result_request>
 8009814:	b998      	cbnz	r0, 800983e <_rclc_execute.part.0+0x8e>
 8009816:	722f      	strb	r7, [r5, #8]
 8009818:	6860      	ldr	r0, [r4, #4]
 800981a:	f007 f92b 	bl	8010a74 <rclc_action_find_first_handle_with_goal_response>
 800981e:	4605      	mov	r5, r0
 8009820:	2800      	cmp	r0, #0
 8009822:	d077      	beq.n	8009914 <_rclc_execute.part.0+0x164>
 8009824:	6863      	ldr	r3, [r4, #4]
 8009826:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009828:	699b      	ldr	r3, [r3, #24]
 800982a:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 800982e:	f885 6020 	strb.w	r6, [r5, #32]
 8009832:	4798      	blx	r3
 8009834:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8009838:	4628      	mov	r0, r5
 800983a:	2b00      	cmp	r3, #0
 800983c:	d1e8      	bne.n	8009810 <_rclc_execute.part.0+0x60>
 800983e:	6860      	ldr	r0, [r4, #4]
 8009840:	4629      	mov	r1, r5
 8009842:	f007 f89b 	bl	801097c <rclc_action_remove_used_goal_handle>
 8009846:	e7e7      	b.n	8009818 <_rclc_execute.part.0+0x68>
 8009848:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 800984c:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	; 0x2c
 8009850:	2d00      	cmp	r5, #0
 8009852:	f000 80c9 	beq.w	80099e8 <_rclc_execute.part.0+0x238>
 8009856:	6880      	ldr	r0, [r0, #8]
 8009858:	4798      	blx	r3
 800985a:	2000      	movs	r0, #0
 800985c:	b007      	add	sp, #28
 800985e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009860:	6840      	ldr	r0, [r0, #4]
 8009862:	f7ff fcdb 	bl	800921c <rcl_timer_call>
 8009866:	f240 3321 	movw	r3, #801	; 0x321
 800986a:	4298      	cmp	r0, r3
 800986c:	d004      	beq.n	8009878 <_rclc_execute.part.0+0xc8>
 800986e:	2800      	cmp	r0, #0
 8009870:	d0f4      	beq.n	800985c <_rclc_execute.part.0+0xac>
 8009872:	e7bf      	b.n	80097f4 <_rclc_execute.part.0+0x44>
 8009874:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009876:	4798      	blx	r3
 8009878:	2000      	movs	r0, #0
 800987a:	b007      	add	sp, #28
 800987c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800987e:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
 8009882:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009884:	b925      	cbnz	r5, 8009890 <_rclc_execute.part.0+0xe0>
 8009886:	4628      	mov	r0, r5
 8009888:	4798      	blx	r3
 800988a:	4628      	mov	r0, r5
 800988c:	e7e6      	b.n	800985c <_rclc_execute.part.0+0xac>
 800988e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009890:	68a0      	ldr	r0, [r4, #8]
 8009892:	4798      	blx	r3
 8009894:	2000      	movs	r0, #0
 8009896:	b007      	add	sp, #28
 8009898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800989a:	6840      	ldr	r0, [r0, #4]
 800989c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80098a0:	bb3b      	cbnz	r3, 80098f2 <_rclc_execute.part.0+0x142>
 80098a2:	f890 3020 	ldrb.w	r3, [r0, #32]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d07b      	beq.n	80099a2 <_rclc_execute.part.0+0x1f2>
 80098aa:	f640 0634 	movw	r6, #2100	; 0x834
 80098ae:	2701      	movs	r7, #1
 80098b0:	e007      	b.n	80098c2 <_rclc_execute.part.0+0x112>
 80098b2:	4628      	mov	r0, r5
 80098b4:	f007 f8f6 	bl	8010aa4 <rclc_action_server_response_goal_request>
 80098b8:	6860      	ldr	r0, [r4, #4]
 80098ba:	4629      	mov	r1, r5
 80098bc:	f007 f85e 	bl	801097c <rclc_action_remove_used_goal_handle>
 80098c0:	6860      	ldr	r0, [r4, #4]
 80098c2:	2100      	movs	r1, #0
 80098c4:	f007 f888 	bl	80109d8 <rclc_action_find_first_handle_by_status>
 80098c8:	4605      	mov	r5, r0
 80098ca:	2800      	cmp	r0, #0
 80098cc:	d066      	beq.n	800999c <_rclc_execute.part.0+0x1ec>
 80098ce:	6863      	ldr	r3, [r4, #4]
 80098d0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80098d2:	699b      	ldr	r3, [r3, #24]
 80098d4:	4798      	blx	r3
 80098d6:	42b0      	cmp	r0, r6
 80098d8:	f04f 0100 	mov.w	r1, #0
 80098dc:	d1e9      	bne.n	80098b2 <_rclc_execute.part.0+0x102>
 80098de:	2101      	movs	r1, #1
 80098e0:	4628      	mov	r0, r5
 80098e2:	f007 f8df 	bl	8010aa4 <rclc_action_server_response_goal_request>
 80098e6:	722f      	strb	r7, [r5, #8]
 80098e8:	e7ea      	b.n	80098c0 <_rclc_execute.part.0+0x110>
 80098ea:	6848      	ldr	r0, [r1, #4]
 80098ec:	f007 f846 	bl	801097c <rclc_action_remove_used_goal_handle>
 80098f0:	6860      	ldr	r0, [r4, #4]
 80098f2:	f007 f87d 	bl	80109f0 <rclc_action_find_first_terminated_handle>
 80098f6:	4601      	mov	r1, r0
 80098f8:	2800      	cmp	r0, #0
 80098fa:	d1f6      	bne.n	80098ea <_rclc_execute.part.0+0x13a>
 80098fc:	6860      	ldr	r0, [r4, #4]
 80098fe:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 8009902:	e7ce      	b.n	80098a2 <_rclc_execute.part.0+0xf2>
 8009904:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009906:	6880      	ldr	r0, [r0, #8]
 8009908:	f104 0110 	add.w	r1, r4, #16
 800990c:	4798      	blx	r3
 800990e:	2000      	movs	r0, #0
 8009910:	b007      	add	sp, #28
 8009912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009914:	6860      	ldr	r0, [r4, #4]
 8009916:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800991a:	b18b      	cbz	r3, 8009940 <_rclc_execute.part.0+0x190>
 800991c:	68c5      	ldr	r5, [r0, #12]
 800991e:	b32d      	cbz	r5, 800996c <_rclc_execute.part.0+0x1bc>
 8009920:	2600      	movs	r6, #0
 8009922:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 8009926:	b143      	cbz	r3, 800993a <_rclc_execute.part.0+0x18a>
 8009928:	69c3      	ldr	r3, [r0, #28]
 800992a:	f885 6022 	strb.w	r6, [r5, #34]	; 0x22
 800992e:	b123      	cbz	r3, 800993a <_rclc_execute.part.0+0x18a>
 8009930:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8009932:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009934:	4628      	mov	r0, r5
 8009936:	4798      	blx	r3
 8009938:	6860      	ldr	r0, [r4, #4]
 800993a:	682d      	ldr	r5, [r5, #0]
 800993c:	2d00      	cmp	r5, #0
 800993e:	d1f0      	bne.n	8009922 <_rclc_execute.part.0+0x172>
 8009940:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8009944:	b193      	cbz	r3, 800996c <_rclc_execute.part.0+0x1bc>
 8009946:	68c5      	ldr	r5, [r0, #12]
 8009948:	b185      	cbz	r5, 800996c <_rclc_execute.part.0+0x1bc>
 800994a:	2600      	movs	r6, #0
 800994c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8009950:	b14b      	cbz	r3, 8009966 <_rclc_execute.part.0+0x1b6>
 8009952:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009954:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 8009958:	b12b      	cbz	r3, 8009966 <_rclc_execute.part.0+0x1b6>
 800995a:	4628      	mov	r0, r5
 800995c:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 8009960:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009962:	4798      	blx	r3
 8009964:	6860      	ldr	r0, [r4, #4]
 8009966:	682d      	ldr	r5, [r5, #0]
 8009968:	2d00      	cmp	r5, #0
 800996a:	d1ef      	bne.n	800994c <_rclc_execute.part.0+0x19c>
 800996c:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8009970:	2b00      	cmp	r3, #0
 8009972:	d081      	beq.n	8009878 <_rclc_execute.part.0+0xc8>
 8009974:	2700      	movs	r7, #0
 8009976:	e00b      	b.n	8009990 <_rclc_execute.part.0+0x1e0>
 8009978:	6863      	ldr	r3, [r4, #4]
 800997a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800997c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800997e:	6a1e      	ldr	r6, [r3, #32]
 8009980:	f885 7023 	strb.w	r7, [r5, #35]	; 0x23
 8009984:	47b0      	blx	r6
 8009986:	6860      	ldr	r0, [r4, #4]
 8009988:	4629      	mov	r1, r5
 800998a:	f006 fff7 	bl	801097c <rclc_action_remove_used_goal_handle>
 800998e:	6860      	ldr	r0, [r4, #4]
 8009990:	f007 f87c 	bl	8010a8c <rclc_action_find_first_handle_with_result_response>
 8009994:	4605      	mov	r5, r0
 8009996:	2800      	cmp	r0, #0
 8009998:	d1ee      	bne.n	8009978 <_rclc_execute.part.0+0x1c8>
 800999a:	e76d      	b.n	8009878 <_rclc_execute.part.0+0xc8>
 800999c:	6860      	ldr	r0, [r4, #4]
 800999e:	f880 5020 	strb.w	r5, [r0, #32]
 80099a2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	f43f af66 	beq.w	8009878 <_rclc_execute.part.0+0xc8>
 80099ac:	68c5      	ldr	r5, [r0, #12]
 80099ae:	b1b5      	cbz	r5, 80099de <_rclc_execute.part.0+0x22e>
 80099b0:	2602      	movs	r6, #2
 80099b2:	e001      	b.n	80099b8 <_rclc_execute.part.0+0x208>
 80099b4:	682d      	ldr	r5, [r5, #0]
 80099b6:	b195      	cbz	r5, 80099de <_rclc_execute.part.0+0x22e>
 80099b8:	f995 3008 	ldrsb.w	r3, [r5, #8]
 80099bc:	2b03      	cmp	r3, #3
 80099be:	d1f9      	bne.n	80099b4 <_rclc_execute.part.0+0x204>
 80099c0:	69c3      	ldr	r3, [r0, #28]
 80099c2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80099c4:	4628      	mov	r0, r5
 80099c6:	4798      	blx	r3
 80099c8:	4603      	mov	r3, r0
 80099ca:	f105 0260 	add.w	r2, r5, #96	; 0x60
 80099ce:	4628      	mov	r0, r5
 80099d0:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 80099d4:	b163      	cbz	r3, 80099f0 <_rclc_execute.part.0+0x240>
 80099d6:	f007 f883 	bl	8010ae0 <rclc_action_server_goal_cancel_accept>
 80099da:	6860      	ldr	r0, [r4, #4]
 80099dc:	e7ea      	b.n	80099b4 <_rclc_execute.part.0+0x204>
 80099de:	2300      	movs	r3, #0
 80099e0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 80099e4:	4618      	mov	r0, r3
 80099e6:	e739      	b.n	800985c <_rclc_execute.part.0+0xac>
 80099e8:	4628      	mov	r0, r5
 80099ea:	4798      	blx	r3
 80099ec:	4628      	mov	r0, r5
 80099ee:	e735      	b.n	800985c <_rclc_execute.part.0+0xac>
 80099f0:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 80099f2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80099f6:	f105 0758 	add.w	r7, r5, #88	; 0x58
 80099fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099fe:	6860      	ldr	r0, [r4, #4]
 8009a00:	2101      	movs	r1, #1
 8009a02:	f007 f899 	bl	8010b38 <rclc_action_server_goal_cancel_reject>
 8009a06:	722e      	strb	r6, [r5, #8]
 8009a08:	6860      	ldr	r0, [r4, #4]
 8009a0a:	e7d3      	b.n	80099b4 <_rclc_execute.part.0+0x204>
 8009a0c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8009a0e:	6880      	ldr	r0, [r0, #8]
 8009a10:	4798      	blx	r3
 8009a12:	f104 0110 	add.w	r1, r4, #16
 8009a16:	e6e7      	b.n	80097e8 <_rclc_execute.part.0+0x38>
 8009a18:	f100 0110 	add.w	r1, r0, #16
 8009a1c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8009a1e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8009a20:	6880      	ldr	r0, [r0, #8]
 8009a22:	9105      	str	r1, [sp, #20]
 8009a24:	4798      	blx	r3
 8009a26:	9905      	ldr	r1, [sp, #20]
 8009a28:	e6de      	b.n	80097e8 <_rclc_execute.part.0+0x38>
 8009a2a:	2001      	movs	r0, #1
 8009a2c:	e716      	b.n	800985c <_rclc_execute.part.0+0xac>
 8009a2e:	bf00      	nop

08009a30 <rclc_executor_trigger_any>:
 8009a30:	2800      	cmp	r0, #0
 8009a32:	d03f      	beq.n	8009ab4 <rclc_executor_trigger_any+0x84>
 8009a34:	2900      	cmp	r1, #0
 8009a36:	d03e      	beq.n	8009ab6 <rclc_executor_trigger_any+0x86>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 8009a3e:	2200      	movs	r2, #0
 8009a40:	2800      	cmp	r0, #0
 8009a42:	d037      	beq.n	8009ab4 <rclc_executor_trigger_any+0x84>
 8009a44:	b430      	push	{r4, r5}
 8009a46:	f893 c000 	ldrb.w	ip, [r3]
 8009a4a:	f1bc 0f08 	cmp.w	ip, #8
 8009a4e:	d11e      	bne.n	8009a8e <rclc_executor_trigger_any+0x5e>
 8009a50:	685c      	ldr	r4, [r3, #4]
 8009a52:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8009a54:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 8009a58:	d105      	bne.n	8009a66 <rclc_executor_trigger_any+0x36>
 8009a5a:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8009a5e:	b910      	cbnz	r0, 8009a66 <rclc_executor_trigger_any+0x36>
 8009a60:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 8009a64:	b128      	cbz	r0, 8009a72 <rclc_executor_trigger_any+0x42>
 8009a66:	bc30      	pop	{r4, r5}
 8009a68:	4770      	bx	lr
 8009a6a:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 8009a6e:	2800      	cmp	r0, #0
 8009a70:	d1f9      	bne.n	8009a66 <rclc_executor_trigger_any+0x36>
 8009a72:	3201      	adds	r2, #1
 8009a74:	4291      	cmp	r1, r2
 8009a76:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8009a7a:	d018      	beq.n	8009aae <rclc_executor_trigger_any+0x7e>
 8009a7c:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 8009a80:	2800      	cmp	r0, #0
 8009a82:	d0f0      	beq.n	8009a66 <rclc_executor_trigger_any+0x36>
 8009a84:	f893 c000 	ldrb.w	ip, [r3]
 8009a88:	f1bc 0f08 	cmp.w	ip, #8
 8009a8c:	d0e0      	beq.n	8009a50 <rclc_executor_trigger_any+0x20>
 8009a8e:	f1bc 0f09 	cmp.w	ip, #9
 8009a92:	d1ea      	bne.n	8009a6a <rclc_executor_trigger_any+0x3a>
 8009a94:	685c      	ldr	r4, [r3, #4]
 8009a96:	6a25      	ldr	r5, [r4, #32]
 8009a98:	2d00      	cmp	r5, #0
 8009a9a:	d1e4      	bne.n	8009a66 <rclc_executor_trigger_any+0x36>
 8009a9c:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8009aa0:	2800      	cmp	r0, #0
 8009aa2:	d1e0      	bne.n	8009a66 <rclc_executor_trigger_any+0x36>
 8009aa4:	3201      	adds	r2, #1
 8009aa6:	4291      	cmp	r1, r2
 8009aa8:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8009aac:	d1e6      	bne.n	8009a7c <rclc_executor_trigger_any+0x4c>
 8009aae:	2000      	movs	r0, #0
 8009ab0:	bc30      	pop	{r4, r5}
 8009ab2:	4770      	bx	lr
 8009ab4:	4770      	bx	lr
 8009ab6:	4608      	mov	r0, r1
 8009ab8:	4770      	bx	lr
 8009aba:	bf00      	nop

08009abc <rclc_executor_get_zero_initialized_executor>:
 8009abc:	b510      	push	{r4, lr}
 8009abe:	4903      	ldr	r1, [pc, #12]	; (8009acc <rclc_executor_get_zero_initialized_executor+0x10>)
 8009ac0:	4604      	mov	r4, r0
 8009ac2:	2288      	movs	r2, #136	; 0x88
 8009ac4:	f00b fcaf 	bl	8015426 <memcpy>
 8009ac8:	4620      	mov	r0, r4
 8009aca:	bd10      	pop	{r4, pc}
 8009acc:	08016520 	.word	0x08016520

08009ad0 <rclc_executor_init>:
 8009ad0:	2800      	cmp	r0, #0
 8009ad2:	d05f      	beq.n	8009b94 <rclc_executor_init+0xc4>
 8009ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ad8:	460c      	mov	r4, r1
 8009ada:	b0b0      	sub	sp, #192	; 0xc0
 8009adc:	2900      	cmp	r1, #0
 8009ade:	d051      	beq.n	8009b84 <rclc_executor_init+0xb4>
 8009ae0:	4605      	mov	r5, r0
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	4616      	mov	r6, r2
 8009ae6:	461f      	mov	r7, r3
 8009ae8:	f000 fc56 	bl	800a398 <rcutils_allocator_is_valid>
 8009aec:	2800      	cmp	r0, #0
 8009aee:	d049      	beq.n	8009b84 <rclc_executor_init+0xb4>
 8009af0:	2e00      	cmp	r6, #0
 8009af2:	d047      	beq.n	8009b84 <rclc_executor_init+0xb4>
 8009af4:	492c      	ldr	r1, [pc, #176]	; (8009ba8 <rclc_executor_init+0xd8>)
 8009af6:	2288      	movs	r2, #136	; 0x88
 8009af8:	a80e      	add	r0, sp, #56	; 0x38
 8009afa:	f00b fc94 	bl	8015426 <memcpy>
 8009afe:	a90e      	add	r1, sp, #56	; 0x38
 8009b00:	2288      	movs	r2, #136	; 0x88
 8009b02:	4628      	mov	r0, r5
 8009b04:	f00b fc8f 	bl	8015426 <memcpy>
 8009b08:	602c      	str	r4, [r5, #0]
 8009b0a:	4668      	mov	r0, sp
 8009b0c:	60ae      	str	r6, [r5, #8]
 8009b0e:	466c      	mov	r4, sp
 8009b10:	f005 fce4 	bl	800f4dc <rcl_get_zero_initialized_wait_set>
 8009b14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009b16:	f105 0c14 	add.w	ip, r5, #20
 8009b1a:	f8d7 8000 	ldr.w	r8, [r7]
 8009b1e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009b22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009b24:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009b28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009b2a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009b2e:	ed9f 7b1c 	vldr	d7, [pc, #112]	; 8009ba0 <rclc_executor_init+0xd0>
 8009b32:	6823      	ldr	r3, [r4, #0]
 8009b34:	f8cc 3000 	str.w	r3, [ip]
 8009b38:	6939      	ldr	r1, [r7, #16]
 8009b3a:	612f      	str	r7, [r5, #16]
 8009b3c:	ed85 7b1a 	vstr	d7, [r5, #104]	; 0x68
 8009b40:	01b0      	lsls	r0, r6, #6
 8009b42:	47c0      	blx	r8
 8009b44:	6068      	str	r0, [r5, #4]
 8009b46:	b338      	cbz	r0, 8009b98 <rclc_executor_init+0xc8>
 8009b48:	2400      	movs	r4, #0
 8009b4a:	e000      	b.n	8009b4e <rclc_executor_init+0x7e>
 8009b4c:	6868      	ldr	r0, [r5, #4]
 8009b4e:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8009b52:	4631      	mov	r1, r6
 8009b54:	3401      	adds	r4, #1
 8009b56:	f000 faa7 	bl	800a0a8 <rclc_executor_handle_init>
 8009b5a:	42a6      	cmp	r6, r4
 8009b5c:	d1f6      	bne.n	8009b4c <rclc_executor_init+0x7c>
 8009b5e:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8009b62:	f000 fa95 	bl	800a090 <rclc_executor_handle_counters_zero_init>
 8009b66:	4a11      	ldr	r2, [pc, #68]	; (8009bac <rclc_executor_init+0xdc>)
 8009b68:	686b      	ldr	r3, [r5, #4]
 8009b6a:	2000      	movs	r0, #0
 8009b6c:	e9c5 201e 	strd	r2, r0, [r5, #120]	; 0x78
 8009b70:	b163      	cbz	r3, 8009b8c <rclc_executor_init+0xbc>
 8009b72:	692b      	ldr	r3, [r5, #16]
 8009b74:	b153      	cbz	r3, 8009b8c <rclc_executor_init+0xbc>
 8009b76:	68ab      	ldr	r3, [r5, #8]
 8009b78:	b143      	cbz	r3, 8009b8c <rclc_executor_init+0xbc>
 8009b7a:	f885 0080 	strb.w	r0, [r5, #128]	; 0x80
 8009b7e:	b030      	add	sp, #192	; 0xc0
 8009b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b84:	200b      	movs	r0, #11
 8009b86:	b030      	add	sp, #192	; 0xc0
 8009b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	b030      	add	sp, #192	; 0xc0
 8009b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b94:	200b      	movs	r0, #11
 8009b96:	4770      	bx	lr
 8009b98:	200a      	movs	r0, #10
 8009b9a:	e7f4      	b.n	8009b86 <rclc_executor_init+0xb6>
 8009b9c:	f3af 8000 	nop.w
 8009ba0:	3b9aca00 	.word	0x3b9aca00
 8009ba4:	00000000 	.word	0x00000000
 8009ba8:	08016520 	.word	0x08016520
 8009bac:	08009a31 	.word	0x08009a31

08009bb0 <rclc_executor_set_timeout>:
 8009bb0:	b158      	cbz	r0, 8009bca <rclc_executor_set_timeout+0x1a>
 8009bb2:	6841      	ldr	r1, [r0, #4]
 8009bb4:	b139      	cbz	r1, 8009bc6 <rclc_executor_set_timeout+0x16>
 8009bb6:	6901      	ldr	r1, [r0, #16]
 8009bb8:	b129      	cbz	r1, 8009bc6 <rclc_executor_set_timeout+0x16>
 8009bba:	6881      	ldr	r1, [r0, #8]
 8009bbc:	b119      	cbz	r1, 8009bc6 <rclc_executor_set_timeout+0x16>
 8009bbe:	e9c0 231a 	strd	r2, r3, [r0, #104]	; 0x68
 8009bc2:	2000      	movs	r0, #0
 8009bc4:	4770      	bx	lr
 8009bc6:	2001      	movs	r0, #1
 8009bc8:	4770      	bx	lr
 8009bca:	200b      	movs	r0, #11
 8009bcc:	4770      	bx	lr
 8009bce:	bf00      	nop

08009bd0 <rclc_executor_add_subscription>:
 8009bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bd2:	f89d e018 	ldrb.w	lr, [sp, #24]
 8009bd6:	b338      	cbz	r0, 8009c28 <rclc_executor_add_subscription+0x58>
 8009bd8:	b331      	cbz	r1, 8009c28 <rclc_executor_add_subscription+0x58>
 8009bda:	b32a      	cbz	r2, 8009c28 <rclc_executor_add_subscription+0x58>
 8009bdc:	b323      	cbz	r3, 8009c28 <rclc_executor_add_subscription+0x58>
 8009bde:	4604      	mov	r4, r0
 8009be0:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 8009be4:	42a8      	cmp	r0, r5
 8009be6:	d301      	bcc.n	8009bec <rclc_executor_add_subscription+0x1c>
 8009be8:	2001      	movs	r0, #1
 8009bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bec:	6866      	ldr	r6, [r4, #4]
 8009bee:	0187      	lsls	r7, r0, #6
 8009bf0:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 8009bf4:	2500      	movs	r5, #0
 8009bf6:	55f5      	strb	r5, [r6, r7]
 8009bf8:	3001      	adds	r0, #1
 8009bfa:	f8cc 3030 	str.w	r3, [ip, #48]	; 0x30
 8009bfe:	f8cc 502c 	str.w	r5, [ip, #44]	; 0x2c
 8009c02:	2301      	movs	r3, #1
 8009c04:	f104 0514 	add.w	r5, r4, #20
 8009c08:	e9cc 1201 	strd	r1, r2, [ip, #4]
 8009c0c:	f88c e001 	strb.w	lr, [ip, #1]
 8009c10:	f8ac 3038 	strh.w	r3, [ip, #56]	; 0x38
 8009c14:	60e0      	str	r0, [r4, #12]
 8009c16:	4628      	mov	r0, r5
 8009c18:	f005 fc74 	bl	800f504 <rcl_wait_set_is_valid>
 8009c1c:	b930      	cbnz	r0, 8009c2c <rclc_executor_add_subscription+0x5c>
 8009c1e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009c20:	3301      	adds	r3, #1
 8009c22:	2000      	movs	r0, #0
 8009c24:	64a3      	str	r3, [r4, #72]	; 0x48
 8009c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c28:	200b      	movs	r0, #11
 8009c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c2c:	4628      	mov	r0, r5
 8009c2e:	f005 fc6f 	bl	800f510 <rcl_wait_set_fini>
 8009c32:	2800      	cmp	r0, #0
 8009c34:	d0f3      	beq.n	8009c1e <rclc_executor_add_subscription+0x4e>
 8009c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c38 <rclc_executor_add_timer>:
 8009c38:	b300      	cbz	r0, 8009c7c <rclc_executor_add_timer+0x44>
 8009c3a:	b1f9      	cbz	r1, 8009c7c <rclc_executor_add_timer+0x44>
 8009c3c:	b538      	push	{r3, r4, r5, lr}
 8009c3e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 8009c42:	4293      	cmp	r3, r2
 8009c44:	4604      	mov	r4, r0
 8009c46:	d301      	bcc.n	8009c4c <rclc_executor_add_timer+0x14>
 8009c48:	2001      	movs	r0, #1
 8009c4a:	bd38      	pop	{r3, r4, r5, pc}
 8009c4c:	6840      	ldr	r0, [r0, #4]
 8009c4e:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 8009c52:	019d      	lsls	r5, r3, #6
 8009c54:	6051      	str	r1, [r2, #4]
 8009c56:	2102      	movs	r1, #2
 8009c58:	5341      	strh	r1, [r0, r5]
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	2000      	movs	r0, #0
 8009c5e:	2101      	movs	r1, #1
 8009c60:	f104 0514 	add.w	r5, r4, #20
 8009c64:	62d0      	str	r0, [r2, #44]	; 0x2c
 8009c66:	8711      	strh	r1, [r2, #56]	; 0x38
 8009c68:	4628      	mov	r0, r5
 8009c6a:	60e3      	str	r3, [r4, #12]
 8009c6c:	f005 fc4a 	bl	800f504 <rcl_wait_set_is_valid>
 8009c70:	b930      	cbnz	r0, 8009c80 <rclc_executor_add_timer+0x48>
 8009c72:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009c74:	3301      	adds	r3, #1
 8009c76:	2000      	movs	r0, #0
 8009c78:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009c7a:	bd38      	pop	{r3, r4, r5, pc}
 8009c7c:	200b      	movs	r0, #11
 8009c7e:	4770      	bx	lr
 8009c80:	4628      	mov	r0, r5
 8009c82:	f005 fc45 	bl	800f510 <rcl_wait_set_fini>
 8009c86:	2800      	cmp	r0, #0
 8009c88:	d0f3      	beq.n	8009c72 <rclc_executor_add_timer+0x3a>
 8009c8a:	bd38      	pop	{r3, r4, r5, pc}

08009c8c <rclc_executor_prepare>:
 8009c8c:	2800      	cmp	r0, #0
 8009c8e:	d044      	beq.n	8009d1a <rclc_executor_prepare+0x8e>
 8009c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c92:	f100 0514 	add.w	r5, r0, #20
 8009c96:	b09b      	sub	sp, #108	; 0x6c
 8009c98:	4604      	mov	r4, r0
 8009c9a:	4628      	mov	r0, r5
 8009c9c:	f005 fc32 	bl	800f504 <rcl_wait_set_is_valid>
 8009ca0:	b110      	cbz	r0, 8009ca8 <rclc_executor_prepare+0x1c>
 8009ca2:	2000      	movs	r0, #0
 8009ca4:	b01b      	add	sp, #108	; 0x6c
 8009ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ca8:	4628      	mov	r0, r5
 8009caa:	f005 fc31 	bl	800f510 <rcl_wait_set_fini>
 8009cae:	2800      	cmp	r0, #0
 8009cb0:	d130      	bne.n	8009d14 <rclc_executor_prepare+0x88>
 8009cb2:	a80c      	add	r0, sp, #48	; 0x30
 8009cb4:	f005 fc12 	bl	800f4dc <rcl_get_zero_initialized_wait_set>
 8009cb8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8009cbc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009cc0:	46ae      	mov	lr, r5
 8009cc2:	6927      	ldr	r7, [r4, #16]
 8009cc4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009cc8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009ccc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009cd0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009cd4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009cd8:	f8dc 3000 	ldr.w	r3, [ip]
 8009cdc:	f8ce 3000 	str.w	r3, [lr]
 8009ce0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8009ce2:	ae04      	add	r6, sp, #16
 8009ce4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	6822      	ldr	r2, [r4, #0]
 8009cea:	6033      	str	r3, [r6, #0]
 8009cec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009cee:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8009cf0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8009cf4:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
 8009cf8:	e9cd 2100 	strd	r2, r1, [sp]
 8009cfc:	4628      	mov	r0, r5
 8009cfe:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8009d00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009d02:	f005 ff03 	bl	800fb0c <rcl_wait_set_init>
 8009d06:	2800      	cmp	r0, #0
 8009d08:	d0cc      	beq.n	8009ca4 <rclc_executor_prepare+0x18>
 8009d0a:	900b      	str	r0, [sp, #44]	; 0x2c
 8009d0c:	f000 fc0c 	bl	800a528 <rcutils_reset_error>
 8009d10:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009d12:	e7c7      	b.n	8009ca4 <rclc_executor_prepare+0x18>
 8009d14:	f000 fc08 	bl	800a528 <rcutils_reset_error>
 8009d18:	e7cb      	b.n	8009cb2 <rclc_executor_prepare+0x26>
 8009d1a:	200b      	movs	r0, #11
 8009d1c:	4770      	bx	lr
 8009d1e:	bf00      	nop

08009d20 <rclc_executor_spin_some.part.0>:
 8009d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d24:	f100 0614 	add.w	r6, r0, #20
 8009d28:	b083      	sub	sp, #12
 8009d2a:	4691      	mov	r9, r2
 8009d2c:	4698      	mov	r8, r3
 8009d2e:	4605      	mov	r5, r0
 8009d30:	f7ff ffac 	bl	8009c8c <rclc_executor_prepare>
 8009d34:	4630      	mov	r0, r6
 8009d36:	f005 fcb7 	bl	800f6a8 <rcl_wait_set_clear>
 8009d3a:	4607      	mov	r7, r0
 8009d3c:	2800      	cmp	r0, #0
 8009d3e:	f040 80ed 	bne.w	8009f1c <rclc_executor_spin_some.part.0+0x1fc>
 8009d42:	68ab      	ldr	r3, [r5, #8]
 8009d44:	4604      	mov	r4, r0
 8009d46:	b303      	cbz	r3, 8009d8a <rclc_executor_spin_some.part.0+0x6a>
 8009d48:	6869      	ldr	r1, [r5, #4]
 8009d4a:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 8009d4e:	01a2      	lsls	r2, r4, #6
 8009d50:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 8009d54:	b1cb      	cbz	r3, 8009d8a <rclc_executor_spin_some.part.0+0x6a>
 8009d56:	5c8b      	ldrb	r3, [r1, r2]
 8009d58:	2b0a      	cmp	r3, #10
 8009d5a:	f200 80d8 	bhi.w	8009f0e <rclc_executor_spin_some.part.0+0x1ee>
 8009d5e:	e8df f003 	tbb	[pc, r3]
 8009d62:	9c9c      	.short	0x9c9c
 8009d64:	068c8ca7 	.word	0x068c8ca7
 8009d68:	bdc90606 	.word	0xbdc90606
 8009d6c:	b2          	.byte	0xb2
 8009d6d:	00          	.byte	0x00
 8009d6e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009d72:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8009d76:	4630      	mov	r0, r6
 8009d78:	f005 ffde 	bl	800fd38 <rcl_wait_set_add_service>
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	f040 8086 	bne.w	8009e8e <rclc_executor_spin_some.part.0+0x16e>
 8009d82:	68ab      	ldr	r3, [r5, #8]
 8009d84:	3401      	adds	r4, #1
 8009d86:	429c      	cmp	r4, r3
 8009d88:	d3de      	bcc.n	8009d48 <rclc_executor_spin_some.part.0+0x28>
 8009d8a:	4643      	mov	r3, r8
 8009d8c:	464a      	mov	r2, r9
 8009d8e:	4630      	mov	r0, r6
 8009d90:	f005 fffe 	bl	800fd90 <rcl_wait>
 8009d94:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	f000 80c7 	beq.w	8009f2c <rclc_executor_spin_some.part.0+0x20c>
 8009d9e:	2b01      	cmp	r3, #1
 8009da0:	f040 80b5 	bne.w	8009f0e <rclc_executor_spin_some.part.0+0x1ee>
 8009da4:	68ab      	ldr	r3, [r5, #8]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	f000 8159 	beq.w	800a05e <rclc_executor_spin_some.part.0+0x33e>
 8009dac:	2400      	movs	r4, #0
 8009dae:	46a0      	mov	r8, r4
 8009db0:	f240 1991 	movw	r9, #401	; 0x191
 8009db4:	e00a      	b.n	8009dcc <rclc_executor_spin_some.part.0+0xac>
 8009db6:	f7ff fb39 	bl	800942c <_rclc_check_for_new_data>
 8009dba:	4604      	mov	r4, r0
 8009dbc:	b110      	cbz	r0, 8009dc4 <rclc_executor_spin_some.part.0+0xa4>
 8009dbe:	4548      	cmp	r0, r9
 8009dc0:	f040 80b2 	bne.w	8009f28 <rclc_executor_spin_some.part.0+0x208>
 8009dc4:	68ab      	ldr	r3, [r5, #8]
 8009dc6:	4598      	cmp	r8, r3
 8009dc8:	f080 8126 	bcs.w	800a018 <rclc_executor_spin_some.part.0+0x2f8>
 8009dcc:	686a      	ldr	r2, [r5, #4]
 8009dce:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8009dd2:	4631      	mov	r1, r6
 8009dd4:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 8009dd8:	f108 0801 	add.w	r8, r8, #1
 8009ddc:	f1bc 0f00 	cmp.w	ip, #0
 8009de0:	d1e9      	bne.n	8009db6 <rclc_executor_spin_some.part.0+0x96>
 8009de2:	4619      	mov	r1, r3
 8009de4:	4610      	mov	r0, r2
 8009de6:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 8009dea:	4798      	blx	r3
 8009dec:	2800      	cmp	r0, #0
 8009dee:	f000 809b 	beq.w	8009f28 <rclc_executor_spin_some.part.0+0x208>
 8009df2:	68ab      	ldr	r3, [r5, #8]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	f000 8097 	beq.w	8009f28 <rclc_executor_spin_some.part.0+0x208>
 8009dfa:	f04f 0800 	mov.w	r8, #0
 8009dfe:	f240 1991 	movw	r9, #401	; 0x191
 8009e02:	e009      	b.n	8009e18 <rclc_executor_spin_some.part.0+0xf8>
 8009e04:	f7ff fb60 	bl	80094c8 <_rclc_take_new_data>
 8009e08:	4604      	mov	r4, r0
 8009e0a:	b110      	cbz	r0, 8009e12 <rclc_executor_spin_some.part.0+0xf2>
 8009e0c:	4548      	cmp	r0, r9
 8009e0e:	f040 808b 	bne.w	8009f28 <rclc_executor_spin_some.part.0+0x208>
 8009e12:	68ab      	ldr	r3, [r5, #8]
 8009e14:	4598      	cmp	r8, r3
 8009e16:	d209      	bcs.n	8009e2c <rclc_executor_spin_some.part.0+0x10c>
 8009e18:	6868      	ldr	r0, [r5, #4]
 8009e1a:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8009e1e:	4631      	mov	r1, r6
 8009e20:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8009e24:	f108 0801 	add.w	r8, r8, #1
 8009e28:	2a00      	cmp	r2, #0
 8009e2a:	d1eb      	bne.n	8009e04 <rclc_executor_spin_some.part.0+0xe4>
 8009e2c:	2600      	movs	r6, #0
 8009e2e:	b97b      	cbnz	r3, 8009e50 <rclc_executor_spin_some.part.0+0x130>
 8009e30:	e07a      	b.n	8009f28 <rclc_executor_spin_some.part.0+0x208>
 8009e32:	f812 200c 	ldrb.w	r2, [r2, ip]
 8009e36:	2a08      	cmp	r2, #8
 8009e38:	f000 80fd 	beq.w	800a036 <rclc_executor_spin_some.part.0+0x316>
 8009e3c:	2a09      	cmp	r2, #9
 8009e3e:	f000 80ef 	beq.w	800a020 <rclc_executor_spin_some.part.0+0x300>
 8009e42:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 8009e46:	b98a      	cbnz	r2, 8009e6c <rclc_executor_spin_some.part.0+0x14c>
 8009e48:	3601      	adds	r6, #1
 8009e4a:	429e      	cmp	r6, r3
 8009e4c:	d262      	bcs.n	8009f14 <rclc_executor_spin_some.part.0+0x1f4>
 8009e4e:	2400      	movs	r4, #0
 8009e50:	686a      	ldr	r2, [r5, #4]
 8009e52:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 8009e56:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 8009e5a:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 8009e5e:	2900      	cmp	r1, #0
 8009e60:	d062      	beq.n	8009f28 <rclc_executor_spin_some.part.0+0x208>
 8009e62:	7841      	ldrb	r1, [r0, #1]
 8009e64:	2900      	cmp	r1, #0
 8009e66:	d0e4      	beq.n	8009e32 <rclc_executor_spin_some.part.0+0x112>
 8009e68:	2901      	cmp	r1, #1
 8009e6a:	d1ed      	bne.n	8009e48 <rclc_executor_spin_some.part.0+0x128>
 8009e6c:	f7ff fca0 	bl	80097b0 <_rclc_execute.part.0>
 8009e70:	2800      	cmp	r0, #0
 8009e72:	f040 80b6 	bne.w	8009fe2 <rclc_executor_spin_some.part.0+0x2c2>
 8009e76:	68ab      	ldr	r3, [r5, #8]
 8009e78:	e7e6      	b.n	8009e48 <rclc_executor_spin_some.part.0+0x128>
 8009e7a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009e7e:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8009e82:	4630      	mov	r0, r6
 8009e84:	f005 ff2c 	bl	800fce0 <rcl_wait_set_add_client>
 8009e88:	2800      	cmp	r0, #0
 8009e8a:	f43f af7a 	beq.w	8009d82 <rclc_executor_spin_some.part.0+0x62>
 8009e8e:	9001      	str	r0, [sp, #4]
 8009e90:	f000 fb4a 	bl	800a528 <rcutils_reset_error>
 8009e94:	9801      	ldr	r0, [sp, #4]
 8009e96:	4607      	mov	r7, r0
 8009e98:	e03c      	b.n	8009f14 <rclc_executor_spin_some.part.0+0x1f4>
 8009e9a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009e9e:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8009ea2:	4630      	mov	r0, r6
 8009ea4:	f005 fbd4 	bl	800f650 <rcl_wait_set_add_subscription>
 8009ea8:	2800      	cmp	r0, #0
 8009eaa:	f43f af6a 	beq.w	8009d82 <rclc_executor_spin_some.part.0+0x62>
 8009eae:	e7ee      	b.n	8009e8e <rclc_executor_spin_some.part.0+0x16e>
 8009eb0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009eb4:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8009eb8:	4630      	mov	r0, r6
 8009eba:	f005 fee1 	bl	800fc80 <rcl_wait_set_add_timer>
 8009ebe:	2800      	cmp	r0, #0
 8009ec0:	f43f af5f 	beq.w	8009d82 <rclc_executor_spin_some.part.0+0x62>
 8009ec4:	e7e3      	b.n	8009e8e <rclc_executor_spin_some.part.0+0x16e>
 8009ec6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009eca:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8009ece:	4630      	mov	r0, r6
 8009ed0:	f005 feaa 	bl	800fc28 <rcl_wait_set_add_guard_condition>
 8009ed4:	2800      	cmp	r0, #0
 8009ed6:	f43f af54 	beq.w	8009d82 <rclc_executor_spin_some.part.0+0x62>
 8009eda:	e7d8      	b.n	8009e8e <rclc_executor_spin_some.part.0+0x16e>
 8009edc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009ee0:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8009ee4:	3110      	adds	r1, #16
 8009ee6:	4630      	mov	r0, r6
 8009ee8:	f006 fc28 	bl	801073c <rcl_action_wait_set_add_action_server>
 8009eec:	2800      	cmp	r0, #0
 8009eee:	f43f af48 	beq.w	8009d82 <rclc_executor_spin_some.part.0+0x62>
 8009ef2:	e7cc      	b.n	8009e8e <rclc_executor_spin_some.part.0+0x16e>
 8009ef4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009ef8:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8009efc:	3110      	adds	r1, #16
 8009efe:	2300      	movs	r3, #0
 8009f00:	4630      	mov	r0, r6
 8009f02:	f006 f9f5 	bl	80102f0 <rcl_action_wait_set_add_action_client>
 8009f06:	2800      	cmp	r0, #0
 8009f08:	f43f af3b 	beq.w	8009d82 <rclc_executor_spin_some.part.0+0x62>
 8009f0c:	e7bf      	b.n	8009e8e <rclc_executor_spin_some.part.0+0x16e>
 8009f0e:	f000 fb0b 	bl	800a528 <rcutils_reset_error>
 8009f12:	2701      	movs	r7, #1
 8009f14:	4638      	mov	r0, r7
 8009f16:	b003      	add	sp, #12
 8009f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f1c:	f000 fb04 	bl	800a528 <rcutils_reset_error>
 8009f20:	4638      	mov	r0, r7
 8009f22:	b003      	add	sp, #12
 8009f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f28:	4627      	mov	r7, r4
 8009f2a:	e7f3      	b.n	8009f14 <rclc_executor_spin_some.part.0+0x1f4>
 8009f2c:	68ab      	ldr	r3, [r5, #8]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	f000 8092 	beq.w	800a058 <rclc_executor_spin_some.part.0+0x338>
 8009f34:	2400      	movs	r4, #0
 8009f36:	46a0      	mov	r8, r4
 8009f38:	f240 1991 	movw	r9, #401	; 0x191
 8009f3c:	e008      	b.n	8009f50 <rclc_executor_spin_some.part.0+0x230>
 8009f3e:	f7ff fa75 	bl	800942c <_rclc_check_for_new_data>
 8009f42:	4604      	mov	r4, r0
 8009f44:	b108      	cbz	r0, 8009f4a <rclc_executor_spin_some.part.0+0x22a>
 8009f46:	4548      	cmp	r0, r9
 8009f48:	d1ee      	bne.n	8009f28 <rclc_executor_spin_some.part.0+0x208>
 8009f4a:	68ab      	ldr	r3, [r5, #8]
 8009f4c:	4598      	cmp	r8, r3
 8009f4e:	d265      	bcs.n	800a01c <rclc_executor_spin_some.part.0+0x2fc>
 8009f50:	686a      	ldr	r2, [r5, #4]
 8009f52:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8009f56:	4631      	mov	r1, r6
 8009f58:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 8009f5c:	f108 0801 	add.w	r8, r8, #1
 8009f60:	f1bc 0f00 	cmp.w	ip, #0
 8009f64:	d1eb      	bne.n	8009f3e <rclc_executor_spin_some.part.0+0x21e>
 8009f66:	4619      	mov	r1, r3
 8009f68:	4610      	mov	r0, r2
 8009f6a:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 8009f6e:	4798      	blx	r3
 8009f70:	2800      	cmp	r0, #0
 8009f72:	d0d9      	beq.n	8009f28 <rclc_executor_spin_some.part.0+0x208>
 8009f74:	68ab      	ldr	r3, [r5, #8]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d0d6      	beq.n	8009f28 <rclc_executor_spin_some.part.0+0x208>
 8009f7a:	f04f 0800 	mov.w	r8, #0
 8009f7e:	f240 1991 	movw	r9, #401	; 0x191
 8009f82:	f240 2a59 	movw	sl, #601	; 0x259
 8009f86:	e00e      	b.n	8009fa6 <rclc_executor_spin_some.part.0+0x286>
 8009f88:	f813 300b 	ldrb.w	r3, [r3, fp]
 8009f8c:	2b08      	cmp	r3, #8
 8009f8e:	d033      	beq.n	8009ff8 <rclc_executor_spin_some.part.0+0x2d8>
 8009f90:	2b09      	cmp	r3, #9
 8009f92:	d028      	beq.n	8009fe6 <rclc_executor_spin_some.part.0+0x2c6>
 8009f94:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8009f98:	b9fb      	cbnz	r3, 8009fda <rclc_executor_spin_some.part.0+0x2ba>
 8009f9a:	68ab      	ldr	r3, [r5, #8]
 8009f9c:	f108 0801 	add.w	r8, r8, #1
 8009fa0:	4598      	cmp	r8, r3
 8009fa2:	d2b7      	bcs.n	8009f14 <rclc_executor_spin_some.part.0+0x1f4>
 8009fa4:	2400      	movs	r4, #0
 8009fa6:	6868      	ldr	r0, [r5, #4]
 8009fa8:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8009fac:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8009fb0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d0b7      	beq.n	8009f28 <rclc_executor_spin_some.part.0+0x208>
 8009fb8:	4631      	mov	r1, r6
 8009fba:	f7ff fa85 	bl	80094c8 <_rclc_take_new_data>
 8009fbe:	b118      	cbz	r0, 8009fc8 <rclc_executor_spin_some.part.0+0x2a8>
 8009fc0:	4548      	cmp	r0, r9
 8009fc2:	d001      	beq.n	8009fc8 <rclc_executor_spin_some.part.0+0x2a8>
 8009fc4:	4550      	cmp	r0, sl
 8009fc6:	d10c      	bne.n	8009fe2 <rclc_executor_spin_some.part.0+0x2c2>
 8009fc8:	686b      	ldr	r3, [r5, #4]
 8009fca:	eb13 000b 	adds.w	r0, r3, fp
 8009fce:	d021      	beq.n	800a014 <rclc_executor_spin_some.part.0+0x2f4>
 8009fd0:	7842      	ldrb	r2, [r0, #1]
 8009fd2:	2a00      	cmp	r2, #0
 8009fd4:	d0d8      	beq.n	8009f88 <rclc_executor_spin_some.part.0+0x268>
 8009fd6:	2a01      	cmp	r2, #1
 8009fd8:	d1df      	bne.n	8009f9a <rclc_executor_spin_some.part.0+0x27a>
 8009fda:	f7ff fbe9 	bl	80097b0 <_rclc_execute.part.0>
 8009fde:	2800      	cmp	r0, #0
 8009fe0:	d0db      	beq.n	8009f9a <rclc_executor_spin_some.part.0+0x27a>
 8009fe2:	4607      	mov	r7, r0
 8009fe4:	e796      	b.n	8009f14 <rclc_executor_spin_some.part.0+0x1f4>
 8009fe6:	6843      	ldr	r3, [r0, #4]
 8009fe8:	6a1a      	ldr	r2, [r3, #32]
 8009fea:	2a00      	cmp	r2, #0
 8009fec:	d1f5      	bne.n	8009fda <rclc_executor_spin_some.part.0+0x2ba>
 8009fee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d0d1      	beq.n	8009f9a <rclc_executor_spin_some.part.0+0x27a>
 8009ff6:	e7f0      	b.n	8009fda <rclc_executor_spin_some.part.0+0x2ba>
 8009ff8:	6843      	ldr	r3, [r0, #4]
 8009ffa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ffc:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800a000:	d1eb      	bne.n	8009fda <rclc_executor_spin_some.part.0+0x2ba>
 800a002:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a006:	2a00      	cmp	r2, #0
 800a008:	d1e7      	bne.n	8009fda <rclc_executor_spin_some.part.0+0x2ba>
 800a00a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d0c3      	beq.n	8009f9a <rclc_executor_spin_some.part.0+0x27a>
 800a012:	e7e2      	b.n	8009fda <rclc_executor_spin_some.part.0+0x2ba>
 800a014:	270b      	movs	r7, #11
 800a016:	e77d      	b.n	8009f14 <rclc_executor_spin_some.part.0+0x1f4>
 800a018:	686a      	ldr	r2, [r5, #4]
 800a01a:	e6e2      	b.n	8009de2 <rclc_executor_spin_some.part.0+0xc2>
 800a01c:	686a      	ldr	r2, [r5, #4]
 800a01e:	e7a2      	b.n	8009f66 <rclc_executor_spin_some.part.0+0x246>
 800a020:	6842      	ldr	r2, [r0, #4]
 800a022:	6a11      	ldr	r1, [r2, #32]
 800a024:	2900      	cmp	r1, #0
 800a026:	f47f af21 	bne.w	8009e6c <rclc_executor_spin_some.part.0+0x14c>
 800a02a:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800a02e:	2a00      	cmp	r2, #0
 800a030:	f43f af0a 	beq.w	8009e48 <rclc_executor_spin_some.part.0+0x128>
 800a034:	e71a      	b.n	8009e6c <rclc_executor_spin_some.part.0+0x14c>
 800a036:	6842      	ldr	r2, [r0, #4]
 800a038:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800a03a:	f031 417f 	bics.w	r1, r1, #4278190080	; 0xff000000
 800a03e:	f47f af15 	bne.w	8009e6c <rclc_executor_spin_some.part.0+0x14c>
 800a042:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
 800a046:	2900      	cmp	r1, #0
 800a048:	f47f af10 	bne.w	8009e6c <rclc_executor_spin_some.part.0+0x14c>
 800a04c:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 800a050:	2a00      	cmp	r2, #0
 800a052:	f43f aef9 	beq.w	8009e48 <rclc_executor_spin_some.part.0+0x128>
 800a056:	e709      	b.n	8009e6c <rclc_executor_spin_some.part.0+0x14c>
 800a058:	686a      	ldr	r2, [r5, #4]
 800a05a:	461c      	mov	r4, r3
 800a05c:	e783      	b.n	8009f66 <rclc_executor_spin_some.part.0+0x246>
 800a05e:	686a      	ldr	r2, [r5, #4]
 800a060:	461c      	mov	r4, r3
 800a062:	e6be      	b.n	8009de2 <rclc_executor_spin_some.part.0+0xc2>

0800a064 <rclc_executor_spin_some>:
 800a064:	b190      	cbz	r0, 800a08c <rclc_executor_spin_some+0x28>
 800a066:	b570      	push	{r4, r5, r6, lr}
 800a068:	4604      	mov	r4, r0
 800a06a:	6800      	ldr	r0, [r0, #0]
 800a06c:	4616      	mov	r6, r2
 800a06e:	461d      	mov	r5, r3
 800a070:	f003 ffe2 	bl	800e038 <rcl_context_is_valid>
 800a074:	b130      	cbz	r0, 800a084 <rclc_executor_spin_some+0x20>
 800a076:	4632      	mov	r2, r6
 800a078:	462b      	mov	r3, r5
 800a07a:	4620      	mov	r0, r4
 800a07c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a080:	f7ff be4e 	b.w	8009d20 <rclc_executor_spin_some.part.0>
 800a084:	f000 fa50 	bl	800a528 <rcutils_reset_error>
 800a088:	2001      	movs	r0, #1
 800a08a:	bd70      	pop	{r4, r5, r6, pc}
 800a08c:	200b      	movs	r0, #11
 800a08e:	4770      	bx	lr

0800a090 <rclc_executor_handle_counters_zero_init>:
 800a090:	b130      	cbz	r0, 800a0a0 <rclc_executor_handle_counters_zero_init+0x10>
 800a092:	b508      	push	{r3, lr}
 800a094:	2220      	movs	r2, #32
 800a096:	2100      	movs	r1, #0
 800a098:	f00b f8a6 	bl	80151e8 <memset>
 800a09c:	2000      	movs	r0, #0
 800a09e:	bd08      	pop	{r3, pc}
 800a0a0:	200b      	movs	r0, #11
 800a0a2:	4770      	bx	lr
 800a0a4:	0000      	movs	r0, r0
	...

0800a0a8 <rclc_executor_handle_init>:
 800a0a8:	b168      	cbz	r0, 800a0c6 <rclc_executor_handle_init+0x1e>
 800a0aa:	ed9f 7b09 	vldr	d7, [pc, #36]	; 800a0d0 <rclc_executor_handle_init+0x28>
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	220b      	movs	r2, #11
 800a0b2:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
 800a0b6:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800a0ba:	e9c0 310c 	strd	r3, r1, [r0, #48]	; 0x30
 800a0be:	8002      	strh	r2, [r0, #0]
 800a0c0:	8703      	strh	r3, [r0, #56]	; 0x38
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	4770      	bx	lr
 800a0c6:	200b      	movs	r0, #11
 800a0c8:	4770      	bx	lr
 800a0ca:	bf00      	nop
 800a0cc:	f3af 8000 	nop.w
	...

0800a0d8 <rclc_support_init>:
 800a0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0dc:	b086      	sub	sp, #24
 800a0de:	b3b8      	cbz	r0, 800a150 <rclc_support_init+0x78>
 800a0e0:	461c      	mov	r4, r3
 800a0e2:	b3ab      	cbz	r3, 800a150 <rclc_support_init+0x78>
 800a0e4:	460f      	mov	r7, r1
 800a0e6:	4690      	mov	r8, r2
 800a0e8:	4606      	mov	r6, r0
 800a0ea:	f004 fa1d 	bl	800e528 <rcl_get_zero_initialized_init_options>
 800a0ee:	f104 030c 	add.w	r3, r4, #12
 800a0f2:	9005      	str	r0, [sp, #20]
 800a0f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a0f8:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a0fc:	a805      	add	r0, sp, #20
 800a0fe:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800a102:	f004 fa13 	bl	800e52c <rcl_init_options_init>
 800a106:	4605      	mov	r5, r0
 800a108:	b9e0      	cbnz	r0, 800a144 <rclc_support_init+0x6c>
 800a10a:	ad02      	add	r5, sp, #8
 800a10c:	4628      	mov	r0, r5
 800a10e:	f003 ff89 	bl	800e024 <rcl_get_zero_initialized_context>
 800a112:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a116:	4633      	mov	r3, r6
 800a118:	e886 0003 	stmia.w	r6, {r0, r1}
 800a11c:	aa05      	add	r2, sp, #20
 800a11e:	4641      	mov	r1, r8
 800a120:	4638      	mov	r0, r7
 800a122:	f004 f8fd 	bl	800e320 <rcl_init>
 800a126:	4605      	mov	r5, r0
 800a128:	b9b8      	cbnz	r0, 800a15a <rclc_support_init+0x82>
 800a12a:	60b4      	str	r4, [r6, #8]
 800a12c:	4622      	mov	r2, r4
 800a12e:	f106 010c 	add.w	r1, r6, #12
 800a132:	2003      	movs	r0, #3
 800a134:	f005 f824 	bl	800f180 <rcl_clock_init>
 800a138:	4605      	mov	r5, r0
 800a13a:	b970      	cbnz	r0, 800a15a <rclc_support_init+0x82>
 800a13c:	a805      	add	r0, sp, #20
 800a13e:	f004 fa5b 	bl	800e5f8 <rcl_init_options_fini>
 800a142:	b108      	cbz	r0, 800a148 <rclc_support_init+0x70>
 800a144:	f000 f9f0 	bl	800a528 <rcutils_reset_error>
 800a148:	4628      	mov	r0, r5
 800a14a:	b006      	add	sp, #24
 800a14c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a150:	250b      	movs	r5, #11
 800a152:	4628      	mov	r0, r5
 800a154:	b006      	add	sp, #24
 800a156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a15a:	f000 f9e5 	bl	800a528 <rcutils_reset_error>
 800a15e:	a805      	add	r0, sp, #20
 800a160:	f004 fa4a 	bl	800e5f8 <rcl_init_options_fini>
 800a164:	2800      	cmp	r0, #0
 800a166:	d0ef      	beq.n	800a148 <rclc_support_init+0x70>
 800a168:	e7ec      	b.n	800a144 <rclc_support_init+0x6c>
 800a16a:	bf00      	nop

0800a16c <rclc_node_init_default>:
 800a16c:	b3b8      	cbz	r0, 800a1de <rclc_node_init_default+0x72>
 800a16e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a172:	460d      	mov	r5, r1
 800a174:	b0a1      	sub	sp, #132	; 0x84
 800a176:	b329      	cbz	r1, 800a1c4 <rclc_node_init_default+0x58>
 800a178:	4616      	mov	r6, r2
 800a17a:	b31a      	cbz	r2, 800a1c4 <rclc_node_init_default+0x58>
 800a17c:	461f      	mov	r7, r3
 800a17e:	b30b      	cbz	r3, 800a1c4 <rclc_node_init_default+0x58>
 800a180:	f10d 0810 	add.w	r8, sp, #16
 800a184:	4604      	mov	r4, r0
 800a186:	4640      	mov	r0, r8
 800a188:	f004 faee 	bl	800e768 <rcl_get_zero_initialized_node>
 800a18c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a190:	f10d 0918 	add.w	r9, sp, #24
 800a194:	e884 0003 	stmia.w	r4, {r0, r1}
 800a198:	4648      	mov	r0, r9
 800a19a:	f004 fc5d 	bl	800ea58 <rcl_node_get_default_options>
 800a19e:	4640      	mov	r0, r8
 800a1a0:	f004 fae2 	bl	800e768 <rcl_get_zero_initialized_node>
 800a1a4:	f8cd 9000 	str.w	r9, [sp]
 800a1a8:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a1ac:	463b      	mov	r3, r7
 800a1ae:	e884 0003 	stmia.w	r4, {r0, r1}
 800a1b2:	4632      	mov	r2, r6
 800a1b4:	4629      	mov	r1, r5
 800a1b6:	4620      	mov	r0, r4
 800a1b8:	f004 fae0 	bl	800e77c <rcl_node_init>
 800a1bc:	b930      	cbnz	r0, 800a1cc <rclc_node_init_default+0x60>
 800a1be:	b021      	add	sp, #132	; 0x84
 800a1c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1c4:	200b      	movs	r0, #11
 800a1c6:	b021      	add	sp, #132	; 0x84
 800a1c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1cc:	9003      	str	r0, [sp, #12]
 800a1ce:	f000 f9ab 	bl	800a528 <rcutils_reset_error>
 800a1d2:	f000 f9a9 	bl	800a528 <rcutils_reset_error>
 800a1d6:	9803      	ldr	r0, [sp, #12]
 800a1d8:	b021      	add	sp, #132	; 0x84
 800a1da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1de:	200b      	movs	r0, #11
 800a1e0:	4770      	bx	lr
 800a1e2:	bf00      	nop

0800a1e4 <rclc_publisher_init_default>:
 800a1e4:	b368      	cbz	r0, 800a242 <rclc_publisher_init_default+0x5e>
 800a1e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1ea:	460d      	mov	r5, r1
 800a1ec:	b0a0      	sub	sp, #128	; 0x80
 800a1ee:	b321      	cbz	r1, 800a23a <rclc_publisher_init_default+0x56>
 800a1f0:	4616      	mov	r6, r2
 800a1f2:	b312      	cbz	r2, 800a23a <rclc_publisher_init_default+0x56>
 800a1f4:	461f      	mov	r7, r3
 800a1f6:	b303      	cbz	r3, 800a23a <rclc_publisher_init_default+0x56>
 800a1f8:	4604      	mov	r4, r0
 800a1fa:	f7fe fdb3 	bl	8008d64 <rcl_get_zero_initialized_publisher>
 800a1fe:	f10d 0810 	add.w	r8, sp, #16
 800a202:	6020      	str	r0, [r4, #0]
 800a204:	4640      	mov	r0, r8
 800a206:	f7fe fe49 	bl	8008e9c <rcl_publisher_get_default_options>
 800a20a:	490f      	ldr	r1, [pc, #60]	; (800a248 <rclc_publisher_init_default+0x64>)
 800a20c:	2250      	movs	r2, #80	; 0x50
 800a20e:	4640      	mov	r0, r8
 800a210:	f00b f909 	bl	8015426 <memcpy>
 800a214:	f8cd 8000 	str.w	r8, [sp]
 800a218:	463b      	mov	r3, r7
 800a21a:	4632      	mov	r2, r6
 800a21c:	4629      	mov	r1, r5
 800a21e:	4620      	mov	r0, r4
 800a220:	f7fe fda6 	bl	8008d70 <rcl_publisher_init>
 800a224:	b910      	cbnz	r0, 800a22c <rclc_publisher_init_default+0x48>
 800a226:	b020      	add	sp, #128	; 0x80
 800a228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a22c:	9003      	str	r0, [sp, #12]
 800a22e:	f000 f97b 	bl	800a528 <rcutils_reset_error>
 800a232:	9803      	ldr	r0, [sp, #12]
 800a234:	b020      	add	sp, #128	; 0x80
 800a236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a23a:	200b      	movs	r0, #11
 800a23c:	b020      	add	sp, #128	; 0x80
 800a23e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a242:	200b      	movs	r0, #11
 800a244:	4770      	bx	lr
 800a246:	bf00      	nop
 800a248:	080165a8 	.word	0x080165a8

0800a24c <rclc_subscription_init_default>:
 800a24c:	b368      	cbz	r0, 800a2aa <rclc_subscription_init_default+0x5e>
 800a24e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a252:	460d      	mov	r5, r1
 800a254:	b0a0      	sub	sp, #128	; 0x80
 800a256:	b321      	cbz	r1, 800a2a2 <rclc_subscription_init_default+0x56>
 800a258:	4616      	mov	r6, r2
 800a25a:	b312      	cbz	r2, 800a2a2 <rclc_subscription_init_default+0x56>
 800a25c:	461f      	mov	r7, r3
 800a25e:	b303      	cbz	r3, 800a2a2 <rclc_subscription_init_default+0x56>
 800a260:	4604      	mov	r4, r0
 800a262:	f004 fe31 	bl	800eec8 <rcl_get_zero_initialized_subscription>
 800a266:	f10d 0810 	add.w	r8, sp, #16
 800a26a:	6020      	str	r0, [r4, #0]
 800a26c:	4640      	mov	r0, r8
 800a26e:	f004 fed9 	bl	800f024 <rcl_subscription_get_default_options>
 800a272:	490f      	ldr	r1, [pc, #60]	; (800a2b0 <rclc_subscription_init_default+0x64>)
 800a274:	2250      	movs	r2, #80	; 0x50
 800a276:	4640      	mov	r0, r8
 800a278:	f00b f8d5 	bl	8015426 <memcpy>
 800a27c:	f8cd 8000 	str.w	r8, [sp]
 800a280:	463b      	mov	r3, r7
 800a282:	4632      	mov	r2, r6
 800a284:	4629      	mov	r1, r5
 800a286:	4620      	mov	r0, r4
 800a288:	f004 fe24 	bl	800eed4 <rcl_subscription_init>
 800a28c:	b910      	cbnz	r0, 800a294 <rclc_subscription_init_default+0x48>
 800a28e:	b020      	add	sp, #128	; 0x80
 800a290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a294:	9003      	str	r0, [sp, #12]
 800a296:	f000 f947 	bl	800a528 <rcutils_reset_error>
 800a29a:	9803      	ldr	r0, [sp, #12]
 800a29c:	b020      	add	sp, #128	; 0x80
 800a29e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2a2:	200b      	movs	r0, #11
 800a2a4:	b020      	add	sp, #128	; 0x80
 800a2a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2aa:	200b      	movs	r0, #11
 800a2ac:	4770      	bx	lr
 800a2ae:	bf00      	nop
 800a2b0:	080165f8 	.word	0x080165f8

0800a2b4 <rclc_timer_init_default>:
 800a2b4:	b360      	cbz	r0, 800a310 <rclc_timer_init_default+0x5c>
 800a2b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ba:	460e      	mov	r6, r1
 800a2bc:	b08a      	sub	sp, #40	; 0x28
 800a2be:	b319      	cbz	r1, 800a308 <rclc_timer_init_default+0x54>
 800a2c0:	4690      	mov	r8, r2
 800a2c2:	461f      	mov	r7, r3
 800a2c4:	4605      	mov	r5, r0
 800a2c6:	f7fe fef7 	bl	80090b8 <rcl_get_zero_initialized_timer>
 800a2ca:	68b4      	ldr	r4, [r6, #8]
 800a2cc:	6028      	str	r0, [r5, #0]
 800a2ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a2d0:	f10d 0c0c 	add.w	ip, sp, #12
 800a2d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a2d8:	6823      	ldr	r3, [r4, #0]
 800a2da:	f8cc 3000 	str.w	r3, [ip]
 800a2de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a2e0:	9302      	str	r3, [sp, #8]
 800a2e2:	e9cd 8700 	strd	r8, r7, [sp]
 800a2e6:	4628      	mov	r0, r5
 800a2e8:	4632      	mov	r2, r6
 800a2ea:	f106 010c 	add.w	r1, r6, #12
 800a2ee:	f7fe feeb 	bl	80090c8 <rcl_timer_init>
 800a2f2:	b910      	cbnz	r0, 800a2fa <rclc_timer_init_default+0x46>
 800a2f4:	b00a      	add	sp, #40	; 0x28
 800a2f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2fa:	9009      	str	r0, [sp, #36]	; 0x24
 800a2fc:	f000 f914 	bl	800a528 <rcutils_reset_error>
 800a300:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a302:	b00a      	add	sp, #40	; 0x28
 800a304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a308:	200b      	movs	r0, #11
 800a30a:	b00a      	add	sp, #40	; 0x28
 800a30c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a310:	200b      	movs	r0, #11
 800a312:	4770      	bx	lr

0800a314 <__default_zero_allocate>:
 800a314:	f00a bb78 	b.w	8014a08 <calloc>

0800a318 <__default_reallocate>:
 800a318:	f00a bd04 	b.w	8014d24 <realloc>

0800a31c <__default_deallocate>:
 800a31c:	f00a bbe2 	b.w	8014ae4 <free>

0800a320 <__default_allocate>:
 800a320:	f00a bbd8 	b.w	8014ad4 <malloc>

0800a324 <rcutils_get_zero_initialized_allocator>:
 800a324:	b510      	push	{r4, lr}
 800a326:	4c05      	ldr	r4, [pc, #20]	; (800a33c <rcutils_get_zero_initialized_allocator+0x18>)
 800a328:	4686      	mov	lr, r0
 800a32a:	4684      	mov	ip, r0
 800a32c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a32e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a332:	6823      	ldr	r3, [r4, #0]
 800a334:	f8cc 3000 	str.w	r3, [ip]
 800a338:	4670      	mov	r0, lr
 800a33a:	bd10      	pop	{r4, pc}
 800a33c:	08016648 	.word	0x08016648

0800a340 <rcutils_set_default_allocator>:
 800a340:	b1a8      	cbz	r0, 800a36e <rcutils_set_default_allocator+0x2e>
 800a342:	6802      	ldr	r2, [r0, #0]
 800a344:	b1a2      	cbz	r2, 800a370 <rcutils_set_default_allocator+0x30>
 800a346:	6841      	ldr	r1, [r0, #4]
 800a348:	b1a1      	cbz	r1, 800a374 <rcutils_set_default_allocator+0x34>
 800a34a:	b410      	push	{r4}
 800a34c:	68c4      	ldr	r4, [r0, #12]
 800a34e:	b164      	cbz	r4, 800a36a <rcutils_set_default_allocator+0x2a>
 800a350:	6880      	ldr	r0, [r0, #8]
 800a352:	b138      	cbz	r0, 800a364 <rcutils_set_default_allocator+0x24>
 800a354:	4b08      	ldr	r3, [pc, #32]	; (800a378 <rcutils_set_default_allocator+0x38>)
 800a356:	601a      	str	r2, [r3, #0]
 800a358:	2200      	movs	r2, #0
 800a35a:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800a35e:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800a362:	2001      	movs	r0, #1
 800a364:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a368:	4770      	bx	lr
 800a36a:	4620      	mov	r0, r4
 800a36c:	e7fa      	b.n	800a364 <rcutils_set_default_allocator+0x24>
 800a36e:	4770      	bx	lr
 800a370:	4610      	mov	r0, r2
 800a372:	4770      	bx	lr
 800a374:	4608      	mov	r0, r1
 800a376:	4770      	bx	lr
 800a378:	200001bc 	.word	0x200001bc

0800a37c <rcutils_get_default_allocator>:
 800a37c:	b510      	push	{r4, lr}
 800a37e:	4c05      	ldr	r4, [pc, #20]	; (800a394 <rcutils_get_default_allocator+0x18>)
 800a380:	4686      	mov	lr, r0
 800a382:	4684      	mov	ip, r0
 800a384:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a386:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a38a:	6823      	ldr	r3, [r4, #0]
 800a38c:	f8cc 3000 	str.w	r3, [ip]
 800a390:	4670      	mov	r0, lr
 800a392:	bd10      	pop	{r4, pc}
 800a394:	200001bc 	.word	0x200001bc

0800a398 <rcutils_allocator_is_valid>:
 800a398:	b158      	cbz	r0, 800a3b2 <rcutils_allocator_is_valid+0x1a>
 800a39a:	6803      	ldr	r3, [r0, #0]
 800a39c:	b143      	cbz	r3, 800a3b0 <rcutils_allocator_is_valid+0x18>
 800a39e:	6843      	ldr	r3, [r0, #4]
 800a3a0:	b133      	cbz	r3, 800a3b0 <rcutils_allocator_is_valid+0x18>
 800a3a2:	68c3      	ldr	r3, [r0, #12]
 800a3a4:	b123      	cbz	r3, 800a3b0 <rcutils_allocator_is_valid+0x18>
 800a3a6:	6880      	ldr	r0, [r0, #8]
 800a3a8:	3800      	subs	r0, #0
 800a3aa:	bf18      	it	ne
 800a3ac:	2001      	movne	r0, #1
 800a3ae:	4770      	bx	lr
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	4770      	bx	lr

0800a3b4 <__atomic_load_8>:
 800a3b4:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800a3b8:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 800a3bc:	4a15      	ldr	r2, [pc, #84]	; (800a414 <__atomic_load_8+0x60>)
 800a3be:	4b16      	ldr	r3, [pc, #88]	; (800a418 <__atomic_load_8+0x64>)
 800a3c0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800a3c4:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800a3c8:	fb02 f101 	mul.w	r1, r2, r1
 800a3cc:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800a3d0:	fba3 2301 	umull	r2, r3, r3, r1
 800a3d4:	091b      	lsrs	r3, r3, #4
 800a3d6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800a3da:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800a3de:	b4d0      	push	{r4, r6, r7}
 800a3e0:	4c0e      	ldr	r4, [pc, #56]	; (800a41c <__atomic_load_8+0x68>)
 800a3e2:	1ac9      	subs	r1, r1, r3
 800a3e4:	1862      	adds	r2, r4, r1
 800a3e6:	f04f 0c01 	mov.w	ip, #1
 800a3ea:	e8d2 3f4f 	ldrexb	r3, [r2]
 800a3ee:	e8c2 cf46 	strexb	r6, ip, [r2]
 800a3f2:	2e00      	cmp	r6, #0
 800a3f4:	d1f9      	bne.n	800a3ea <__atomic_load_8+0x36>
 800a3f6:	f3bf 8f5b 	dmb	ish
 800a3fa:	b2db      	uxtb	r3, r3
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d1f4      	bne.n	800a3ea <__atomic_load_8+0x36>
 800a400:	e9d0 6700 	ldrd	r6, r7, [r0]
 800a404:	f3bf 8f5b 	dmb	ish
 800a408:	5463      	strb	r3, [r4, r1]
 800a40a:	4630      	mov	r0, r6
 800a40c:	4639      	mov	r1, r7
 800a40e:	bcd0      	pop	{r4, r6, r7}
 800a410:	4770      	bx	lr
 800a412:	bf00      	nop
 800a414:	27d4eb2d 	.word	0x27d4eb2d
 800a418:	b21642c9 	.word	0xb21642c9
 800a41c:	200092b8 	.word	0x200092b8

0800a420 <__atomic_store_8>:
 800a420:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800a424:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 800a428:	b570      	push	{r4, r5, r6, lr}
 800a42a:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800a42e:	4c14      	ldr	r4, [pc, #80]	; (800a480 <__atomic_store_8+0x60>)
 800a430:	4d14      	ldr	r5, [pc, #80]	; (800a484 <__atomic_store_8+0x64>)
 800a432:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800a436:	fb04 f101 	mul.w	r1, r4, r1
 800a43a:	4c13      	ldr	r4, [pc, #76]	; (800a488 <__atomic_store_8+0x68>)
 800a43c:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800a440:	fba4 4e01 	umull	r4, lr, r4, r1
 800a444:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 800a448:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 800a44c:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 800a450:	eba1 0e0e 	sub.w	lr, r1, lr
 800a454:	eb05 0c0e 	add.w	ip, r5, lr
 800a458:	f04f 0401 	mov.w	r4, #1
 800a45c:	e8dc 1f4f 	ldrexb	r1, [ip]
 800a460:	e8cc 4f46 	strexb	r6, r4, [ip]
 800a464:	2e00      	cmp	r6, #0
 800a466:	d1f9      	bne.n	800a45c <__atomic_store_8+0x3c>
 800a468:	f3bf 8f5b 	dmb	ish
 800a46c:	b2c9      	uxtb	r1, r1
 800a46e:	2900      	cmp	r1, #0
 800a470:	d1f4      	bne.n	800a45c <__atomic_store_8+0x3c>
 800a472:	e9c0 2300 	strd	r2, r3, [r0]
 800a476:	f3bf 8f5b 	dmb	ish
 800a47a:	f805 100e 	strb.w	r1, [r5, lr]
 800a47e:	bd70      	pop	{r4, r5, r6, pc}
 800a480:	27d4eb2d 	.word	0x27d4eb2d
 800a484:	200092b8 	.word	0x200092b8
 800a488:	b21642c9 	.word	0xb21642c9

0800a48c <__atomic_exchange_8>:
 800a48c:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 800a490:	f08c 0c3d 	eor.w	ip, ip, #61	; 0x3d
 800a494:	4916      	ldr	r1, [pc, #88]	; (800a4f0 <__atomic_exchange_8+0x64>)
 800a496:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 800a49a:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 800a49e:	fb01 fc0c 	mul.w	ip, r1, ip
 800a4a2:	4914      	ldr	r1, [pc, #80]	; (800a4f4 <__atomic_exchange_8+0x68>)
 800a4a4:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 800a4a8:	b570      	push	{r4, r5, r6, lr}
 800a4aa:	4605      	mov	r5, r0
 800a4ac:	fba1 010c 	umull	r0, r1, r1, ip
 800a4b0:	0909      	lsrs	r1, r1, #4
 800a4b2:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 800a4b6:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 800a4ba:	4e0f      	ldr	r6, [pc, #60]	; (800a4f8 <__atomic_exchange_8+0x6c>)
 800a4bc:	ebac 0c01 	sub.w	ip, ip, r1
 800a4c0:	eb06 010c 	add.w	r1, r6, ip
 800a4c4:	f04f 0e01 	mov.w	lr, #1
 800a4c8:	e8d1 4f4f 	ldrexb	r4, [r1]
 800a4cc:	e8c1 ef40 	strexb	r0, lr, [r1]
 800a4d0:	2800      	cmp	r0, #0
 800a4d2:	d1f9      	bne.n	800a4c8 <__atomic_exchange_8+0x3c>
 800a4d4:	f3bf 8f5b 	dmb	ish
 800a4d8:	b2e4      	uxtb	r4, r4
 800a4da:	2c00      	cmp	r4, #0
 800a4dc:	d1f4      	bne.n	800a4c8 <__atomic_exchange_8+0x3c>
 800a4de:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a4e2:	e9c5 2300 	strd	r2, r3, [r5]
 800a4e6:	f3bf 8f5b 	dmb	ish
 800a4ea:	f806 400c 	strb.w	r4, [r6, ip]
 800a4ee:	bd70      	pop	{r4, r5, r6, pc}
 800a4f0:	27d4eb2d 	.word	0x27d4eb2d
 800a4f4:	b21642c9 	.word	0xb21642c9
 800a4f8:	200092b8 	.word	0x200092b8

0800a4fc <rcutils_get_error_string>:
 800a4fc:	4b06      	ldr	r3, [pc, #24]	; (800a518 <rcutils_get_error_string+0x1c>)
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	b13b      	cbz	r3, 800a512 <rcutils_get_error_string+0x16>
 800a502:	4b06      	ldr	r3, [pc, #24]	; (800a51c <rcutils_get_error_string+0x20>)
 800a504:	781a      	ldrb	r2, [r3, #0]
 800a506:	b90a      	cbnz	r2, 800a50c <rcutils_get_error_string+0x10>
 800a508:	2201      	movs	r2, #1
 800a50a:	701a      	strb	r2, [r3, #0]
 800a50c:	4b04      	ldr	r3, [pc, #16]	; (800a520 <rcutils_get_error_string+0x24>)
 800a50e:	7818      	ldrb	r0, [r3, #0]
 800a510:	4770      	bx	lr
 800a512:	4b04      	ldr	r3, [pc, #16]	; (800a524 <rcutils_get_error_string+0x28>)
 800a514:	7818      	ldrb	r0, [r3, #0]
 800a516:	4770      	bx	lr
 800a518:	200092cf 	.word	0x200092cf
 800a51c:	200092e1 	.word	0x200092e1
 800a520:	200092e0 	.word	0x200092e0
 800a524:	0801665c 	.word	0x0801665c

0800a528 <rcutils_reset_error>:
 800a528:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800a548 <rcutils_reset_error+0x20>
 800a52c:	4a08      	ldr	r2, [pc, #32]	; (800a550 <rcutils_reset_error+0x28>)
 800a52e:	4809      	ldr	r0, [pc, #36]	; (800a554 <rcutils_reset_error+0x2c>)
 800a530:	4909      	ldr	r1, [pc, #36]	; (800a558 <rcutils_reset_error+0x30>)
 800a532:	2300      	movs	r3, #0
 800a534:	8013      	strh	r3, [r2, #0]
 800a536:	ed82 7b02 	vstr	d7, [r2, #8]
 800a53a:	4a08      	ldr	r2, [pc, #32]	; (800a55c <rcutils_reset_error+0x34>)
 800a53c:	7003      	strb	r3, [r0, #0]
 800a53e:	700b      	strb	r3, [r1, #0]
 800a540:	7013      	strb	r3, [r2, #0]
 800a542:	4770      	bx	lr
 800a544:	f3af 8000 	nop.w
	...
 800a550:	200092d0 	.word	0x200092d0
 800a554:	200092e1 	.word	0x200092e1
 800a558:	200092e0 	.word	0x200092e0
 800a55c:	200092cf 	.word	0x200092cf

0800a560 <rcutils_system_time_now>:
 800a560:	b308      	cbz	r0, 800a5a6 <rcutils_system_time_now+0x46>
 800a562:	b570      	push	{r4, r5, r6, lr}
 800a564:	b084      	sub	sp, #16
 800a566:	4604      	mov	r4, r0
 800a568:	4669      	mov	r1, sp
 800a56a:	2001      	movs	r0, #1
 800a56c:	f7f6 ff74 	bl	8001458 <clock_gettime>
 800a570:	e9dd 3500 	ldrd	r3, r5, [sp]
 800a574:	2d00      	cmp	r5, #0
 800a576:	db13      	blt.n	800a5a0 <rcutils_system_time_now+0x40>
 800a578:	9902      	ldr	r1, [sp, #8]
 800a57a:	2900      	cmp	r1, #0
 800a57c:	db0d      	blt.n	800a59a <rcutils_system_time_now+0x3a>
 800a57e:	4e0b      	ldr	r6, [pc, #44]	; (800a5ac <rcutils_system_time_now+0x4c>)
 800a580:	fba3 3206 	umull	r3, r2, r3, r6
 800a584:	185b      	adds	r3, r3, r1
 800a586:	fb06 2205 	mla	r2, r6, r5, r2
 800a58a:	f04f 0000 	mov.w	r0, #0
 800a58e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800a592:	e9c4 3200 	strd	r3, r2, [r4]
 800a596:	b004      	add	sp, #16
 800a598:	bd70      	pop	{r4, r5, r6, pc}
 800a59a:	ea53 0205 	orrs.w	r2, r3, r5
 800a59e:	d1ee      	bne.n	800a57e <rcutils_system_time_now+0x1e>
 800a5a0:	2002      	movs	r0, #2
 800a5a2:	b004      	add	sp, #16
 800a5a4:	bd70      	pop	{r4, r5, r6, pc}
 800a5a6:	200b      	movs	r0, #11
 800a5a8:	4770      	bx	lr
 800a5aa:	bf00      	nop
 800a5ac:	3b9aca00 	.word	0x3b9aca00

0800a5b0 <rcutils_steady_time_now>:
 800a5b0:	b308      	cbz	r0, 800a5f6 <rcutils_steady_time_now+0x46>
 800a5b2:	b570      	push	{r4, r5, r6, lr}
 800a5b4:	b084      	sub	sp, #16
 800a5b6:	4604      	mov	r4, r0
 800a5b8:	4669      	mov	r1, sp
 800a5ba:	2000      	movs	r0, #0
 800a5bc:	f7f6 ff4c 	bl	8001458 <clock_gettime>
 800a5c0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800a5c4:	2d00      	cmp	r5, #0
 800a5c6:	db13      	blt.n	800a5f0 <rcutils_steady_time_now+0x40>
 800a5c8:	9902      	ldr	r1, [sp, #8]
 800a5ca:	2900      	cmp	r1, #0
 800a5cc:	db0d      	blt.n	800a5ea <rcutils_steady_time_now+0x3a>
 800a5ce:	4e0b      	ldr	r6, [pc, #44]	; (800a5fc <rcutils_steady_time_now+0x4c>)
 800a5d0:	fba3 3206 	umull	r3, r2, r3, r6
 800a5d4:	185b      	adds	r3, r3, r1
 800a5d6:	fb06 2205 	mla	r2, r6, r5, r2
 800a5da:	f04f 0000 	mov.w	r0, #0
 800a5de:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800a5e2:	e9c4 3200 	strd	r3, r2, [r4]
 800a5e6:	b004      	add	sp, #16
 800a5e8:	bd70      	pop	{r4, r5, r6, pc}
 800a5ea:	ea53 0205 	orrs.w	r2, r3, r5
 800a5ee:	d1ee      	bne.n	800a5ce <rcutils_steady_time_now+0x1e>
 800a5f0:	2002      	movs	r0, #2
 800a5f2:	b004      	add	sp, #16
 800a5f4:	bd70      	pop	{r4, r5, r6, pc}
 800a5f6:	200b      	movs	r0, #11
 800a5f8:	4770      	bx	lr
 800a5fa:	bf00      	nop
 800a5fc:	3b9aca00 	.word	0x3b9aca00

0800a600 <rmw_get_default_publisher_options>:
 800a600:	2200      	movs	r2, #0
 800a602:	6002      	str	r2, [r0, #0]
 800a604:	7102      	strb	r2, [r0, #4]
 800a606:	4770      	bx	lr

0800a608 <rmw_uros_set_custom_transport>:
 800a608:	b470      	push	{r4, r5, r6}
 800a60a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800a60e:	b162      	cbz	r2, 800a62a <rmw_uros_set_custom_transport+0x22>
 800a610:	b15b      	cbz	r3, 800a62a <rmw_uros_set_custom_transport+0x22>
 800a612:	b155      	cbz	r5, 800a62a <rmw_uros_set_custom_transport+0x22>
 800a614:	b14e      	cbz	r6, 800a62a <rmw_uros_set_custom_transport+0x22>
 800a616:	4c06      	ldr	r4, [pc, #24]	; (800a630 <rmw_uros_set_custom_transport+0x28>)
 800a618:	7020      	strb	r0, [r4, #0]
 800a61a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800a61e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a622:	6166      	str	r6, [r4, #20]
 800a624:	2000      	movs	r0, #0
 800a626:	bc70      	pop	{r4, r5, r6}
 800a628:	4770      	bx	lr
 800a62a:	200b      	movs	r0, #11
 800a62c:	bc70      	pop	{r4, r5, r6}
 800a62e:	4770      	bx	lr
 800a630:	200092e4 	.word	0x200092e4

0800a634 <flush_session>:
 800a634:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800a636:	f001 bcdf 	b.w	800bff8 <uxr_run_session_until_confirm_delivery>
 800a63a:	bf00      	nop

0800a63c <rmw_publish>:
 800a63c:	2800      	cmp	r0, #0
 800a63e:	d053      	beq.n	800a6e8 <rmw_publish+0xac>
 800a640:	b570      	push	{r4, r5, r6, lr}
 800a642:	460d      	mov	r5, r1
 800a644:	b08e      	sub	sp, #56	; 0x38
 800a646:	2900      	cmp	r1, #0
 800a648:	d04b      	beq.n	800a6e2 <rmw_publish+0xa6>
 800a64a:	4604      	mov	r4, r0
 800a64c:	6800      	ldr	r0, [r0, #0]
 800a64e:	f000 fced 	bl	800b02c <is_uxrce_rmw_identifier_valid>
 800a652:	2800      	cmp	r0, #0
 800a654:	d045      	beq.n	800a6e2 <rmw_publish+0xa6>
 800a656:	6866      	ldr	r6, [r4, #4]
 800a658:	2e00      	cmp	r6, #0
 800a65a:	d042      	beq.n	800a6e2 <rmw_publish+0xa6>
 800a65c:	69b4      	ldr	r4, [r6, #24]
 800a65e:	4628      	mov	r0, r5
 800a660:	6923      	ldr	r3, [r4, #16]
 800a662:	4798      	blx	r3
 800a664:	69f3      	ldr	r3, [r6, #28]
 800a666:	9005      	str	r0, [sp, #20]
 800a668:	b113      	cbz	r3, 800a670 <rmw_publish+0x34>
 800a66a:	a805      	add	r0, sp, #20
 800a66c:	4798      	blx	r3
 800a66e:	9805      	ldr	r0, [sp, #20]
 800a670:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800a674:	691b      	ldr	r3, [r3, #16]
 800a676:	9000      	str	r0, [sp, #0]
 800a678:	6972      	ldr	r2, [r6, #20]
 800a67a:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800a67c:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800a680:	ab06      	add	r3, sp, #24
 800a682:	f002 faa5 	bl	800cbd0 <uxr_prepare_output_stream>
 800a686:	b1d8      	cbz	r0, 800a6c0 <rmw_publish+0x84>
 800a688:	68a3      	ldr	r3, [r4, #8]
 800a68a:	a906      	add	r1, sp, #24
 800a68c:	4628      	mov	r0, r5
 800a68e:	4798      	blx	r3
 800a690:	6a33      	ldr	r3, [r6, #32]
 800a692:	4604      	mov	r4, r0
 800a694:	b10b      	cbz	r3, 800a69a <rmw_publish+0x5e>
 800a696:	a806      	add	r0, sp, #24
 800a698:	4798      	blx	r3
 800a69a:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800a6a4:	d022      	beq.n	800a6ec <rmw_publish+0xb0>
 800a6a6:	6918      	ldr	r0, [r3, #16]
 800a6a8:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800a6aa:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800a6ae:	f001 fca3 	bl	800bff8 <uxr_run_session_until_confirm_delivery>
 800a6b2:	4020      	ands	r0, r4
 800a6b4:	b2c4      	uxtb	r4, r0
 800a6b6:	f084 0001 	eor.w	r0, r4, #1
 800a6ba:	b2c0      	uxtb	r0, r0
 800a6bc:	b00e      	add	sp, #56	; 0x38
 800a6be:	bd70      	pop	{r4, r5, r6, pc}
 800a6c0:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800a6c4:	6918      	ldr	r0, [r3, #16]
 800a6c6:	9b05      	ldr	r3, [sp, #20]
 800a6c8:	9300      	str	r3, [sp, #0]
 800a6ca:	4b0b      	ldr	r3, [pc, #44]	; (800a6f8 <rmw_publish+0xbc>)
 800a6cc:	9301      	str	r3, [sp, #4]
 800a6ce:	9602      	str	r6, [sp, #8]
 800a6d0:	6972      	ldr	r2, [r6, #20]
 800a6d2:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800a6d4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800a6d8:	ab06      	add	r3, sp, #24
 800a6da:	f002 faa9 	bl	800cc30 <uxr_prepare_output_stream_fragmented>
 800a6de:	2800      	cmp	r0, #0
 800a6e0:	d1d2      	bne.n	800a688 <rmw_publish+0x4c>
 800a6e2:	2001      	movs	r0, #1
 800a6e4:	b00e      	add	sp, #56	; 0x38
 800a6e6:	bd70      	pop	{r4, r5, r6, pc}
 800a6e8:	2001      	movs	r0, #1
 800a6ea:	4770      	bx	lr
 800a6ec:	6918      	ldr	r0, [r3, #16]
 800a6ee:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800a6f2:	f001 f8c1 	bl	800b878 <uxr_flash_output_streams>
 800a6f6:	e7de      	b.n	800a6b6 <rmw_publish+0x7a>
 800a6f8:	0800a635 	.word	0x0800a635

0800a6fc <rmw_create_publisher>:
 800a6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a700:	b087      	sub	sp, #28
 800a702:	2800      	cmp	r0, #0
 800a704:	f000 80cc 	beq.w	800a8a0 <rmw_create_publisher+0x1a4>
 800a708:	460e      	mov	r6, r1
 800a70a:	2900      	cmp	r1, #0
 800a70c:	f000 80c8 	beq.w	800a8a0 <rmw_create_publisher+0x1a4>
 800a710:	4604      	mov	r4, r0
 800a712:	6800      	ldr	r0, [r0, #0]
 800a714:	4615      	mov	r5, r2
 800a716:	4698      	mov	r8, r3
 800a718:	f000 fc88 	bl	800b02c <is_uxrce_rmw_identifier_valid>
 800a71c:	2800      	cmp	r0, #0
 800a71e:	f000 80bf 	beq.w	800a8a0 <rmw_create_publisher+0x1a4>
 800a722:	2d00      	cmp	r5, #0
 800a724:	f000 80bc 	beq.w	800a8a0 <rmw_create_publisher+0x1a4>
 800a728:	782b      	ldrb	r3, [r5, #0]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	f000 80b8 	beq.w	800a8a0 <rmw_create_publisher+0x1a4>
 800a730:	f1b8 0f00 	cmp.w	r8, #0
 800a734:	f000 80b4 	beq.w	800a8a0 <rmw_create_publisher+0x1a4>
 800a738:	485c      	ldr	r0, [pc, #368]	; (800a8ac <rmw_create_publisher+0x1b0>)
 800a73a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800a73e:	f006 fed7 	bl	80114f0 <get_memory>
 800a742:	2800      	cmp	r0, #0
 800a744:	f000 80ac 	beq.w	800a8a0 <rmw_create_publisher+0x1a4>
 800a748:	6884      	ldr	r4, [r0, #8]
 800a74a:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800a74e:	f006 ff37 	bl	80115c0 <rmw_get_implementation_identifier>
 800a752:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 800a756:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800a75a:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800a75e:	4628      	mov	r0, r5
 800a760:	f7f5 fd48 	bl	80001f4 <strlen>
 800a764:	3001      	adds	r0, #1
 800a766:	283c      	cmp	r0, #60	; 0x3c
 800a768:	f104 0784 	add.w	r7, r4, #132	; 0x84
 800a76c:	f200 8091 	bhi.w	800a892 <rmw_create_publisher+0x196>
 800a770:	4a4f      	ldr	r2, [pc, #316]	; (800a8b0 <rmw_create_publisher+0x1b4>)
 800a772:	462b      	mov	r3, r5
 800a774:	213c      	movs	r1, #60	; 0x3c
 800a776:	4650      	mov	r0, sl
 800a778:	f00a fc5c 	bl	8015034 <sniprintf>
 800a77c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a780:	67e3      	str	r3, [r4, #124]	; 0x7c
 800a782:	4641      	mov	r1, r8
 800a784:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 800a788:	2250      	movs	r2, #80	; 0x50
 800a78a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800a78e:	f00a fe4a 	bl	8015426 <memcpy>
 800a792:	f898 3008 	ldrb.w	r3, [r8, #8]
 800a796:	4947      	ldr	r1, [pc, #284]	; (800a8b4 <rmw_create_publisher+0x1b8>)
 800a798:	2b02      	cmp	r3, #2
 800a79a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a79e:	bf0c      	ite	eq
 800a7a0:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800a7a4:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800a7a8:	67a3      	str	r3, [r4, #120]	; 0x78
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800a7b0:	4630      	mov	r0, r6
 800a7b2:	f000 fc49 	bl	800b048 <get_message_typesupport_handle>
 800a7b6:	2800      	cmp	r0, #0
 800a7b8:	d06b      	beq.n	800a892 <rmw_create_publisher+0x196>
 800a7ba:	6842      	ldr	r2, [r0, #4]
 800a7bc:	61a2      	str	r2, [r4, #24]
 800a7be:	2a00      	cmp	r2, #0
 800a7c0:	d067      	beq.n	800a892 <rmw_create_publisher+0x196>
 800a7c2:	4629      	mov	r1, r5
 800a7c4:	4643      	mov	r3, r8
 800a7c6:	4648      	mov	r0, r9
 800a7c8:	f007 f988 	bl	8011adc <create_topic>
 800a7cc:	6260      	str	r0, [r4, #36]	; 0x24
 800a7ce:	2800      	cmp	r0, #0
 800a7d0:	d063      	beq.n	800a89a <rmw_create_publisher+0x19e>
 800a7d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a7d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7da:	2103      	movs	r1, #3
 800a7dc:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 800a7e0:	1c42      	adds	r2, r0, #1
 800a7e2:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 800a7e6:	f000 fef9 	bl	800b5dc <uxr_object_id>
 800a7ea:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800a7ee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a7f2:	6120      	str	r0, [r4, #16]
 800a7f4:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800a7f8:	6910      	ldr	r0, [r2, #16]
 800a7fa:	2506      	movs	r5, #6
 800a7fc:	9500      	str	r5, [sp, #0]
 800a7fe:	6819      	ldr	r1, [r3, #0]
 800a800:	6922      	ldr	r2, [r4, #16]
 800a802:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800a806:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800a80a:	f000 fd99 	bl	800b340 <uxr_buffer_create_publisher_bin>
 800a80e:	4602      	mov	r2, r0
 800a810:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800a814:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800a818:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800a81c:	f000 fb86 	bl	800af2c <run_xrce_session>
 800a820:	b3b8      	cbz	r0, 800a892 <rmw_create_publisher+0x196>
 800a822:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a82a:	2105      	movs	r1, #5
 800a82c:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 800a830:	1c42      	adds	r2, r0, #1
 800a832:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 800a836:	f000 fed1 	bl	800b5dc <uxr_object_id>
 800a83a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800a83e:	6160      	str	r0, [r4, #20]
 800a840:	691e      	ldr	r6, [r3, #16]
 800a842:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a846:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800a84a:	f10d 0a10 	add.w	sl, sp, #16
 800a84e:	4641      	mov	r1, r8
 800a850:	4650      	mov	r0, sl
 800a852:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 800a856:	f000 fb85 	bl	800af64 <convert_qos_profile>
 800a85a:	9503      	str	r5, [sp, #12]
 800a85c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800a860:	9001      	str	r0, [sp, #4]
 800a862:	f8ad 1008 	strh.w	r1, [sp, #8]
 800a866:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a86a:	9300      	str	r3, [sp, #0]
 800a86c:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 800a870:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800a874:	f8d8 1000 	ldr.w	r1, [r8]
 800a878:	4630      	mov	r0, r6
 800a87a:	f000 fdc1 	bl	800b400 <uxr_buffer_create_datawriter_bin>
 800a87e:	4602      	mov	r2, r0
 800a880:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800a884:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800a888:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800a88c:	f000 fb4e 	bl	800af2c <run_xrce_session>
 800a890:	b938      	cbnz	r0, 800a8a2 <rmw_create_publisher+0x1a6>
 800a892:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a894:	b108      	cbz	r0, 800a89a <rmw_create_publisher+0x19e>
 800a896:	f000 fa47 	bl	800ad28 <rmw_uxrce_fini_topic_memory>
 800a89a:	4638      	mov	r0, r7
 800a89c:	f000 f9ec 	bl	800ac78 <rmw_uxrce_fini_publisher_memory>
 800a8a0:	2700      	movs	r7, #0
 800a8a2:	4638      	mov	r0, r7
 800a8a4:	b007      	add	sp, #28
 800a8a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8aa:	bf00      	nop
 800a8ac:	2000dbdc 	.word	0x2000dbdc
 800a8b0:	08016670 	.word	0x08016670
 800a8b4:	080163f8 	.word	0x080163f8

0800a8b8 <rmw_publisher_get_actual_qos>:
 800a8b8:	b150      	cbz	r0, 800a8d0 <rmw_publisher_get_actual_qos+0x18>
 800a8ba:	b508      	push	{r3, lr}
 800a8bc:	460b      	mov	r3, r1
 800a8be:	b149      	cbz	r1, 800a8d4 <rmw_publisher_get_actual_qos+0x1c>
 800a8c0:	6841      	ldr	r1, [r0, #4]
 800a8c2:	2250      	movs	r2, #80	; 0x50
 800a8c4:	3128      	adds	r1, #40	; 0x28
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f00a fdad 	bl	8015426 <memcpy>
 800a8cc:	2000      	movs	r0, #0
 800a8ce:	bd08      	pop	{r3, pc}
 800a8d0:	200b      	movs	r0, #11
 800a8d2:	4770      	bx	lr
 800a8d4:	200b      	movs	r0, #11
 800a8d6:	bd08      	pop	{r3, pc}

0800a8d8 <rmw_destroy_publisher>:
 800a8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8da:	b128      	cbz	r0, 800a8e8 <rmw_destroy_publisher+0x10>
 800a8dc:	4604      	mov	r4, r0
 800a8de:	6800      	ldr	r0, [r0, #0]
 800a8e0:	460d      	mov	r5, r1
 800a8e2:	f000 fba3 	bl	800b02c <is_uxrce_rmw_identifier_valid>
 800a8e6:	b910      	cbnz	r0, 800a8ee <rmw_destroy_publisher+0x16>
 800a8e8:	2401      	movs	r4, #1
 800a8ea:	4620      	mov	r0, r4
 800a8ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8ee:	6863      	ldr	r3, [r4, #4]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d0f9      	beq.n	800a8e8 <rmw_destroy_publisher+0x10>
 800a8f4:	2d00      	cmp	r5, #0
 800a8f6:	d0f7      	beq.n	800a8e8 <rmw_destroy_publisher+0x10>
 800a8f8:	6828      	ldr	r0, [r5, #0]
 800a8fa:	f000 fb97 	bl	800b02c <is_uxrce_rmw_identifier_valid>
 800a8fe:	2800      	cmp	r0, #0
 800a900:	d0f2      	beq.n	800a8e8 <rmw_destroy_publisher+0x10>
 800a902:	686c      	ldr	r4, [r5, #4]
 800a904:	2c00      	cmp	r4, #0
 800a906:	d0ef      	beq.n	800a8e8 <rmw_destroy_publisher+0x10>
 800a908:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a90a:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800a90e:	f007 f935 	bl	8011b7c <destroy_topic>
 800a912:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800a916:	6962      	ldr	r2, [r4, #20]
 800a918:	6918      	ldr	r0, [r3, #16]
 800a91a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800a91e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800a922:	6819      	ldr	r1, [r3, #0]
 800a924:	f000 fc58 	bl	800b1d8 <uxr_buffer_delete_entity>
 800a928:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800a92c:	6922      	ldr	r2, [r4, #16]
 800a92e:	691b      	ldr	r3, [r3, #16]
 800a930:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 800a934:	4604      	mov	r4, r0
 800a936:	6809      	ldr	r1, [r1, #0]
 800a938:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800a93c:	f000 fc4c 	bl	800b1d8 <uxr_buffer_delete_entity>
 800a940:	693e      	ldr	r6, [r7, #16]
 800a942:	4622      	mov	r2, r4
 800a944:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 800a948:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 800a94c:	4604      	mov	r4, r0
 800a94e:	4630      	mov	r0, r6
 800a950:	f000 faec 	bl	800af2c <run_xrce_session>
 800a954:	693e      	ldr	r6, [r7, #16]
 800a956:	4622      	mov	r2, r4
 800a958:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 800a95c:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 800a960:	4604      	mov	r4, r0
 800a962:	4630      	mov	r0, r6
 800a964:	f000 fae2 	bl	800af2c <run_xrce_session>
 800a968:	b12c      	cbz	r4, 800a976 <rmw_destroy_publisher+0x9e>
 800a96a:	b120      	cbz	r0, 800a976 <rmw_destroy_publisher+0x9e>
 800a96c:	2400      	movs	r4, #0
 800a96e:	4628      	mov	r0, r5
 800a970:	f000 f982 	bl	800ac78 <rmw_uxrce_fini_publisher_memory>
 800a974:	e7b9      	b.n	800a8ea <rmw_destroy_publisher+0x12>
 800a976:	2402      	movs	r4, #2
 800a978:	e7f9      	b.n	800a96e <rmw_destroy_publisher+0x96>
 800a97a:	bf00      	nop

0800a97c <rmw_uxrce_init_service_memory>:
 800a97c:	b1e2      	cbz	r2, 800a9b8 <rmw_uxrce_init_service_memory+0x3c>
 800a97e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a982:	7b05      	ldrb	r5, [r0, #12]
 800a984:	4606      	mov	r6, r0
 800a986:	b9ad      	cbnz	r5, 800a9b4 <rmw_uxrce_init_service_memory+0x38>
 800a988:	23c8      	movs	r3, #200	; 0xc8
 800a98a:	e9c0 5500 	strd	r5, r5, [r0]
 800a98e:	6083      	str	r3, [r0, #8]
 800a990:	f240 1301 	movw	r3, #257	; 0x101
 800a994:	4617      	mov	r7, r2
 800a996:	8183      	strh	r3, [r0, #12]
 800a998:	460c      	mov	r4, r1
 800a99a:	46a8      	mov	r8, r5
 800a99c:	4621      	mov	r1, r4
 800a99e:	4630      	mov	r0, r6
 800a9a0:	3501      	adds	r5, #1
 800a9a2:	f006 fdb5 	bl	8011510 <put_memory>
 800a9a6:	42af      	cmp	r7, r5
 800a9a8:	60a4      	str	r4, [r4, #8]
 800a9aa:	f884 800c 	strb.w	r8, [r4, #12]
 800a9ae:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800a9b2:	d1f3      	bne.n	800a99c <rmw_uxrce_init_service_memory+0x20>
 800a9b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9b8:	4770      	bx	lr
 800a9ba:	bf00      	nop

0800a9bc <rmw_uxrce_init_client_memory>:
 800a9bc:	b1e2      	cbz	r2, 800a9f8 <rmw_uxrce_init_client_memory+0x3c>
 800a9be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9c2:	7b05      	ldrb	r5, [r0, #12]
 800a9c4:	4606      	mov	r6, r0
 800a9c6:	b9ad      	cbnz	r5, 800a9f4 <rmw_uxrce_init_client_memory+0x38>
 800a9c8:	23c8      	movs	r3, #200	; 0xc8
 800a9ca:	e9c0 5500 	strd	r5, r5, [r0]
 800a9ce:	6083      	str	r3, [r0, #8]
 800a9d0:	f240 1301 	movw	r3, #257	; 0x101
 800a9d4:	4617      	mov	r7, r2
 800a9d6:	8183      	strh	r3, [r0, #12]
 800a9d8:	460c      	mov	r4, r1
 800a9da:	46a8      	mov	r8, r5
 800a9dc:	4621      	mov	r1, r4
 800a9de:	4630      	mov	r0, r6
 800a9e0:	3501      	adds	r5, #1
 800a9e2:	f006 fd95 	bl	8011510 <put_memory>
 800a9e6:	42af      	cmp	r7, r5
 800a9e8:	60a4      	str	r4, [r4, #8]
 800a9ea:	f884 800c 	strb.w	r8, [r4, #12]
 800a9ee:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800a9f2:	d1f3      	bne.n	800a9dc <rmw_uxrce_init_client_memory+0x20>
 800a9f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9f8:	4770      	bx	lr
 800a9fa:	bf00      	nop

0800a9fc <rmw_uxrce_init_publisher_memory>:
 800a9fc:	b1e2      	cbz	r2, 800aa38 <rmw_uxrce_init_publisher_memory+0x3c>
 800a9fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa02:	7b05      	ldrb	r5, [r0, #12]
 800aa04:	4606      	mov	r6, r0
 800aa06:	b9ad      	cbnz	r5, 800aa34 <rmw_uxrce_init_publisher_memory+0x38>
 800aa08:	23d8      	movs	r3, #216	; 0xd8
 800aa0a:	e9c0 5500 	strd	r5, r5, [r0]
 800aa0e:	6083      	str	r3, [r0, #8]
 800aa10:	f240 1301 	movw	r3, #257	; 0x101
 800aa14:	4617      	mov	r7, r2
 800aa16:	8183      	strh	r3, [r0, #12]
 800aa18:	460c      	mov	r4, r1
 800aa1a:	46a8      	mov	r8, r5
 800aa1c:	4621      	mov	r1, r4
 800aa1e:	4630      	mov	r0, r6
 800aa20:	3501      	adds	r5, #1
 800aa22:	f006 fd75 	bl	8011510 <put_memory>
 800aa26:	42af      	cmp	r7, r5
 800aa28:	60a4      	str	r4, [r4, #8]
 800aa2a:	f884 800c 	strb.w	r8, [r4, #12]
 800aa2e:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800aa32:	d1f3      	bne.n	800aa1c <rmw_uxrce_init_publisher_memory+0x20>
 800aa34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa38:	4770      	bx	lr
 800aa3a:	bf00      	nop

0800aa3c <rmw_uxrce_init_subscription_memory>:
 800aa3c:	b1e2      	cbz	r2, 800aa78 <rmw_uxrce_init_subscription_memory+0x3c>
 800aa3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa42:	7b05      	ldrb	r5, [r0, #12]
 800aa44:	4606      	mov	r6, r0
 800aa46:	b9ad      	cbnz	r5, 800aa74 <rmw_uxrce_init_subscription_memory+0x38>
 800aa48:	23d8      	movs	r3, #216	; 0xd8
 800aa4a:	e9c0 5500 	strd	r5, r5, [r0]
 800aa4e:	6083      	str	r3, [r0, #8]
 800aa50:	f240 1301 	movw	r3, #257	; 0x101
 800aa54:	4617      	mov	r7, r2
 800aa56:	8183      	strh	r3, [r0, #12]
 800aa58:	460c      	mov	r4, r1
 800aa5a:	46a8      	mov	r8, r5
 800aa5c:	4621      	mov	r1, r4
 800aa5e:	4630      	mov	r0, r6
 800aa60:	3501      	adds	r5, #1
 800aa62:	f006 fd55 	bl	8011510 <put_memory>
 800aa66:	42af      	cmp	r7, r5
 800aa68:	60a4      	str	r4, [r4, #8]
 800aa6a:	f884 800c 	strb.w	r8, [r4, #12]
 800aa6e:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800aa72:	d1f3      	bne.n	800aa5c <rmw_uxrce_init_subscription_memory+0x20>
 800aa74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa78:	4770      	bx	lr
 800aa7a:	bf00      	nop

0800aa7c <rmw_uxrce_init_node_memory>:
 800aa7c:	b1e2      	cbz	r2, 800aab8 <rmw_uxrce_init_node_memory+0x3c>
 800aa7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa82:	7b05      	ldrb	r5, [r0, #12]
 800aa84:	4606      	mov	r6, r0
 800aa86:	b9ad      	cbnz	r5, 800aab4 <rmw_uxrce_init_node_memory+0x38>
 800aa88:	23a4      	movs	r3, #164	; 0xa4
 800aa8a:	e9c0 5500 	strd	r5, r5, [r0]
 800aa8e:	6083      	str	r3, [r0, #8]
 800aa90:	f240 1301 	movw	r3, #257	; 0x101
 800aa94:	4617      	mov	r7, r2
 800aa96:	8183      	strh	r3, [r0, #12]
 800aa98:	460c      	mov	r4, r1
 800aa9a:	46a8      	mov	r8, r5
 800aa9c:	4621      	mov	r1, r4
 800aa9e:	4630      	mov	r0, r6
 800aaa0:	3501      	adds	r5, #1
 800aaa2:	f006 fd35 	bl	8011510 <put_memory>
 800aaa6:	42af      	cmp	r7, r5
 800aaa8:	60a4      	str	r4, [r4, #8]
 800aaaa:	f884 800c 	strb.w	r8, [r4, #12]
 800aaae:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 800aab2:	d1f3      	bne.n	800aa9c <rmw_uxrce_init_node_memory+0x20>
 800aab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aab8:	4770      	bx	lr
 800aaba:	bf00      	nop

0800aabc <rmw_uxrce_init_session_memory>:
 800aabc:	b1ea      	cbz	r2, 800aafa <rmw_uxrce_init_session_memory+0x3e>
 800aabe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aac2:	7b05      	ldrb	r5, [r0, #12]
 800aac4:	4606      	mov	r6, r0
 800aac6:	b9b5      	cbnz	r5, 800aaf6 <rmw_uxrce_init_session_memory+0x3a>
 800aac8:	e9c0 5500 	strd	r5, r5, [r0]
 800aacc:	f241 58a8 	movw	r8, #5544	; 0x15a8
 800aad0:	f240 1301 	movw	r3, #257	; 0x101
 800aad4:	4617      	mov	r7, r2
 800aad6:	f8c0 8008 	str.w	r8, [r0, #8]
 800aada:	460c      	mov	r4, r1
 800aadc:	8183      	strh	r3, [r0, #12]
 800aade:	46a9      	mov	r9, r5
 800aae0:	4621      	mov	r1, r4
 800aae2:	4630      	mov	r0, r6
 800aae4:	3501      	adds	r5, #1
 800aae6:	f006 fd13 	bl	8011510 <put_memory>
 800aaea:	42af      	cmp	r7, r5
 800aaec:	60a4      	str	r4, [r4, #8]
 800aaee:	f884 900c 	strb.w	r9, [r4, #12]
 800aaf2:	4444      	add	r4, r8
 800aaf4:	d1f4      	bne.n	800aae0 <rmw_uxrce_init_session_memory+0x24>
 800aaf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aafa:	4770      	bx	lr

0800aafc <rmw_uxrce_init_topic_memory>:
 800aafc:	b1e2      	cbz	r2, 800ab38 <rmw_uxrce_init_topic_memory+0x3c>
 800aafe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab02:	7b05      	ldrb	r5, [r0, #12]
 800ab04:	4606      	mov	r6, r0
 800ab06:	b9ad      	cbnz	r5, 800ab34 <rmw_uxrce_init_topic_memory+0x38>
 800ab08:	231c      	movs	r3, #28
 800ab0a:	e9c0 5500 	strd	r5, r5, [r0]
 800ab0e:	6083      	str	r3, [r0, #8]
 800ab10:	f240 1301 	movw	r3, #257	; 0x101
 800ab14:	4617      	mov	r7, r2
 800ab16:	8183      	strh	r3, [r0, #12]
 800ab18:	460c      	mov	r4, r1
 800ab1a:	46a8      	mov	r8, r5
 800ab1c:	4621      	mov	r1, r4
 800ab1e:	4630      	mov	r0, r6
 800ab20:	3501      	adds	r5, #1
 800ab22:	f006 fcf5 	bl	8011510 <put_memory>
 800ab26:	42af      	cmp	r7, r5
 800ab28:	60a4      	str	r4, [r4, #8]
 800ab2a:	f884 800c 	strb.w	r8, [r4, #12]
 800ab2e:	f104 041c 	add.w	r4, r4, #28
 800ab32:	d1f3      	bne.n	800ab1c <rmw_uxrce_init_topic_memory+0x20>
 800ab34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab38:	4770      	bx	lr
 800ab3a:	bf00      	nop

0800ab3c <rmw_uxrce_init_static_input_buffer_memory>:
 800ab3c:	b1ea      	cbz	r2, 800ab7a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800ab3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab42:	7b05      	ldrb	r5, [r0, #12]
 800ab44:	4606      	mov	r6, r0
 800ab46:	b9b5      	cbnz	r5, 800ab76 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800ab48:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800ab4c:	e9c0 5500 	strd	r5, r5, [r0]
 800ab50:	6083      	str	r3, [r0, #8]
 800ab52:	f240 1301 	movw	r3, #257	; 0x101
 800ab56:	4617      	mov	r7, r2
 800ab58:	8183      	strh	r3, [r0, #12]
 800ab5a:	460c      	mov	r4, r1
 800ab5c:	46a8      	mov	r8, r5
 800ab5e:	4621      	mov	r1, r4
 800ab60:	4630      	mov	r0, r6
 800ab62:	3501      	adds	r5, #1
 800ab64:	f006 fcd4 	bl	8011510 <put_memory>
 800ab68:	42af      	cmp	r7, r5
 800ab6a:	60a4      	str	r4, [r4, #8]
 800ab6c:	f884 800c 	strb.w	r8, [r4, #12]
 800ab70:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800ab74:	d1f3      	bne.n	800ab5e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800ab76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab7a:	4770      	bx	lr

0800ab7c <rmw_uxrce_init_init_options_impl_memory>:
 800ab7c:	b1e2      	cbz	r2, 800abb8 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800ab7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab82:	7b05      	ldrb	r5, [r0, #12]
 800ab84:	4606      	mov	r6, r0
 800ab86:	b9ad      	cbnz	r5, 800abb4 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800ab88:	232c      	movs	r3, #44	; 0x2c
 800ab8a:	e9c0 5500 	strd	r5, r5, [r0]
 800ab8e:	6083      	str	r3, [r0, #8]
 800ab90:	f240 1301 	movw	r3, #257	; 0x101
 800ab94:	4617      	mov	r7, r2
 800ab96:	8183      	strh	r3, [r0, #12]
 800ab98:	460c      	mov	r4, r1
 800ab9a:	46a8      	mov	r8, r5
 800ab9c:	4621      	mov	r1, r4
 800ab9e:	4630      	mov	r0, r6
 800aba0:	3501      	adds	r5, #1
 800aba2:	f006 fcb5 	bl	8011510 <put_memory>
 800aba6:	42af      	cmp	r7, r5
 800aba8:	60a4      	str	r4, [r4, #8]
 800abaa:	f884 800c 	strb.w	r8, [r4, #12]
 800abae:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 800abb2:	d1f3      	bne.n	800ab9c <rmw_uxrce_init_init_options_impl_memory+0x20>
 800abb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abb8:	4770      	bx	lr
 800abba:	bf00      	nop

0800abbc <rmw_uxrce_init_wait_set_memory>:
 800abbc:	b1e2      	cbz	r2, 800abf8 <rmw_uxrce_init_wait_set_memory+0x3c>
 800abbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abc2:	7b05      	ldrb	r5, [r0, #12]
 800abc4:	4606      	mov	r6, r0
 800abc6:	b9ad      	cbnz	r5, 800abf4 <rmw_uxrce_init_wait_set_memory+0x38>
 800abc8:	231c      	movs	r3, #28
 800abca:	e9c0 5500 	strd	r5, r5, [r0]
 800abce:	6083      	str	r3, [r0, #8]
 800abd0:	f240 1301 	movw	r3, #257	; 0x101
 800abd4:	4617      	mov	r7, r2
 800abd6:	8183      	strh	r3, [r0, #12]
 800abd8:	460c      	mov	r4, r1
 800abda:	46a8      	mov	r8, r5
 800abdc:	4621      	mov	r1, r4
 800abde:	4630      	mov	r0, r6
 800abe0:	3501      	adds	r5, #1
 800abe2:	f006 fc95 	bl	8011510 <put_memory>
 800abe6:	42af      	cmp	r7, r5
 800abe8:	60a4      	str	r4, [r4, #8]
 800abea:	f884 800c 	strb.w	r8, [r4, #12]
 800abee:	f104 041c 	add.w	r4, r4, #28
 800abf2:	d1f3      	bne.n	800abdc <rmw_uxrce_init_wait_set_memory+0x20>
 800abf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abf8:	4770      	bx	lr
 800abfa:	bf00      	nop

0800abfc <rmw_uxrce_init_guard_condition_memory>:
 800abfc:	b1e2      	cbz	r2, 800ac38 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800abfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac02:	7b05      	ldrb	r5, [r0, #12]
 800ac04:	4606      	mov	r6, r0
 800ac06:	b9ad      	cbnz	r5, 800ac34 <rmw_uxrce_init_guard_condition_memory+0x38>
 800ac08:	2320      	movs	r3, #32
 800ac0a:	e9c0 5500 	strd	r5, r5, [r0]
 800ac0e:	6083      	str	r3, [r0, #8]
 800ac10:	f240 1301 	movw	r3, #257	; 0x101
 800ac14:	4617      	mov	r7, r2
 800ac16:	8183      	strh	r3, [r0, #12]
 800ac18:	460c      	mov	r4, r1
 800ac1a:	46a8      	mov	r8, r5
 800ac1c:	4621      	mov	r1, r4
 800ac1e:	4630      	mov	r0, r6
 800ac20:	3501      	adds	r5, #1
 800ac22:	f006 fc75 	bl	8011510 <put_memory>
 800ac26:	42af      	cmp	r7, r5
 800ac28:	60a4      	str	r4, [r4, #8]
 800ac2a:	f884 800c 	strb.w	r8, [r4, #12]
 800ac2e:	f104 0420 	add.w	r4, r4, #32
 800ac32:	d1f3      	bne.n	800ac1c <rmw_uxrce_init_guard_condition_memory+0x20>
 800ac34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac38:	4770      	bx	lr
 800ac3a:	bf00      	nop

0800ac3c <rmw_uxrce_fini_session_memory>:
 800ac3c:	4601      	mov	r1, r0
 800ac3e:	4801      	ldr	r0, [pc, #4]	; (800ac44 <rmw_uxrce_fini_session_memory+0x8>)
 800ac40:	f006 bc66 	b.w	8011510 <put_memory>
 800ac44:	2000dbfc 	.word	0x2000dbfc

0800ac48 <rmw_uxrce_fini_node_memory>:
 800ac48:	b538      	push	{r3, r4, r5, lr}
 800ac4a:	4604      	mov	r4, r0
 800ac4c:	6800      	ldr	r0, [r0, #0]
 800ac4e:	b128      	cbz	r0, 800ac5c <rmw_uxrce_fini_node_memory+0x14>
 800ac50:	4b07      	ldr	r3, [pc, #28]	; (800ac70 <rmw_uxrce_fini_node_memory+0x28>)
 800ac52:	6819      	ldr	r1, [r3, #0]
 800ac54:	f7f5 fac4 	bl	80001e0 <strcmp>
 800ac58:	b940      	cbnz	r0, 800ac6c <rmw_uxrce_fini_node_memory+0x24>
 800ac5a:	6020      	str	r0, [r4, #0]
 800ac5c:	6861      	ldr	r1, [r4, #4]
 800ac5e:	b129      	cbz	r1, 800ac6c <rmw_uxrce_fini_node_memory+0x24>
 800ac60:	2500      	movs	r5, #0
 800ac62:	4804      	ldr	r0, [pc, #16]	; (800ac74 <rmw_uxrce_fini_node_memory+0x2c>)
 800ac64:	610d      	str	r5, [r1, #16]
 800ac66:	f006 fc53 	bl	8011510 <put_memory>
 800ac6a:	6065      	str	r5, [r4, #4]
 800ac6c:	bd38      	pop	{r3, r4, r5, pc}
 800ac6e:	bf00      	nop
 800ac70:	08016d8c 	.word	0x08016d8c
 800ac74:	2000dbcc 	.word	0x2000dbcc

0800ac78 <rmw_uxrce_fini_publisher_memory>:
 800ac78:	b510      	push	{r4, lr}
 800ac7a:	4604      	mov	r4, r0
 800ac7c:	6800      	ldr	r0, [r0, #0]
 800ac7e:	b128      	cbz	r0, 800ac8c <rmw_uxrce_fini_publisher_memory+0x14>
 800ac80:	4b06      	ldr	r3, [pc, #24]	; (800ac9c <rmw_uxrce_fini_publisher_memory+0x24>)
 800ac82:	6819      	ldr	r1, [r3, #0]
 800ac84:	f7f5 faac 	bl	80001e0 <strcmp>
 800ac88:	b938      	cbnz	r0, 800ac9a <rmw_uxrce_fini_publisher_memory+0x22>
 800ac8a:	6020      	str	r0, [r4, #0]
 800ac8c:	6861      	ldr	r1, [r4, #4]
 800ac8e:	b121      	cbz	r1, 800ac9a <rmw_uxrce_fini_publisher_memory+0x22>
 800ac90:	4803      	ldr	r0, [pc, #12]	; (800aca0 <rmw_uxrce_fini_publisher_memory+0x28>)
 800ac92:	f006 fc3d 	bl	8011510 <put_memory>
 800ac96:	2300      	movs	r3, #0
 800ac98:	6063      	str	r3, [r4, #4]
 800ac9a:	bd10      	pop	{r4, pc}
 800ac9c:	08016d8c 	.word	0x08016d8c
 800aca0:	2000dbdc 	.word	0x2000dbdc

0800aca4 <rmw_uxrce_fini_subscription_memory>:
 800aca4:	b510      	push	{r4, lr}
 800aca6:	4604      	mov	r4, r0
 800aca8:	6800      	ldr	r0, [r0, #0]
 800acaa:	b128      	cbz	r0, 800acb8 <rmw_uxrce_fini_subscription_memory+0x14>
 800acac:	4b06      	ldr	r3, [pc, #24]	; (800acc8 <rmw_uxrce_fini_subscription_memory+0x24>)
 800acae:	6819      	ldr	r1, [r3, #0]
 800acb0:	f7f5 fa96 	bl	80001e0 <strcmp>
 800acb4:	b938      	cbnz	r0, 800acc6 <rmw_uxrce_fini_subscription_memory+0x22>
 800acb6:	6020      	str	r0, [r4, #0]
 800acb8:	6861      	ldr	r1, [r4, #4]
 800acba:	b121      	cbz	r1, 800acc6 <rmw_uxrce_fini_subscription_memory+0x22>
 800acbc:	4803      	ldr	r0, [pc, #12]	; (800accc <rmw_uxrce_fini_subscription_memory+0x28>)
 800acbe:	f006 fc27 	bl	8011510 <put_memory>
 800acc2:	2300      	movs	r3, #0
 800acc4:	6063      	str	r3, [r4, #4]
 800acc6:	bd10      	pop	{r4, pc}
 800acc8:	08016d8c 	.word	0x08016d8c
 800accc:	2000dc1c 	.word	0x2000dc1c

0800acd0 <rmw_uxrce_fini_service_memory>:
 800acd0:	b510      	push	{r4, lr}
 800acd2:	4604      	mov	r4, r0
 800acd4:	6800      	ldr	r0, [r0, #0]
 800acd6:	b128      	cbz	r0, 800ace4 <rmw_uxrce_fini_service_memory+0x14>
 800acd8:	4b06      	ldr	r3, [pc, #24]	; (800acf4 <rmw_uxrce_fini_service_memory+0x24>)
 800acda:	6819      	ldr	r1, [r3, #0]
 800acdc:	f7f5 fa80 	bl	80001e0 <strcmp>
 800ace0:	b938      	cbnz	r0, 800acf2 <rmw_uxrce_fini_service_memory+0x22>
 800ace2:	6020      	str	r0, [r4, #0]
 800ace4:	6861      	ldr	r1, [r4, #4]
 800ace6:	b121      	cbz	r1, 800acf2 <rmw_uxrce_fini_service_memory+0x22>
 800ace8:	4803      	ldr	r0, [pc, #12]	; (800acf8 <rmw_uxrce_fini_service_memory+0x28>)
 800acea:	f006 fc11 	bl	8011510 <put_memory>
 800acee:	2300      	movs	r3, #0
 800acf0:	6063      	str	r3, [r4, #4]
 800acf2:	bd10      	pop	{r4, pc}
 800acf4:	08016d8c 	.word	0x08016d8c
 800acf8:	2000dbec 	.word	0x2000dbec

0800acfc <rmw_uxrce_fini_client_memory>:
 800acfc:	b510      	push	{r4, lr}
 800acfe:	4604      	mov	r4, r0
 800ad00:	6800      	ldr	r0, [r0, #0]
 800ad02:	b128      	cbz	r0, 800ad10 <rmw_uxrce_fini_client_memory+0x14>
 800ad04:	4b06      	ldr	r3, [pc, #24]	; (800ad20 <rmw_uxrce_fini_client_memory+0x24>)
 800ad06:	6819      	ldr	r1, [r3, #0]
 800ad08:	f7f5 fa6a 	bl	80001e0 <strcmp>
 800ad0c:	b938      	cbnz	r0, 800ad1e <rmw_uxrce_fini_client_memory+0x22>
 800ad0e:	6020      	str	r0, [r4, #0]
 800ad10:	6861      	ldr	r1, [r4, #4]
 800ad12:	b121      	cbz	r1, 800ad1e <rmw_uxrce_fini_client_memory+0x22>
 800ad14:	4803      	ldr	r0, [pc, #12]	; (800ad24 <rmw_uxrce_fini_client_memory+0x28>)
 800ad16:	f006 fbfb 	bl	8011510 <put_memory>
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	6063      	str	r3, [r4, #4]
 800ad1e:	bd10      	pop	{r4, pc}
 800ad20:	08016d8c 	.word	0x08016d8c
 800ad24:	20009300 	.word	0x20009300

0800ad28 <rmw_uxrce_fini_topic_memory>:
 800ad28:	b510      	push	{r4, lr}
 800ad2a:	4604      	mov	r4, r0
 800ad2c:	4621      	mov	r1, r4
 800ad2e:	4803      	ldr	r0, [pc, #12]	; (800ad3c <rmw_uxrce_fini_topic_memory+0x14>)
 800ad30:	f006 fbee 	bl	8011510 <put_memory>
 800ad34:	2300      	movs	r3, #0
 800ad36:	61a3      	str	r3, [r4, #24]
 800ad38:	bd10      	pop	{r4, pc}
 800ad3a:	bf00      	nop
 800ad3c:	2000dc2c 	.word	0x2000dc2c

0800ad40 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800ad40:	b082      	sub	sp, #8
 800ad42:	b530      	push	{r4, r5, lr}
 800ad44:	4925      	ldr	r1, [pc, #148]	; (800addc <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800ad46:	680d      	ldr	r5, [r1, #0]
 800ad48:	ac03      	add	r4, sp, #12
 800ad4a:	e884 000c 	stmia.w	r4, {r2, r3}
 800ad4e:	461c      	mov	r4, r3
 800ad50:	2d00      	cmp	r5, #0
 800ad52:	d041      	beq.n	800add8 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800ad54:	462b      	mov	r3, r5
 800ad56:	2100      	movs	r1, #0
 800ad58:	689a      	ldr	r2, [r3, #8]
 800ad5a:	685b      	ldr	r3, [r3, #4]
 800ad5c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800ad60:	4290      	cmp	r0, r2
 800ad62:	bf08      	it	eq
 800ad64:	3101      	addeq	r1, #1
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d1f6      	bne.n	800ad58 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800ad6a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800ad6e:	2b02      	cmp	r3, #2
 800ad70:	d029      	beq.n	800adc6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800ad72:	d907      	bls.n	800ad84 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800ad74:	2b03      	cmp	r3, #3
 800ad76:	d005      	beq.n	800ad84 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800ad78:	2100      	movs	r1, #0
 800ad7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad7e:	4608      	mov	r0, r1
 800ad80:	b002      	add	sp, #8
 800ad82:	4770      	bx	lr
 800ad84:	b314      	cbz	r4, 800adcc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800ad86:	428c      	cmp	r4, r1
 800ad88:	d820      	bhi.n	800adcc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800ad8a:	2d00      	cmp	r5, #0
 800ad8c:	d0f4      	beq.n	800ad78 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800ad8e:	2100      	movs	r1, #0
 800ad90:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800ad94:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800ad98:	e002      	b.n	800ada0 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800ad9a:	686d      	ldr	r5, [r5, #4]
 800ad9c:	2d00      	cmp	r5, #0
 800ad9e:	d0ec      	beq.n	800ad7a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800ada0:	68ab      	ldr	r3, [r5, #8]
 800ada2:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 800ada6:	4290      	cmp	r0, r2
 800ada8:	d1f7      	bne.n	800ad9a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800adaa:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 800adae:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800adb2:	4562      	cmp	r2, ip
 800adb4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800adb8:	eb73 0e04 	sbcs.w	lr, r3, r4
 800adbc:	daed      	bge.n	800ad9a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800adbe:	4694      	mov	ip, r2
 800adc0:	461c      	mov	r4, r3
 800adc2:	4629      	mov	r1, r5
 800adc4:	e7e9      	b.n	800ad9a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800adc6:	b10c      	cbz	r4, 800adcc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800adc8:	428c      	cmp	r4, r1
 800adca:	d9d5      	bls.n	800ad78 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800adcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800add0:	4802      	ldr	r0, [pc, #8]	; (800addc <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800add2:	b002      	add	sp, #8
 800add4:	f006 bb8c 	b.w	80114f0 <get_memory>
 800add8:	4629      	mov	r1, r5
 800adda:	e7c6      	b.n	800ad6a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800addc:	2000dc0c 	.word	0x2000dc0c

0800ade0 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800ade0:	4b11      	ldr	r3, [pc, #68]	; (800ae28 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	b530      	push	{r4, r5, lr}
 800ade6:	b1e3      	cbz	r3, 800ae22 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800ade8:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800adec:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 800adf0:	2400      	movs	r4, #0
 800adf2:	e001      	b.n	800adf8 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800adf4:	685b      	ldr	r3, [r3, #4]
 800adf6:	b193      	cbz	r3, 800ae1e <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800adf8:	689a      	ldr	r2, [r3, #8]
 800adfa:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 800adfe:	4288      	cmp	r0, r1
 800ae00:	d1f8      	bne.n	800adf4 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800ae02:	f8d2 1818 	ldr.w	r1, [r2, #2072]	; 0x818
 800ae06:	f8d2 281c 	ldr.w	r2, [r2, #2076]	; 0x81c
 800ae0a:	4571      	cmp	r1, lr
 800ae0c:	eb72 050c 	sbcs.w	r5, r2, ip
 800ae10:	daf0      	bge.n	800adf4 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800ae12:	461c      	mov	r4, r3
 800ae14:	685b      	ldr	r3, [r3, #4]
 800ae16:	468e      	mov	lr, r1
 800ae18:	4694      	mov	ip, r2
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d1ec      	bne.n	800adf8 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800ae1e:	4620      	mov	r0, r4
 800ae20:	bd30      	pop	{r4, r5, pc}
 800ae22:	461c      	mov	r4, r3
 800ae24:	4620      	mov	r0, r4
 800ae26:	bd30      	pop	{r4, r5, pc}
 800ae28:	2000dc0c 	.word	0x2000dc0c
 800ae2c:	00000000 	.word	0x00000000

0800ae30 <rmw_uxrce_clean_expired_static_input_buffer>:
 800ae30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae34:	4b3c      	ldr	r3, [pc, #240]	; (800af28 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800ae36:	ed2d 8b06 	vpush	{d8-d10}
 800ae3a:	681f      	ldr	r7, [r3, #0]
 800ae3c:	b08d      	sub	sp, #52	; 0x34
 800ae3e:	f007 fccd 	bl	80127dc <rmw_uros_epoch_nanos>
 800ae42:	2f00      	cmp	r7, #0
 800ae44:	d05d      	beq.n	800af02 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800ae46:	46b8      	mov	r8, r7
 800ae48:	ed9f 8b31 	vldr	d8, [pc, #196]	; 800af10 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800ae4c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800ae50:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800ae54:	2b04      	cmp	r3, #4
 800ae56:	ed9f ab30 	vldr	d10, [pc, #192]	; 800af18 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800ae5a:	ed9f 9b31 	vldr	d9, [pc, #196]	; 800af20 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800ae5e:	4681      	mov	r9, r0
 800ae60:	468a      	mov	sl, r1
 800ae62:	ac04      	add	r4, sp, #16
 800ae64:	d03f      	beq.n	800aee6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800ae66:	2b05      	cmp	r3, #5
 800ae68:	d044      	beq.n	800aef4 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800ae6a:	2b03      	cmp	r3, #3
 800ae6c:	d03b      	beq.n	800aee6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800ae6e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ae72:	ed8d ab06 	vstr	d10, [sp, #24]
 800ae76:	ed8d 8b08 	vstr	d8, [sp, #32]
 800ae7a:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 800ae7e:	ab08      	add	r3, sp, #32
 800ae80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ae82:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ae86:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ae8a:	f006 f965 	bl	8011158 <rmw_time_equal>
 800ae8e:	b118      	cbz	r0, 800ae98 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800ae90:	ed8d 9b04 	vstr	d9, [sp, #16]
 800ae94:	ed8d 8b06 	vstr	d8, [sp, #24]
 800ae98:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ae9c:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
 800aea0:	f8d5 781c 	ldr.w	r7, [r5, #2076]	; 0x81c
 800aea4:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800aea8:	f006 f9aa 	bl	8011200 <rmw_time_total_nsec>
 800aeac:	1830      	adds	r0, r6, r0
 800aeae:	eb47 0101 	adc.w	r1, r7, r1
 800aeb2:	4548      	cmp	r0, r9
 800aeb4:	eb71 030a 	sbcs.w	r3, r1, sl
 800aeb8:	f505 6502 	add.w	r5, r5, #2080	; 0x820
 800aebc:	db05      	blt.n	800aeca <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800aebe:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800aec2:	4591      	cmp	r9, r2
 800aec4:	eb7a 0303 	sbcs.w	r3, sl, r3
 800aec8:	da03      	bge.n	800aed2 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800aeca:	4817      	ldr	r0, [pc, #92]	; (800af28 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800aecc:	4641      	mov	r1, r8
 800aece:	f006 fb1f 	bl	8011510 <put_memory>
 800aed2:	f1bb 0f00 	cmp.w	fp, #0
 800aed6:	d014      	beq.n	800af02 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800aed8:	46d8      	mov	r8, fp
 800aeda:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800aede:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800aee2:	2b04      	cmp	r3, #4
 800aee4:	d1bf      	bne.n	800ae66 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800aee6:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800aeea:	3340      	adds	r3, #64	; 0x40
 800aeec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800aeee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800aef2:	e7c0      	b.n	800ae76 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800aef4:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800aef8:	3348      	adds	r3, #72	; 0x48
 800aefa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800aefc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800af00:	e7b9      	b.n	800ae76 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800af02:	b00d      	add	sp, #52	; 0x34
 800af04:	ecbd 8b06 	vpop	{d8-d10}
 800af08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af0c:	f3af 8000 	nop.w
	...
 800af18:	00000001 	.word	0x00000001
 800af1c:	00000000 	.word	0x00000000
 800af20:	0000001e 	.word	0x0000001e
 800af24:	00000000 	.word	0x00000000
 800af28:	2000dc0c 	.word	0x2000dc0c

0800af2c <run_xrce_session>:
 800af2c:	b510      	push	{r4, lr}
 800af2e:	788c      	ldrb	r4, [r1, #2]
 800af30:	b086      	sub	sp, #24
 800af32:	2c01      	cmp	r4, #1
 800af34:	f8ad 200e 	strh.w	r2, [sp, #14]
 800af38:	d00c      	beq.n	800af54 <run_xrce_session+0x28>
 800af3a:	4619      	mov	r1, r3
 800af3c:	2301      	movs	r3, #1
 800af3e:	9300      	str	r3, [sp, #0]
 800af40:	f10d 020e 	add.w	r2, sp, #14
 800af44:	f10d 0317 	add.w	r3, sp, #23
 800af48:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800af4c:	f001 f87a 	bl	800c044 <uxr_run_session_until_all_status>
 800af50:	b006      	add	sp, #24
 800af52:	bd10      	pop	{r4, pc}
 800af54:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800af58:	f000 fc8e 	bl	800b878 <uxr_flash_output_streams>
 800af5c:	4620      	mov	r0, r4
 800af5e:	b006      	add	sp, #24
 800af60:	bd10      	pop	{r4, pc}
 800af62:	bf00      	nop

0800af64 <convert_qos_profile>:
 800af64:	7a4a      	ldrb	r2, [r1, #9]
 800af66:	f891 c008 	ldrb.w	ip, [r1, #8]
 800af6a:	2a02      	cmp	r2, #2
 800af6c:	bf18      	it	ne
 800af6e:	2200      	movne	r2, #0
 800af70:	7002      	strb	r2, [r0, #0]
 800af72:	780a      	ldrb	r2, [r1, #0]
 800af74:	8889      	ldrh	r1, [r1, #4]
 800af76:	8081      	strh	r1, [r0, #4]
 800af78:	f1ac 0c02 	sub.w	ip, ip, #2
 800af7c:	f1a2 0202 	sub.w	r2, r2, #2
 800af80:	fabc fc8c 	clz	ip, ip
 800af84:	fab2 f282 	clz	r2, r2
 800af88:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800af8c:	0952      	lsrs	r2, r2, #5
 800af8e:	f880 c001 	strb.w	ip, [r0, #1]
 800af92:	7082      	strb	r2, [r0, #2]
 800af94:	4770      	bx	lr
 800af96:	bf00      	nop

0800af98 <generate_type_name>:
 800af98:	b530      	push	{r4, r5, lr}
 800af9a:	2300      	movs	r3, #0
 800af9c:	700b      	strb	r3, [r1, #0]
 800af9e:	6803      	ldr	r3, [r0, #0]
 800afa0:	b087      	sub	sp, #28
 800afa2:	4614      	mov	r4, r2
 800afa4:	b1d3      	cbz	r3, 800afdc <generate_type_name+0x44>
 800afa6:	4a0f      	ldr	r2, [pc, #60]	; (800afe4 <generate_type_name+0x4c>)
 800afa8:	4615      	mov	r5, r2
 800afaa:	9203      	str	r2, [sp, #12]
 800afac:	9500      	str	r5, [sp, #0]
 800afae:	6842      	ldr	r2, [r0, #4]
 800afb0:	480d      	ldr	r0, [pc, #52]	; (800afe8 <generate_type_name+0x50>)
 800afb2:	9001      	str	r0, [sp, #4]
 800afb4:	4608      	mov	r0, r1
 800afb6:	490d      	ldr	r1, [pc, #52]	; (800afec <generate_type_name+0x54>)
 800afb8:	9204      	str	r2, [sp, #16]
 800afba:	9105      	str	r1, [sp, #20]
 800afbc:	9102      	str	r1, [sp, #8]
 800afbe:	4a0c      	ldr	r2, [pc, #48]	; (800aff0 <generate_type_name+0x58>)
 800afc0:	4621      	mov	r1, r4
 800afc2:	f00a f837 	bl	8015034 <sniprintf>
 800afc6:	2800      	cmp	r0, #0
 800afc8:	db05      	blt.n	800afd6 <generate_type_name+0x3e>
 800afca:	4284      	cmp	r4, r0
 800afcc:	bfd4      	ite	le
 800afce:	2000      	movle	r0, #0
 800afd0:	2001      	movgt	r0, #1
 800afd2:	b007      	add	sp, #28
 800afd4:	bd30      	pop	{r4, r5, pc}
 800afd6:	2000      	movs	r0, #0
 800afd8:	b007      	add	sp, #28
 800afda:	bd30      	pop	{r4, r5, pc}
 800afdc:	4b05      	ldr	r3, [pc, #20]	; (800aff4 <generate_type_name+0x5c>)
 800afde:	4a01      	ldr	r2, [pc, #4]	; (800afe4 <generate_type_name+0x4c>)
 800afe0:	461d      	mov	r5, r3
 800afe2:	e7e2      	b.n	800afaa <generate_type_name+0x12>
 800afe4:	08016660 	.word	0x08016660
 800afe8:	08016678 	.word	0x08016678
 800afec:	08016674 	.word	0x08016674
 800aff0:	08016664 	.word	0x08016664
 800aff4:	08016b64 	.word	0x08016b64

0800aff8 <generate_topic_name>:
 800aff8:	b510      	push	{r4, lr}
 800affa:	b082      	sub	sp, #8
 800affc:	4614      	mov	r4, r2
 800affe:	9000      	str	r0, [sp, #0]
 800b000:	4b08      	ldr	r3, [pc, #32]	; (800b024 <generate_topic_name+0x2c>)
 800b002:	4a09      	ldr	r2, [pc, #36]	; (800b028 <generate_topic_name+0x30>)
 800b004:	4608      	mov	r0, r1
 800b006:	4621      	mov	r1, r4
 800b008:	f00a f814 	bl	8015034 <sniprintf>
 800b00c:	2800      	cmp	r0, #0
 800b00e:	db05      	blt.n	800b01c <generate_topic_name+0x24>
 800b010:	4284      	cmp	r4, r0
 800b012:	bfd4      	ite	le
 800b014:	2000      	movle	r0, #0
 800b016:	2001      	movgt	r0, #1
 800b018:	b002      	add	sp, #8
 800b01a:	bd10      	pop	{r4, pc}
 800b01c:	2000      	movs	r0, #0
 800b01e:	b002      	add	sp, #8
 800b020:	bd10      	pop	{r4, pc}
 800b022:	bf00      	nop
 800b024:	08016684 	.word	0x08016684
 800b028:	0801667c 	.word	0x0801667c

0800b02c <is_uxrce_rmw_identifier_valid>:
 800b02c:	b510      	push	{r4, lr}
 800b02e:	4604      	mov	r4, r0
 800b030:	b140      	cbz	r0, 800b044 <is_uxrce_rmw_identifier_valid+0x18>
 800b032:	f006 fac5 	bl	80115c0 <rmw_get_implementation_identifier>
 800b036:	4601      	mov	r1, r0
 800b038:	4620      	mov	r0, r4
 800b03a:	f7f5 f8d1 	bl	80001e0 <strcmp>
 800b03e:	fab0 f080 	clz	r0, r0
 800b042:	0940      	lsrs	r0, r0, #5
 800b044:	bd10      	pop	{r4, pc}
 800b046:	bf00      	nop

0800b048 <get_message_typesupport_handle>:
 800b048:	6883      	ldr	r3, [r0, #8]
 800b04a:	4718      	bx	r3

0800b04c <get_message_typesupport_handle_function>:
 800b04c:	b510      	push	{r4, lr}
 800b04e:	4604      	mov	r4, r0
 800b050:	6800      	ldr	r0, [r0, #0]
 800b052:	f7f5 f8c5 	bl	80001e0 <strcmp>
 800b056:	2800      	cmp	r0, #0
 800b058:	bf0c      	ite	eq
 800b05a:	4620      	moveq	r0, r4
 800b05c:	2000      	movne	r0, #0
 800b05e:	bd10      	pop	{r4, pc}

0800b060 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800b060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b064:	6805      	ldr	r5, [r0, #0]
 800b066:	4604      	mov	r4, r0
 800b068:	4628      	mov	r0, r5
 800b06a:	460e      	mov	r6, r1
 800b06c:	f7f5 f8b8 	bl	80001e0 <strcmp>
 800b070:	b1c8      	cbz	r0, 800b0a6 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800b072:	4b11      	ldr	r3, [pc, #68]	; (800b0b8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	429d      	cmp	r5, r3
 800b078:	d112      	bne.n	800b0a0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800b07a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800b07e:	f8d8 4000 	ldr.w	r4, [r8]
 800b082:	b16c      	cbz	r4, 800b0a0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800b084:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800b088:	2700      	movs	r7, #0
 800b08a:	3d04      	subs	r5, #4
 800b08c:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800b090:	4631      	mov	r1, r6
 800b092:	f7f5 f8a5 	bl	80001e0 <strcmp>
 800b096:	00bb      	lsls	r3, r7, #2
 800b098:	b140      	cbz	r0, 800b0ac <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800b09a:	3701      	adds	r7, #1
 800b09c:	42bc      	cmp	r4, r7
 800b09e:	d1f5      	bne.n	800b08c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800b0a0:	2000      	movs	r0, #0
 800b0a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0a6:	4620      	mov	r0, r4
 800b0a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0ac:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b0b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0b4:	58d3      	ldr	r3, [r2, r3]
 800b0b6:	4718      	bx	r3
 800b0b8:	200001d0 	.word	0x200001d0

0800b0bc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800b0bc:	4b04      	ldr	r3, [pc, #16]	; (800b0d0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b0be:	681a      	ldr	r2, [r3, #0]
 800b0c0:	b10a      	cbz	r2, 800b0c6 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800b0c2:	4803      	ldr	r0, [pc, #12]	; (800b0d0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b0c4:	4770      	bx	lr
 800b0c6:	4a03      	ldr	r2, [pc, #12]	; (800b0d4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800b0c8:	4801      	ldr	r0, [pc, #4]	; (800b0d0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b0ca:	6812      	ldr	r2, [r2, #0]
 800b0cc:	601a      	str	r2, [r3, #0]
 800b0ce:	4770      	bx	lr
 800b0d0:	200001e0 	.word	0x200001e0
 800b0d4:	200001d0 	.word	0x200001d0

0800b0d8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800b0d8:	4a02      	ldr	r2, [pc, #8]	; (800b0e4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 800b0da:	4b03      	ldr	r3, [pc, #12]	; (800b0e8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 800b0dc:	6812      	ldr	r2, [r2, #0]
 800b0de:	601a      	str	r2, [r3, #0]
 800b0e0:	4770      	bx	lr
 800b0e2:	bf00      	nop
 800b0e4:	200001d0 	.word	0x200001d0
 800b0e8:	200001e0 	.word	0x200001e0

0800b0ec <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 800b0ec:	f007 bb84 	b.w	80127f8 <std_msgs__msg__Int32__init>

0800b0f0 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 800b0f0:	f007 bb86 	b.w	8012800 <std_msgs__msg__Int32__fini>

0800b0f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800b0f4:	4b04      	ldr	r3, [pc, #16]	; (800b108 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b0f6:	681a      	ldr	r2, [r3, #0]
 800b0f8:	b10a      	cbz	r2, 800b0fe <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800b0fa:	4803      	ldr	r0, [pc, #12]	; (800b108 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b0fc:	4770      	bx	lr
 800b0fe:	4a03      	ldr	r2, [pc, #12]	; (800b10c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800b100:	4801      	ldr	r0, [pc, #4]	; (800b108 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800b102:	6812      	ldr	r2, [r2, #0]
 800b104:	601a      	str	r2, [r3, #0]
 800b106:	4770      	bx	lr
 800b108:	20000228 	.word	0x20000228
 800b10c:	200001d4 	.word	0x200001d4

0800b110 <_Int32__max_serialized_size>:
 800b110:	b508      	push	{r3, lr}
 800b112:	2104      	movs	r1, #4
 800b114:	2000      	movs	r0, #0
 800b116:	f7fd fdb9 	bl	8008c8c <ucdr_alignment>
 800b11a:	3004      	adds	r0, #4
 800b11c:	bd08      	pop	{r3, pc}
 800b11e:	bf00      	nop

0800b120 <_Int32__cdr_deserialize>:
 800b120:	b109      	cbz	r1, 800b126 <_Int32__cdr_deserialize+0x6>
 800b122:	f7fd bb35 	b.w	8008790 <ucdr_deserialize_int32_t>
 800b126:	4608      	mov	r0, r1
 800b128:	4770      	bx	lr
 800b12a:	bf00      	nop

0800b12c <get_serialized_size_std_msgs__msg__Int32>:
 800b12c:	b138      	cbz	r0, 800b13e <get_serialized_size_std_msgs__msg__Int32+0x12>
 800b12e:	b508      	push	{r3, lr}
 800b130:	460b      	mov	r3, r1
 800b132:	4618      	mov	r0, r3
 800b134:	2104      	movs	r1, #4
 800b136:	f7fd fda9 	bl	8008c8c <ucdr_alignment>
 800b13a:	3004      	adds	r0, #4
 800b13c:	bd08      	pop	{r3, pc}
 800b13e:	4770      	bx	lr

0800b140 <_Int32__cdr_serialize>:
 800b140:	460a      	mov	r2, r1
 800b142:	b118      	cbz	r0, 800b14c <_Int32__cdr_serialize+0xc>
 800b144:	6801      	ldr	r1, [r0, #0]
 800b146:	4610      	mov	r0, r2
 800b148:	f7fd ba8a 	b.w	8008660 <ucdr_serialize_int32_t>
 800b14c:	4770      	bx	lr
 800b14e:	bf00      	nop

0800b150 <_Int32__get_serialized_size>:
 800b150:	b130      	cbz	r0, 800b160 <_Int32__get_serialized_size+0x10>
 800b152:	b508      	push	{r3, lr}
 800b154:	2104      	movs	r1, #4
 800b156:	2000      	movs	r0, #0
 800b158:	f7fd fd98 	bl	8008c8c <ucdr_alignment>
 800b15c:	3004      	adds	r0, #4
 800b15e:	bd08      	pop	{r3, pc}
 800b160:	4770      	bx	lr
 800b162:	bf00      	nop

0800b164 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800b164:	4800      	ldr	r0, [pc, #0]	; (800b168 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800b166:	4770      	bx	lr
 800b168:	20000234 	.word	0x20000234

0800b16c <geometry_msgs__msg__Twist__init>:
 800b16c:	b570      	push	{r4, r5, r6, lr}
 800b16e:	4605      	mov	r5, r0
 800b170:	b1a8      	cbz	r0, 800b19e <geometry_msgs__msg__Twist__init+0x32>
 800b172:	f000 f82b 	bl	800b1cc <geometry_msgs__msg__Vector3__init>
 800b176:	4604      	mov	r4, r0
 800b178:	b140      	cbz	r0, 800b18c <geometry_msgs__msg__Twist__init+0x20>
 800b17a:	f105 0618 	add.w	r6, r5, #24
 800b17e:	4630      	mov	r0, r6
 800b180:	f000 f824 	bl	800b1cc <geometry_msgs__msg__Vector3__init>
 800b184:	4604      	mov	r4, r0
 800b186:	b168      	cbz	r0, 800b1a4 <geometry_msgs__msg__Twist__init+0x38>
 800b188:	4620      	mov	r0, r4
 800b18a:	bd70      	pop	{r4, r5, r6, pc}
 800b18c:	4628      	mov	r0, r5
 800b18e:	f000 f821 	bl	800b1d4 <geometry_msgs__msg__Vector3__fini>
 800b192:	f105 0018 	add.w	r0, r5, #24
 800b196:	f000 f81d 	bl	800b1d4 <geometry_msgs__msg__Vector3__fini>
 800b19a:	4620      	mov	r0, r4
 800b19c:	bd70      	pop	{r4, r5, r6, pc}
 800b19e:	4604      	mov	r4, r0
 800b1a0:	4620      	mov	r0, r4
 800b1a2:	bd70      	pop	{r4, r5, r6, pc}
 800b1a4:	4628      	mov	r0, r5
 800b1a6:	f000 f815 	bl	800b1d4 <geometry_msgs__msg__Vector3__fini>
 800b1aa:	4630      	mov	r0, r6
 800b1ac:	f000 f812 	bl	800b1d4 <geometry_msgs__msg__Vector3__fini>
 800b1b0:	e7ea      	b.n	800b188 <geometry_msgs__msg__Twist__init+0x1c>
 800b1b2:	bf00      	nop

0800b1b4 <geometry_msgs__msg__Twist__fini>:
 800b1b4:	b148      	cbz	r0, 800b1ca <geometry_msgs__msg__Twist__fini+0x16>
 800b1b6:	b510      	push	{r4, lr}
 800b1b8:	4604      	mov	r4, r0
 800b1ba:	f000 f80b 	bl	800b1d4 <geometry_msgs__msg__Vector3__fini>
 800b1be:	f104 0018 	add.w	r0, r4, #24
 800b1c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1c6:	f000 b805 	b.w	800b1d4 <geometry_msgs__msg__Vector3__fini>
 800b1ca:	4770      	bx	lr

0800b1cc <geometry_msgs__msg__Vector3__init>:
 800b1cc:	3800      	subs	r0, #0
 800b1ce:	bf18      	it	ne
 800b1d0:	2001      	movne	r0, #1
 800b1d2:	4770      	bx	lr

0800b1d4 <geometry_msgs__msg__Vector3__fini>:
 800b1d4:	4770      	bx	lr
 800b1d6:	bf00      	nop

0800b1d8 <uxr_buffer_delete_entity>:
 800b1d8:	b510      	push	{r4, lr}
 800b1da:	2300      	movs	r3, #0
 800b1dc:	b08e      	sub	sp, #56	; 0x38
 800b1de:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b1e2:	2303      	movs	r3, #3
 800b1e4:	9300      	str	r3, [sp, #0]
 800b1e6:	2204      	movs	r2, #4
 800b1e8:	ab06      	add	r3, sp, #24
 800b1ea:	4604      	mov	r4, r0
 800b1ec:	9103      	str	r1, [sp, #12]
 800b1ee:	f001 f951 	bl	800c494 <uxr_prepare_stream_to_write_submessage>
 800b1f2:	b918      	cbnz	r0, 800b1fc <uxr_buffer_delete_entity+0x24>
 800b1f4:	4604      	mov	r4, r0
 800b1f6:	4620      	mov	r0, r4
 800b1f8:	b00e      	add	sp, #56	; 0x38
 800b1fa:	bd10      	pop	{r4, pc}
 800b1fc:	9902      	ldr	r1, [sp, #8]
 800b1fe:	aa05      	add	r2, sp, #20
 800b200:	4620      	mov	r0, r4
 800b202:	f001 fa7d 	bl	800c700 <uxr_init_base_object_request>
 800b206:	a905      	add	r1, sp, #20
 800b208:	4604      	mov	r4, r0
 800b20a:	a806      	add	r0, sp, #24
 800b20c:	f002 fcce 	bl	800dbac <uxr_serialize_DELETE_Payload>
 800b210:	4620      	mov	r0, r4
 800b212:	b00e      	add	sp, #56	; 0x38
 800b214:	bd10      	pop	{r4, pc}
 800b216:	bf00      	nop

0800b218 <uxr_common_create_entity>:
 800b218:	b510      	push	{r4, lr}
 800b21a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800b21e:	b08c      	sub	sp, #48	; 0x30
 800b220:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800b224:	f1bc 0f01 	cmp.w	ip, #1
 800b228:	bf0c      	ite	eq
 800b22a:	f003 0201 	andeq.w	r2, r3, #1
 800b22e:	2200      	movne	r2, #0
 800b230:	330e      	adds	r3, #14
 800b232:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800b236:	9101      	str	r1, [sp, #4]
 800b238:	441a      	add	r2, r3
 800b23a:	2301      	movs	r3, #1
 800b23c:	9300      	str	r3, [sp, #0]
 800b23e:	9903      	ldr	r1, [sp, #12]
 800b240:	ab04      	add	r3, sp, #16
 800b242:	b292      	uxth	r2, r2
 800b244:	4604      	mov	r4, r0
 800b246:	f001 f925 	bl	800c494 <uxr_prepare_stream_to_write_submessage>
 800b24a:	b918      	cbnz	r0, 800b254 <uxr_common_create_entity+0x3c>
 800b24c:	4604      	mov	r4, r0
 800b24e:	4620      	mov	r0, r4
 800b250:	b00c      	add	sp, #48	; 0x30
 800b252:	bd10      	pop	{r4, pc}
 800b254:	9902      	ldr	r1, [sp, #8]
 800b256:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b258:	4620      	mov	r0, r4
 800b25a:	f001 fa51 	bl	800c700 <uxr_init_base_object_request>
 800b25e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b260:	4604      	mov	r4, r0
 800b262:	a804      	add	r0, sp, #16
 800b264:	f002 fbfe 	bl	800da64 <uxr_serialize_CREATE_Payload>
 800b268:	4620      	mov	r0, r4
 800b26a:	b00c      	add	sp, #48	; 0x30
 800b26c:	bd10      	pop	{r4, pc}
 800b26e:	bf00      	nop

0800b270 <uxr_buffer_create_participant_bin>:
 800b270:	b570      	push	{r4, r5, r6, lr}
 800b272:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 800b276:	ac11      	add	r4, sp, #68	; 0x44
 800b278:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 800b27c:	2303      	movs	r3, #3
 800b27e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800b282:	7223      	strb	r3, [r4, #8]
 800b284:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 800b286:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 800b28a:	2201      	movs	r2, #1
 800b28c:	2100      	movs	r1, #0
 800b28e:	4605      	mov	r5, r0
 800b290:	7122      	strb	r2, [r4, #4]
 800b292:	f88d 1014 	strb.w	r1, [sp, #20]
 800b296:	b1cb      	cbz	r3, 800b2cc <uxr_buffer_create_participant_bin+0x5c>
 800b298:	f88d 201c 	strb.w	r2, [sp, #28]
 800b29c:	9308      	str	r3, [sp, #32]
 800b29e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b2a2:	a915      	add	r1, sp, #84	; 0x54
 800b2a4:	a809      	add	r0, sp, #36	; 0x24
 800b2a6:	f7fd fced 	bl	8008c84 <ucdr_init_buffer>
 800b2aa:	a905      	add	r1, sp, #20
 800b2ac:	a809      	add	r0, sp, #36	; 0x24
 800b2ae:	f001 ffbb 	bl	800d228 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800b2b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2b4:	9600      	str	r6, [sp, #0]
 800b2b6:	9401      	str	r4, [sp, #4]
 800b2b8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b2bc:	60e3      	str	r3, [r4, #12]
 800b2be:	4628      	mov	r0, r5
 800b2c0:	b29b      	uxth	r3, r3
 800b2c2:	f7ff ffa9 	bl	800b218 <uxr_common_create_entity>
 800b2c6:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 800b2ca:	bd70      	pop	{r4, r5, r6, pc}
 800b2cc:	f88d 301c 	strb.w	r3, [sp, #28]
 800b2d0:	e7e5      	b.n	800b29e <uxr_buffer_create_participant_bin+0x2e>
 800b2d2:	bf00      	nop

0800b2d4 <uxr_buffer_create_topic_bin>:
 800b2d4:	b570      	push	{r4, r5, r6, lr}
 800b2d6:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 800b2da:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800b2de:	9105      	str	r1, [sp, #20]
 800b2e0:	4605      	mov	r5, r0
 800b2e2:	a997      	add	r1, sp, #604	; 0x25c
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	2302      	movs	r3, #2
 800b2e8:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 800b2ec:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 800b2f0:	f000 f996 	bl	800b620 <uxr_object_id_to_raw>
 800b2f4:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 800b2f6:	9306      	str	r3, [sp, #24]
 800b2f8:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 800b2fa:	930a      	str	r3, [sp, #40]	; 0x28
 800b2fc:	2303      	movs	r3, #3
 800b2fe:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800b302:	2301      	movs	r3, #1
 800b304:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b308:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800b30c:	a917      	add	r1, sp, #92	; 0x5c
 800b30e:	2300      	movs	r3, #0
 800b310:	a80b      	add	r0, sp, #44	; 0x2c
 800b312:	f88d 301c 	strb.w	r3, [sp, #28]
 800b316:	f7fd fcb5 	bl	8008c84 <ucdr_init_buffer>
 800b31a:	a906      	add	r1, sp, #24
 800b31c:	a80b      	add	r0, sp, #44	; 0x2c
 800b31e:	f001 ffa5 	bl	800d26c <uxr_serialize_OBJK_Topic_Binary>
 800b322:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b324:	9316      	str	r3, [sp, #88]	; 0x58
 800b326:	ac13      	add	r4, sp, #76	; 0x4c
 800b328:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800b32c:	9600      	str	r6, [sp, #0]
 800b32e:	9401      	str	r4, [sp, #4]
 800b330:	b29b      	uxth	r3, r3
 800b332:	4628      	mov	r0, r5
 800b334:	f7ff ff70 	bl	800b218 <uxr_common_create_entity>
 800b338:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 800b33c:	bd70      	pop	{r4, r5, r6, pc}
 800b33e:	bf00      	nop

0800b340 <uxr_buffer_create_publisher_bin>:
 800b340:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b342:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800b346:	4605      	mov	r5, r0
 800b348:	9105      	str	r1, [sp, #20]
 800b34a:	4618      	mov	r0, r3
 800b34c:	2603      	movs	r6, #3
 800b34e:	a992      	add	r1, sp, #584	; 0x248
 800b350:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800b354:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800b358:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800b35c:	f000 f960 	bl	800b620 <uxr_object_id_to_raw>
 800b360:	2300      	movs	r3, #0
 800b362:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b366:	a912      	add	r1, sp, #72	; 0x48
 800b368:	a806      	add	r0, sp, #24
 800b36a:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800b36e:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800b372:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 800b376:	f7fd fc85 	bl	8008c84 <ucdr_init_buffer>
 800b37a:	a993      	add	r1, sp, #588	; 0x24c
 800b37c:	a806      	add	r0, sp, #24
 800b37e:	f002 f829 	bl	800d3d4 <uxr_serialize_OBJK_Publisher_Binary>
 800b382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b384:	9311      	str	r3, [sp, #68]	; 0x44
 800b386:	ac0e      	add	r4, sp, #56	; 0x38
 800b388:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800b38c:	9700      	str	r7, [sp, #0]
 800b38e:	9401      	str	r4, [sp, #4]
 800b390:	b29b      	uxth	r3, r3
 800b392:	4628      	mov	r0, r5
 800b394:	f7ff ff40 	bl	800b218 <uxr_common_create_entity>
 800b398:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800b39c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b39e:	bf00      	nop

0800b3a0 <uxr_buffer_create_subscriber_bin>:
 800b3a0:	b570      	push	{r4, r5, r6, lr}
 800b3a2:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 800b3a6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800b3aa:	9105      	str	r1, [sp, #20]
 800b3ac:	4605      	mov	r5, r0
 800b3ae:	a992      	add	r1, sp, #584	; 0x248
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	2304      	movs	r3, #4
 800b3b4:	f89d 6498 	ldrb.w	r6, [sp, #1176]	; 0x498
 800b3b8:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 800b3bc:	f000 f930 	bl	800b620 <uxr_object_id_to_raw>
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b3c6:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800b3ca:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800b3ce:	a912      	add	r1, sp, #72	; 0x48
 800b3d0:	2303      	movs	r3, #3
 800b3d2:	a806      	add	r0, sp, #24
 800b3d4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 800b3d8:	f7fd fc54 	bl	8008c84 <ucdr_init_buffer>
 800b3dc:	a993      	add	r1, sp, #588	; 0x24c
 800b3de:	a806      	add	r0, sp, #24
 800b3e0:	f002 f8a8 	bl	800d534 <uxr_serialize_OBJK_Subscriber_Binary>
 800b3e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3e6:	9311      	str	r3, [sp, #68]	; 0x44
 800b3e8:	ac0e      	add	r4, sp, #56	; 0x38
 800b3ea:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800b3ee:	9600      	str	r6, [sp, #0]
 800b3f0:	9401      	str	r4, [sp, #4]
 800b3f2:	b29b      	uxth	r3, r3
 800b3f4:	4628      	mov	r0, r5
 800b3f6:	f7ff ff0f 	bl	800b218 <uxr_common_create_entity>
 800b3fa:	f50d 6d91 	add.w	sp, sp, #1160	; 0x488
 800b3fe:	bd70      	pop	{r4, r5, r6, pc}

0800b400 <uxr_buffer_create_datawriter_bin>:
 800b400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b404:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800b408:	ac1d      	add	r4, sp, #116	; 0x74
 800b40a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800b40e:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 800b412:	9105      	str	r1, [sp, #20]
 800b414:	4606      	mov	r6, r0
 800b416:	a9a1      	add	r1, sp, #644	; 0x284
 800b418:	4618      	mov	r0, r3
 800b41a:	2305      	movs	r3, #5
 800b41c:	7123      	strb	r3, [r4, #4]
 800b41e:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 800b422:	2703      	movs	r7, #3
 800b424:	f000 f8fc 	bl	800b620 <uxr_object_id_to_raw>
 800b428:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 800b42a:	7227      	strb	r7, [r4, #8]
 800b42c:	a90e      	add	r1, sp, #56	; 0x38
 800b42e:	f000 f8f7 	bl	800b620 <uxr_object_id_to_raw>
 800b432:	2300      	movs	r3, #0
 800b434:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800b438:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 800b43c:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800b440:	3d00      	subs	r5, #0
 800b442:	bf18      	it	ne
 800b444:	2501      	movne	r5, #1
 800b446:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800b44a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800b44e:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800b452:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800b456:	2301      	movs	r3, #1
 800b458:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800b45c:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 800b460:	bb8a      	cbnz	r2, 800b4c6 <uxr_buffer_create_datawriter_bin+0xc6>
 800b462:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800b466:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800b46a:	f04f 0c13 	mov.w	ip, #19
 800b46e:	250b      	movs	r5, #11
 800b470:	2221      	movs	r2, #33	; 0x21
 800b472:	2111      	movs	r1, #17
 800b474:	2009      	movs	r0, #9
 800b476:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 800b47a:	b923      	cbnz	r3, 800b486 <uxr_buffer_create_datawriter_bin+0x86>
 800b47c:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800b480:	4672      	mov	r2, lr
 800b482:	4661      	mov	r1, ip
 800b484:	4628      	mov	r0, r5
 800b486:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 800b48a:	2b01      	cmp	r3, #1
 800b48c:	d025      	beq.n	800b4da <uxr_buffer_create_datawriter_bin+0xda>
 800b48e:	2b03      	cmp	r3, #3
 800b490:	d029      	beq.n	800b4e6 <uxr_buffer_create_datawriter_bin+0xe6>
 800b492:	b32b      	cbz	r3, 800b4e0 <uxr_buffer_create_datawriter_bin+0xe0>
 800b494:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b498:	a921      	add	r1, sp, #132	; 0x84
 800b49a:	a806      	add	r0, sp, #24
 800b49c:	f7fd fbf2 	bl	8008c84 <ucdr_init_buffer>
 800b4a0:	a90e      	add	r1, sp, #56	; 0x38
 800b4a2:	a806      	add	r0, sp, #24
 800b4a4:	f002 f8f8 	bl	800d698 <uxr_serialize_OBJK_DataWriter_Binary>
 800b4a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4aa:	f8cd 8000 	str.w	r8, [sp]
 800b4ae:	9401      	str	r4, [sp, #4]
 800b4b0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800b4b4:	60e3      	str	r3, [r4, #12]
 800b4b6:	4630      	mov	r0, r6
 800b4b8:	b29b      	uxth	r3, r3
 800b4ba:	f7ff fead 	bl	800b218 <uxr_common_create_entity>
 800b4be:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b4c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4c6:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800b4ca:	f04f 0c12 	mov.w	ip, #18
 800b4ce:	250a      	movs	r5, #10
 800b4d0:	2220      	movs	r2, #32
 800b4d2:	2110      	movs	r1, #16
 800b4d4:	2008      	movs	r0, #8
 800b4d6:	2702      	movs	r7, #2
 800b4d8:	e7cd      	b.n	800b476 <uxr_buffer_create_datawriter_bin+0x76>
 800b4da:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800b4de:	e7d9      	b.n	800b494 <uxr_buffer_create_datawriter_bin+0x94>
 800b4e0:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800b4e4:	e7d6      	b.n	800b494 <uxr_buffer_create_datawriter_bin+0x94>
 800b4e6:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800b4ea:	e7d3      	b.n	800b494 <uxr_buffer_create_datawriter_bin+0x94>

0800b4ec <uxr_buffer_create_datareader_bin>:
 800b4ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4f0:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800b4f4:	ac1f      	add	r4, sp, #124	; 0x7c
 800b4f6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800b4fa:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 800b4fe:	9105      	str	r1, [sp, #20]
 800b500:	4606      	mov	r6, r0
 800b502:	a9a3      	add	r1, sp, #652	; 0x28c
 800b504:	4618      	mov	r0, r3
 800b506:	2306      	movs	r3, #6
 800b508:	7123      	strb	r3, [r4, #4]
 800b50a:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 800b50e:	2703      	movs	r7, #3
 800b510:	f000 f886 	bl	800b620 <uxr_object_id_to_raw>
 800b514:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 800b516:	7227      	strb	r7, [r4, #8]
 800b518:	a90e      	add	r1, sp, #56	; 0x38
 800b51a:	f000 f881 	bl	800b620 <uxr_object_id_to_raw>
 800b51e:	2300      	movs	r3, #0
 800b520:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800b524:	f89d 22ad 	ldrb.w	r2, [sp, #685]	; 0x2ad
 800b528:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 800b52c:	3d00      	subs	r5, #0
 800b52e:	bf18      	it	ne
 800b530:	2501      	movne	r5, #1
 800b532:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800b536:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800b53a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800b53e:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800b542:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800b546:	2301      	movs	r3, #1
 800b548:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800b54c:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 800b550:	bb8a      	cbnz	r2, 800b5b6 <uxr_buffer_create_datareader_bin+0xca>
 800b552:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800b556:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800b55a:	f04f 0c13 	mov.w	ip, #19
 800b55e:	250b      	movs	r5, #11
 800b560:	2221      	movs	r2, #33	; 0x21
 800b562:	2111      	movs	r1, #17
 800b564:	2009      	movs	r0, #9
 800b566:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 800b56a:	b923      	cbnz	r3, 800b576 <uxr_buffer_create_datareader_bin+0x8a>
 800b56c:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800b570:	4672      	mov	r2, lr
 800b572:	4661      	mov	r1, ip
 800b574:	4628      	mov	r0, r5
 800b576:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 800b57a:	2b01      	cmp	r3, #1
 800b57c:	d025      	beq.n	800b5ca <uxr_buffer_create_datareader_bin+0xde>
 800b57e:	2b03      	cmp	r3, #3
 800b580:	d029      	beq.n	800b5d6 <uxr_buffer_create_datareader_bin+0xea>
 800b582:	b32b      	cbz	r3, 800b5d0 <uxr_buffer_create_datareader_bin+0xe4>
 800b584:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b588:	a923      	add	r1, sp, #140	; 0x8c
 800b58a:	a806      	add	r0, sp, #24
 800b58c:	f7fd fb7a 	bl	8008c84 <ucdr_init_buffer>
 800b590:	a90e      	add	r1, sp, #56	; 0x38
 800b592:	a806      	add	r0, sp, #24
 800b594:	f002 f844 	bl	800d620 <uxr_serialize_OBJK_DataReader_Binary>
 800b598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b59a:	f8cd 8000 	str.w	r8, [sp]
 800b59e:	9401      	str	r4, [sp, #4]
 800b5a0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800b5a4:	60e3      	str	r3, [r4, #12]
 800b5a6:	4630      	mov	r0, r6
 800b5a8:	b29b      	uxth	r3, r3
 800b5aa:	f7ff fe35 	bl	800b218 <uxr_common_create_entity>
 800b5ae:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800b5b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5b6:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800b5ba:	f04f 0c12 	mov.w	ip, #18
 800b5be:	250a      	movs	r5, #10
 800b5c0:	2220      	movs	r2, #32
 800b5c2:	2110      	movs	r1, #16
 800b5c4:	2008      	movs	r0, #8
 800b5c6:	2702      	movs	r7, #2
 800b5c8:	e7cd      	b.n	800b566 <uxr_buffer_create_datareader_bin+0x7a>
 800b5ca:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800b5ce:	e7d9      	b.n	800b584 <uxr_buffer_create_datareader_bin+0x98>
 800b5d0:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800b5d4:	e7d6      	b.n	800b584 <uxr_buffer_create_datareader_bin+0x98>
 800b5d6:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800b5da:	e7d3      	b.n	800b584 <uxr_buffer_create_datareader_bin+0x98>

0800b5dc <uxr_object_id>:
 800b5dc:	b082      	sub	sp, #8
 800b5de:	2300      	movs	r3, #0
 800b5e0:	f88d 1006 	strb.w	r1, [sp, #6]
 800b5e4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b5e8:	f360 030f 	bfi	r3, r0, #0, #16
 800b5ec:	f362 431f 	bfi	r3, r2, #16, #16
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	b002      	add	sp, #8
 800b5f4:	4770      	bx	lr
 800b5f6:	bf00      	nop

0800b5f8 <uxr_object_id_from_raw>:
 800b5f8:	7843      	ldrb	r3, [r0, #1]
 800b5fa:	7801      	ldrb	r1, [r0, #0]
 800b5fc:	b082      	sub	sp, #8
 800b5fe:	f003 020f 	and.w	r2, r3, #15
 800b602:	f88d 2006 	strb.w	r2, [sp, #6]
 800b606:	091b      	lsrs	r3, r3, #4
 800b608:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b60c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800b610:	2000      	movs	r0, #0
 800b612:	f363 000f 	bfi	r0, r3, #0, #16
 800b616:	f362 401f 	bfi	r0, r2, #16, #16
 800b61a:	b002      	add	sp, #8
 800b61c:	4770      	bx	lr
 800b61e:	bf00      	nop

0800b620 <uxr_object_id_to_raw>:
 800b620:	4602      	mov	r2, r0
 800b622:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800b626:	b082      	sub	sp, #8
 800b628:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800b62c:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800b630:	f881 c000 	strb.w	ip, [r1]
 800b634:	7048      	strb	r0, [r1, #1]
 800b636:	b002      	add	sp, #8
 800b638:	4770      	bx	lr
 800b63a:	bf00      	nop

0800b63c <on_get_fragmentation_info>:
 800b63c:	b500      	push	{lr}
 800b63e:	b08b      	sub	sp, #44	; 0x2c
 800b640:	4601      	mov	r1, r0
 800b642:	2204      	movs	r2, #4
 800b644:	a802      	add	r0, sp, #8
 800b646:	f7fd fb1d 	bl	8008c84 <ucdr_init_buffer>
 800b64a:	f10d 0305 	add.w	r3, sp, #5
 800b64e:	f10d 0206 	add.w	r2, sp, #6
 800b652:	a901      	add	r1, sp, #4
 800b654:	a802      	add	r0, sp, #8
 800b656:	f001 f9d5 	bl	800ca04 <uxr_read_submessage_header>
 800b65a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b65e:	2b0d      	cmp	r3, #13
 800b660:	d003      	beq.n	800b66a <on_get_fragmentation_info+0x2e>
 800b662:	2000      	movs	r0, #0
 800b664:	b00b      	add	sp, #44	; 0x2c
 800b666:	f85d fb04 	ldr.w	pc, [sp], #4
 800b66a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b66e:	f013 0f02 	tst.w	r3, #2
 800b672:	bf14      	ite	ne
 800b674:	2002      	movne	r0, #2
 800b676:	2001      	moveq	r0, #1
 800b678:	b00b      	add	sp, #44	; 0x2c
 800b67a:	f85d fb04 	ldr.w	pc, [sp], #4
 800b67e:	bf00      	nop

0800b680 <read_submessage_get_info>:
 800b680:	b570      	push	{r4, r5, r6, lr}
 800b682:	2500      	movs	r5, #0
 800b684:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 800b688:	4604      	mov	r4, r0
 800b68a:	f44f 7224 	mov.w	r2, #656	; 0x290
 800b68e:	460e      	mov	r6, r1
 800b690:	a810      	add	r0, sp, #64	; 0x40
 800b692:	4629      	mov	r1, r5
 800b694:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800b698:	f009 fda6 	bl	80151e8 <memset>
 800b69c:	a903      	add	r1, sp, #12
 800b69e:	4630      	mov	r0, r6
 800b6a0:	f002 fa70 	bl	800db84 <uxr_deserialize_GET_INFO_Payload>
 800b6a4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800b6a8:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800b6ac:	4620      	mov	r0, r4
 800b6ae:	f001 f81f 	bl	800c6f0 <uxr_session_header_offset>
 800b6b2:	462b      	mov	r3, r5
 800b6b4:	9000      	str	r0, [sp, #0]
 800b6b6:	220c      	movs	r2, #12
 800b6b8:	a905      	add	r1, sp, #20
 800b6ba:	a808      	add	r0, sp, #32
 800b6bc:	f7fd fad0 	bl	8008c60 <ucdr_init_buffer_origin_offset>
 800b6c0:	a910      	add	r1, sp, #64	; 0x40
 800b6c2:	a808      	add	r0, sp, #32
 800b6c4:	f002 fad0 	bl	800dc68 <uxr_serialize_INFO_Payload>
 800b6c8:	9b08      	ldr	r3, [sp, #32]
 800b6ca:	462a      	mov	r2, r5
 800b6cc:	4629      	mov	r1, r5
 800b6ce:	4620      	mov	r0, r4
 800b6d0:	f000 ffb8 	bl	800c644 <uxr_stamp_session_header>
 800b6d4:	a808      	add	r0, sp, #32
 800b6d6:	f7fd fb01 	bl	8008cdc <ucdr_buffer_length>
 800b6da:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b6dc:	4602      	mov	r2, r0
 800b6de:	a905      	add	r1, sp, #20
 800b6e0:	e9d3 0400 	ldrd	r0, r4, [r3]
 800b6e4:	47a0      	blx	r4
 800b6e6:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 800b6ea:	bd70      	pop	{r4, r5, r6, pc}

0800b6ec <write_submessage_acknack.isra.0>:
 800b6ec:	b570      	push	{r4, r5, r6, lr}
 800b6ee:	b092      	sub	sp, #72	; 0x48
 800b6f0:	4605      	mov	r5, r0
 800b6f2:	460e      	mov	r6, r1
 800b6f4:	4614      	mov	r4, r2
 800b6f6:	f000 fffb 	bl	800c6f0 <uxr_session_header_offset>
 800b6fa:	a905      	add	r1, sp, #20
 800b6fc:	9000      	str	r0, [sp, #0]
 800b6fe:	2300      	movs	r3, #0
 800b700:	a80a      	add	r0, sp, #40	; 0x28
 800b702:	2211      	movs	r2, #17
 800b704:	f7fd faac 	bl	8008c60 <ucdr_init_buffer_origin_offset>
 800b708:	2218      	movs	r2, #24
 800b70a:	fb02 5404 	mla	r4, r2, r4, r5
 800b70e:	2300      	movs	r3, #0
 800b710:	2205      	movs	r2, #5
 800b712:	3450      	adds	r4, #80	; 0x50
 800b714:	210a      	movs	r1, #10
 800b716:	a80a      	add	r0, sp, #40	; 0x28
 800b718:	f001 f95a 	bl	800c9d0 <uxr_buffer_submessage_header>
 800b71c:	a903      	add	r1, sp, #12
 800b71e:	4620      	mov	r0, r4
 800b720:	f007 fc70 	bl	8013004 <uxr_compute_acknack>
 800b724:	ba40      	rev16	r0, r0
 800b726:	f8ad 000e 	strh.w	r0, [sp, #14]
 800b72a:	a903      	add	r1, sp, #12
 800b72c:	a80a      	add	r0, sp, #40	; 0x28
 800b72e:	f88d 6010 	strb.w	r6, [sp, #16]
 800b732:	f002 fb09 	bl	800dd48 <uxr_serialize_ACKNACK_Payload>
 800b736:	2200      	movs	r2, #0
 800b738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b73a:	4611      	mov	r1, r2
 800b73c:	4628      	mov	r0, r5
 800b73e:	f000 ff81 	bl	800c644 <uxr_stamp_session_header>
 800b742:	a80a      	add	r0, sp, #40	; 0x28
 800b744:	f7fd faca 	bl	8008cdc <ucdr_buffer_length>
 800b748:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800b74a:	4602      	mov	r2, r0
 800b74c:	a905      	add	r1, sp, #20
 800b74e:	e9d3 0400 	ldrd	r0, r4, [r3]
 800b752:	47a0      	blx	r4
 800b754:	b012      	add	sp, #72	; 0x48
 800b756:	bd70      	pop	{r4, r5, r6, pc}

0800b758 <uxr_init_session>:
 800b758:	b510      	push	{r4, lr}
 800b75a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800b790 <uxr_init_session+0x38>
 800b75e:	2300      	movs	r3, #0
 800b760:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 800b764:	4604      	mov	r4, r0
 800b766:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 800b76a:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 800b76e:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 800b772:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 800b776:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 800b77a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 800b77e:	2181      	movs	r1, #129	; 0x81
 800b780:	f000 fecc 	bl	800c51c <uxr_init_session_info>
 800b784:	f104 0008 	add.w	r0, r4, #8
 800b788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b78c:	f001 b83c 	b.w	800c808 <uxr_init_stream_storage>
	...

0800b798 <uxr_set_status_callback>:
 800b798:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 800b79c:	4770      	bx	lr
 800b79e:	bf00      	nop

0800b7a0 <uxr_set_topic_callback>:
 800b7a0:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 800b7a4:	4770      	bx	lr
 800b7a6:	bf00      	nop

0800b7a8 <uxr_set_request_callback>:
 800b7a8:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 800b7ac:	4770      	bx	lr
 800b7ae:	bf00      	nop

0800b7b0 <uxr_set_reply_callback>:
 800b7b0:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 800b7b4:	4770      	bx	lr
 800b7b6:	bf00      	nop

0800b7b8 <uxr_create_output_best_effort_stream>:
 800b7b8:	b510      	push	{r4, lr}
 800b7ba:	b084      	sub	sp, #16
 800b7bc:	e9cd 2100 	strd	r2, r1, [sp]
 800b7c0:	4604      	mov	r4, r0
 800b7c2:	f000 ff95 	bl	800c6f0 <uxr_session_header_offset>
 800b7c6:	e9dd 2100 	ldrd	r2, r1, [sp]
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	f104 0008 	add.w	r0, r4, #8
 800b7d0:	b004      	add	sp, #16
 800b7d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7d6:	f001 b861 	b.w	800c89c <uxr_add_output_best_effort_buffer>
 800b7da:	bf00      	nop

0800b7dc <uxr_create_output_reliable_stream>:
 800b7dc:	b510      	push	{r4, lr}
 800b7de:	b088      	sub	sp, #32
 800b7e0:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800b7e4:	4604      	mov	r4, r0
 800b7e6:	9303      	str	r3, [sp, #12]
 800b7e8:	f000 ff82 	bl	800c6f0 <uxr_session_header_offset>
 800b7ec:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800b7f0:	9000      	str	r0, [sp, #0]
 800b7f2:	9905      	ldr	r1, [sp, #20]
 800b7f4:	f104 0008 	add.w	r0, r4, #8
 800b7f8:	f001 f864 	bl	800c8c4 <uxr_add_output_reliable_buffer>
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	b2c3      	uxtb	r3, r0
 800b800:	f363 0207 	bfi	r2, r3, #0, #8
 800b804:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800b808:	f363 220f 	bfi	r2, r3, #8, #8
 800b80c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800b810:	f363 4217 	bfi	r2, r3, #16, #8
 800b814:	0e03      	lsrs	r3, r0, #24
 800b816:	f363 621f 	bfi	r2, r3, #24, #8
 800b81a:	4610      	mov	r0, r2
 800b81c:	b008      	add	sp, #32
 800b81e:	bd10      	pop	{r4, pc}

0800b820 <uxr_create_input_best_effort_stream>:
 800b820:	b082      	sub	sp, #8
 800b822:	3008      	adds	r0, #8
 800b824:	b002      	add	sp, #8
 800b826:	f001 b867 	b.w	800c8f8 <uxr_add_input_best_effort_buffer>
 800b82a:	bf00      	nop

0800b82c <uxr_create_input_reliable_stream>:
 800b82c:	b510      	push	{r4, lr}
 800b82e:	b084      	sub	sp, #16
 800b830:	4c0b      	ldr	r4, [pc, #44]	; (800b860 <uxr_create_input_reliable_stream+0x34>)
 800b832:	9400      	str	r4, [sp, #0]
 800b834:	3008      	adds	r0, #8
 800b836:	f001 f875 	bl	800c924 <uxr_add_input_reliable_buffer>
 800b83a:	2200      	movs	r2, #0
 800b83c:	b2c3      	uxtb	r3, r0
 800b83e:	f363 0207 	bfi	r2, r3, #0, #8
 800b842:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800b846:	f363 220f 	bfi	r2, r3, #8, #8
 800b84a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800b84e:	f363 4217 	bfi	r2, r3, #16, #8
 800b852:	0e03      	lsrs	r3, r0, #24
 800b854:	f363 621f 	bfi	r2, r3, #24, #8
 800b858:	4610      	mov	r0, r2
 800b85a:	b004      	add	sp, #16
 800b85c:	bd10      	pop	{r4, pc}
 800b85e:	bf00      	nop
 800b860:	0800b63d 	.word	0x0800b63d

0800b864 <uxr_epoch_nanos>:
 800b864:	b510      	push	{r4, lr}
 800b866:	4604      	mov	r4, r0
 800b868:	f001 f912 	bl	800ca90 <uxr_nanos>
 800b86c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 800b870:	1ac0      	subs	r0, r0, r3
 800b872:	eb61 0102 	sbc.w	r1, r1, r2
 800b876:	bd10      	pop	{r4, pc}

0800b878 <uxr_flash_output_streams>:
 800b878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b87c:	7e03      	ldrb	r3, [r0, #24]
 800b87e:	b084      	sub	sp, #16
 800b880:	4604      	mov	r4, r0
 800b882:	2b00      	cmp	r3, #0
 800b884:	d035      	beq.n	800b8f2 <uxr_flash_output_streams+0x7a>
 800b886:	f04f 0900 	mov.w	r9, #0
 800b88a:	4648      	mov	r0, r9
 800b88c:	f10d 0802 	add.w	r8, sp, #2
 800b890:	af03      	add	r7, sp, #12
 800b892:	ae02      	add	r6, sp, #8
 800b894:	e006      	b.n	800b8a4 <uxr_flash_output_streams+0x2c>
 800b896:	7e23      	ldrb	r3, [r4, #24]
 800b898:	f109 0901 	add.w	r9, r9, #1
 800b89c:	fa5f f089 	uxtb.w	r0, r9
 800b8a0:	4283      	cmp	r3, r0
 800b8a2:	d926      	bls.n	800b8f2 <uxr_flash_output_streams+0x7a>
 800b8a4:	2201      	movs	r2, #1
 800b8a6:	4611      	mov	r1, r2
 800b8a8:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800b8ac:	f000 ff58 	bl	800c760 <uxr_stream_id>
 800b8b0:	3508      	adds	r5, #8
 800b8b2:	4684      	mov	ip, r0
 800b8b4:	4643      	mov	r3, r8
 800b8b6:	463a      	mov	r2, r7
 800b8b8:	4631      	mov	r1, r6
 800b8ba:	4628      	mov	r0, r5
 800b8bc:	f8cd c004 	str.w	ip, [sp, #4]
 800b8c0:	f007 fc26 	bl	8013110 <uxr_prepare_best_effort_buffer_to_send>
 800b8c4:	2800      	cmp	r0, #0
 800b8c6:	d0e6      	beq.n	800b896 <uxr_flash_output_streams+0x1e>
 800b8c8:	9b02      	ldr	r3, [sp, #8]
 800b8ca:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800b8ce:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	f000 feb6 	bl	800c644 <uxr_stamp_session_header>
 800b8d8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b8da:	9a03      	ldr	r2, [sp, #12]
 800b8dc:	685d      	ldr	r5, [r3, #4]
 800b8de:	6818      	ldr	r0, [r3, #0]
 800b8e0:	9902      	ldr	r1, [sp, #8]
 800b8e2:	47a8      	blx	r5
 800b8e4:	f109 0901 	add.w	r9, r9, #1
 800b8e8:	7e23      	ldrb	r3, [r4, #24]
 800b8ea:	fa5f f089 	uxtb.w	r0, r9
 800b8ee:	4283      	cmp	r3, r0
 800b8f0:	d8d8      	bhi.n	800b8a4 <uxr_flash_output_streams+0x2c>
 800b8f2:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800b8f6:	b38b      	cbz	r3, 800b95c <uxr_flash_output_streams+0xe4>
 800b8f8:	f04f 0900 	mov.w	r9, #0
 800b8fc:	f10d 0802 	add.w	r8, sp, #2
 800b900:	af03      	add	r7, sp, #12
 800b902:	ae02      	add	r6, sp, #8
 800b904:	4648      	mov	r0, r9
 800b906:	2201      	movs	r2, #1
 800b908:	2102      	movs	r1, #2
 800b90a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800b90e:	f000 ff27 	bl	800c760 <uxr_stream_id>
 800b912:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800b916:	3520      	adds	r5, #32
 800b918:	9001      	str	r0, [sp, #4]
 800b91a:	e00d      	b.n	800b938 <uxr_flash_output_streams+0xc0>
 800b91c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800b920:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800b924:	9b02      	ldr	r3, [sp, #8]
 800b926:	f000 fe8d 	bl	800c644 <uxr_stamp_session_header>
 800b92a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b92c:	9a03      	ldr	r2, [sp, #12]
 800b92e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800b932:	9902      	ldr	r1, [sp, #8]
 800b934:	6818      	ldr	r0, [r3, #0]
 800b936:	47d0      	blx	sl
 800b938:	4643      	mov	r3, r8
 800b93a:	463a      	mov	r2, r7
 800b93c:	4631      	mov	r1, r6
 800b93e:	4628      	mov	r0, r5
 800b940:	f007 fe04 	bl	801354c <uxr_prepare_next_reliable_buffer_to_send>
 800b944:	4603      	mov	r3, r0
 800b946:	4620      	mov	r0, r4
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d1e7      	bne.n	800b91c <uxr_flash_output_streams+0xa4>
 800b94c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800b950:	f109 0901 	add.w	r9, r9, #1
 800b954:	fa5f f089 	uxtb.w	r0, r9
 800b958:	4283      	cmp	r3, r0
 800b95a:	d8d4      	bhi.n	800b906 <uxr_flash_output_streams+0x8e>
 800b95c:	b004      	add	sp, #16
 800b95e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b962:	bf00      	nop

0800b964 <read_submessage_info>:
 800b964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b968:	460d      	mov	r5, r1
 800b96a:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800b96e:	4669      	mov	r1, sp
 800b970:	4607      	mov	r7, r0
 800b972:	4628      	mov	r0, r5
 800b974:	f002 f814 	bl	800d9a0 <uxr_deserialize_BaseObjectReply>
 800b978:	a902      	add	r1, sp, #8
 800b97a:	4604      	mov	r4, r0
 800b97c:	4628      	mov	r0, r5
 800b97e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800b982:	f7fc f825 	bl	80079d0 <ucdr_deserialize_bool>
 800b986:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800b98a:	4004      	ands	r4, r0
 800b98c:	b2e4      	uxtb	r4, r4
 800b98e:	b95b      	cbnz	r3, 800b9a8 <read_submessage_info+0x44>
 800b990:	a987      	add	r1, sp, #540	; 0x21c
 800b992:	4628      	mov	r0, r5
 800b994:	f7fc f81c 	bl	80079d0 <ucdr_deserialize_bool>
 800b998:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 800b99c:	4606      	mov	r6, r0
 800b99e:	b94b      	cbnz	r3, 800b9b4 <read_submessage_info+0x50>
 800b9a0:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800b9a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9a8:	a903      	add	r1, sp, #12
 800b9aa:	4628      	mov	r0, r5
 800b9ac:	f001 fea0 	bl	800d6f0 <uxr_deserialize_ObjectVariant>
 800b9b0:	4004      	ands	r4, r0
 800b9b2:	e7ed      	b.n	800b990 <read_submessage_info+0x2c>
 800b9b4:	a988      	add	r1, sp, #544	; 0x220
 800b9b6:	4628      	mov	r0, r5
 800b9b8:	f7fc f838 	bl	8007a2c <ucdr_deserialize_uint8_t>
 800b9bc:	4234      	tst	r4, r6
 800b9be:	d0ef      	beq.n	800b9a0 <read_submessage_info+0x3c>
 800b9c0:	2800      	cmp	r0, #0
 800b9c2:	d0ed      	beq.n	800b9a0 <read_submessage_info+0x3c>
 800b9c4:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 800b9c8:	2b0d      	cmp	r3, #13
 800b9ca:	d1e9      	bne.n	800b9a0 <read_submessage_info+0x3c>
 800b9cc:	a98a      	add	r1, sp, #552	; 0x228
 800b9ce:	4628      	mov	r0, r5
 800b9d0:	f7fc fdd2 	bl	8008578 <ucdr_deserialize_int16_t>
 800b9d4:	b140      	cbz	r0, 800b9e8 <read_submessage_info+0x84>
 800b9d6:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	dd07      	ble.n	800b9ee <read_submessage_info+0x8a>
 800b9de:	f1b8 0f00 	cmp.w	r8, #0
 800b9e2:	bf14      	ite	ne
 800b9e4:	2001      	movne	r0, #1
 800b9e6:	2002      	moveq	r0, #2
 800b9e8:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 800b9ec:	e7d8      	b.n	800b9a0 <read_submessage_info+0x3c>
 800b9ee:	2000      	movs	r0, #0
 800b9f0:	e7fa      	b.n	800b9e8 <read_submessage_info+0x84>
 800b9f2:	bf00      	nop

0800b9f4 <read_submessage_list>:
 800b9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9f8:	b097      	sub	sp, #92	; 0x5c
 800b9fa:	4ec1      	ldr	r6, [pc, #772]	; (800bd00 <read_submessage_list+0x30c>)
 800b9fc:	9209      	str	r2, [sp, #36]	; 0x24
 800b9fe:	4604      	mov	r4, r0
 800ba00:	460d      	mov	r5, r1
 800ba02:	f04f 0801 	mov.w	r8, #1
 800ba06:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 800ba0a:	aa0c      	add	r2, sp, #48	; 0x30
 800ba0c:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 800ba10:	4628      	mov	r0, r5
 800ba12:	f000 fff7 	bl	800ca04 <uxr_read_submessage_header>
 800ba16:	2800      	cmp	r0, #0
 800ba18:	f000 813e 	beq.w	800bc98 <read_submessage_list+0x2a4>
 800ba1c:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 800ba20:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 800ba24:	3b02      	subs	r3, #2
 800ba26:	2b0d      	cmp	r3, #13
 800ba28:	d8ed      	bhi.n	800ba06 <read_submessage_list+0x12>
 800ba2a:	a101      	add	r1, pc, #4	; (adr r1, 800ba30 <read_submessage_list+0x3c>)
 800ba2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ba30:	0800bc8f 	.word	0x0800bc8f
 800ba34:	0800ba07 	.word	0x0800ba07
 800ba38:	0800bc7f 	.word	0x0800bc7f
 800ba3c:	0800bc1d 	.word	0x0800bc1d
 800ba40:	0800bc13 	.word	0x0800bc13
 800ba44:	0800ba07 	.word	0x0800ba07
 800ba48:	0800ba07 	.word	0x0800ba07
 800ba4c:	0800bb73 	.word	0x0800bb73
 800ba50:	0800bb03 	.word	0x0800bb03
 800ba54:	0800bac3 	.word	0x0800bac3
 800ba58:	0800ba07 	.word	0x0800ba07
 800ba5c:	0800ba07 	.word	0x0800ba07
 800ba60:	0800ba07 	.word	0x0800ba07
 800ba64:	0800ba69 	.word	0x0800ba69
 800ba68:	a910      	add	r1, sp, #64	; 0x40
 800ba6a:	4628      	mov	r0, r5
 800ba6c:	f002 f9bc 	bl	800dde8 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800ba70:	f8d4 9090 	ldr.w	r9, [r4, #144]	; 0x90
 800ba74:	f1b9 0f00 	cmp.w	r9, #0
 800ba78:	f000 8116 	beq.w	800bca8 <read_submessage_list+0x2b4>
 800ba7c:	f001 f808 	bl	800ca90 <uxr_nanos>
 800ba80:	9f15      	ldr	r7, [sp, #84]	; 0x54
 800ba82:	4602      	mov	r2, r0
 800ba84:	460b      	mov	r3, r1
 800ba86:	9814      	ldr	r0, [sp, #80]	; 0x50
 800ba88:	2100      	movs	r1, #0
 800ba8a:	468c      	mov	ip, r1
 800ba8c:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800ba90:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800ba94:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ba96:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800ba98:	468c      	mov	ip, r1
 800ba9a:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800ba9e:	46e2      	mov	sl, ip
 800baa0:	46bc      	mov	ip, r7
 800baa2:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	; 0x48
 800baa6:	fbc0 7106 	smlal	r7, r1, r0, r6
 800baaa:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800baae:	e9cd 7100 	strd	r7, r1, [sp]
 800bab2:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800bab6:	9106      	str	r1, [sp, #24]
 800bab8:	4620      	mov	r0, r4
 800baba:	47c8      	blx	r9
 800babc:	f884 80a0 	strb.w	r8, [r4, #160]	; 0xa0
 800bac0:	e7a1      	b.n	800ba06 <read_submessage_list+0x12>
 800bac2:	a910      	add	r1, sp, #64	; 0x40
 800bac4:	4628      	mov	r0, r5
 800bac6:	f002 f97d 	bl	800ddc4 <uxr_deserialize_HEARTBEAT_Payload>
 800baca:	2100      	movs	r1, #0
 800bacc:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800bad0:	f000 fe70 	bl	800c7b4 <uxr_stream_id_from_raw>
 800bad4:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800bad8:	900f      	str	r0, [sp, #60]	; 0x3c
 800bada:	4639      	mov	r1, r7
 800badc:	f104 0008 	add.w	r0, r4, #8
 800bae0:	f000 ff56 	bl	800c990 <uxr_get_input_reliable_stream>
 800bae4:	2800      	cmp	r0, #0
 800bae6:	d08e      	beq.n	800ba06 <read_submessage_list+0x12>
 800bae8:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 800baec:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800baf0:	f007 fa7c 	bl	8012fec <uxr_process_heartbeat>
 800baf4:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 800baf8:	463a      	mov	r2, r7
 800bafa:	4620      	mov	r0, r4
 800bafc:	f7ff fdf6 	bl	800b6ec <write_submessage_acknack.isra.0>
 800bb00:	e781      	b.n	800ba06 <read_submessage_list+0x12>
 800bb02:	a910      	add	r1, sp, #64	; 0x40
 800bb04:	4628      	mov	r0, r5
 800bb06:	f002 f935 	bl	800dd74 <uxr_deserialize_ACKNACK_Payload>
 800bb0a:	2100      	movs	r1, #0
 800bb0c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800bb10:	f000 fe50 	bl	800c7b4 <uxr_stream_id_from_raw>
 800bb14:	900d      	str	r0, [sp, #52]	; 0x34
 800bb16:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800bb1a:	f104 0008 	add.w	r0, r4, #8
 800bb1e:	f000 ff23 	bl	800c968 <uxr_get_output_reliable_stream>
 800bb22:	4607      	mov	r7, r0
 800bb24:	2800      	cmp	r0, #0
 800bb26:	f43f af6e 	beq.w	800ba06 <read_submessage_list+0x12>
 800bb2a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800bb2e:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 800bb32:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800bb36:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800bb3a:	b289      	uxth	r1, r1
 800bb3c:	f007 fdb0 	bl	80136a0 <uxr_process_acknack>
 800bb40:	4638      	mov	r0, r7
 800bb42:	f007 fd6d 	bl	8013620 <uxr_begin_output_nack_buffer_it>
 800bb46:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800bb4a:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 800bb4e:	e006      	b.n	800bb5e <read_submessage_list+0x16a>
 800bb50:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bb52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bb54:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800bb58:	990e      	ldr	r1, [sp, #56]	; 0x38
 800bb5a:	6818      	ldr	r0, [r3, #0]
 800bb5c:	47c8      	blx	r9
 800bb5e:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 800bb62:	aa0f      	add	r2, sp, #60	; 0x3c
 800bb64:	4651      	mov	r1, sl
 800bb66:	4638      	mov	r0, r7
 800bb68:	f007 fd5c 	bl	8013624 <uxr_next_reliable_nack_buffer_to_send>
 800bb6c:	2800      	cmp	r0, #0
 800bb6e:	d1ef      	bne.n	800bb50 <read_submessage_list+0x15c>
 800bb70:	e749      	b.n	800ba06 <read_submessage_list+0x12>
 800bb72:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800bb76:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 800bb7a:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800bb7e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800bb82:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 800bb86:	4651      	mov	r1, sl
 800bb88:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800bb8c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
 800bb90:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 800bb94:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 800bb98:	4628      	mov	r0, r5
 800bb9a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 800bb9e:	f001 fe49 	bl	800d834 <uxr_deserialize_BaseObjectRequest>
 800bba2:	4650      	mov	r0, sl
 800bba4:	a90f      	add	r1, sp, #60	; 0x3c
 800bba6:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800bbaa:	f000 fdc7 	bl	800c73c <uxr_parse_base_object_request>
 800bbae:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 800bbb2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bbb4:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 800bbb8:	9110      	str	r1, [sp, #64]	; 0x40
 800bbba:	3f04      	subs	r7, #4
 800bbbc:	f009 090e 	and.w	r9, r9, #14
 800bbc0:	b2bf      	uxth	r7, r7
 800bbc2:	f1bb 0f00 	cmp.w	fp, #0
 800bbc6:	d006      	beq.n	800bbd6 <read_submessage_list+0x1e2>
 800bbc8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800bbcc:	9300      	str	r3, [sp, #0]
 800bbce:	4652      	mov	r2, sl
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	4620      	mov	r0, r4
 800bbd4:	47d8      	blx	fp
 800bbd6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800bbd8:	b16a      	cbz	r2, 800bbf6 <read_submessage_list+0x202>
 800bbda:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800bbdc:	2100      	movs	r1, #0
 800bbde:	3802      	subs	r0, #2
 800bbe0:	e002      	b.n	800bbe8 <read_submessage_list+0x1f4>
 800bbe2:	3101      	adds	r1, #1
 800bbe4:	4291      	cmp	r1, r2
 800bbe6:	d006      	beq.n	800bbf6 <read_submessage_list+0x202>
 800bbe8:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800bbec:	4553      	cmp	r3, sl
 800bbee:	d1f8      	bne.n	800bbe2 <read_submessage_list+0x1ee>
 800bbf0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	545a      	strb	r2, [r3, r1]
 800bbf6:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 800bbfa:	9102      	str	r1, [sp, #8]
 800bbfc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bbfe:	9101      	str	r1, [sp, #4]
 800bc00:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bc02:	9100      	str	r1, [sp, #0]
 800bc04:	464b      	mov	r3, r9
 800bc06:	463a      	mov	r2, r7
 800bc08:	4629      	mov	r1, r5
 800bc0a:	4620      	mov	r0, r4
 800bc0c:	f007 fe06 	bl	801381c <read_submessage_format>
 800bc10:	e6f9      	b.n	800ba06 <read_submessage_list+0x12>
 800bc12:	4629      	mov	r1, r5
 800bc14:	4620      	mov	r0, r4
 800bc16:	f7ff fea5 	bl	800b964 <read_submessage_info>
 800bc1a:	e6f4      	b.n	800ba06 <read_submessage_list+0x12>
 800bc1c:	2a00      	cmp	r2, #0
 800bc1e:	d03e      	beq.n	800bc9e <read_submessage_list+0x2aa>
 800bc20:	a910      	add	r1, sp, #64	; 0x40
 800bc22:	4628      	mov	r0, r5
 800bc24:	f002 f802 	bl	800dc2c <uxr_deserialize_STATUS_Payload>
 800bc28:	a90e      	add	r1, sp, #56	; 0x38
 800bc2a:	aa0d      	add	r2, sp, #52	; 0x34
 800bc2c:	a810      	add	r0, sp, #64	; 0x40
 800bc2e:	f000 fd85 	bl	800c73c <uxr_parse_base_object_request>
 800bc32:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 800bc36:	990e      	ldr	r1, [sp, #56]	; 0x38
 800bc38:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 800bc3c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
 800bc40:	910f      	str	r1, [sp, #60]	; 0x3c
 800bc42:	f1ba 0f00 	cmp.w	sl, #0
 800bc46:	d006      	beq.n	800bc56 <read_submessage_list+0x262>
 800bc48:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800bc4c:	9300      	str	r3, [sp, #0]
 800bc4e:	463a      	mov	r2, r7
 800bc50:	464b      	mov	r3, r9
 800bc52:	4620      	mov	r0, r4
 800bc54:	47d0      	blx	sl
 800bc56:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800bc58:	2a00      	cmp	r2, #0
 800bc5a:	f43f aed4 	beq.w	800ba06 <read_submessage_list+0x12>
 800bc5e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800bc60:	2100      	movs	r1, #0
 800bc62:	3802      	subs	r0, #2
 800bc64:	e003      	b.n	800bc6e <read_submessage_list+0x27a>
 800bc66:	3101      	adds	r1, #1
 800bc68:	4291      	cmp	r1, r2
 800bc6a:	f43f aecc 	beq.w	800ba06 <read_submessage_list+0x12>
 800bc6e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800bc72:	42bb      	cmp	r3, r7
 800bc74:	d1f7      	bne.n	800bc66 <read_submessage_list+0x272>
 800bc76:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800bc78:	f803 9001 	strb.w	r9, [r3, r1]
 800bc7c:	e6c3      	b.n	800ba06 <read_submessage_list+0x12>
 800bc7e:	2a00      	cmp	r2, #0
 800bc80:	f47f aec1 	bne.w	800ba06 <read_submessage_list+0x12>
 800bc84:	4629      	mov	r1, r5
 800bc86:	4620      	mov	r0, r4
 800bc88:	f000 fc9e 	bl	800c5c8 <uxr_read_create_session_status>
 800bc8c:	e6bb      	b.n	800ba06 <read_submessage_list+0x12>
 800bc8e:	4629      	mov	r1, r5
 800bc90:	4620      	mov	r0, r4
 800bc92:	f7ff fcf5 	bl	800b680 <read_submessage_get_info>
 800bc96:	e6b6      	b.n	800ba06 <read_submessage_list+0x12>
 800bc98:	b017      	add	sp, #92	; 0x5c
 800bc9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc9e:	4629      	mov	r1, r5
 800bca0:	4620      	mov	r0, r4
 800bca2:	f000 fc9d 	bl	800c5e0 <uxr_read_delete_session_status>
 800bca6:	e6ae      	b.n	800ba06 <read_submessage_list+0x12>
 800bca8:	f000 fef2 	bl	800ca90 <uxr_nanos>
 800bcac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bcae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bcb0:	464f      	mov	r7, r9
 800bcb2:	fbc3 2706 	smlal	r2, r7, r3, r6
 800bcb6:	1812      	adds	r2, r2, r0
 800bcb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bcba:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800bcbc:	eb47 0101 	adc.w	r1, r7, r1
 800bcc0:	464f      	mov	r7, r9
 800bcc2:	fbc3 0706 	smlal	r0, r7, r3, r6
 800bcc6:	463b      	mov	r3, r7
 800bcc8:	4684      	mov	ip, r0
 800bcca:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 800bcce:	fbc7 0906 	smlal	r0, r9, r7, r6
 800bcd2:	eb1c 0c00 	adds.w	ip, ip, r0
 800bcd6:	464f      	mov	r7, r9
 800bcd8:	eb43 0307 	adc.w	r3, r3, r7
 800bcdc:	ebb2 0c0c 	subs.w	ip, r2, ip
 800bce0:	eb61 0303 	sbc.w	r3, r1, r3
 800bce4:	0fda      	lsrs	r2, r3, #31
 800bce6:	eb12 020c 	adds.w	r2, r2, ip
 800bcea:	f143 0300 	adc.w	r3, r3, #0
 800bcee:	0852      	lsrs	r2, r2, #1
 800bcf0:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800bcf4:	105b      	asrs	r3, r3, #1
 800bcf6:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
 800bcfa:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 800bcfe:	e6dd      	b.n	800babc <read_submessage_list+0xc8>
 800bd00:	3b9aca00 	.word	0x3b9aca00

0800bd04 <listen_message_reliably>:
 800bd04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd08:	1e0b      	subs	r3, r1, #0
 800bd0a:	b09d      	sub	sp, #116	; 0x74
 800bd0c:	bfb8      	it	lt
 800bd0e:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800bd12:	4680      	mov	r8, r0
 800bd14:	9305      	str	r3, [sp, #20]
 800bd16:	f000 fea1 	bl	800ca5c <uxr_millis>
 800bd1a:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 800bd1e:	4681      	mov	r9, r0
 800bd20:	2a00      	cmp	r2, #0
 800bd22:	f000 80a1 	beq.w	800be68 <listen_message_reliably+0x164>
 800bd26:	2600      	movs	r6, #0
 800bd28:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800bd2c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800bd30:	9303      	str	r3, [sp, #12]
 800bd32:	4630      	mov	r0, r6
 800bd34:	460f      	mov	r7, r1
 800bd36:	e00f      	b.n	800bd58 <listen_message_reliably+0x54>
 800bd38:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800bd3c:	9903      	ldr	r1, [sp, #12]
 800bd3e:	455a      	cmp	r2, fp
 800bd40:	f106 0601 	add.w	r6, r6, #1
 800bd44:	eb73 0101 	sbcs.w	r1, r3, r1
 800bd48:	b2f0      	uxtb	r0, r6
 800bd4a:	da01      	bge.n	800bd50 <listen_message_reliably+0x4c>
 800bd4c:	4693      	mov	fp, r2
 800bd4e:	9303      	str	r3, [sp, #12]
 800bd50:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800bd54:	4283      	cmp	r3, r0
 800bd56:	d960      	bls.n	800be1a <listen_message_reliably+0x116>
 800bd58:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800bd5c:	2102      	movs	r1, #2
 800bd5e:	2201      	movs	r2, #1
 800bd60:	f000 fcfe 	bl	800c760 <uxr_stream_id>
 800bd64:	00e4      	lsls	r4, r4, #3
 800bd66:	f104 0520 	add.w	r5, r4, #32
 800bd6a:	4445      	add	r5, r8
 800bd6c:	4601      	mov	r1, r0
 800bd6e:	463b      	mov	r3, r7
 800bd70:	464a      	mov	r2, r9
 800bd72:	4628      	mov	r0, r5
 800bd74:	9109      	str	r1, [sp, #36]	; 0x24
 800bd76:	f007 fc29 	bl	80135cc <uxr_update_output_stream_heartbeat_timestamp>
 800bd7a:	eb08 0304 	add.w	r3, r8, r4
 800bd7e:	2800      	cmp	r0, #0
 800bd80:	d0da      	beq.n	800bd38 <listen_message_reliably+0x34>
 800bd82:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800bd86:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 800bd8a:	9304      	str	r3, [sp, #16]
 800bd8c:	4640      	mov	r0, r8
 800bd8e:	f000 fcaf 	bl	800c6f0 <uxr_session_header_offset>
 800bd92:	3501      	adds	r5, #1
 800bd94:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 800bd98:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800bd9c:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800bda0:	2300      	movs	r3, #0
 800bda2:	2211      	movs	r2, #17
 800bda4:	9000      	str	r0, [sp, #0]
 800bda6:	a90c      	add	r1, sp, #48	; 0x30
 800bda8:	4650      	mov	r0, sl
 800bdaa:	f7fc ff59 	bl	8008c60 <ucdr_init_buffer_origin_offset>
 800bdae:	2300      	movs	r3, #0
 800bdb0:	2205      	movs	r2, #5
 800bdb2:	210b      	movs	r1, #11
 800bdb4:	4650      	mov	r0, sl
 800bdb6:	f000 fe0b 	bl	800c9d0 <uxr_buffer_submessage_header>
 800bdba:	8968      	ldrh	r0, [r5, #10]
 800bdbc:	2101      	movs	r1, #1
 800bdbe:	f007 fdf7 	bl	80139b0 <uxr_seq_num_add>
 800bdc2:	892b      	ldrh	r3, [r5, #8]
 800bdc4:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800bdc8:	4602      	mov	r2, r0
 800bdca:	9b04      	ldr	r3, [sp, #16]
 800bdcc:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800bdd0:	a90a      	add	r1, sp, #40	; 0x28
 800bdd2:	4650      	mov	r0, sl
 800bdd4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800bdd8:	f001 ffe0 	bl	800dd9c <uxr_serialize_HEARTBEAT_Payload>
 800bddc:	2200      	movs	r2, #0
 800bdde:	4611      	mov	r1, r2
 800bde0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bde2:	4640      	mov	r0, r8
 800bde4:	f000 fc2e 	bl	800c644 <uxr_stamp_session_header>
 800bde8:	4650      	mov	r0, sl
 800bdea:	f7fc ff77 	bl	8008cdc <ucdr_buffer_length>
 800bdee:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800bdf2:	4602      	mov	r2, r0
 800bdf4:	a90c      	add	r1, sp, #48	; 0x30
 800bdf6:	e9d3 0500 	ldrd	r0, r5, [r3]
 800bdfa:	4444      	add	r4, r8
 800bdfc:	47a8      	blx	r5
 800bdfe:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800be02:	9903      	ldr	r1, [sp, #12]
 800be04:	455a      	cmp	r2, fp
 800be06:	f106 0601 	add.w	r6, r6, #1
 800be0a:	eb73 0101 	sbcs.w	r1, r3, r1
 800be0e:	b2f0      	uxtb	r0, r6
 800be10:	db9c      	blt.n	800bd4c <listen_message_reliably+0x48>
 800be12:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800be16:	4283      	cmp	r3, r0
 800be18:	d89e      	bhi.n	800bd58 <listen_message_reliably+0x54>
 800be1a:	9a03      	ldr	r2, [sp, #12]
 800be1c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800be20:	429a      	cmp	r2, r3
 800be22:	bf08      	it	eq
 800be24:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 800be28:	d01e      	beq.n	800be68 <listen_message_reliably+0x164>
 800be2a:	ebab 0309 	sub.w	r3, fp, r9
 800be2e:	9905      	ldr	r1, [sp, #20]
 800be30:	f8d8 2070 	ldr.w	r2, [r8, #112]	; 0x70
 800be34:	2b00      	cmp	r3, #0
 800be36:	bf08      	it	eq
 800be38:	2301      	moveq	r3, #1
 800be3a:	4299      	cmp	r1, r3
 800be3c:	bfa8      	it	ge
 800be3e:	4619      	movge	r1, r3
 800be40:	6894      	ldr	r4, [r2, #8]
 800be42:	6810      	ldr	r0, [r2, #0]
 800be44:	4689      	mov	r9, r1
 800be46:	460b      	mov	r3, r1
 800be48:	aa08      	add	r2, sp, #32
 800be4a:	a907      	add	r1, sp, #28
 800be4c:	47a0      	blx	r4
 800be4e:	b968      	cbnz	r0, 800be6c <listen_message_reliably+0x168>
 800be50:	9b05      	ldr	r3, [sp, #20]
 800be52:	eba3 0309 	sub.w	r3, r3, r9
 800be56:	2b00      	cmp	r3, #0
 800be58:	9305      	str	r3, [sp, #20]
 800be5a:	f73f af5c 	bgt.w	800bd16 <listen_message_reliably+0x12>
 800be5e:	4604      	mov	r4, r0
 800be60:	4620      	mov	r0, r4
 800be62:	b01d      	add	sp, #116	; 0x74
 800be64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be68:	9b05      	ldr	r3, [sp, #20]
 800be6a:	e7e0      	b.n	800be2e <listen_message_reliably+0x12a>
 800be6c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800be70:	4604      	mov	r4, r0
 800be72:	a80c      	add	r0, sp, #48	; 0x30
 800be74:	f7fc ff06 	bl	8008c84 <ucdr_init_buffer>
 800be78:	2500      	movs	r5, #0
 800be7a:	f10d 031a 	add.w	r3, sp, #26
 800be7e:	aa06      	add	r2, sp, #24
 800be80:	a90c      	add	r1, sp, #48	; 0x30
 800be82:	4640      	mov	r0, r8
 800be84:	f88d 5018 	strb.w	r5, [sp, #24]
 800be88:	f000 fbf0 	bl	800c66c <uxr_read_session_header>
 800be8c:	b918      	cbnz	r0, 800be96 <listen_message_reliably+0x192>
 800be8e:	4620      	mov	r0, r4
 800be90:	b01d      	add	sp, #116	; 0x74
 800be92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be96:	4629      	mov	r1, r5
 800be98:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800be9c:	f000 fc8a 	bl	800c7b4 <uxr_stream_id_from_raw>
 800bea0:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800bea4:	2d01      	cmp	r5, #1
 800bea6:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800beaa:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800beae:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800beb2:	d04b      	beq.n	800bf4c <listen_message_reliably+0x248>
 800beb4:	2d02      	cmp	r5, #2
 800beb6:	d00f      	beq.n	800bed8 <listen_message_reliably+0x1d4>
 800beb8:	2d00      	cmp	r5, #0
 800beba:	d1e8      	bne.n	800be8e <listen_message_reliably+0x18a>
 800bebc:	4629      	mov	r1, r5
 800bebe:	4628      	mov	r0, r5
 800bec0:	f000 fc78 	bl	800c7b4 <uxr_stream_id_from_raw>
 800bec4:	a90c      	add	r1, sp, #48	; 0x30
 800bec6:	4602      	mov	r2, r0
 800bec8:	4640      	mov	r0, r8
 800beca:	920a      	str	r2, [sp, #40]	; 0x28
 800becc:	f7ff fd92 	bl	800b9f4 <read_submessage_list>
 800bed0:	4620      	mov	r0, r4
 800bed2:	b01d      	add	sp, #116	; 0x74
 800bed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bed8:	4631      	mov	r1, r6
 800beda:	f108 0008 	add.w	r0, r8, #8
 800bede:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800bee2:	f000 fd55 	bl	800c990 <uxr_get_input_reliable_stream>
 800bee6:	4607      	mov	r7, r0
 800bee8:	b338      	cbz	r0, 800bf3a <listen_message_reliably+0x236>
 800beea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800beec:	9203      	str	r2, [sp, #12]
 800beee:	a80c      	add	r0, sp, #48	; 0x30
 800bef0:	f7fc fef8 	bl	8008ce4 <ucdr_buffer_remaining>
 800bef4:	4603      	mov	r3, r0
 800bef6:	f10d 0019 	add.w	r0, sp, #25
 800befa:	9000      	str	r0, [sp, #0]
 800befc:	9a03      	ldr	r2, [sp, #12]
 800befe:	4651      	mov	r1, sl
 800bf00:	4638      	mov	r0, r7
 800bf02:	f006 ff79 	bl	8012df8 <uxr_receive_reliable_message>
 800bf06:	b1c0      	cbz	r0, 800bf3a <listen_message_reliably+0x236>
 800bf08:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800bf0c:	b393      	cbz	r3, 800bf74 <listen_message_reliably+0x270>
 800bf0e:	ad14      	add	r5, sp, #80	; 0x50
 800bf10:	f04f 0a02 	mov.w	sl, #2
 800bf14:	e00a      	b.n	800bf2c <listen_message_reliably+0x228>
 800bf16:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 800bf1a:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
 800bf1e:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 800bf22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf24:	4629      	mov	r1, r5
 800bf26:	4640      	mov	r0, r8
 800bf28:	f7ff fd64 	bl	800b9f4 <read_submessage_list>
 800bf2c:	2204      	movs	r2, #4
 800bf2e:	4629      	mov	r1, r5
 800bf30:	4638      	mov	r0, r7
 800bf32:	f006 ffe1 	bl	8012ef8 <uxr_next_input_reliable_buffer_available>
 800bf36:	2800      	cmp	r0, #0
 800bf38:	d1ed      	bne.n	800bf16 <listen_message_reliably+0x212>
 800bf3a:	4640      	mov	r0, r8
 800bf3c:	4632      	mov	r2, r6
 800bf3e:	4649      	mov	r1, r9
 800bf40:	f7ff fbd4 	bl	800b6ec <write_submessage_acknack.isra.0>
 800bf44:	4620      	mov	r0, r4
 800bf46:	b01d      	add	sp, #116	; 0x74
 800bf48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf4c:	4631      	mov	r1, r6
 800bf4e:	f108 0008 	add.w	r0, r8, #8
 800bf52:	f000 fd13 	bl	800c97c <uxr_get_input_best_effort_stream>
 800bf56:	2800      	cmp	r0, #0
 800bf58:	d099      	beq.n	800be8e <listen_message_reliably+0x18a>
 800bf5a:	4651      	mov	r1, sl
 800bf5c:	f006 feb8 	bl	8012cd0 <uxr_receive_best_effort_message>
 800bf60:	2800      	cmp	r0, #0
 800bf62:	d094      	beq.n	800be8e <listen_message_reliably+0x18a>
 800bf64:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800bf68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf6a:	a90c      	add	r1, sp, #48	; 0x30
 800bf6c:	4640      	mov	r0, r8
 800bf6e:	f7ff fd41 	bl	800b9f4 <read_submessage_list>
 800bf72:	e78c      	b.n	800be8e <listen_message_reliably+0x18a>
 800bf74:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800bf78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf7a:	a90c      	add	r1, sp, #48	; 0x30
 800bf7c:	4640      	mov	r0, r8
 800bf7e:	f7ff fd39 	bl	800b9f4 <read_submessage_list>
 800bf82:	e7c4      	b.n	800bf0e <listen_message_reliably+0x20a>

0800bf84 <uxr_run_session_timeout>:
 800bf84:	b570      	push	{r4, r5, r6, lr}
 800bf86:	4604      	mov	r4, r0
 800bf88:	460d      	mov	r5, r1
 800bf8a:	f000 fd67 	bl	800ca5c <uxr_millis>
 800bf8e:	4606      	mov	r6, r0
 800bf90:	4620      	mov	r0, r4
 800bf92:	f7ff fc71 	bl	800b878 <uxr_flash_output_streams>
 800bf96:	4629      	mov	r1, r5
 800bf98:	4620      	mov	r0, r4
 800bf9a:	f7ff feb3 	bl	800bd04 <listen_message_reliably>
 800bf9e:	f000 fd5d 	bl	800ca5c <uxr_millis>
 800bfa2:	1b83      	subs	r3, r0, r6
 800bfa4:	1ae9      	subs	r1, r5, r3
 800bfa6:	2900      	cmp	r1, #0
 800bfa8:	dcf6      	bgt.n	800bf98 <uxr_run_session_timeout+0x14>
 800bfaa:	f104 0008 	add.w	r0, r4, #8
 800bfae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bfb2:	f000 bcf7 	b.w	800c9a4 <uxr_output_streams_confirmed>
 800bfb6:	bf00      	nop

0800bfb8 <uxr_run_session_until_data>:
 800bfb8:	b570      	push	{r4, r5, r6, lr}
 800bfba:	4604      	mov	r4, r0
 800bfbc:	460d      	mov	r5, r1
 800bfbe:	f000 fd4d 	bl	800ca5c <uxr_millis>
 800bfc2:	4606      	mov	r6, r0
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	f7ff fc57 	bl	800b878 <uxr_flash_output_streams>
 800bfca:	2300      	movs	r3, #0
 800bfcc:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 800bfd0:	4629      	mov	r1, r5
 800bfd2:	e005      	b.n	800bfe0 <uxr_run_session_until_data+0x28>
 800bfd4:	f000 fd42 	bl	800ca5c <uxr_millis>
 800bfd8:	1b83      	subs	r3, r0, r6
 800bfda:	1ae9      	subs	r1, r5, r3
 800bfdc:	2900      	cmp	r1, #0
 800bfde:	dd07      	ble.n	800bff0 <uxr_run_session_until_data+0x38>
 800bfe0:	4620      	mov	r0, r4
 800bfe2:	f7ff fe8f 	bl	800bd04 <listen_message_reliably>
 800bfe6:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 800bfea:	2800      	cmp	r0, #0
 800bfec:	d0f2      	beq.n	800bfd4 <uxr_run_session_until_data+0x1c>
 800bfee:	bd70      	pop	{r4, r5, r6, pc}
 800bff0:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 800bff4:	bd70      	pop	{r4, r5, r6, pc}
 800bff6:	bf00      	nop

0800bff8 <uxr_run_session_until_confirm_delivery>:
 800bff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bffc:	4606      	mov	r6, r0
 800bffe:	460d      	mov	r5, r1
 800c000:	f000 fd2c 	bl	800ca5c <uxr_millis>
 800c004:	4607      	mov	r7, r0
 800c006:	4630      	mov	r0, r6
 800c008:	f7ff fc36 	bl	800b878 <uxr_flash_output_streams>
 800c00c:	2d00      	cmp	r5, #0
 800c00e:	f106 0808 	add.w	r8, r6, #8
 800c012:	bfa8      	it	ge
 800c014:	462c      	movge	r4, r5
 800c016:	da07      	bge.n	800c028 <uxr_run_session_until_confirm_delivery+0x30>
 800c018:	e00e      	b.n	800c038 <uxr_run_session_until_confirm_delivery+0x40>
 800c01a:	f7ff fe73 	bl	800bd04 <listen_message_reliably>
 800c01e:	f000 fd1d 	bl	800ca5c <uxr_millis>
 800c022:	1bc3      	subs	r3, r0, r7
 800c024:	1aec      	subs	r4, r5, r3
 800c026:	d407      	bmi.n	800c038 <uxr_run_session_until_confirm_delivery+0x40>
 800c028:	4640      	mov	r0, r8
 800c02a:	f000 fcbb 	bl	800c9a4 <uxr_output_streams_confirmed>
 800c02e:	4603      	mov	r3, r0
 800c030:	4621      	mov	r1, r4
 800c032:	4630      	mov	r0, r6
 800c034:	2b00      	cmp	r3, #0
 800c036:	d0f0      	beq.n	800c01a <uxr_run_session_until_confirm_delivery+0x22>
 800c038:	4640      	mov	r0, r8
 800c03a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c03e:	f000 bcb1 	b.w	800c9a4 <uxr_output_streams_confirmed>
 800c042:	bf00      	nop

0800c044 <uxr_run_session_until_all_status>:
 800c044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c048:	9c08      	ldr	r4, [sp, #32]
 800c04a:	4606      	mov	r6, r0
 800c04c:	460f      	mov	r7, r1
 800c04e:	4691      	mov	r9, r2
 800c050:	461d      	mov	r5, r3
 800c052:	f7ff fc11 	bl	800b878 <uxr_flash_output_streams>
 800c056:	b124      	cbz	r4, 800c062 <uxr_run_session_until_all_status+0x1e>
 800c058:	4622      	mov	r2, r4
 800c05a:	21ff      	movs	r1, #255	; 0xff
 800c05c:	4628      	mov	r0, r5
 800c05e:	f009 f8c3 	bl	80151e8 <memset>
 800c062:	e9c6 951d 	strd	r9, r5, [r6, #116]	; 0x74
 800c066:	67f4      	str	r4, [r6, #124]	; 0x7c
 800c068:	f000 fcf8 	bl	800ca5c <uxr_millis>
 800c06c:	3d01      	subs	r5, #1
 800c06e:	f1a9 0902 	sub.w	r9, r9, #2
 800c072:	4680      	mov	r8, r0
 800c074:	4639      	mov	r1, r7
 800c076:	4630      	mov	r0, r6
 800c078:	f7ff fe44 	bl	800bd04 <listen_message_reliably>
 800c07c:	f000 fcee 	bl	800ca5c <uxr_millis>
 800c080:	eba0 0008 	sub.w	r0, r0, r8
 800c084:	1a39      	subs	r1, r7, r0
 800c086:	b344      	cbz	r4, 800c0da <uxr_run_session_until_all_status+0x96>
 800c088:	4628      	mov	r0, r5
 800c08a:	46ac      	mov	ip, r5
 800c08c:	2301      	movs	r3, #1
 800c08e:	e002      	b.n	800c096 <uxr_run_session_until_all_status+0x52>
 800c090:	42a3      	cmp	r3, r4
 800c092:	d20d      	bcs.n	800c0b0 <uxr_run_session_until_all_status+0x6c>
 800c094:	3301      	adds	r3, #1
 800c096:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800c09a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 800c09e:	d1f7      	bne.n	800c090 <uxr_run_session_until_all_status+0x4c>
 800c0a0:	42a3      	cmp	r3, r4
 800c0a2:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800c0a6:	d213      	bcs.n	800c0d0 <uxr_run_session_until_all_status+0x8c>
 800c0a8:	2a00      	cmp	r2, #0
 800c0aa:	d0f3      	beq.n	800c094 <uxr_run_session_until_all_status+0x50>
 800c0ac:	2900      	cmp	r1, #0
 800c0ae:	dce2      	bgt.n	800c076 <uxr_run_session_until_all_status+0x32>
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	67f3      	str	r3, [r6, #124]	; 0x7c
 800c0b4:	442c      	add	r4, r5
 800c0b6:	e001      	b.n	800c0bc <uxr_run_session_until_all_status+0x78>
 800c0b8:	2b01      	cmp	r3, #1
 800c0ba:	d812      	bhi.n	800c0e2 <uxr_run_session_until_all_status+0x9e>
 800c0bc:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800c0c0:	4284      	cmp	r4, r0
 800c0c2:	d1f9      	bne.n	800c0b8 <uxr_run_session_until_all_status+0x74>
 800c0c4:	2b01      	cmp	r3, #1
 800c0c6:	bf8c      	ite	hi
 800c0c8:	2000      	movhi	r0, #0
 800c0ca:	2001      	movls	r0, #1
 800c0cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0d0:	2900      	cmp	r1, #0
 800c0d2:	dded      	ble.n	800c0b0 <uxr_run_session_until_all_status+0x6c>
 800c0d4:	2a00      	cmp	r2, #0
 800c0d6:	d1ce      	bne.n	800c076 <uxr_run_session_until_all_status+0x32>
 800c0d8:	e7ea      	b.n	800c0b0 <uxr_run_session_until_all_status+0x6c>
 800c0da:	67f4      	str	r4, [r6, #124]	; 0x7c
 800c0dc:	2001      	movs	r0, #1
 800c0de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0e2:	2000      	movs	r0, #0
 800c0e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800c0e8 <wait_session_status>:
 800c0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0ec:	4604      	mov	r4, r0
 800c0ee:	b09d      	sub	sp, #116	; 0x74
 800c0f0:	20ff      	movs	r0, #255	; 0xff
 800c0f2:	7160      	strb	r0, [r4, #5]
 800c0f4:	9303      	str	r3, [sp, #12]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	f000 80b6 	beq.w	800c268 <wait_session_status+0x180>
 800c0fc:	468a      	mov	sl, r1
 800c0fe:	4691      	mov	r9, r2
 800c100:	f04f 0b00 	mov.w	fp, #0
 800c104:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c106:	464a      	mov	r2, r9
 800c108:	e9d3 0500 	ldrd	r0, r5, [r3]
 800c10c:	4651      	mov	r1, sl
 800c10e:	47a8      	blx	r5
 800c110:	f000 fca4 	bl	800ca5c <uxr_millis>
 800c114:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c118:	4605      	mov	r5, r0
 800c11a:	e009      	b.n	800c130 <wait_session_status+0x48>
 800c11c:	f000 fc9e 	bl	800ca5c <uxr_millis>
 800c120:	1b40      	subs	r0, r0, r5
 800c122:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800c126:	2b00      	cmp	r3, #0
 800c128:	dd40      	ble.n	800c1ac <wait_session_status+0xc4>
 800c12a:	7960      	ldrb	r0, [r4, #5]
 800c12c:	28ff      	cmp	r0, #255	; 0xff
 800c12e:	d145      	bne.n	800c1bc <wait_session_status+0xd4>
 800c130:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800c132:	a908      	add	r1, sp, #32
 800c134:	6896      	ldr	r6, [r2, #8]
 800c136:	6810      	ldr	r0, [r2, #0]
 800c138:	aa09      	add	r2, sp, #36	; 0x24
 800c13a:	47b0      	blx	r6
 800c13c:	2800      	cmp	r0, #0
 800c13e:	d0ed      	beq.n	800c11c <wait_session_status+0x34>
 800c140:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800c144:	a80c      	add	r0, sp, #48	; 0x30
 800c146:	f7fc fd9d 	bl	8008c84 <ucdr_init_buffer>
 800c14a:	2600      	movs	r6, #0
 800c14c:	f10d 031e 	add.w	r3, sp, #30
 800c150:	aa07      	add	r2, sp, #28
 800c152:	a90c      	add	r1, sp, #48	; 0x30
 800c154:	4620      	mov	r0, r4
 800c156:	f88d 601c 	strb.w	r6, [sp, #28]
 800c15a:	f000 fa87 	bl	800c66c <uxr_read_session_header>
 800c15e:	2800      	cmp	r0, #0
 800c160:	d0dc      	beq.n	800c11c <wait_session_status+0x34>
 800c162:	4631      	mov	r1, r6
 800c164:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800c168:	f000 fb24 	bl	800c7b4 <uxr_stream_id_from_raw>
 800c16c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800c170:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800c174:	9302      	str	r3, [sp, #8]
 800c176:	2f01      	cmp	r7, #1
 800c178:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 800c17c:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800c180:	d05c      	beq.n	800c23c <wait_session_status+0x154>
 800c182:	2f02      	cmp	r7, #2
 800c184:	d020      	beq.n	800c1c8 <wait_session_status+0xe0>
 800c186:	2f00      	cmp	r7, #0
 800c188:	d1c8      	bne.n	800c11c <wait_session_status+0x34>
 800c18a:	4639      	mov	r1, r7
 800c18c:	4638      	mov	r0, r7
 800c18e:	f000 fb11 	bl	800c7b4 <uxr_stream_id_from_raw>
 800c192:	a90c      	add	r1, sp, #48	; 0x30
 800c194:	4602      	mov	r2, r0
 800c196:	900b      	str	r0, [sp, #44]	; 0x2c
 800c198:	4620      	mov	r0, r4
 800c19a:	f7ff fc2b 	bl	800b9f4 <read_submessage_list>
 800c19e:	f000 fc5d 	bl	800ca5c <uxr_millis>
 800c1a2:	1b40      	subs	r0, r0, r5
 800c1a4:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	dcbe      	bgt.n	800c12a <wait_session_status+0x42>
 800c1ac:	9b03      	ldr	r3, [sp, #12]
 800c1ae:	7960      	ldrb	r0, [r4, #5]
 800c1b0:	f10b 0b01 	add.w	fp, fp, #1
 800c1b4:	455b      	cmp	r3, fp
 800c1b6:	d001      	beq.n	800c1bc <wait_session_status+0xd4>
 800c1b8:	28ff      	cmp	r0, #255	; 0xff
 800c1ba:	d0a3      	beq.n	800c104 <wait_session_status+0x1c>
 800c1bc:	38ff      	subs	r0, #255	; 0xff
 800c1be:	bf18      	it	ne
 800c1c0:	2001      	movne	r0, #1
 800c1c2:	b01d      	add	sp, #116	; 0x74
 800c1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1c8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800c1cc:	9304      	str	r3, [sp, #16]
 800c1ce:	4631      	mov	r1, r6
 800c1d0:	f104 0008 	add.w	r0, r4, #8
 800c1d4:	f000 fbdc 	bl	800c990 <uxr_get_input_reliable_stream>
 800c1d8:	4680      	mov	r8, r0
 800c1da:	b348      	cbz	r0, 800c230 <wait_session_status+0x148>
 800c1dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c1de:	9205      	str	r2, [sp, #20]
 800c1e0:	a80c      	add	r0, sp, #48	; 0x30
 800c1e2:	f7fc fd7f 	bl	8008ce4 <ucdr_buffer_remaining>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	f10d 001d 	add.w	r0, sp, #29
 800c1ec:	9000      	str	r0, [sp, #0]
 800c1ee:	9a05      	ldr	r2, [sp, #20]
 800c1f0:	9902      	ldr	r1, [sp, #8]
 800c1f2:	4640      	mov	r0, r8
 800c1f4:	f006 fe00 	bl	8012df8 <uxr_receive_reliable_message>
 800c1f8:	b1d0      	cbz	r0, 800c230 <wait_session_status+0x148>
 800c1fa:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d03a      	beq.n	800c278 <wait_session_status+0x190>
 800c202:	9f04      	ldr	r7, [sp, #16]
 800c204:	e00a      	b.n	800c21c <wait_session_status+0x134>
 800c206:	f04f 0302 	mov.w	r3, #2
 800c20a:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 800c20e:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800c212:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 800c216:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c218:	f7ff fbec 	bl	800b9f4 <read_submessage_list>
 800c21c:	a914      	add	r1, sp, #80	; 0x50
 800c21e:	2204      	movs	r2, #4
 800c220:	4640      	mov	r0, r8
 800c222:	f006 fe69 	bl	8012ef8 <uxr_next_input_reliable_buffer_available>
 800c226:	4603      	mov	r3, r0
 800c228:	a914      	add	r1, sp, #80	; 0x50
 800c22a:	4620      	mov	r0, r4
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d1ea      	bne.n	800c206 <wait_session_status+0x11e>
 800c230:	9904      	ldr	r1, [sp, #16]
 800c232:	4632      	mov	r2, r6
 800c234:	4620      	mov	r0, r4
 800c236:	f7ff fa59 	bl	800b6ec <write_submessage_acknack.isra.0>
 800c23a:	e76f      	b.n	800c11c <wait_session_status+0x34>
 800c23c:	4631      	mov	r1, r6
 800c23e:	f104 0008 	add.w	r0, r4, #8
 800c242:	f000 fb9b 	bl	800c97c <uxr_get_input_best_effort_stream>
 800c246:	2800      	cmp	r0, #0
 800c248:	f43f af68 	beq.w	800c11c <wait_session_status+0x34>
 800c24c:	9902      	ldr	r1, [sp, #8]
 800c24e:	f006 fd3f 	bl	8012cd0 <uxr_receive_best_effort_message>
 800c252:	2800      	cmp	r0, #0
 800c254:	f43f af62 	beq.w	800c11c <wait_session_status+0x34>
 800c258:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800c25c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c25e:	a90c      	add	r1, sp, #48	; 0x30
 800c260:	4620      	mov	r0, r4
 800c262:	f7ff fbc7 	bl	800b9f4 <read_submessage_list>
 800c266:	e759      	b.n	800c11c <wait_session_status+0x34>
 800c268:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c26a:	e9d3 0400 	ldrd	r0, r4, [r3]
 800c26e:	47a0      	blx	r4
 800c270:	2001      	movs	r0, #1
 800c272:	b01d      	add	sp, #116	; 0x74
 800c274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c278:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800c27c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c27e:	a90c      	add	r1, sp, #48	; 0x30
 800c280:	4620      	mov	r0, r4
 800c282:	f7ff fbb7 	bl	800b9f4 <read_submessage_list>
 800c286:	e7bc      	b.n	800c202 <wait_session_status+0x11a>

0800c288 <uxr_delete_session_retries>:
 800c288:	b530      	push	{r4, r5, lr}
 800c28a:	b08f      	sub	sp, #60	; 0x3c
 800c28c:	4604      	mov	r4, r0
 800c28e:	460d      	mov	r5, r1
 800c290:	f000 fa2e 	bl	800c6f0 <uxr_session_header_offset>
 800c294:	2300      	movs	r3, #0
 800c296:	2210      	movs	r2, #16
 800c298:	9000      	str	r0, [sp, #0]
 800c29a:	a902      	add	r1, sp, #8
 800c29c:	a806      	add	r0, sp, #24
 800c29e:	f7fc fcdf 	bl	8008c60 <ucdr_init_buffer_origin_offset>
 800c2a2:	a906      	add	r1, sp, #24
 800c2a4:	4620      	mov	r0, r4
 800c2a6:	f000 f973 	bl	800c590 <uxr_buffer_delete_session>
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	4611      	mov	r1, r2
 800c2ae:	9b06      	ldr	r3, [sp, #24]
 800c2b0:	4620      	mov	r0, r4
 800c2b2:	f000 f9c7 	bl	800c644 <uxr_stamp_session_header>
 800c2b6:	a806      	add	r0, sp, #24
 800c2b8:	f7fc fd10 	bl	8008cdc <ucdr_buffer_length>
 800c2bc:	462b      	mov	r3, r5
 800c2be:	4602      	mov	r2, r0
 800c2c0:	a902      	add	r1, sp, #8
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	f7ff ff10 	bl	800c0e8 <wait_session_status>
 800c2c8:	b118      	cbz	r0, 800c2d2 <uxr_delete_session_retries+0x4a>
 800c2ca:	7960      	ldrb	r0, [r4, #5]
 800c2cc:	fab0 f080 	clz	r0, r0
 800c2d0:	0940      	lsrs	r0, r0, #5
 800c2d2:	b00f      	add	sp, #60	; 0x3c
 800c2d4:	bd30      	pop	{r4, r5, pc}
 800c2d6:	bf00      	nop

0800c2d8 <uxr_create_session>:
 800c2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2dc:	f100 0b08 	add.w	fp, r0, #8
 800c2e0:	b0ab      	sub	sp, #172	; 0xac
 800c2e2:	4604      	mov	r4, r0
 800c2e4:	4658      	mov	r0, fp
 800c2e6:	f000 fa99 	bl	800c81c <uxr_reset_stream_storage>
 800c2ea:	4620      	mov	r0, r4
 800c2ec:	f000 fa00 	bl	800c6f0 <uxr_session_header_offset>
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	9000      	str	r0, [sp, #0]
 800c2f4:	221c      	movs	r2, #28
 800c2f6:	a90b      	add	r1, sp, #44	; 0x2c
 800c2f8:	a812      	add	r0, sp, #72	; 0x48
 800c2fa:	f7fc fcb1 	bl	8008c60 <ucdr_init_buffer_origin_offset>
 800c2fe:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c300:	8a1a      	ldrh	r2, [r3, #16]
 800c302:	3a04      	subs	r2, #4
 800c304:	b292      	uxth	r2, r2
 800c306:	a912      	add	r1, sp, #72	; 0x48
 800c308:	4620      	mov	r0, r4
 800c30a:	f000 f917 	bl	800c53c <uxr_buffer_create_session>
 800c30e:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c310:	4620      	mov	r0, r4
 800c312:	f000 f983 	bl	800c61c <uxr_stamp_create_session_header>
 800c316:	a812      	add	r0, sp, #72	; 0x48
 800c318:	f7fc fce0 	bl	8008cdc <ucdr_buffer_length>
 800c31c:	23ff      	movs	r3, #255	; 0xff
 800c31e:	7163      	strb	r3, [r4, #5]
 800c320:	230a      	movs	r3, #10
 800c322:	46da      	mov	sl, fp
 800c324:	9303      	str	r3, [sp, #12]
 800c326:	4683      	mov	fp, r0
 800c328:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c32a:	465a      	mov	r2, fp
 800c32c:	e9d3 0500 	ldrd	r0, r5, [r3]
 800c330:	a90b      	add	r1, sp, #44	; 0x2c
 800c332:	47a8      	blx	r5
 800c334:	f000 fb92 	bl	800ca5c <uxr_millis>
 800c338:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c33c:	4605      	mov	r5, r0
 800c33e:	e009      	b.n	800c354 <uxr_create_session+0x7c>
 800c340:	f000 fb8c 	bl	800ca5c <uxr_millis>
 800c344:	1b40      	subs	r0, r0, r5
 800c346:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	7962      	ldrb	r2, [r4, #5]
 800c34e:	dd38      	ble.n	800c3c2 <uxr_create_session+0xea>
 800c350:	2aff      	cmp	r2, #255	; 0xff
 800c352:	d13c      	bne.n	800c3ce <uxr_create_session+0xf6>
 800c354:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800c356:	a907      	add	r1, sp, #28
 800c358:	6896      	ldr	r6, [r2, #8]
 800c35a:	6810      	ldr	r0, [r2, #0]
 800c35c:	aa08      	add	r2, sp, #32
 800c35e:	47b0      	blx	r6
 800c360:	2800      	cmp	r0, #0
 800c362:	d0ed      	beq.n	800c340 <uxr_create_session+0x68>
 800c364:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800c368:	a81a      	add	r0, sp, #104	; 0x68
 800c36a:	f7fc fc8b 	bl	8008c84 <ucdr_init_buffer>
 800c36e:	2600      	movs	r6, #0
 800c370:	f10d 031a 	add.w	r3, sp, #26
 800c374:	aa06      	add	r2, sp, #24
 800c376:	a91a      	add	r1, sp, #104	; 0x68
 800c378:	4620      	mov	r0, r4
 800c37a:	f88d 6018 	strb.w	r6, [sp, #24]
 800c37e:	f000 f975 	bl	800c66c <uxr_read_session_header>
 800c382:	2800      	cmp	r0, #0
 800c384:	d0dc      	beq.n	800c340 <uxr_create_session+0x68>
 800c386:	4631      	mov	r1, r6
 800c388:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800c38c:	f000 fa12 	bl	800c7b4 <uxr_stream_id_from_raw>
 800c390:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800c394:	2e01      	cmp	r6, #1
 800c396:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800c39a:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800c39e:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800c3a2:	d053      	beq.n	800c44c <uxr_create_session+0x174>
 800c3a4:	2e02      	cmp	r6, #2
 800c3a6:	d018      	beq.n	800c3da <uxr_create_session+0x102>
 800c3a8:	2e00      	cmp	r6, #0
 800c3aa:	d1c9      	bne.n	800c340 <uxr_create_session+0x68>
 800c3ac:	4631      	mov	r1, r6
 800c3ae:	4630      	mov	r0, r6
 800c3b0:	f000 fa00 	bl	800c7b4 <uxr_stream_id_from_raw>
 800c3b4:	a91a      	add	r1, sp, #104	; 0x68
 800c3b6:	4602      	mov	r2, r0
 800c3b8:	900a      	str	r0, [sp, #40]	; 0x28
 800c3ba:	4620      	mov	r0, r4
 800c3bc:	f7ff fb1a 	bl	800b9f4 <read_submessage_list>
 800c3c0:	e7be      	b.n	800c340 <uxr_create_session+0x68>
 800c3c2:	9b03      	ldr	r3, [sp, #12]
 800c3c4:	3b01      	subs	r3, #1
 800c3c6:	9303      	str	r3, [sp, #12]
 800c3c8:	d001      	beq.n	800c3ce <uxr_create_session+0xf6>
 800c3ca:	2aff      	cmp	r2, #255	; 0xff
 800c3cc:	d0ac      	beq.n	800c328 <uxr_create_session+0x50>
 800c3ce:	2a00      	cmp	r2, #0
 800c3d0:	d051      	beq.n	800c476 <uxr_create_session+0x19e>
 800c3d2:	2000      	movs	r0, #0
 800c3d4:	b02b      	add	sp, #172	; 0xac
 800c3d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3da:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800c3de:	9304      	str	r3, [sp, #16]
 800c3e0:	4639      	mov	r1, r7
 800c3e2:	4650      	mov	r0, sl
 800c3e4:	f000 fad4 	bl	800c990 <uxr_get_input_reliable_stream>
 800c3e8:	4680      	mov	r8, r0
 800c3ea:	b348      	cbz	r0, 800c440 <uxr_create_session+0x168>
 800c3ec:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c3ee:	9205      	str	r2, [sp, #20]
 800c3f0:	a81a      	add	r0, sp, #104	; 0x68
 800c3f2:	f7fc fc77 	bl	8008ce4 <ucdr_buffer_remaining>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	f10d 0019 	add.w	r0, sp, #25
 800c3fc:	9000      	str	r0, [sp, #0]
 800c3fe:	9a05      	ldr	r2, [sp, #20]
 800c400:	4649      	mov	r1, r9
 800c402:	4640      	mov	r0, r8
 800c404:	f006 fcf8 	bl	8012df8 <uxr_receive_reliable_message>
 800c408:	b1d0      	cbz	r0, 800c440 <uxr_create_session+0x168>
 800c40a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d038      	beq.n	800c484 <uxr_create_session+0x1ac>
 800c412:	9e04      	ldr	r6, [sp, #16]
 800c414:	e00a      	b.n	800c42c <uxr_create_session+0x154>
 800c416:	f04f 0302 	mov.w	r3, #2
 800c41a:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
 800c41e:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
 800c422:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c426:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c428:	f7ff fae4 	bl	800b9f4 <read_submessage_list>
 800c42c:	a922      	add	r1, sp, #136	; 0x88
 800c42e:	2204      	movs	r2, #4
 800c430:	4640      	mov	r0, r8
 800c432:	f006 fd61 	bl	8012ef8 <uxr_next_input_reliable_buffer_available>
 800c436:	4603      	mov	r3, r0
 800c438:	a922      	add	r1, sp, #136	; 0x88
 800c43a:	4620      	mov	r0, r4
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d1ea      	bne.n	800c416 <uxr_create_session+0x13e>
 800c440:	9904      	ldr	r1, [sp, #16]
 800c442:	463a      	mov	r2, r7
 800c444:	4620      	mov	r0, r4
 800c446:	f7ff f951 	bl	800b6ec <write_submessage_acknack.isra.0>
 800c44a:	e779      	b.n	800c340 <uxr_create_session+0x68>
 800c44c:	4639      	mov	r1, r7
 800c44e:	4650      	mov	r0, sl
 800c450:	f000 fa94 	bl	800c97c <uxr_get_input_best_effort_stream>
 800c454:	2800      	cmp	r0, #0
 800c456:	f43f af73 	beq.w	800c340 <uxr_create_session+0x68>
 800c45a:	4649      	mov	r1, r9
 800c45c:	f006 fc38 	bl	8012cd0 <uxr_receive_best_effort_message>
 800c460:	2800      	cmp	r0, #0
 800c462:	f43f af6d 	beq.w	800c340 <uxr_create_session+0x68>
 800c466:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800c46a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c46c:	a91a      	add	r1, sp, #104	; 0x68
 800c46e:	4620      	mov	r0, r4
 800c470:	f7ff fac0 	bl	800b9f4 <read_submessage_list>
 800c474:	e764      	b.n	800c340 <uxr_create_session+0x68>
 800c476:	4650      	mov	r0, sl
 800c478:	f000 f9d0 	bl	800c81c <uxr_reset_stream_storage>
 800c47c:	2001      	movs	r0, #1
 800c47e:	b02b      	add	sp, #172	; 0xac
 800c480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c484:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800c488:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c48a:	a91a      	add	r1, sp, #104	; 0x68
 800c48c:	4620      	mov	r0, r4
 800c48e:	f7ff fab1 	bl	800b9f4 <read_submessage_list>
 800c492:	e7be      	b.n	800c412 <uxr_create_session+0x13a>

0800c494 <uxr_prepare_stream_to_write_submessage>:
 800c494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c498:	b082      	sub	sp, #8
 800c49a:	4682      	mov	sl, r0
 800c49c:	4610      	mov	r0, r2
 800c49e:	4615      	mov	r5, r2
 800c4a0:	461e      	mov	r6, r3
 800c4a2:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800c4a6:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800c4aa:	9101      	str	r1, [sp, #4]
 800c4ac:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800c4b0:	f000 face 	bl	800ca50 <uxr_submessage_padding>
 800c4b4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c4b8:	f105 0904 	add.w	r9, r5, #4
 800c4bc:	2b01      	cmp	r3, #1
 800c4be:	4481      	add	r9, r0
 800c4c0:	d01d      	beq.n	800c4fe <uxr_prepare_stream_to_write_submessage+0x6a>
 800c4c2:	2b02      	cmp	r3, #2
 800c4c4:	d116      	bne.n	800c4f4 <uxr_prepare_stream_to_write_submessage+0x60>
 800c4c6:	4621      	mov	r1, r4
 800c4c8:	f10a 0008 	add.w	r0, sl, #8
 800c4cc:	f000 fa4c 	bl	800c968 <uxr_get_output_reliable_stream>
 800c4d0:	4604      	mov	r4, r0
 800c4d2:	b158      	cbz	r0, 800c4ec <uxr_prepare_stream_to_write_submessage+0x58>
 800c4d4:	4649      	mov	r1, r9
 800c4d6:	4632      	mov	r2, r6
 800c4d8:	f006 feca 	bl	8013270 <uxr_prepare_reliable_buffer_to_write>
 800c4dc:	4604      	mov	r4, r0
 800c4de:	b12c      	cbz	r4, 800c4ec <uxr_prepare_stream_to_write_submessage+0x58>
 800c4e0:	4643      	mov	r3, r8
 800c4e2:	b2aa      	uxth	r2, r5
 800c4e4:	4639      	mov	r1, r7
 800c4e6:	4630      	mov	r0, r6
 800c4e8:	f000 fa72 	bl	800c9d0 <uxr_buffer_submessage_header>
 800c4ec:	4620      	mov	r0, r4
 800c4ee:	b002      	add	sp, #8
 800c4f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4f4:	2400      	movs	r4, #0
 800c4f6:	4620      	mov	r0, r4
 800c4f8:	b002      	add	sp, #8
 800c4fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4fe:	4621      	mov	r1, r4
 800c500:	f10a 0008 	add.w	r0, sl, #8
 800c504:	f000 fa28 	bl	800c958 <uxr_get_output_best_effort_stream>
 800c508:	4604      	mov	r4, r0
 800c50a:	2800      	cmp	r0, #0
 800c50c:	d0ee      	beq.n	800c4ec <uxr_prepare_stream_to_write_submessage+0x58>
 800c50e:	4649      	mov	r1, r9
 800c510:	4632      	mov	r2, r6
 800c512:	f006 fddd 	bl	80130d0 <uxr_prepare_best_effort_buffer_to_write>
 800c516:	4604      	mov	r4, r0
 800c518:	e7e1      	b.n	800c4de <uxr_prepare_stream_to_write_submessage+0x4a>
 800c51a:	bf00      	nop

0800c51c <uxr_init_session_info>:
 800c51c:	0e13      	lsrs	r3, r2, #24
 800c51e:	7043      	strb	r3, [r0, #1]
 800c520:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800c524:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800c528:	7001      	strb	r1, [r0, #0]
 800c52a:	70c3      	strb	r3, [r0, #3]
 800c52c:	2109      	movs	r1, #9
 800c52e:	23ff      	movs	r3, #255	; 0xff
 800c530:	f880 c002 	strb.w	ip, [r0, #2]
 800c534:	7102      	strb	r2, [r0, #4]
 800c536:	80c1      	strh	r1, [r0, #6]
 800c538:	7143      	strb	r3, [r0, #5]
 800c53a:	4770      	bx	lr

0800c53c <uxr_buffer_create_session>:
 800c53c:	b530      	push	{r4, r5, lr}
 800c53e:	b089      	sub	sp, #36	; 0x24
 800c540:	2300      	movs	r3, #0
 800c542:	4d12      	ldr	r5, [pc, #72]	; (800c58c <uxr_buffer_create_session+0x50>)
 800c544:	9307      	str	r3, [sp, #28]
 800c546:	f8ad 201c 	strh.w	r2, [sp, #28]
 800c54a:	2201      	movs	r2, #1
 800c54c:	9301      	str	r3, [sp, #4]
 800c54e:	80c2      	strh	r2, [r0, #6]
 800c550:	f88d 2004 	strb.w	r2, [sp, #4]
 800c554:	682a      	ldr	r2, [r5, #0]
 800c556:	9200      	str	r2, [sp, #0]
 800c558:	88aa      	ldrh	r2, [r5, #4]
 800c55a:	f8ad 2006 	strh.w	r2, [sp, #6]
 800c55e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800c562:	9202      	str	r2, [sp, #8]
 800c564:	460c      	mov	r4, r1
 800c566:	7802      	ldrb	r2, [r0, #0]
 800c568:	9303      	str	r3, [sp, #12]
 800c56a:	4619      	mov	r1, r3
 800c56c:	f88d 200c 	strb.w	r2, [sp, #12]
 800c570:	4620      	mov	r0, r4
 800c572:	2210      	movs	r2, #16
 800c574:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800c578:	9306      	str	r3, [sp, #24]
 800c57a:	f000 fa29 	bl	800c9d0 <uxr_buffer_submessage_header>
 800c57e:	4669      	mov	r1, sp
 800c580:	4620      	mov	r0, r4
 800c582:	f001 fa6d 	bl	800da60 <uxr_serialize_CREATE_CLIENT_Payload>
 800c586:	b009      	add	sp, #36	; 0x24
 800c588:	bd30      	pop	{r4, r5, pc}
 800c58a:	bf00      	nop
 800c58c:	080162a4 	.word	0x080162a4

0800c590 <uxr_buffer_delete_session>:
 800c590:	b510      	push	{r4, lr}
 800c592:	4b0c      	ldr	r3, [pc, #48]	; (800c5c4 <uxr_buffer_delete_session+0x34>)
 800c594:	b082      	sub	sp, #8
 800c596:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800c59a:	f8ad c006 	strh.w	ip, [sp, #6]
 800c59e:	460c      	mov	r4, r1
 800c5a0:	2202      	movs	r2, #2
 800c5a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c5a6:	80c2      	strh	r2, [r0, #6]
 800c5a8:	f8ad 3004 	strh.w	r3, [sp, #4]
 800c5ac:	2204      	movs	r2, #4
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	2103      	movs	r1, #3
 800c5b2:	4620      	mov	r0, r4
 800c5b4:	f000 fa0c 	bl	800c9d0 <uxr_buffer_submessage_header>
 800c5b8:	a901      	add	r1, sp, #4
 800c5ba:	4620      	mov	r0, r4
 800c5bc:	f001 faf6 	bl	800dbac <uxr_serialize_DELETE_Payload>
 800c5c0:	b002      	add	sp, #8
 800c5c2:	bd10      	pop	{r4, pc}
 800c5c4:	080162a4 	.word	0x080162a4

0800c5c8 <uxr_read_create_session_status>:
 800c5c8:	b510      	push	{r4, lr}
 800c5ca:	b088      	sub	sp, #32
 800c5cc:	4604      	mov	r4, r0
 800c5ce:	4608      	mov	r0, r1
 800c5d0:	a901      	add	r1, sp, #4
 800c5d2:	f001 fafb 	bl	800dbcc <uxr_deserialize_STATUS_AGENT_Payload>
 800c5d6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c5da:	7163      	strb	r3, [r4, #5]
 800c5dc:	b008      	add	sp, #32
 800c5de:	bd10      	pop	{r4, pc}

0800c5e0 <uxr_read_delete_session_status>:
 800c5e0:	b510      	push	{r4, lr}
 800c5e2:	4604      	mov	r4, r0
 800c5e4:	b084      	sub	sp, #16
 800c5e6:	4608      	mov	r0, r1
 800c5e8:	a902      	add	r1, sp, #8
 800c5ea:	f001 fb1f 	bl	800dc2c <uxr_deserialize_STATUS_Payload>
 800c5ee:	88e3      	ldrh	r3, [r4, #6]
 800c5f0:	2b02      	cmp	r3, #2
 800c5f2:	d001      	beq.n	800c5f8 <uxr_read_delete_session_status+0x18>
 800c5f4:	b004      	add	sp, #16
 800c5f6:	bd10      	pop	{r4, pc}
 800c5f8:	f10d 000a 	add.w	r0, sp, #10
 800c5fc:	f7fe fffc 	bl	800b5f8 <uxr_object_id_from_raw>
 800c600:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800c604:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800c608:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800c60c:	b29b      	uxth	r3, r3
 800c60e:	2b02      	cmp	r3, #2
 800c610:	bf04      	itt	eq
 800c612:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800c616:	7163      	strbeq	r3, [r4, #5]
 800c618:	b004      	add	sp, #16
 800c61a:	bd10      	pop	{r4, pc}

0800c61c <uxr_stamp_create_session_header>:
 800c61c:	b510      	push	{r4, lr}
 800c61e:	2208      	movs	r2, #8
 800c620:	b08a      	sub	sp, #40	; 0x28
 800c622:	4604      	mov	r4, r0
 800c624:	eb0d 0002 	add.w	r0, sp, r2
 800c628:	f7fc fb2c 	bl	8008c84 <ucdr_init_buffer>
 800c62c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c630:	9400      	str	r4, [sp, #0]
 800c632:	2300      	movs	r3, #0
 800c634:	461a      	mov	r2, r3
 800c636:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800c63a:	a802      	add	r0, sp, #8
 800c63c:	f000 fbc2 	bl	800cdc4 <uxr_serialize_message_header>
 800c640:	b00a      	add	sp, #40	; 0x28
 800c642:	bd10      	pop	{r4, pc}

0800c644 <uxr_stamp_session_header>:
 800c644:	b530      	push	{r4, r5, lr}
 800c646:	b08d      	sub	sp, #52	; 0x34
 800c648:	4604      	mov	r4, r0
 800c64a:	460d      	mov	r5, r1
 800c64c:	9203      	str	r2, [sp, #12]
 800c64e:	4619      	mov	r1, r3
 800c650:	a804      	add	r0, sp, #16
 800c652:	2208      	movs	r2, #8
 800c654:	f7fc fb16 	bl	8008c84 <ucdr_init_buffer>
 800c658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c65c:	9b03      	ldr	r3, [sp, #12]
 800c65e:	9400      	str	r4, [sp, #0]
 800c660:	462a      	mov	r2, r5
 800c662:	a804      	add	r0, sp, #16
 800c664:	f000 fbae 	bl	800cdc4 <uxr_serialize_message_header>
 800c668:	b00d      	add	sp, #52	; 0x34
 800c66a:	bd30      	pop	{r4, r5, pc}

0800c66c <uxr_read_session_header>:
 800c66c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c670:	4607      	mov	r7, r0
 800c672:	b084      	sub	sp, #16
 800c674:	4608      	mov	r0, r1
 800c676:	460c      	mov	r4, r1
 800c678:	4615      	mov	r5, r2
 800c67a:	461e      	mov	r6, r3
 800c67c:	f7fc fb32 	bl	8008ce4 <ucdr_buffer_remaining>
 800c680:	2808      	cmp	r0, #8
 800c682:	d803      	bhi.n	800c68c <uxr_read_session_header+0x20>
 800c684:	2000      	movs	r0, #0
 800c686:	b004      	add	sp, #16
 800c688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c68c:	f10d 080c 	add.w	r8, sp, #12
 800c690:	4633      	mov	r3, r6
 800c692:	462a      	mov	r2, r5
 800c694:	f8cd 8000 	str.w	r8, [sp]
 800c698:	4620      	mov	r0, r4
 800c69a:	f10d 010b 	add.w	r1, sp, #11
 800c69e:	f000 fbaf 	bl	800ce00 <uxr_deserialize_message_header>
 800c6a2:	783a      	ldrb	r2, [r7, #0]
 800c6a4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800c6a8:	4293      	cmp	r3, r2
 800c6aa:	d1eb      	bne.n	800c684 <uxr_read_session_header+0x18>
 800c6ac:	061b      	lsls	r3, r3, #24
 800c6ae:	d41c      	bmi.n	800c6ea <uxr_read_session_header+0x7e>
 800c6b0:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800c6b4:	787b      	ldrb	r3, [r7, #1]
 800c6b6:	429a      	cmp	r2, r3
 800c6b8:	d003      	beq.n	800c6c2 <uxr_read_session_header+0x56>
 800c6ba:	2001      	movs	r0, #1
 800c6bc:	f080 0001 	eor.w	r0, r0, #1
 800c6c0:	e7e1      	b.n	800c686 <uxr_read_session_header+0x1a>
 800c6c2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800c6c6:	78bb      	ldrb	r3, [r7, #2]
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	f107 0102 	add.w	r1, r7, #2
 800c6ce:	d1f4      	bne.n	800c6ba <uxr_read_session_header+0x4e>
 800c6d0:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800c6d4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	d1ee      	bne.n	800c6ba <uxr_read_session_header+0x4e>
 800c6dc:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800c6e0:	784b      	ldrb	r3, [r1, #1]
 800c6e2:	429a      	cmp	r2, r3
 800c6e4:	d1e9      	bne.n	800c6ba <uxr_read_session_header+0x4e>
 800c6e6:	2000      	movs	r0, #0
 800c6e8:	e7e8      	b.n	800c6bc <uxr_read_session_header+0x50>
 800c6ea:	2001      	movs	r0, #1
 800c6ec:	e7cb      	b.n	800c686 <uxr_read_session_header+0x1a>
 800c6ee:	bf00      	nop

0800c6f0 <uxr_session_header_offset>:
 800c6f0:	f990 3000 	ldrsb.w	r3, [r0]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	bfac      	ite	ge
 800c6f8:	2008      	movge	r0, #8
 800c6fa:	2004      	movlt	r0, #4
 800c6fc:	4770      	bx	lr
 800c6fe:	bf00      	nop

0800c700 <uxr_init_base_object_request>:
 800c700:	b510      	push	{r4, lr}
 800c702:	88c3      	ldrh	r3, [r0, #6]
 800c704:	b082      	sub	sp, #8
 800c706:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 800c70a:	9101      	str	r1, [sp, #4]
 800c70c:	f1a3 010a 	sub.w	r1, r3, #10
 800c710:	b289      	uxth	r1, r1
 800c712:	42a1      	cmp	r1, r4
 800c714:	d80e      	bhi.n	800c734 <uxr_init_base_object_request+0x34>
 800c716:	3301      	adds	r3, #1
 800c718:	b29c      	uxth	r4, r3
 800c71a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800c71e:	b2db      	uxtb	r3, r3
 800c720:	80c4      	strh	r4, [r0, #6]
 800c722:	9801      	ldr	r0, [sp, #4]
 800c724:	7011      	strb	r1, [r2, #0]
 800c726:	7053      	strb	r3, [r2, #1]
 800c728:	1c91      	adds	r1, r2, #2
 800c72a:	f7fe ff79 	bl	800b620 <uxr_object_id_to_raw>
 800c72e:	4620      	mov	r0, r4
 800c730:	b002      	add	sp, #8
 800c732:	bd10      	pop	{r4, pc}
 800c734:	230a      	movs	r3, #10
 800c736:	2100      	movs	r1, #0
 800c738:	461c      	mov	r4, r3
 800c73a:	e7f1      	b.n	800c720 <uxr_init_base_object_request+0x20>

0800c73c <uxr_parse_base_object_request>:
 800c73c:	b570      	push	{r4, r5, r6, lr}
 800c73e:	4604      	mov	r4, r0
 800c740:	3002      	adds	r0, #2
 800c742:	460d      	mov	r5, r1
 800c744:	4616      	mov	r6, r2
 800c746:	f7fe ff57 	bl	800b5f8 <uxr_object_id_from_raw>
 800c74a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800c74e:	8028      	strh	r0, [r5, #0]
 800c750:	806b      	strh	r3, [r5, #2]
 800c752:	7822      	ldrb	r2, [r4, #0]
 800c754:	7863      	ldrb	r3, [r4, #1]
 800c756:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800c75a:	8033      	strh	r3, [r6, #0]
 800c75c:	bd70      	pop	{r4, r5, r6, pc}
 800c75e:	bf00      	nop

0800c760 <uxr_stream_id>:
 800c760:	2901      	cmp	r1, #1
 800c762:	b082      	sub	sp, #8
 800c764:	d01d      	beq.n	800c7a2 <uxr_stream_id+0x42>
 800c766:	2902      	cmp	r1, #2
 800c768:	f04f 0c00 	mov.w	ip, #0
 800c76c:	d01e      	beq.n	800c7ac <uxr_stream_id+0x4c>
 800c76e:	2300      	movs	r3, #0
 800c770:	f36c 0307 	bfi	r3, ip, #0, #8
 800c774:	f360 230f 	bfi	r3, r0, #8, #8
 800c778:	f361 4317 	bfi	r3, r1, #16, #8
 800c77c:	f362 631f 	bfi	r3, r2, #24, #8
 800c780:	b2da      	uxtb	r2, r3
 800c782:	2000      	movs	r0, #0
 800c784:	f362 0007 	bfi	r0, r2, #0, #8
 800c788:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800c78c:	f362 200f 	bfi	r0, r2, #8, #8
 800c790:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800c794:	f362 4017 	bfi	r0, r2, #16, #8
 800c798:	0e1b      	lsrs	r3, r3, #24
 800c79a:	f363 601f 	bfi	r0, r3, #24, #8
 800c79e:	b002      	add	sp, #8
 800c7a0:	4770      	bx	lr
 800c7a2:	f100 0c01 	add.w	ip, r0, #1
 800c7a6:	fa5f fc8c 	uxtb.w	ip, ip
 800c7aa:	e7e0      	b.n	800c76e <uxr_stream_id+0xe>
 800c7ac:	f080 0c80 	eor.w	ip, r0, #128	; 0x80
 800c7b0:	e7dd      	b.n	800c76e <uxr_stream_id+0xe>
 800c7b2:	bf00      	nop

0800c7b4 <uxr_stream_id_from_raw>:
 800c7b4:	b082      	sub	sp, #8
 800c7b6:	b130      	cbz	r0, 800c7c6 <uxr_stream_id_from_raw+0x12>
 800c7b8:	0603      	lsls	r3, r0, #24
 800c7ba:	d420      	bmi.n	800c7fe <uxr_stream_id_from_raw+0x4a>
 800c7bc:	1e42      	subs	r2, r0, #1
 800c7be:	b2d2      	uxtb	r2, r2
 800c7c0:	f04f 0c01 	mov.w	ip, #1
 800c7c4:	e001      	b.n	800c7ca <uxr_stream_id_from_raw+0x16>
 800c7c6:	4684      	mov	ip, r0
 800c7c8:	4602      	mov	r2, r0
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	f360 0307 	bfi	r3, r0, #0, #8
 800c7d0:	f362 230f 	bfi	r3, r2, #8, #8
 800c7d4:	f36c 4317 	bfi	r3, ip, #16, #8
 800c7d8:	f361 631f 	bfi	r3, r1, #24, #8
 800c7dc:	b2da      	uxtb	r2, r3
 800c7de:	2000      	movs	r0, #0
 800c7e0:	f362 0007 	bfi	r0, r2, #0, #8
 800c7e4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800c7e8:	f362 200f 	bfi	r0, r2, #8, #8
 800c7ec:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800c7f0:	f362 4017 	bfi	r0, r2, #16, #8
 800c7f4:	0e1b      	lsrs	r3, r3, #24
 800c7f6:	f363 601f 	bfi	r0, r3, #24, #8
 800c7fa:	b002      	add	sp, #8
 800c7fc:	4770      	bx	lr
 800c7fe:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 800c802:	f04f 0c02 	mov.w	ip, #2
 800c806:	e7e0      	b.n	800c7ca <uxr_stream_id_from_raw+0x16>

0800c808 <uxr_init_stream_storage>:
 800c808:	2300      	movs	r3, #0
 800c80a:	7403      	strb	r3, [r0, #16]
 800c80c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800c810:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 800c814:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 800c818:	4770      	bx	lr
 800c81a:	bf00      	nop

0800c81c <uxr_reset_stream_storage>:
 800c81c:	b570      	push	{r4, r5, r6, lr}
 800c81e:	7c03      	ldrb	r3, [r0, #16]
 800c820:	4604      	mov	r4, r0
 800c822:	b153      	cbz	r3, 800c83a <uxr_reset_stream_storage+0x1e>
 800c824:	4606      	mov	r6, r0
 800c826:	2500      	movs	r5, #0
 800c828:	4630      	mov	r0, r6
 800c82a:	f006 fc4b 	bl	80130c4 <uxr_reset_output_best_effort_stream>
 800c82e:	7c23      	ldrb	r3, [r4, #16]
 800c830:	3501      	adds	r5, #1
 800c832:	42ab      	cmp	r3, r5
 800c834:	f106 0610 	add.w	r6, r6, #16
 800c838:	d8f6      	bhi.n	800c828 <uxr_reset_stream_storage+0xc>
 800c83a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c83e:	b163      	cbz	r3, 800c85a <uxr_reset_stream_storage+0x3e>
 800c840:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c844:	2500      	movs	r5, #0
 800c846:	4630      	mov	r0, r6
 800c848:	f006 fa3e 	bl	8012cc8 <uxr_reset_input_best_effort_stream>
 800c84c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c850:	3501      	adds	r5, #1
 800c852:	42ab      	cmp	r3, r5
 800c854:	f106 0602 	add.w	r6, r6, #2
 800c858:	d8f5      	bhi.n	800c846 <uxr_reset_stream_storage+0x2a>
 800c85a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800c85e:	b163      	cbz	r3, 800c87a <uxr_reset_stream_storage+0x5e>
 800c860:	f104 0618 	add.w	r6, r4, #24
 800c864:	2500      	movs	r5, #0
 800c866:	4630      	mov	r0, r6
 800c868:	f006 fcd8 	bl	801321c <uxr_reset_output_reliable_stream>
 800c86c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800c870:	3501      	adds	r5, #1
 800c872:	42ab      	cmp	r3, r5
 800c874:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800c878:	d8f5      	bhi.n	800c866 <uxr_reset_stream_storage+0x4a>
 800c87a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800c87e:	b163      	cbz	r3, 800c89a <uxr_reset_stream_storage+0x7e>
 800c880:	f104 0648 	add.w	r6, r4, #72	; 0x48
 800c884:	2500      	movs	r5, #0
 800c886:	4630      	mov	r0, r6
 800c888:	f006 fa92 	bl	8012db0 <uxr_reset_input_reliable_stream>
 800c88c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800c890:	3501      	adds	r5, #1
 800c892:	42ab      	cmp	r3, r5
 800c894:	f106 0618 	add.w	r6, r6, #24
 800c898:	d8f5      	bhi.n	800c886 <uxr_reset_stream_storage+0x6a>
 800c89a:	bd70      	pop	{r4, r5, r6, pc}

0800c89c <uxr_add_output_best_effort_buffer>:
 800c89c:	b510      	push	{r4, lr}
 800c89e:	7c04      	ldrb	r4, [r0, #16]
 800c8a0:	f104 0c01 	add.w	ip, r4, #1
 800c8a4:	b082      	sub	sp, #8
 800c8a6:	f880 c010 	strb.w	ip, [r0, #16]
 800c8aa:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800c8ae:	f006 fbff 	bl	80130b0 <uxr_init_output_best_effort_stream>
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	4611      	mov	r1, r2
 800c8b6:	4620      	mov	r0, r4
 800c8b8:	b002      	add	sp, #8
 800c8ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8be:	f7ff bf4f 	b.w	800c760 <uxr_stream_id>
 800c8c2:	bf00      	nop

0800c8c4 <uxr_add_output_reliable_buffer>:
 800c8c4:	b510      	push	{r4, lr}
 800c8c6:	b084      	sub	sp, #16
 800c8c8:	4684      	mov	ip, r0
 800c8ca:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800c8ce:	9000      	str	r0, [sp, #0]
 800c8d0:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 800c8d4:	2028      	movs	r0, #40	; 0x28
 800c8d6:	fb00 c004 	mla	r0, r0, r4, ip
 800c8da:	f104 0e01 	add.w	lr, r4, #1
 800c8de:	3018      	adds	r0, #24
 800c8e0:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 800c8e4:	f006 fc62 	bl	80131ac <uxr_init_output_reliable_stream>
 800c8e8:	2201      	movs	r2, #1
 800c8ea:	2102      	movs	r1, #2
 800c8ec:	4620      	mov	r0, r4
 800c8ee:	b004      	add	sp, #16
 800c8f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8f4:	f7ff bf34 	b.w	800c760 <uxr_stream_id>

0800c8f8 <uxr_add_input_best_effort_buffer>:
 800c8f8:	b510      	push	{r4, lr}
 800c8fa:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 800c8fe:	4603      	mov	r3, r0
 800c900:	1c62      	adds	r2, r4, #1
 800c902:	f104 0021 	add.w	r0, r4, #33	; 0x21
 800c906:	b082      	sub	sp, #8
 800c908:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800c90c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c910:	f006 f9d6 	bl	8012cc0 <uxr_init_input_best_effort_stream>
 800c914:	2200      	movs	r2, #0
 800c916:	2101      	movs	r1, #1
 800c918:	4620      	mov	r0, r4
 800c91a:	b002      	add	sp, #8
 800c91c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c920:	f7ff bf1e 	b.w	800c760 <uxr_stream_id>

0800c924 <uxr_add_input_reliable_buffer>:
 800c924:	b510      	push	{r4, lr}
 800c926:	b084      	sub	sp, #16
 800c928:	4684      	mov	ip, r0
 800c92a:	9806      	ldr	r0, [sp, #24]
 800c92c:	9000      	str	r0, [sp, #0]
 800c92e:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 800c932:	2018      	movs	r0, #24
 800c934:	fb00 c004 	mla	r0, r0, r4, ip
 800c938:	f104 0e01 	add.w	lr, r4, #1
 800c93c:	3048      	adds	r0, #72	; 0x48
 800c93e:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 800c942:	f006 fa09 	bl	8012d58 <uxr_init_input_reliable_stream>
 800c946:	2200      	movs	r2, #0
 800c948:	2102      	movs	r1, #2
 800c94a:	4620      	mov	r0, r4
 800c94c:	b004      	add	sp, #16
 800c94e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c952:	f7ff bf05 	b.w	800c760 <uxr_stream_id>
 800c956:	bf00      	nop

0800c958 <uxr_get_output_best_effort_stream>:
 800c958:	7c03      	ldrb	r3, [r0, #16]
 800c95a:	428b      	cmp	r3, r1
 800c95c:	bf8c      	ite	hi
 800c95e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800c962:	2000      	movls	r0, #0
 800c964:	4770      	bx	lr
 800c966:	bf00      	nop

0800c968 <uxr_get_output_reliable_stream>:
 800c968:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800c96c:	428b      	cmp	r3, r1
 800c96e:	bf83      	ittte	hi
 800c970:	2328      	movhi	r3, #40	; 0x28
 800c972:	fb03 0001 	mlahi	r0, r3, r1, r0
 800c976:	3018      	addhi	r0, #24
 800c978:	2000      	movls	r0, #0
 800c97a:	4770      	bx	lr

0800c97c <uxr_get_input_best_effort_stream>:
 800c97c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800c980:	428b      	cmp	r3, r1
 800c982:	bf86      	itte	hi
 800c984:	3121      	addhi	r1, #33	; 0x21
 800c986:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800c98a:	2000      	movls	r0, #0
 800c98c:	4770      	bx	lr
 800c98e:	bf00      	nop

0800c990 <uxr_get_input_reliable_stream>:
 800c990:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800c994:	428b      	cmp	r3, r1
 800c996:	bf83      	ittte	hi
 800c998:	2318      	movhi	r3, #24
 800c99a:	fb03 0001 	mlahi	r0, r3, r1, r0
 800c99e:	3048      	addhi	r0, #72	; 0x48
 800c9a0:	2000      	movls	r0, #0
 800c9a2:	4770      	bx	lr

0800c9a4 <uxr_output_streams_confirmed>:
 800c9a4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800c9a8:	b183      	cbz	r3, 800c9cc <uxr_output_streams_confirmed+0x28>
 800c9aa:	b570      	push	{r4, r5, r6, lr}
 800c9ac:	4606      	mov	r6, r0
 800c9ae:	f100 0518 	add.w	r5, r0, #24
 800c9b2:	2400      	movs	r4, #0
 800c9b4:	e001      	b.n	800c9ba <uxr_output_streams_confirmed+0x16>
 800c9b6:	3528      	adds	r5, #40	; 0x28
 800c9b8:	b138      	cbz	r0, 800c9ca <uxr_output_streams_confirmed+0x26>
 800c9ba:	4628      	mov	r0, r5
 800c9bc:	f006 fe9e 	bl	80136fc <uxr_is_output_up_to_date>
 800c9c0:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 800c9c4:	3401      	adds	r4, #1
 800c9c6:	42a3      	cmp	r3, r4
 800c9c8:	d8f5      	bhi.n	800c9b6 <uxr_output_streams_confirmed+0x12>
 800c9ca:	bd70      	pop	{r4, r5, r6, pc}
 800c9cc:	2001      	movs	r0, #1
 800c9ce:	4770      	bx	lr

0800c9d0 <uxr_buffer_submessage_header>:
 800c9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9d2:	4604      	mov	r4, r0
 800c9d4:	460e      	mov	r6, r1
 800c9d6:	2104      	movs	r1, #4
 800c9d8:	4615      	mov	r5, r2
 800c9da:	461f      	mov	r7, r3
 800c9dc:	f7fc f96c 	bl	8008cb8 <ucdr_align_to>
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	ea47 0203 	orr.w	r2, r7, r3
 800c9e6:	4631      	mov	r1, r6
 800c9e8:	7523      	strb	r3, [r4, #20]
 800c9ea:	4620      	mov	r0, r4
 800c9ec:	462b      	mov	r3, r5
 800c9ee:	f000 fa27 	bl	800ce40 <uxr_serialize_submessage_header>
 800c9f2:	4620      	mov	r0, r4
 800c9f4:	f7fc f976 	bl	8008ce4 <ucdr_buffer_remaining>
 800c9f8:	42a8      	cmp	r0, r5
 800c9fa:	bf34      	ite	cc
 800c9fc:	2000      	movcc	r0, #0
 800c9fe:	2001      	movcs	r0, #1
 800ca00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca02:	bf00      	nop

0800ca04 <uxr_read_submessage_header>:
 800ca04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca08:	4604      	mov	r4, r0
 800ca0a:	460d      	mov	r5, r1
 800ca0c:	2104      	movs	r1, #4
 800ca0e:	4616      	mov	r6, r2
 800ca10:	4698      	mov	r8, r3
 800ca12:	f7fc f951 	bl	8008cb8 <ucdr_align_to>
 800ca16:	4620      	mov	r0, r4
 800ca18:	f7fc f964 	bl	8008ce4 <ucdr_buffer_remaining>
 800ca1c:	2803      	cmp	r0, #3
 800ca1e:	bf8c      	ite	hi
 800ca20:	2701      	movhi	r7, #1
 800ca22:	2700      	movls	r7, #0
 800ca24:	d802      	bhi.n	800ca2c <uxr_read_submessage_header+0x28>
 800ca26:	4638      	mov	r0, r7
 800ca28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca2c:	4633      	mov	r3, r6
 800ca2e:	4642      	mov	r2, r8
 800ca30:	4620      	mov	r0, r4
 800ca32:	4629      	mov	r1, r5
 800ca34:	f000 fa18 	bl	800ce68 <uxr_deserialize_submessage_header>
 800ca38:	f898 3000 	ldrb.w	r3, [r8]
 800ca3c:	f003 0201 	and.w	r2, r3, #1
 800ca40:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800ca44:	f888 3000 	strb.w	r3, [r8]
 800ca48:	7522      	strb	r2, [r4, #20]
 800ca4a:	4638      	mov	r0, r7
 800ca4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ca50 <uxr_submessage_padding>:
 800ca50:	f010 0003 	ands.w	r0, r0, #3
 800ca54:	bf18      	it	ne
 800ca56:	f1c0 0004 	rsbne	r0, r0, #4
 800ca5a:	4770      	bx	lr

0800ca5c <uxr_millis>:
 800ca5c:	b510      	push	{r4, lr}
 800ca5e:	b084      	sub	sp, #16
 800ca60:	4669      	mov	r1, sp
 800ca62:	2001      	movs	r0, #1
 800ca64:	f7f4 fcf8 	bl	8001458 <clock_gettime>
 800ca68:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800ca6c:	4906      	ldr	r1, [pc, #24]	; (800ca88 <uxr_millis+0x2c>)
 800ca6e:	fba0 0301 	umull	r0, r3, r0, r1
 800ca72:	1900      	adds	r0, r0, r4
 800ca74:	fb01 3102 	mla	r1, r1, r2, r3
 800ca78:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800ca7c:	4a03      	ldr	r2, [pc, #12]	; (800ca8c <uxr_millis+0x30>)
 800ca7e:	2300      	movs	r3, #0
 800ca80:	f7f3 fc16 	bl	80002b0 <__aeabi_ldivmod>
 800ca84:	b004      	add	sp, #16
 800ca86:	bd10      	pop	{r4, pc}
 800ca88:	3b9aca00 	.word	0x3b9aca00
 800ca8c:	000f4240 	.word	0x000f4240

0800ca90 <uxr_nanos>:
 800ca90:	b510      	push	{r4, lr}
 800ca92:	b084      	sub	sp, #16
 800ca94:	4669      	mov	r1, sp
 800ca96:	2001      	movs	r0, #1
 800ca98:	f7f4 fcde 	bl	8001458 <clock_gettime>
 800ca9c:	4a06      	ldr	r2, [pc, #24]	; (800cab8 <uxr_nanos+0x28>)
 800ca9e:	9800      	ldr	r0, [sp, #0]
 800caa0:	9902      	ldr	r1, [sp, #8]
 800caa2:	9c01      	ldr	r4, [sp, #4]
 800caa4:	fba0 0302 	umull	r0, r3, r0, r2
 800caa8:	1840      	adds	r0, r0, r1
 800caaa:	fb02 3304 	mla	r3, r2, r4, r3
 800caae:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800cab2:	b004      	add	sp, #16
 800cab4:	bd10      	pop	{r4, pc}
 800cab6:	bf00      	nop
 800cab8:	3b9aca00 	.word	0x3b9aca00

0800cabc <on_full_output_buffer_fragmented>:
 800cabc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cac0:	460c      	mov	r4, r1
 800cac2:	b08a      	sub	sp, #40	; 0x28
 800cac4:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 800cac8:	4606      	mov	r6, r0
 800caca:	f104 0008 	add.w	r0, r4, #8
 800cace:	f7ff ff4b 	bl	800c968 <uxr_get_output_reliable_stream>
 800cad2:	4605      	mov	r5, r0
 800cad4:	f006 fe1c 	bl	8013710 <get_available_free_slots>
 800cad8:	b968      	cbnz	r0, 800caf6 <on_full_output_buffer_fragmented+0x3a>
 800cada:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 800cade:	4620      	mov	r0, r4
 800cae0:	4798      	blx	r3
 800cae2:	b918      	cbnz	r0, 800caec <on_full_output_buffer_fragmented+0x30>
 800cae4:	2001      	movs	r0, #1
 800cae6:	b00a      	add	sp, #40	; 0x28
 800cae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caec:	4628      	mov	r0, r5
 800caee:	f006 fe0f 	bl	8013710 <get_available_free_slots>
 800caf2:	2800      	cmp	r0, #0
 800caf4:	d0f6      	beq.n	800cae4 <on_full_output_buffer_fragmented+0x28>
 800caf6:	8929      	ldrh	r1, [r5, #8]
 800caf8:	89eb      	ldrh	r3, [r5, #14]
 800cafa:	7b28      	ldrb	r0, [r5, #12]
 800cafc:	686a      	ldr	r2, [r5, #4]
 800cafe:	fbb2 f8f1 	udiv	r8, r2, r1
 800cb02:	fbb3 f2f1 	udiv	r2, r3, r1
 800cb06:	fb01 3112 	mls	r1, r1, r2, r3
 800cb0a:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
 800cb0e:	b289      	uxth	r1, r1
 800cb10:	fb08 f101 	mul.w	r1, r8, r1
 800cb14:	30fc      	adds	r0, #252	; 0xfc
 800cb16:	f1a8 0804 	sub.w	r8, r8, #4
 800cb1a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 800cb1e:	4440      	add	r0, r8
 800cb20:	b287      	uxth	r7, r0
 800cb22:	1bdb      	subs	r3, r3, r7
 800cb24:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 800cb28:	682b      	ldr	r3, [r5, #0]
 800cb2a:	3104      	adds	r1, #4
 800cb2c:	4419      	add	r1, r3
 800cb2e:	4642      	mov	r2, r8
 800cb30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb34:	9300      	str	r3, [sp, #0]
 800cb36:	a802      	add	r0, sp, #8
 800cb38:	2300      	movs	r3, #0
 800cb3a:	f7fc f891 	bl	8008c60 <ucdr_init_buffer_origin_offset>
 800cb3e:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800cb42:	f102 0308 	add.w	r3, r2, #8
 800cb46:	4543      	cmp	r3, r8
 800cb48:	d928      	bls.n	800cb9c <on_full_output_buffer_fragmented+0xe0>
 800cb4a:	463a      	mov	r2, r7
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	210d      	movs	r1, #13
 800cb50:	a802      	add	r0, sp, #8
 800cb52:	f7ff ff3d 	bl	800c9d0 <uxr_buffer_submessage_header>
 800cb56:	8929      	ldrh	r1, [r5, #8]
 800cb58:	89eb      	ldrh	r3, [r5, #14]
 800cb5a:	fbb3 f2f1 	udiv	r2, r3, r1
 800cb5e:	fb01 3312 	mls	r3, r1, r2, r3
 800cb62:	b29b      	uxth	r3, r3
 800cb64:	686a      	ldr	r2, [r5, #4]
 800cb66:	fbb2 f2f1 	udiv	r2, r2, r1
 800cb6a:	fb02 f303 	mul.w	r3, r2, r3
 800cb6e:	682a      	ldr	r2, [r5, #0]
 800cb70:	f842 8003 	str.w	r8, [r2, r3]
 800cb74:	89e8      	ldrh	r0, [r5, #14]
 800cb76:	2101      	movs	r1, #1
 800cb78:	f006 ff1a 	bl	80139b0 <uxr_seq_num_add>
 800cb7c:	9904      	ldr	r1, [sp, #16]
 800cb7e:	9a03      	ldr	r2, [sp, #12]
 800cb80:	81e8      	strh	r0, [r5, #14]
 800cb82:	1a52      	subs	r2, r2, r1
 800cb84:	4630      	mov	r0, r6
 800cb86:	f7fc f87d 	bl	8008c84 <ucdr_init_buffer>
 800cb8a:	4630      	mov	r0, r6
 800cb8c:	490f      	ldr	r1, [pc, #60]	; (800cbcc <on_full_output_buffer_fragmented+0x110>)
 800cb8e:	4622      	mov	r2, r4
 800cb90:	f7fc f84c 	bl	8008c2c <ucdr_set_on_full_buffer_callback>
 800cb94:	2000      	movs	r0, #0
 800cb96:	b00a      	add	sp, #40	; 0x28
 800cb98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb9c:	b292      	uxth	r2, r2
 800cb9e:	2302      	movs	r3, #2
 800cba0:	210d      	movs	r1, #13
 800cba2:	a802      	add	r0, sp, #8
 800cba4:	f7ff ff14 	bl	800c9d0 <uxr_buffer_submessage_header>
 800cba8:	8928      	ldrh	r0, [r5, #8]
 800cbaa:	89eb      	ldrh	r3, [r5, #14]
 800cbac:	fbb3 f1f0 	udiv	r1, r3, r0
 800cbb0:	fb00 3311 	mls	r3, r0, r1, r3
 800cbb4:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800cbb8:	6869      	ldr	r1, [r5, #4]
 800cbba:	fbb1 f1f0 	udiv	r1, r1, r0
 800cbbe:	b29b      	uxth	r3, r3
 800cbc0:	fb01 f303 	mul.w	r3, r1, r3
 800cbc4:	6829      	ldr	r1, [r5, #0]
 800cbc6:	3208      	adds	r2, #8
 800cbc8:	50ca      	str	r2, [r1, r3]
 800cbca:	e7d3      	b.n	800cb74 <on_full_output_buffer_fragmented+0xb8>
 800cbcc:	0800cabd 	.word	0x0800cabd

0800cbd0 <uxr_prepare_output_stream>:
 800cbd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbd2:	b087      	sub	sp, #28
 800cbd4:	2707      	movs	r7, #7
 800cbd6:	9202      	str	r2, [sp, #8]
 800cbd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cbda:	9103      	str	r1, [sp, #12]
 800cbdc:	2500      	movs	r5, #0
 800cbde:	3204      	adds	r2, #4
 800cbe0:	e9cd 7500 	strd	r7, r5, [sp]
 800cbe4:	461c      	mov	r4, r3
 800cbe6:	4606      	mov	r6, r0
 800cbe8:	f7ff fc54 	bl	800c494 <uxr_prepare_stream_to_write_submessage>
 800cbec:	f080 0201 	eor.w	r2, r0, #1
 800cbf0:	b2d2      	uxtb	r2, r2
 800cbf2:	75a2      	strb	r2, [r4, #22]
 800cbf4:	b112      	cbz	r2, 800cbfc <uxr_prepare_output_stream+0x2c>
 800cbf6:	4628      	mov	r0, r5
 800cbf8:	b007      	add	sp, #28
 800cbfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbfc:	aa05      	add	r2, sp, #20
 800cbfe:	9902      	ldr	r1, [sp, #8]
 800cc00:	4630      	mov	r0, r6
 800cc02:	f7ff fd7d 	bl	800c700 <uxr_init_base_object_request>
 800cc06:	a905      	add	r1, sp, #20
 800cc08:	4605      	mov	r5, r0
 800cc0a:	4620      	mov	r0, r4
 800cc0c:	f001 f88c 	bl	800dd28 <uxr_serialize_WRITE_DATA_Payload_Data>
 800cc10:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800cc14:	69a6      	ldr	r6, [r4, #24]
 800cc16:	69e7      	ldr	r7, [r4, #28]
 800cc18:	1a52      	subs	r2, r2, r1
 800cc1a:	4620      	mov	r0, r4
 800cc1c:	f7fc f832 	bl	8008c84 <ucdr_init_buffer>
 800cc20:	4620      	mov	r0, r4
 800cc22:	463a      	mov	r2, r7
 800cc24:	4631      	mov	r1, r6
 800cc26:	f7fc f801 	bl	8008c2c <ucdr_set_on_full_buffer_callback>
 800cc2a:	4628      	mov	r0, r5
 800cc2c:	b007      	add	sp, #28
 800cc2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cc30 <uxr_prepare_output_stream_fragmented>:
 800cc30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc34:	b091      	sub	sp, #68	; 0x44
 800cc36:	4605      	mov	r5, r0
 800cc38:	9105      	str	r1, [sp, #20]
 800cc3a:	3008      	adds	r0, #8
 800cc3c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800cc40:	461e      	mov	r6, r3
 800cc42:	9204      	str	r2, [sp, #16]
 800cc44:	f7ff fe90 	bl	800c968 <uxr_get_output_reliable_stream>
 800cc48:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800cc4c:	2b01      	cmp	r3, #1
 800cc4e:	f000 8091 	beq.w	800cd74 <uxr_prepare_output_stream_fragmented+0x144>
 800cc52:	4604      	mov	r4, r0
 800cc54:	2800      	cmp	r0, #0
 800cc56:	f000 808d 	beq.w	800cd74 <uxr_prepare_output_stream_fragmented+0x144>
 800cc5a:	f006 fd59 	bl	8013710 <get_available_free_slots>
 800cc5e:	2800      	cmp	r0, #0
 800cc60:	f000 8083 	beq.w	800cd6a <uxr_prepare_output_stream_fragmented+0x13a>
 800cc64:	8922      	ldrh	r2, [r4, #8]
 800cc66:	89e7      	ldrh	r7, [r4, #14]
 800cc68:	fbb7 f9f2 	udiv	r9, r7, r2
 800cc6c:	fb02 7919 	mls	r9, r2, r9, r7
 800cc70:	fa1f f989 	uxth.w	r9, r9
 800cc74:	6863      	ldr	r3, [r4, #4]
 800cc76:	fbb3 f2f2 	udiv	r2, r3, r2
 800cc7a:	6823      	ldr	r3, [r4, #0]
 800cc7c:	9203      	str	r2, [sp, #12]
 800cc7e:	fb02 f909 	mul.w	r9, r2, r9
 800cc82:	f109 0904 	add.w	r9, r9, #4
 800cc86:	4499      	add	r9, r3
 800cc88:	7b23      	ldrb	r3, [r4, #12]
 800cc8a:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800cc8e:	4543      	cmp	r3, r8
 800cc90:	f1a2 0b04 	sub.w	fp, r2, #4
 800cc94:	d37a      	bcc.n	800cd8c <uxr_prepare_output_stream_fragmented+0x15c>
 800cc96:	f1ab 0a04 	sub.w	sl, fp, #4
 800cc9a:	ebaa 0a03 	sub.w	sl, sl, r3
 800cc9e:	465a      	mov	r2, fp
 800cca0:	2300      	movs	r3, #0
 800cca2:	4649      	mov	r1, r9
 800cca4:	a808      	add	r0, sp, #32
 800cca6:	f8cd 8000 	str.w	r8, [sp]
 800ccaa:	f7fb ffd9 	bl	8008c60 <ucdr_init_buffer_origin_offset>
 800ccae:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800ccb0:	fa1f fa8a 	uxth.w	sl, sl
 800ccb4:	4652      	mov	r2, sl
 800ccb6:	f103 0a08 	add.w	sl, r3, #8
 800ccba:	45da      	cmp	sl, fp
 800ccbc:	bf34      	ite	cc
 800ccbe:	2302      	movcc	r3, #2
 800ccc0:	2300      	movcs	r3, #0
 800ccc2:	210d      	movs	r1, #13
 800ccc4:	a808      	add	r0, sp, #32
 800ccc6:	f7ff fe83 	bl	800c9d0 <uxr_buffer_submessage_header>
 800ccca:	8921      	ldrh	r1, [r4, #8]
 800cccc:	fbb7 f2f1 	udiv	r2, r7, r1
 800ccd0:	fb01 7212 	mls	r2, r1, r2, r7
 800ccd4:	b292      	uxth	r2, r2
 800ccd6:	6863      	ldr	r3, [r4, #4]
 800ccd8:	fbb3 f3f1 	udiv	r3, r3, r1
 800ccdc:	fb02 f303 	mul.w	r3, r2, r3
 800cce0:	6822      	ldr	r2, [r4, #0]
 800cce2:	4638      	mov	r0, r7
 800cce4:	f842 b003 	str.w	fp, [r2, r3]
 800cce8:	2101      	movs	r1, #1
 800ccea:	f006 fe61 	bl	80139b0 <uxr_seq_num_add>
 800ccee:	9b03      	ldr	r3, [sp, #12]
 800ccf0:	f108 0104 	add.w	r1, r8, #4
 800ccf4:	f1a3 0208 	sub.w	r2, r3, #8
 800ccf8:	eba2 0208 	sub.w	r2, r2, r8
 800ccfc:	4449      	add	r1, r9
 800ccfe:	4607      	mov	r7, r0
 800cd00:	4630      	mov	r0, r6
 800cd02:	f7fb ffbf 	bl	8008c84 <ucdr_init_buffer>
 800cd06:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800cd08:	81e7      	strh	r7, [r4, #14]
 800cd0a:	1d1a      	adds	r2, r3, #4
 800cd0c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800cd10:	bf28      	it	cs
 800cd12:	2200      	movcs	r2, #0
 800cd14:	2300      	movs	r3, #0
 800cd16:	b292      	uxth	r2, r2
 800cd18:	2107      	movs	r1, #7
 800cd1a:	4630      	mov	r0, r6
 800cd1c:	f7ff fe58 	bl	800c9d0 <uxr_buffer_submessage_header>
 800cd20:	9904      	ldr	r1, [sp, #16]
 800cd22:	aa07      	add	r2, sp, #28
 800cd24:	4628      	mov	r0, r5
 800cd26:	f7ff fceb 	bl	800c700 <uxr_init_base_object_request>
 800cd2a:	4604      	mov	r4, r0
 800cd2c:	b318      	cbz	r0, 800cd76 <uxr_prepare_output_stream_fragmented+0x146>
 800cd2e:	a907      	add	r1, sp, #28
 800cd30:	4630      	mov	r0, r6
 800cd32:	f000 fff9 	bl	800dd28 <uxr_serialize_WRITE_DATA_Payload_Data>
 800cd36:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800cd3a:	4630      	mov	r0, r6
 800cd3c:	1a52      	subs	r2, r2, r1
 800cd3e:	f7fb ffa1 	bl	8008c84 <ucdr_init_buffer>
 800cd42:	9b05      	ldr	r3, [sp, #20]
 800cd44:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 800cd48:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cd4a:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 800cd4e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800cd50:	491b      	ldr	r1, [pc, #108]	; (800cdc0 <uxr_prepare_output_stream_fragmented+0x190>)
 800cd52:	f8c5 a0c4 	str.w	sl, [r5, #196]	; 0xc4
 800cd56:	4630      	mov	r0, r6
 800cd58:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 800cd5c:	462a      	mov	r2, r5
 800cd5e:	f7fb ff65 	bl	8008c2c <ucdr_set_on_full_buffer_callback>
 800cd62:	4620      	mov	r0, r4
 800cd64:	b011      	add	sp, #68	; 0x44
 800cd66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd6a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cd6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cd6e:	4628      	mov	r0, r5
 800cd70:	4798      	blx	r3
 800cd72:	b920      	cbnz	r0, 800cd7e <uxr_prepare_output_stream_fragmented+0x14e>
 800cd74:	2400      	movs	r4, #0
 800cd76:	4620      	mov	r0, r4
 800cd78:	b011      	add	sp, #68	; 0x44
 800cd7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd7e:	4620      	mov	r0, r4
 800cd80:	f006 fcc6 	bl	8013710 <get_available_free_slots>
 800cd84:	2800      	cmp	r0, #0
 800cd86:	f47f af6d 	bne.w	800cc64 <uxr_prepare_output_stream_fragmented+0x34>
 800cd8a:	e7f3      	b.n	800cd74 <uxr_prepare_output_stream_fragmented+0x144>
 800cd8c:	4638      	mov	r0, r7
 800cd8e:	2101      	movs	r1, #1
 800cd90:	f006 fe0e 	bl	80139b0 <uxr_seq_num_add>
 800cd94:	8921      	ldrh	r1, [r4, #8]
 800cd96:	fbb0 f2f1 	udiv	r2, r0, r1
 800cd9a:	fb01 0912 	mls	r9, r1, r2, r0
 800cd9e:	fa1f f289 	uxth.w	r2, r9
 800cda2:	6863      	ldr	r3, [r4, #4]
 800cda4:	fbb3 f9f1 	udiv	r9, r3, r1
 800cda8:	6823      	ldr	r3, [r4, #0]
 800cdaa:	fb02 f909 	mul.w	r9, r2, r9
 800cdae:	f109 0904 	add.w	r9, r9, #4
 800cdb2:	4499      	add	r9, r3
 800cdb4:	4607      	mov	r7, r0
 800cdb6:	7b23      	ldrb	r3, [r4, #12]
 800cdb8:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800cdbc:	e76b      	b.n	800cc96 <uxr_prepare_output_stream_fragmented+0x66>
 800cdbe:	bf00      	nop
 800cdc0:	0800cabd 	.word	0x0800cabd

0800cdc4 <uxr_serialize_message_header>:
 800cdc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdc6:	b083      	sub	sp, #12
 800cdc8:	4616      	mov	r6, r2
 800cdca:	4604      	mov	r4, r0
 800cdcc:	9301      	str	r3, [sp, #4]
 800cdce:	460d      	mov	r5, r1
 800cdd0:	9f08      	ldr	r7, [sp, #32]
 800cdd2:	f7fa fe15 	bl	8007a00 <ucdr_serialize_uint8_t>
 800cdd6:	4631      	mov	r1, r6
 800cdd8:	4620      	mov	r0, r4
 800cdda:	f7fa fe11 	bl	8007a00 <ucdr_serialize_uint8_t>
 800cdde:	9a01      	ldr	r2, [sp, #4]
 800cde0:	2101      	movs	r1, #1
 800cde2:	4620      	mov	r0, r4
 800cde4:	f7fa feb8 	bl	8007b58 <ucdr_serialize_endian_uint16_t>
 800cde8:	062b      	lsls	r3, r5, #24
 800cdea:	d501      	bpl.n	800cdf0 <uxr_serialize_message_header+0x2c>
 800cdec:	b003      	add	sp, #12
 800cdee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdf0:	2204      	movs	r2, #4
 800cdf2:	4639      	mov	r1, r7
 800cdf4:	4620      	mov	r0, r4
 800cdf6:	b003      	add	sp, #12
 800cdf8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800cdfc:	f005 bd66 	b.w	80128cc <ucdr_serialize_array_uint8_t>

0800ce00 <uxr_deserialize_message_header>:
 800ce00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce02:	b083      	sub	sp, #12
 800ce04:	4616      	mov	r6, r2
 800ce06:	4604      	mov	r4, r0
 800ce08:	9301      	str	r3, [sp, #4]
 800ce0a:	460d      	mov	r5, r1
 800ce0c:	9f08      	ldr	r7, [sp, #32]
 800ce0e:	f7fa fe0d 	bl	8007a2c <ucdr_deserialize_uint8_t>
 800ce12:	4631      	mov	r1, r6
 800ce14:	4620      	mov	r0, r4
 800ce16:	f7fa fe09 	bl	8007a2c <ucdr_deserialize_uint8_t>
 800ce1a:	9a01      	ldr	r2, [sp, #4]
 800ce1c:	2101      	movs	r1, #1
 800ce1e:	4620      	mov	r0, r4
 800ce20:	f7fa ff8e 	bl	8007d40 <ucdr_deserialize_endian_uint16_t>
 800ce24:	f995 3000 	ldrsb.w	r3, [r5]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	da01      	bge.n	800ce30 <uxr_deserialize_message_header+0x30>
 800ce2c:	b003      	add	sp, #12
 800ce2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce30:	2204      	movs	r2, #4
 800ce32:	4639      	mov	r1, r7
 800ce34:	4620      	mov	r0, r4
 800ce36:	b003      	add	sp, #12
 800ce38:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ce3c:	f005 bdaa 	b.w	8012994 <ucdr_deserialize_array_uint8_t>

0800ce40 <uxr_serialize_submessage_header>:
 800ce40:	b530      	push	{r4, r5, lr}
 800ce42:	b083      	sub	sp, #12
 800ce44:	4615      	mov	r5, r2
 800ce46:	4604      	mov	r4, r0
 800ce48:	9301      	str	r3, [sp, #4]
 800ce4a:	f7fa fdd9 	bl	8007a00 <ucdr_serialize_uint8_t>
 800ce4e:	4629      	mov	r1, r5
 800ce50:	4620      	mov	r0, r4
 800ce52:	f7fa fdd5 	bl	8007a00 <ucdr_serialize_uint8_t>
 800ce56:	9a01      	ldr	r2, [sp, #4]
 800ce58:	2101      	movs	r1, #1
 800ce5a:	4620      	mov	r0, r4
 800ce5c:	b003      	add	sp, #12
 800ce5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ce62:	f7fa be79 	b.w	8007b58 <ucdr_serialize_endian_uint16_t>
 800ce66:	bf00      	nop

0800ce68 <uxr_deserialize_submessage_header>:
 800ce68:	b530      	push	{r4, r5, lr}
 800ce6a:	b083      	sub	sp, #12
 800ce6c:	4615      	mov	r5, r2
 800ce6e:	4604      	mov	r4, r0
 800ce70:	9301      	str	r3, [sp, #4]
 800ce72:	f7fa fddb 	bl	8007a2c <ucdr_deserialize_uint8_t>
 800ce76:	4629      	mov	r1, r5
 800ce78:	4620      	mov	r0, r4
 800ce7a:	f7fa fdd7 	bl	8007a2c <ucdr_deserialize_uint8_t>
 800ce7e:	9a01      	ldr	r2, [sp, #4]
 800ce80:	2101      	movs	r1, #1
 800ce82:	4620      	mov	r0, r4
 800ce84:	b003      	add	sp, #12
 800ce86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ce8a:	f7fa bf59 	b.w	8007d40 <ucdr_deserialize_endian_uint16_t>
 800ce8e:	bf00      	nop

0800ce90 <uxr_serialize_CLIENT_Representation>:
 800ce90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce94:	2204      	movs	r2, #4
 800ce96:	460e      	mov	r6, r1
 800ce98:	4605      	mov	r5, r0
 800ce9a:	f005 fd17 	bl	80128cc <ucdr_serialize_array_uint8_t>
 800ce9e:	2202      	movs	r2, #2
 800cea0:	4607      	mov	r7, r0
 800cea2:	1d31      	adds	r1, r6, #4
 800cea4:	4628      	mov	r0, r5
 800cea6:	f005 fd11 	bl	80128cc <ucdr_serialize_array_uint8_t>
 800ceaa:	4038      	ands	r0, r7
 800ceac:	2202      	movs	r2, #2
 800ceae:	1db1      	adds	r1, r6, #6
 800ceb0:	b2c7      	uxtb	r7, r0
 800ceb2:	4628      	mov	r0, r5
 800ceb4:	f005 fd0a 	bl	80128cc <ucdr_serialize_array_uint8_t>
 800ceb8:	2204      	movs	r2, #4
 800ceba:	4007      	ands	r7, r0
 800cebc:	f106 0108 	add.w	r1, r6, #8
 800cec0:	4628      	mov	r0, r5
 800cec2:	f005 fd03 	bl	80128cc <ucdr_serialize_array_uint8_t>
 800cec6:	7b31      	ldrb	r1, [r6, #12]
 800cec8:	4007      	ands	r7, r0
 800ceca:	4628      	mov	r0, r5
 800cecc:	f7fa fd98 	bl	8007a00 <ucdr_serialize_uint8_t>
 800ced0:	7b71      	ldrb	r1, [r6, #13]
 800ced2:	4007      	ands	r7, r0
 800ced4:	4628      	mov	r0, r5
 800ced6:	f7fa fd65 	bl	80079a4 <ucdr_serialize_bool>
 800ceda:	7b73      	ldrb	r3, [r6, #13]
 800cedc:	ea07 0800 	and.w	r8, r7, r0
 800cee0:	b93b      	cbnz	r3, 800cef2 <uxr_serialize_CLIENT_Representation+0x62>
 800cee2:	8bb1      	ldrh	r1, [r6, #28]
 800cee4:	4628      	mov	r0, r5
 800cee6:	f7fa fdb7 	bl	8007a58 <ucdr_serialize_uint16_t>
 800ceea:	ea08 0000 	and.w	r0, r8, r0
 800ceee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cef2:	6931      	ldr	r1, [r6, #16]
 800cef4:	4628      	mov	r0, r5
 800cef6:	f7fa ff99 	bl	8007e2c <ucdr_serialize_uint32_t>
 800cefa:	6933      	ldr	r3, [r6, #16]
 800cefc:	b1e3      	cbz	r3, 800cf38 <uxr_serialize_CLIENT_Representation+0xa8>
 800cefe:	b1c0      	cbz	r0, 800cf32 <uxr_serialize_CLIENT_Representation+0xa2>
 800cf00:	4637      	mov	r7, r6
 800cf02:	f04f 0900 	mov.w	r9, #0
 800cf06:	e001      	b.n	800cf0c <uxr_serialize_CLIENT_Representation+0x7c>
 800cf08:	3708      	adds	r7, #8
 800cf0a:	b194      	cbz	r4, 800cf32 <uxr_serialize_CLIENT_Representation+0xa2>
 800cf0c:	6979      	ldr	r1, [r7, #20]
 800cf0e:	4628      	mov	r0, r5
 800cf10:	f005 fdfc 	bl	8012b0c <ucdr_serialize_string>
 800cf14:	69b9      	ldr	r1, [r7, #24]
 800cf16:	4604      	mov	r4, r0
 800cf18:	4628      	mov	r0, r5
 800cf1a:	f005 fdf7 	bl	8012b0c <ucdr_serialize_string>
 800cf1e:	6933      	ldr	r3, [r6, #16]
 800cf20:	f109 0901 	add.w	r9, r9, #1
 800cf24:	4004      	ands	r4, r0
 800cf26:	4599      	cmp	r9, r3
 800cf28:	b2e4      	uxtb	r4, r4
 800cf2a:	d3ed      	bcc.n	800cf08 <uxr_serialize_CLIENT_Representation+0x78>
 800cf2c:	ea08 0804 	and.w	r8, r8, r4
 800cf30:	e7d7      	b.n	800cee2 <uxr_serialize_CLIENT_Representation+0x52>
 800cf32:	f04f 0800 	mov.w	r8, #0
 800cf36:	e7d4      	b.n	800cee2 <uxr_serialize_CLIENT_Representation+0x52>
 800cf38:	ea08 0800 	and.w	r8, r8, r0
 800cf3c:	e7d1      	b.n	800cee2 <uxr_serialize_CLIENT_Representation+0x52>
 800cf3e:	bf00      	nop

0800cf40 <uxr_deserialize_CLIENT_Representation>:
 800cf40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf44:	2204      	movs	r2, #4
 800cf46:	460c      	mov	r4, r1
 800cf48:	4605      	mov	r5, r0
 800cf4a:	f005 fd23 	bl	8012994 <ucdr_deserialize_array_uint8_t>
 800cf4e:	2202      	movs	r2, #2
 800cf50:	4607      	mov	r7, r0
 800cf52:	1d21      	adds	r1, r4, #4
 800cf54:	4628      	mov	r0, r5
 800cf56:	f005 fd1d 	bl	8012994 <ucdr_deserialize_array_uint8_t>
 800cf5a:	4038      	ands	r0, r7
 800cf5c:	2202      	movs	r2, #2
 800cf5e:	1da1      	adds	r1, r4, #6
 800cf60:	b2c6      	uxtb	r6, r0
 800cf62:	4628      	mov	r0, r5
 800cf64:	f005 fd16 	bl	8012994 <ucdr_deserialize_array_uint8_t>
 800cf68:	2204      	movs	r2, #4
 800cf6a:	4006      	ands	r6, r0
 800cf6c:	f104 0108 	add.w	r1, r4, #8
 800cf70:	4628      	mov	r0, r5
 800cf72:	f005 fd0f 	bl	8012994 <ucdr_deserialize_array_uint8_t>
 800cf76:	f104 010c 	add.w	r1, r4, #12
 800cf7a:	4006      	ands	r6, r0
 800cf7c:	4628      	mov	r0, r5
 800cf7e:	f7fa fd55 	bl	8007a2c <ucdr_deserialize_uint8_t>
 800cf82:	f104 010d 	add.w	r1, r4, #13
 800cf86:	ea06 0700 	and.w	r7, r6, r0
 800cf8a:	4628      	mov	r0, r5
 800cf8c:	f7fa fd20 	bl	80079d0 <ucdr_deserialize_bool>
 800cf90:	7b63      	ldrb	r3, [r4, #13]
 800cf92:	4007      	ands	r7, r0
 800cf94:	b93b      	cbnz	r3, 800cfa6 <uxr_deserialize_CLIENT_Representation+0x66>
 800cf96:	f104 011c 	add.w	r1, r4, #28
 800cf9a:	4628      	mov	r0, r5
 800cf9c:	f7fa fe5c 	bl	8007c58 <ucdr_deserialize_uint16_t>
 800cfa0:	4038      	ands	r0, r7
 800cfa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfa6:	f104 0110 	add.w	r1, r4, #16
 800cfaa:	4628      	mov	r0, r5
 800cfac:	f7fb f86e 	bl	800808c <ucdr_deserialize_uint32_t>
 800cfb0:	6923      	ldr	r3, [r4, #16]
 800cfb2:	2b01      	cmp	r3, #1
 800cfb4:	d903      	bls.n	800cfbe <uxr_deserialize_CLIENT_Representation+0x7e>
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	75ab      	strb	r3, [r5, #22]
 800cfba:	2700      	movs	r7, #0
 800cfbc:	e7eb      	b.n	800cf96 <uxr_deserialize_CLIENT_Representation+0x56>
 800cfbe:	b30b      	cbz	r3, 800d004 <uxr_deserialize_CLIENT_Representation+0xc4>
 800cfc0:	2800      	cmp	r0, #0
 800cfc2:	d0fa      	beq.n	800cfba <uxr_deserialize_CLIENT_Representation+0x7a>
 800cfc4:	46a0      	mov	r8, r4
 800cfc6:	f04f 0900 	mov.w	r9, #0
 800cfca:	e001      	b.n	800cfd0 <uxr_deserialize_CLIENT_Representation+0x90>
 800cfcc:	2e00      	cmp	r6, #0
 800cfce:	d0f4      	beq.n	800cfba <uxr_deserialize_CLIENT_Representation+0x7a>
 800cfd0:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800cfd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cfd8:	4628      	mov	r0, r5
 800cfda:	f005 fda7 	bl	8012b2c <ucdr_deserialize_string>
 800cfde:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cfe2:	4606      	mov	r6, r0
 800cfe4:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800cfe8:	4628      	mov	r0, r5
 800cfea:	f005 fd9f 	bl	8012b2c <ucdr_deserialize_string>
 800cfee:	6923      	ldr	r3, [r4, #16]
 800cff0:	f109 0901 	add.w	r9, r9, #1
 800cff4:	4006      	ands	r6, r0
 800cff6:	4599      	cmp	r9, r3
 800cff8:	f108 0808 	add.w	r8, r8, #8
 800cffc:	b2f6      	uxtb	r6, r6
 800cffe:	d3e5      	bcc.n	800cfcc <uxr_deserialize_CLIENT_Representation+0x8c>
 800d000:	4037      	ands	r7, r6
 800d002:	e7c8      	b.n	800cf96 <uxr_deserialize_CLIENT_Representation+0x56>
 800d004:	4007      	ands	r7, r0
 800d006:	e7c6      	b.n	800cf96 <uxr_deserialize_CLIENT_Representation+0x56>

0800d008 <uxr_serialize_AGENT_Representation>:
 800d008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d00c:	2204      	movs	r2, #4
 800d00e:	460f      	mov	r7, r1
 800d010:	4605      	mov	r5, r0
 800d012:	f005 fc5b 	bl	80128cc <ucdr_serialize_array_uint8_t>
 800d016:	2202      	movs	r2, #2
 800d018:	4604      	mov	r4, r0
 800d01a:	1d39      	adds	r1, r7, #4
 800d01c:	4628      	mov	r0, r5
 800d01e:	f005 fc55 	bl	80128cc <ucdr_serialize_array_uint8_t>
 800d022:	4020      	ands	r0, r4
 800d024:	2202      	movs	r2, #2
 800d026:	1db9      	adds	r1, r7, #6
 800d028:	b2c4      	uxtb	r4, r0
 800d02a:	4628      	mov	r0, r5
 800d02c:	f005 fc4e 	bl	80128cc <ucdr_serialize_array_uint8_t>
 800d030:	7a39      	ldrb	r1, [r7, #8]
 800d032:	4004      	ands	r4, r0
 800d034:	4628      	mov	r0, r5
 800d036:	f7fa fcb5 	bl	80079a4 <ucdr_serialize_bool>
 800d03a:	7a3b      	ldrb	r3, [r7, #8]
 800d03c:	ea00 0804 	and.w	r8, r0, r4
 800d040:	b913      	cbnz	r3, 800d048 <uxr_serialize_AGENT_Representation+0x40>
 800d042:	4640      	mov	r0, r8
 800d044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d048:	68f9      	ldr	r1, [r7, #12]
 800d04a:	4628      	mov	r0, r5
 800d04c:	f7fa feee 	bl	8007e2c <ucdr_serialize_uint32_t>
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	b303      	cbz	r3, 800d096 <uxr_serialize_AGENT_Representation+0x8e>
 800d054:	b1d0      	cbz	r0, 800d08c <uxr_serialize_AGENT_Representation+0x84>
 800d056:	463e      	mov	r6, r7
 800d058:	f04f 0900 	mov.w	r9, #0
 800d05c:	e001      	b.n	800d062 <uxr_serialize_AGENT_Representation+0x5a>
 800d05e:	3608      	adds	r6, #8
 800d060:	b1a4      	cbz	r4, 800d08c <uxr_serialize_AGENT_Representation+0x84>
 800d062:	6931      	ldr	r1, [r6, #16]
 800d064:	4628      	mov	r0, r5
 800d066:	f005 fd51 	bl	8012b0c <ucdr_serialize_string>
 800d06a:	6971      	ldr	r1, [r6, #20]
 800d06c:	4604      	mov	r4, r0
 800d06e:	4628      	mov	r0, r5
 800d070:	f005 fd4c 	bl	8012b0c <ucdr_serialize_string>
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	f109 0901 	add.w	r9, r9, #1
 800d07a:	4004      	ands	r4, r0
 800d07c:	4599      	cmp	r9, r3
 800d07e:	b2e4      	uxtb	r4, r4
 800d080:	d3ed      	bcc.n	800d05e <uxr_serialize_AGENT_Representation+0x56>
 800d082:	ea08 0804 	and.w	r8, r8, r4
 800d086:	4640      	mov	r0, r8
 800d088:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d08c:	f04f 0800 	mov.w	r8, #0
 800d090:	4640      	mov	r0, r8
 800d092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d096:	ea08 0800 	and.w	r8, r8, r0
 800d09a:	e7d2      	b.n	800d042 <uxr_serialize_AGENT_Representation+0x3a>

0800d09c <uxr_serialize_DATAWRITER_Representation>:
 800d09c:	b570      	push	{r4, r5, r6, lr}
 800d09e:	460d      	mov	r5, r1
 800d0a0:	7809      	ldrb	r1, [r1, #0]
 800d0a2:	4606      	mov	r6, r0
 800d0a4:	f7fa fcac 	bl	8007a00 <ucdr_serialize_uint8_t>
 800d0a8:	4604      	mov	r4, r0
 800d0aa:	b130      	cbz	r0, 800d0ba <uxr_serialize_DATAWRITER_Representation+0x1e>
 800d0ac:	782b      	ldrb	r3, [r5, #0]
 800d0ae:	2b02      	cmp	r3, #2
 800d0b0:	d00c      	beq.n	800d0cc <uxr_serialize_DATAWRITER_Representation+0x30>
 800d0b2:	2b03      	cmp	r3, #3
 800d0b4:	d010      	beq.n	800d0d8 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800d0b6:	2b01      	cmp	r3, #1
 800d0b8:	d008      	beq.n	800d0cc <uxr_serialize_DATAWRITER_Representation+0x30>
 800d0ba:	2202      	movs	r2, #2
 800d0bc:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800d0c0:	4630      	mov	r0, r6
 800d0c2:	f005 fc03 	bl	80128cc <ucdr_serialize_array_uint8_t>
 800d0c6:	4020      	ands	r0, r4
 800d0c8:	b2c0      	uxtb	r0, r0
 800d0ca:	bd70      	pop	{r4, r5, r6, pc}
 800d0cc:	6869      	ldr	r1, [r5, #4]
 800d0ce:	4630      	mov	r0, r6
 800d0d0:	f005 fd1c 	bl	8012b0c <ucdr_serialize_string>
 800d0d4:	4604      	mov	r4, r0
 800d0d6:	e7f0      	b.n	800d0ba <uxr_serialize_DATAWRITER_Representation+0x1e>
 800d0d8:	4629      	mov	r1, r5
 800d0da:	4630      	mov	r0, r6
 800d0dc:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800d0e0:	3104      	adds	r1, #4
 800d0e2:	f005 fce7 	bl	8012ab4 <ucdr_serialize_sequence_uint8_t>
 800d0e6:	4604      	mov	r4, r0
 800d0e8:	e7e7      	b.n	800d0ba <uxr_serialize_DATAWRITER_Representation+0x1e>
 800d0ea:	bf00      	nop

0800d0ec <uxr_serialize_ObjectVariant.part.0>:
 800d0ec:	b570      	push	{r4, r5, r6, lr}
 800d0ee:	780b      	ldrb	r3, [r1, #0]
 800d0f0:	3b01      	subs	r3, #1
 800d0f2:	460c      	mov	r4, r1
 800d0f4:	4605      	mov	r5, r0
 800d0f6:	2b0d      	cmp	r3, #13
 800d0f8:	d854      	bhi.n	800d1a4 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800d0fa:	e8df f003 	tbb	[pc, r3]
 800d0fe:	0730      	.short	0x0730
 800d100:	07071b1b 	.word	0x07071b1b
 800d104:	0c530707 	.word	0x0c530707
 800d108:	494e0c0c 	.word	0x494e0c0c
 800d10c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d110:	3104      	adds	r1, #4
 800d112:	f7ff bfc3 	b.w	800d09c <uxr_serialize_DATAWRITER_Representation>
 800d116:	7909      	ldrb	r1, [r1, #4]
 800d118:	f7fa fc72 	bl	8007a00 <ucdr_serialize_uint8_t>
 800d11c:	b1e8      	cbz	r0, 800d15a <uxr_serialize_ObjectVariant.part.0+0x6e>
 800d11e:	7923      	ldrb	r3, [r4, #4]
 800d120:	2b01      	cmp	r3, #1
 800d122:	d001      	beq.n	800d128 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800d124:	2b02      	cmp	r3, #2
 800d126:	d13d      	bne.n	800d1a4 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800d128:	68a1      	ldr	r1, [r4, #8]
 800d12a:	4628      	mov	r0, r5
 800d12c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d130:	f005 bcec 	b.w	8012b0c <ucdr_serialize_string>
 800d134:	7909      	ldrb	r1, [r1, #4]
 800d136:	f7fa fc63 	bl	8007a00 <ucdr_serialize_uint8_t>
 800d13a:	4606      	mov	r6, r0
 800d13c:	b120      	cbz	r0, 800d148 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800d13e:	7923      	ldrb	r3, [r4, #4]
 800d140:	2b02      	cmp	r3, #2
 800d142:	d039      	beq.n	800d1b8 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800d144:	2b03      	cmp	r3, #3
 800d146:	d02f      	beq.n	800d1a8 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800d148:	2202      	movs	r2, #2
 800d14a:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800d14e:	4628      	mov	r0, r5
 800d150:	f005 fbbc 	bl	80128cc <ucdr_serialize_array_uint8_t>
 800d154:	4030      	ands	r0, r6
 800d156:	b2c0      	uxtb	r0, r0
 800d158:	bd70      	pop	{r4, r5, r6, pc}
 800d15a:	2000      	movs	r0, #0
 800d15c:	bd70      	pop	{r4, r5, r6, pc}
 800d15e:	7909      	ldrb	r1, [r1, #4]
 800d160:	f7fa fc4e 	bl	8007a00 <ucdr_serialize_uint8_t>
 800d164:	4606      	mov	r6, r0
 800d166:	b158      	cbz	r0, 800d180 <uxr_serialize_ObjectVariant.part.0+0x94>
 800d168:	7923      	ldrb	r3, [r4, #4]
 800d16a:	2b02      	cmp	r3, #2
 800d16c:	d003      	beq.n	800d176 <uxr_serialize_ObjectVariant.part.0+0x8a>
 800d16e:	2b03      	cmp	r3, #3
 800d170:	d028      	beq.n	800d1c4 <uxr_serialize_ObjectVariant.part.0+0xd8>
 800d172:	2b01      	cmp	r3, #1
 800d174:	d104      	bne.n	800d180 <uxr_serialize_ObjectVariant.part.0+0x94>
 800d176:	68a1      	ldr	r1, [r4, #8]
 800d178:	4628      	mov	r0, r5
 800d17a:	f005 fcc7 	bl	8012b0c <ucdr_serialize_string>
 800d17e:	4606      	mov	r6, r0
 800d180:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 800d184:	4628      	mov	r0, r5
 800d186:	f7fb f977 	bl	8008478 <ucdr_serialize_int16_t>
 800d18a:	4030      	ands	r0, r6
 800d18c:	b2c0      	uxtb	r0, r0
 800d18e:	bd70      	pop	{r4, r5, r6, pc}
 800d190:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d194:	3104      	adds	r1, #4
 800d196:	f7ff be7b 	b.w	800ce90 <uxr_serialize_CLIENT_Representation>
 800d19a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d19e:	3104      	adds	r1, #4
 800d1a0:	f7ff bf32 	b.w	800d008 <uxr_serialize_AGENT_Representation>
 800d1a4:	2001      	movs	r0, #1
 800d1a6:	bd70      	pop	{r4, r5, r6, pc}
 800d1a8:	68a2      	ldr	r2, [r4, #8]
 800d1aa:	f104 010c 	add.w	r1, r4, #12
 800d1ae:	4628      	mov	r0, r5
 800d1b0:	f005 fc80 	bl	8012ab4 <ucdr_serialize_sequence_uint8_t>
 800d1b4:	4606      	mov	r6, r0
 800d1b6:	e7c7      	b.n	800d148 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800d1b8:	68a1      	ldr	r1, [r4, #8]
 800d1ba:	4628      	mov	r0, r5
 800d1bc:	f005 fca6 	bl	8012b0c <ucdr_serialize_string>
 800d1c0:	4606      	mov	r6, r0
 800d1c2:	e7c1      	b.n	800d148 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800d1c4:	68a2      	ldr	r2, [r4, #8]
 800d1c6:	f104 010c 	add.w	r1, r4, #12
 800d1ca:	4628      	mov	r0, r5
 800d1cc:	f005 fc72 	bl	8012ab4 <ucdr_serialize_sequence_uint8_t>
 800d1d0:	4606      	mov	r6, r0
 800d1d2:	e7d5      	b.n	800d180 <uxr_serialize_ObjectVariant.part.0+0x94>

0800d1d4 <uxr_deserialize_DATAWRITER_Representation>:
 800d1d4:	b570      	push	{r4, r5, r6, lr}
 800d1d6:	4606      	mov	r6, r0
 800d1d8:	460d      	mov	r5, r1
 800d1da:	f7fa fc27 	bl	8007a2c <ucdr_deserialize_uint8_t>
 800d1de:	4604      	mov	r4, r0
 800d1e0:	b130      	cbz	r0, 800d1f0 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800d1e2:	782b      	ldrb	r3, [r5, #0]
 800d1e4:	2b02      	cmp	r3, #2
 800d1e6:	d00c      	beq.n	800d202 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800d1e8:	2b03      	cmp	r3, #3
 800d1ea:	d012      	beq.n	800d212 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800d1ec:	2b01      	cmp	r3, #1
 800d1ee:	d008      	beq.n	800d202 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800d1f0:	2202      	movs	r2, #2
 800d1f2:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800d1f6:	4630      	mov	r0, r6
 800d1f8:	f005 fbcc 	bl	8012994 <ucdr_deserialize_array_uint8_t>
 800d1fc:	4020      	ands	r0, r4
 800d1fe:	b2c0      	uxtb	r0, r0
 800d200:	bd70      	pop	{r4, r5, r6, pc}
 800d202:	6869      	ldr	r1, [r5, #4]
 800d204:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d208:	4630      	mov	r0, r6
 800d20a:	f005 fc8f 	bl	8012b2c <ucdr_deserialize_string>
 800d20e:	4604      	mov	r4, r0
 800d210:	e7ee      	b.n	800d1f0 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800d212:	1d2b      	adds	r3, r5, #4
 800d214:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d218:	f105 0108 	add.w	r1, r5, #8
 800d21c:	4630      	mov	r0, r6
 800d21e:	f005 fc5b 	bl	8012ad8 <ucdr_deserialize_sequence_uint8_t>
 800d222:	4604      	mov	r4, r0
 800d224:	e7e4      	b.n	800d1f0 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800d226:	bf00      	nop

0800d228 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800d228:	b570      	push	{r4, r5, r6, lr}
 800d22a:	460d      	mov	r5, r1
 800d22c:	7809      	ldrb	r1, [r1, #0]
 800d22e:	4606      	mov	r6, r0
 800d230:	f7fa fbb8 	bl	80079a4 <ucdr_serialize_bool>
 800d234:	782b      	ldrb	r3, [r5, #0]
 800d236:	4604      	mov	r4, r0
 800d238:	b94b      	cbnz	r3, 800d24e <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800d23a:	7a29      	ldrb	r1, [r5, #8]
 800d23c:	4630      	mov	r0, r6
 800d23e:	f7fa fbb1 	bl	80079a4 <ucdr_serialize_bool>
 800d242:	7a2b      	ldrb	r3, [r5, #8]
 800d244:	4004      	ands	r4, r0
 800d246:	b2e4      	uxtb	r4, r4
 800d248:	b943      	cbnz	r3, 800d25c <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800d24a:	4620      	mov	r0, r4
 800d24c:	bd70      	pop	{r4, r5, r6, pc}
 800d24e:	6869      	ldr	r1, [r5, #4]
 800d250:	4630      	mov	r0, r6
 800d252:	f005 fc5b 	bl	8012b0c <ucdr_serialize_string>
 800d256:	4004      	ands	r4, r0
 800d258:	b2e4      	uxtb	r4, r4
 800d25a:	e7ee      	b.n	800d23a <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800d25c:	68e9      	ldr	r1, [r5, #12]
 800d25e:	4630      	mov	r0, r6
 800d260:	f005 fc54 	bl	8012b0c <ucdr_serialize_string>
 800d264:	4004      	ands	r4, r0
 800d266:	4620      	mov	r0, r4
 800d268:	bd70      	pop	{r4, r5, r6, pc}
 800d26a:	bf00      	nop

0800d26c <uxr_serialize_OBJK_Topic_Binary>:
 800d26c:	b570      	push	{r4, r5, r6, lr}
 800d26e:	460d      	mov	r5, r1
 800d270:	6809      	ldr	r1, [r1, #0]
 800d272:	4606      	mov	r6, r0
 800d274:	f005 fc4a 	bl	8012b0c <ucdr_serialize_string>
 800d278:	7929      	ldrb	r1, [r5, #4]
 800d27a:	4604      	mov	r4, r0
 800d27c:	4630      	mov	r0, r6
 800d27e:	f7fa fb91 	bl	80079a4 <ucdr_serialize_bool>
 800d282:	792b      	ldrb	r3, [r5, #4]
 800d284:	4004      	ands	r4, r0
 800d286:	b2e4      	uxtb	r4, r4
 800d288:	b943      	cbnz	r3, 800d29c <uxr_serialize_OBJK_Topic_Binary+0x30>
 800d28a:	7b29      	ldrb	r1, [r5, #12]
 800d28c:	4630      	mov	r0, r6
 800d28e:	f7fa fb89 	bl	80079a4 <ucdr_serialize_bool>
 800d292:	7b2b      	ldrb	r3, [r5, #12]
 800d294:	4004      	ands	r4, r0
 800d296:	b93b      	cbnz	r3, 800d2a8 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800d298:	4620      	mov	r0, r4
 800d29a:	bd70      	pop	{r4, r5, r6, pc}
 800d29c:	68a9      	ldr	r1, [r5, #8]
 800d29e:	4630      	mov	r0, r6
 800d2a0:	f005 fc34 	bl	8012b0c <ucdr_serialize_string>
 800d2a4:	4004      	ands	r4, r0
 800d2a6:	e7f0      	b.n	800d28a <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800d2a8:	6929      	ldr	r1, [r5, #16]
 800d2aa:	4630      	mov	r0, r6
 800d2ac:	f005 fc2e 	bl	8012b0c <ucdr_serialize_string>
 800d2b0:	4004      	ands	r4, r0
 800d2b2:	b2e4      	uxtb	r4, r4
 800d2b4:	4620      	mov	r0, r4
 800d2b6:	bd70      	pop	{r4, r5, r6, pc}

0800d2b8 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800d2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2bc:	460c      	mov	r4, r1
 800d2be:	7809      	ldrb	r1, [r1, #0]
 800d2c0:	4606      	mov	r6, r0
 800d2c2:	f7fa fb6f 	bl	80079a4 <ucdr_serialize_bool>
 800d2c6:	7823      	ldrb	r3, [r4, #0]
 800d2c8:	4605      	mov	r5, r0
 800d2ca:	b96b      	cbnz	r3, 800d2e8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800d2cc:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800d2d0:	4630      	mov	r0, r6
 800d2d2:	f7fa fb67 	bl	80079a4 <ucdr_serialize_bool>
 800d2d6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800d2da:	4005      	ands	r5, r0
 800d2dc:	b2ed      	uxtb	r5, r5
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d169      	bne.n	800d3b6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800d2e2:	4628      	mov	r0, r5
 800d2e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2e8:	6861      	ldr	r1, [r4, #4]
 800d2ea:	4630      	mov	r0, r6
 800d2ec:	f7fa fd9e 	bl	8007e2c <ucdr_serialize_uint32_t>
 800d2f0:	6863      	ldr	r3, [r4, #4]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d06b      	beq.n	800d3ce <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800d2f6:	2800      	cmp	r0, #0
 800d2f8:	d067      	beq.n	800d3ca <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d2fa:	68a1      	ldr	r1, [r4, #8]
 800d2fc:	4630      	mov	r0, r6
 800d2fe:	f005 fc05 	bl	8012b0c <ucdr_serialize_string>
 800d302:	6863      	ldr	r3, [r4, #4]
 800d304:	2b01      	cmp	r3, #1
 800d306:	d953      	bls.n	800d3b0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d308:	2800      	cmp	r0, #0
 800d30a:	d05e      	beq.n	800d3ca <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d30c:	68e1      	ldr	r1, [r4, #12]
 800d30e:	4630      	mov	r0, r6
 800d310:	f005 fbfc 	bl	8012b0c <ucdr_serialize_string>
 800d314:	6863      	ldr	r3, [r4, #4]
 800d316:	2b02      	cmp	r3, #2
 800d318:	d94a      	bls.n	800d3b0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d31a:	2800      	cmp	r0, #0
 800d31c:	d055      	beq.n	800d3ca <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d31e:	6921      	ldr	r1, [r4, #16]
 800d320:	4630      	mov	r0, r6
 800d322:	f005 fbf3 	bl	8012b0c <ucdr_serialize_string>
 800d326:	6863      	ldr	r3, [r4, #4]
 800d328:	2b03      	cmp	r3, #3
 800d32a:	d941      	bls.n	800d3b0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d32c:	2800      	cmp	r0, #0
 800d32e:	d04c      	beq.n	800d3ca <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d330:	6961      	ldr	r1, [r4, #20]
 800d332:	4630      	mov	r0, r6
 800d334:	f005 fbea 	bl	8012b0c <ucdr_serialize_string>
 800d338:	6863      	ldr	r3, [r4, #4]
 800d33a:	2b04      	cmp	r3, #4
 800d33c:	d938      	bls.n	800d3b0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d33e:	2800      	cmp	r0, #0
 800d340:	d043      	beq.n	800d3ca <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d342:	69a1      	ldr	r1, [r4, #24]
 800d344:	4630      	mov	r0, r6
 800d346:	f005 fbe1 	bl	8012b0c <ucdr_serialize_string>
 800d34a:	6863      	ldr	r3, [r4, #4]
 800d34c:	2b05      	cmp	r3, #5
 800d34e:	d92f      	bls.n	800d3b0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d350:	2800      	cmp	r0, #0
 800d352:	d03a      	beq.n	800d3ca <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d354:	69e1      	ldr	r1, [r4, #28]
 800d356:	4630      	mov	r0, r6
 800d358:	f005 fbd8 	bl	8012b0c <ucdr_serialize_string>
 800d35c:	6863      	ldr	r3, [r4, #4]
 800d35e:	2b06      	cmp	r3, #6
 800d360:	d926      	bls.n	800d3b0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d362:	b390      	cbz	r0, 800d3ca <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d364:	6a21      	ldr	r1, [r4, #32]
 800d366:	4630      	mov	r0, r6
 800d368:	f005 fbd0 	bl	8012b0c <ucdr_serialize_string>
 800d36c:	6863      	ldr	r3, [r4, #4]
 800d36e:	2b07      	cmp	r3, #7
 800d370:	d91e      	bls.n	800d3b0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d372:	b350      	cbz	r0, 800d3ca <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d374:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d376:	4630      	mov	r0, r6
 800d378:	f005 fbc8 	bl	8012b0c <ucdr_serialize_string>
 800d37c:	6863      	ldr	r3, [r4, #4]
 800d37e:	2b08      	cmp	r3, #8
 800d380:	d916      	bls.n	800d3b0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d382:	b310      	cbz	r0, 800d3ca <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d384:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800d386:	4630      	mov	r0, r6
 800d388:	f005 fbc0 	bl	8012b0c <ucdr_serialize_string>
 800d38c:	6863      	ldr	r3, [r4, #4]
 800d38e:	2b09      	cmp	r3, #9
 800d390:	d90e      	bls.n	800d3b0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800d392:	b1d0      	cbz	r0, 800d3ca <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d394:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800d398:	2709      	movs	r7, #9
 800d39a:	e000      	b.n	800d39e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800d39c:	b1a8      	cbz	r0, 800d3ca <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800d39e:	f858 1b04 	ldr.w	r1, [r8], #4
 800d3a2:	4630      	mov	r0, r6
 800d3a4:	f005 fbb2 	bl	8012b0c <ucdr_serialize_string>
 800d3a8:	6862      	ldr	r2, [r4, #4]
 800d3aa:	3701      	adds	r7, #1
 800d3ac:	4297      	cmp	r7, r2
 800d3ae:	d3f5      	bcc.n	800d39c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800d3b0:	4005      	ands	r5, r0
 800d3b2:	b2ed      	uxtb	r5, r5
 800d3b4:	e78a      	b.n	800d2cc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800d3b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d3b8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800d3bc:	4630      	mov	r0, r6
 800d3be:	f005 fb79 	bl	8012ab4 <ucdr_serialize_sequence_uint8_t>
 800d3c2:	4005      	ands	r5, r0
 800d3c4:	4628      	mov	r0, r5
 800d3c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3ca:	2500      	movs	r5, #0
 800d3cc:	e77e      	b.n	800d2cc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800d3ce:	4028      	ands	r0, r5
 800d3d0:	b2c5      	uxtb	r5, r0
 800d3d2:	e77b      	b.n	800d2cc <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800d3d4 <uxr_serialize_OBJK_Publisher_Binary>:
 800d3d4:	b570      	push	{r4, r5, r6, lr}
 800d3d6:	460d      	mov	r5, r1
 800d3d8:	7809      	ldrb	r1, [r1, #0]
 800d3da:	4606      	mov	r6, r0
 800d3dc:	f7fa fae2 	bl	80079a4 <ucdr_serialize_bool>
 800d3e0:	782b      	ldrb	r3, [r5, #0]
 800d3e2:	4604      	mov	r4, r0
 800d3e4:	b94b      	cbnz	r3, 800d3fa <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800d3e6:	7a29      	ldrb	r1, [r5, #8]
 800d3e8:	4630      	mov	r0, r6
 800d3ea:	f7fa fadb 	bl	80079a4 <ucdr_serialize_bool>
 800d3ee:	7a2b      	ldrb	r3, [r5, #8]
 800d3f0:	4004      	ands	r4, r0
 800d3f2:	b2e4      	uxtb	r4, r4
 800d3f4:	b943      	cbnz	r3, 800d408 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800d3f6:	4620      	mov	r0, r4
 800d3f8:	bd70      	pop	{r4, r5, r6, pc}
 800d3fa:	6869      	ldr	r1, [r5, #4]
 800d3fc:	4630      	mov	r0, r6
 800d3fe:	f005 fb85 	bl	8012b0c <ucdr_serialize_string>
 800d402:	4004      	ands	r4, r0
 800d404:	b2e4      	uxtb	r4, r4
 800d406:	e7ee      	b.n	800d3e6 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800d408:	f105 010c 	add.w	r1, r5, #12
 800d40c:	4630      	mov	r0, r6
 800d40e:	f7ff ff53 	bl	800d2b8 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800d412:	4004      	ands	r4, r0
 800d414:	4620      	mov	r0, r4
 800d416:	bd70      	pop	{r4, r5, r6, pc}

0800d418 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 800d418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d41c:	460c      	mov	r4, r1
 800d41e:	7809      	ldrb	r1, [r1, #0]
 800d420:	4606      	mov	r6, r0
 800d422:	f7fa fabf 	bl	80079a4 <ucdr_serialize_bool>
 800d426:	7823      	ldrb	r3, [r4, #0]
 800d428:	4605      	mov	r5, r0
 800d42a:	b96b      	cbnz	r3, 800d448 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 800d42c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800d430:	4630      	mov	r0, r6
 800d432:	f7fa fab7 	bl	80079a4 <ucdr_serialize_bool>
 800d436:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800d43a:	4005      	ands	r5, r0
 800d43c:	b2ed      	uxtb	r5, r5
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d169      	bne.n	800d516 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 800d442:	4628      	mov	r0, r5
 800d444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d448:	6861      	ldr	r1, [r4, #4]
 800d44a:	4630      	mov	r0, r6
 800d44c:	f7fa fcee 	bl	8007e2c <ucdr_serialize_uint32_t>
 800d450:	6863      	ldr	r3, [r4, #4]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d06b      	beq.n	800d52e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 800d456:	2800      	cmp	r0, #0
 800d458:	d067      	beq.n	800d52a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d45a:	68a1      	ldr	r1, [r4, #8]
 800d45c:	4630      	mov	r0, r6
 800d45e:	f005 fb55 	bl	8012b0c <ucdr_serialize_string>
 800d462:	6863      	ldr	r3, [r4, #4]
 800d464:	2b01      	cmp	r3, #1
 800d466:	d953      	bls.n	800d510 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d468:	2800      	cmp	r0, #0
 800d46a:	d05e      	beq.n	800d52a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d46c:	68e1      	ldr	r1, [r4, #12]
 800d46e:	4630      	mov	r0, r6
 800d470:	f005 fb4c 	bl	8012b0c <ucdr_serialize_string>
 800d474:	6863      	ldr	r3, [r4, #4]
 800d476:	2b02      	cmp	r3, #2
 800d478:	d94a      	bls.n	800d510 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d47a:	2800      	cmp	r0, #0
 800d47c:	d055      	beq.n	800d52a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d47e:	6921      	ldr	r1, [r4, #16]
 800d480:	4630      	mov	r0, r6
 800d482:	f005 fb43 	bl	8012b0c <ucdr_serialize_string>
 800d486:	6863      	ldr	r3, [r4, #4]
 800d488:	2b03      	cmp	r3, #3
 800d48a:	d941      	bls.n	800d510 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d48c:	2800      	cmp	r0, #0
 800d48e:	d04c      	beq.n	800d52a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d490:	6961      	ldr	r1, [r4, #20]
 800d492:	4630      	mov	r0, r6
 800d494:	f005 fb3a 	bl	8012b0c <ucdr_serialize_string>
 800d498:	6863      	ldr	r3, [r4, #4]
 800d49a:	2b04      	cmp	r3, #4
 800d49c:	d938      	bls.n	800d510 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d49e:	2800      	cmp	r0, #0
 800d4a0:	d043      	beq.n	800d52a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d4a2:	69a1      	ldr	r1, [r4, #24]
 800d4a4:	4630      	mov	r0, r6
 800d4a6:	f005 fb31 	bl	8012b0c <ucdr_serialize_string>
 800d4aa:	6863      	ldr	r3, [r4, #4]
 800d4ac:	2b05      	cmp	r3, #5
 800d4ae:	d92f      	bls.n	800d510 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d4b0:	2800      	cmp	r0, #0
 800d4b2:	d03a      	beq.n	800d52a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d4b4:	69e1      	ldr	r1, [r4, #28]
 800d4b6:	4630      	mov	r0, r6
 800d4b8:	f005 fb28 	bl	8012b0c <ucdr_serialize_string>
 800d4bc:	6863      	ldr	r3, [r4, #4]
 800d4be:	2b06      	cmp	r3, #6
 800d4c0:	d926      	bls.n	800d510 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d4c2:	b390      	cbz	r0, 800d52a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d4c4:	6a21      	ldr	r1, [r4, #32]
 800d4c6:	4630      	mov	r0, r6
 800d4c8:	f005 fb20 	bl	8012b0c <ucdr_serialize_string>
 800d4cc:	6863      	ldr	r3, [r4, #4]
 800d4ce:	2b07      	cmp	r3, #7
 800d4d0:	d91e      	bls.n	800d510 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d4d2:	b350      	cbz	r0, 800d52a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d4d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d4d6:	4630      	mov	r0, r6
 800d4d8:	f005 fb18 	bl	8012b0c <ucdr_serialize_string>
 800d4dc:	6863      	ldr	r3, [r4, #4]
 800d4de:	2b08      	cmp	r3, #8
 800d4e0:	d916      	bls.n	800d510 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d4e2:	b310      	cbz	r0, 800d52a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d4e4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800d4e6:	4630      	mov	r0, r6
 800d4e8:	f005 fb10 	bl	8012b0c <ucdr_serialize_string>
 800d4ec:	6863      	ldr	r3, [r4, #4]
 800d4ee:	2b09      	cmp	r3, #9
 800d4f0:	d90e      	bls.n	800d510 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 800d4f2:	b1d0      	cbz	r0, 800d52a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d4f4:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800d4f8:	2709      	movs	r7, #9
 800d4fa:	e000      	b.n	800d4fe <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 800d4fc:	b1a8      	cbz	r0, 800d52a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 800d4fe:	f858 1b04 	ldr.w	r1, [r8], #4
 800d502:	4630      	mov	r0, r6
 800d504:	f005 fb02 	bl	8012b0c <ucdr_serialize_string>
 800d508:	6862      	ldr	r2, [r4, #4]
 800d50a:	3701      	adds	r7, #1
 800d50c:	4297      	cmp	r7, r2
 800d50e:	d3f5      	bcc.n	800d4fc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 800d510:	4005      	ands	r5, r0
 800d512:	b2ed      	uxtb	r5, r5
 800d514:	e78a      	b.n	800d42c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800d516:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d518:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800d51c:	4630      	mov	r0, r6
 800d51e:	f005 fac9 	bl	8012ab4 <ucdr_serialize_sequence_uint8_t>
 800d522:	4005      	ands	r5, r0
 800d524:	4628      	mov	r0, r5
 800d526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d52a:	2500      	movs	r5, #0
 800d52c:	e77e      	b.n	800d42c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 800d52e:	4028      	ands	r0, r5
 800d530:	b2c5      	uxtb	r5, r0
 800d532:	e77b      	b.n	800d42c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

0800d534 <uxr_serialize_OBJK_Subscriber_Binary>:
 800d534:	b570      	push	{r4, r5, r6, lr}
 800d536:	460d      	mov	r5, r1
 800d538:	7809      	ldrb	r1, [r1, #0]
 800d53a:	4606      	mov	r6, r0
 800d53c:	f7fa fa32 	bl	80079a4 <ucdr_serialize_bool>
 800d540:	782b      	ldrb	r3, [r5, #0]
 800d542:	4604      	mov	r4, r0
 800d544:	b94b      	cbnz	r3, 800d55a <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 800d546:	7a29      	ldrb	r1, [r5, #8]
 800d548:	4630      	mov	r0, r6
 800d54a:	f7fa fa2b 	bl	80079a4 <ucdr_serialize_bool>
 800d54e:	7a2b      	ldrb	r3, [r5, #8]
 800d550:	4004      	ands	r4, r0
 800d552:	b2e4      	uxtb	r4, r4
 800d554:	b943      	cbnz	r3, 800d568 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 800d556:	4620      	mov	r0, r4
 800d558:	bd70      	pop	{r4, r5, r6, pc}
 800d55a:	6869      	ldr	r1, [r5, #4]
 800d55c:	4630      	mov	r0, r6
 800d55e:	f005 fad5 	bl	8012b0c <ucdr_serialize_string>
 800d562:	4004      	ands	r4, r0
 800d564:	b2e4      	uxtb	r4, r4
 800d566:	e7ee      	b.n	800d546 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 800d568:	f105 010c 	add.w	r1, r5, #12
 800d56c:	4630      	mov	r0, r6
 800d56e:	f7ff ff53 	bl	800d418 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 800d572:	4004      	ands	r4, r0
 800d574:	4620      	mov	r0, r4
 800d576:	bd70      	pop	{r4, r5, r6, pc}

0800d578 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800d578:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800d57c:	4688      	mov	r8, r1
 800d57e:	8809      	ldrh	r1, [r1, #0]
 800d580:	4681      	mov	r9, r0
 800d582:	f7fa fa69 	bl	8007a58 <ucdr_serialize_uint16_t>
 800d586:	f898 1002 	ldrb.w	r1, [r8, #2]
 800d58a:	4606      	mov	r6, r0
 800d58c:	4648      	mov	r0, r9
 800d58e:	f7fa fa09 	bl	80079a4 <ucdr_serialize_bool>
 800d592:	f898 3002 	ldrb.w	r3, [r8, #2]
 800d596:	4006      	ands	r6, r0
 800d598:	b2f5      	uxtb	r5, r6
 800d59a:	b9eb      	cbnz	r3, 800d5d8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800d59c:	f898 1006 	ldrb.w	r1, [r8, #6]
 800d5a0:	4648      	mov	r0, r9
 800d5a2:	f7fa f9ff 	bl	80079a4 <ucdr_serialize_bool>
 800d5a6:	f898 3006 	ldrb.w	r3, [r8, #6]
 800d5aa:	4005      	ands	r5, r0
 800d5ac:	bb7b      	cbnz	r3, 800d60e <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800d5ae:	f898 100c 	ldrb.w	r1, [r8, #12]
 800d5b2:	4648      	mov	r0, r9
 800d5b4:	f7fa f9f6 	bl	80079a4 <ucdr_serialize_bool>
 800d5b8:	f898 300c 	ldrb.w	r3, [r8, #12]
 800d5bc:	4005      	ands	r5, r0
 800d5be:	b9f3      	cbnz	r3, 800d5fe <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800d5c0:	f898 1014 	ldrb.w	r1, [r8, #20]
 800d5c4:	4648      	mov	r0, r9
 800d5c6:	f7fa f9ed 	bl	80079a4 <ucdr_serialize_bool>
 800d5ca:	f898 3014 	ldrb.w	r3, [r8, #20]
 800d5ce:	4005      	ands	r5, r0
 800d5d0:	b94b      	cbnz	r3, 800d5e6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800d5d2:	4628      	mov	r0, r5
 800d5d4:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800d5d8:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800d5dc:	4648      	mov	r0, r9
 800d5de:	f7fa fa3b 	bl	8007a58 <ucdr_serialize_uint16_t>
 800d5e2:	4005      	ands	r5, r0
 800d5e4:	e7da      	b.n	800d59c <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800d5e6:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800d5ea:	f108 011c 	add.w	r1, r8, #28
 800d5ee:	4648      	mov	r0, r9
 800d5f0:	f005 fa60 	bl	8012ab4 <ucdr_serialize_sequence_uint8_t>
 800d5f4:	4028      	ands	r0, r5
 800d5f6:	b2c5      	uxtb	r5, r0
 800d5f8:	4628      	mov	r0, r5
 800d5fa:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800d5fe:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d602:	4648      	mov	r0, r9
 800d604:	f7fa fc12 	bl	8007e2c <ucdr_serialize_uint32_t>
 800d608:	4028      	ands	r0, r5
 800d60a:	b2c5      	uxtb	r5, r0
 800d60c:	e7d8      	b.n	800d5c0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800d60e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800d612:	4648      	mov	r0, r9
 800d614:	f7fa fc0a 	bl	8007e2c <ucdr_serialize_uint32_t>
 800d618:	4028      	ands	r0, r5
 800d61a:	b2c5      	uxtb	r5, r0
 800d61c:	e7c7      	b.n	800d5ae <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800d61e:	bf00      	nop

0800d620 <uxr_serialize_OBJK_DataReader_Binary>:
 800d620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d622:	2202      	movs	r2, #2
 800d624:	460c      	mov	r4, r1
 800d626:	4606      	mov	r6, r0
 800d628:	f005 f950 	bl	80128cc <ucdr_serialize_array_uint8_t>
 800d62c:	78a1      	ldrb	r1, [r4, #2]
 800d62e:	4605      	mov	r5, r0
 800d630:	4630      	mov	r0, r6
 800d632:	f7fa f9b7 	bl	80079a4 <ucdr_serialize_bool>
 800d636:	78a3      	ldrb	r3, [r4, #2]
 800d638:	4005      	ands	r5, r0
 800d63a:	b2ed      	uxtb	r5, r5
 800d63c:	b90b      	cbnz	r3, 800d642 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 800d63e:	4628      	mov	r0, r5
 800d640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d642:	f104 0108 	add.w	r1, r4, #8
 800d646:	4630      	mov	r0, r6
 800d648:	f7ff ff96 	bl	800d578 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800d64c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800d650:	4607      	mov	r7, r0
 800d652:	4630      	mov	r0, r6
 800d654:	f7fa f9a6 	bl	80079a4 <ucdr_serialize_bool>
 800d658:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800d65c:	4038      	ands	r0, r7
 800d65e:	b2c7      	uxtb	r7, r0
 800d660:	b95b      	cbnz	r3, 800d67a <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 800d662:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 800d666:	4630      	mov	r0, r6
 800d668:	f7fa f99c 	bl	80079a4 <ucdr_serialize_bool>
 800d66c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800d670:	4007      	ands	r7, r0
 800d672:	b94b      	cbnz	r3, 800d688 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 800d674:	403d      	ands	r5, r7
 800d676:	4628      	mov	r0, r5
 800d678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d67a:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 800d67e:	4630      	mov	r0, r6
 800d680:	f7fa fe2a 	bl	80082d8 <ucdr_serialize_uint64_t>
 800d684:	4007      	ands	r7, r0
 800d686:	e7ec      	b.n	800d662 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 800d688:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d68a:	4630      	mov	r0, r6
 800d68c:	f005 fa3e 	bl	8012b0c <ucdr_serialize_string>
 800d690:	4007      	ands	r7, r0
 800d692:	b2ff      	uxtb	r7, r7
 800d694:	e7ee      	b.n	800d674 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 800d696:	bf00      	nop

0800d698 <uxr_serialize_OBJK_DataWriter_Binary>:
 800d698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d69a:	2202      	movs	r2, #2
 800d69c:	460d      	mov	r5, r1
 800d69e:	4606      	mov	r6, r0
 800d6a0:	f005 f914 	bl	80128cc <ucdr_serialize_array_uint8_t>
 800d6a4:	78a9      	ldrb	r1, [r5, #2]
 800d6a6:	4604      	mov	r4, r0
 800d6a8:	4630      	mov	r0, r6
 800d6aa:	f7fa f97b 	bl	80079a4 <ucdr_serialize_bool>
 800d6ae:	78ab      	ldrb	r3, [r5, #2]
 800d6b0:	4004      	ands	r4, r0
 800d6b2:	b2e4      	uxtb	r4, r4
 800d6b4:	b90b      	cbnz	r3, 800d6ba <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800d6b6:	4620      	mov	r0, r4
 800d6b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6ba:	f105 0108 	add.w	r1, r5, #8
 800d6be:	4630      	mov	r0, r6
 800d6c0:	f7ff ff5a 	bl	800d578 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800d6c4:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 800d6c8:	4607      	mov	r7, r0
 800d6ca:	4630      	mov	r0, r6
 800d6cc:	f7fa f96a 	bl	80079a4 <ucdr_serialize_bool>
 800d6d0:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800d6d4:	4038      	ands	r0, r7
 800d6d6:	b2c7      	uxtb	r7, r0
 800d6d8:	b913      	cbnz	r3, 800d6e0 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800d6da:	403c      	ands	r4, r7
 800d6dc:	4620      	mov	r0, r4
 800d6de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6e0:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 800d6e4:	4630      	mov	r0, r6
 800d6e6:	f7fa fdf7 	bl	80082d8 <ucdr_serialize_uint64_t>
 800d6ea:	4007      	ands	r7, r0
 800d6ec:	e7f5      	b.n	800d6da <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800d6ee:	bf00      	nop

0800d6f0 <uxr_deserialize_ObjectVariant>:
 800d6f0:	b570      	push	{r4, r5, r6, lr}
 800d6f2:	4605      	mov	r5, r0
 800d6f4:	460e      	mov	r6, r1
 800d6f6:	f7fa f999 	bl	8007a2c <ucdr_deserialize_uint8_t>
 800d6fa:	b168      	cbz	r0, 800d718 <uxr_deserialize_ObjectVariant+0x28>
 800d6fc:	7833      	ldrb	r3, [r6, #0]
 800d6fe:	3b01      	subs	r3, #1
 800d700:	4604      	mov	r4, r0
 800d702:	2b0d      	cmp	r3, #13
 800d704:	d809      	bhi.n	800d71a <uxr_deserialize_ObjectVariant+0x2a>
 800d706:	e8df f003 	tbb	[pc, r3]
 800d70a:	0a41      	.short	0x0a41
 800d70c:	0a0a2323 	.word	0x0a0a2323
 800d710:	10080a0a 	.word	0x10080a0a
 800d714:	565c1010 	.word	0x565c1010
 800d718:	2400      	movs	r4, #0
 800d71a:	4620      	mov	r0, r4
 800d71c:	bd70      	pop	{r4, r5, r6, pc}
 800d71e:	1d31      	adds	r1, r6, #4
 800d720:	4628      	mov	r0, r5
 800d722:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d726:	f7ff bd55 	b.w	800d1d4 <uxr_deserialize_DATAWRITER_Representation>
 800d72a:	1d31      	adds	r1, r6, #4
 800d72c:	4628      	mov	r0, r5
 800d72e:	f7fa f97d 	bl	8007a2c <ucdr_deserialize_uint8_t>
 800d732:	2800      	cmp	r0, #0
 800d734:	d0f0      	beq.n	800d718 <uxr_deserialize_ObjectVariant+0x28>
 800d736:	7933      	ldrb	r3, [r6, #4]
 800d738:	2b01      	cmp	r3, #1
 800d73a:	d001      	beq.n	800d740 <uxr_deserialize_ObjectVariant+0x50>
 800d73c:	2b02      	cmp	r3, #2
 800d73e:	d1ec      	bne.n	800d71a <uxr_deserialize_ObjectVariant+0x2a>
 800d740:	68b1      	ldr	r1, [r6, #8]
 800d742:	4628      	mov	r0, r5
 800d744:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d748:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d74c:	f005 b9ee 	b.w	8012b2c <ucdr_deserialize_string>
 800d750:	1d31      	adds	r1, r6, #4
 800d752:	4628      	mov	r0, r5
 800d754:	f7fa f96a 	bl	8007a2c <ucdr_deserialize_uint8_t>
 800d758:	4604      	mov	r4, r0
 800d75a:	b170      	cbz	r0, 800d77a <uxr_deserialize_ObjectVariant+0x8a>
 800d75c:	7933      	ldrb	r3, [r6, #4]
 800d75e:	2b02      	cmp	r3, #2
 800d760:	d04c      	beq.n	800d7fc <uxr_deserialize_ObjectVariant+0x10c>
 800d762:	2b03      	cmp	r3, #3
 800d764:	d109      	bne.n	800d77a <uxr_deserialize_ObjectVariant+0x8a>
 800d766:	f106 0308 	add.w	r3, r6, #8
 800d76a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d76e:	f106 010c 	add.w	r1, r6, #12
 800d772:	4628      	mov	r0, r5
 800d774:	f005 f9b0 	bl	8012ad8 <ucdr_deserialize_sequence_uint8_t>
 800d778:	4604      	mov	r4, r0
 800d77a:	2202      	movs	r2, #2
 800d77c:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800d780:	4628      	mov	r0, r5
 800d782:	f005 f907 	bl	8012994 <ucdr_deserialize_array_uint8_t>
 800d786:	4020      	ands	r0, r4
 800d788:	b2c4      	uxtb	r4, r0
 800d78a:	e7c6      	b.n	800d71a <uxr_deserialize_ObjectVariant+0x2a>
 800d78c:	1d31      	adds	r1, r6, #4
 800d78e:	4628      	mov	r0, r5
 800d790:	f7fa f94c 	bl	8007a2c <ucdr_deserialize_uint8_t>
 800d794:	4604      	mov	r4, r0
 800d796:	b130      	cbz	r0, 800d7a6 <uxr_deserialize_ObjectVariant+0xb6>
 800d798:	7933      	ldrb	r3, [r6, #4]
 800d79a:	2b02      	cmp	r3, #2
 800d79c:	d036      	beq.n	800d80c <uxr_deserialize_ObjectVariant+0x11c>
 800d79e:	2b03      	cmp	r3, #3
 800d7a0:	d03c      	beq.n	800d81c <uxr_deserialize_ObjectVariant+0x12c>
 800d7a2:	2b01      	cmp	r3, #1
 800d7a4:	d032      	beq.n	800d80c <uxr_deserialize_ObjectVariant+0x11c>
 800d7a6:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800d7aa:	4628      	mov	r0, r5
 800d7ac:	f7fa fee4 	bl	8008578 <ucdr_deserialize_int16_t>
 800d7b0:	4020      	ands	r0, r4
 800d7b2:	b2c4      	uxtb	r4, r0
 800d7b4:	e7b1      	b.n	800d71a <uxr_deserialize_ObjectVariant+0x2a>
 800d7b6:	1d31      	adds	r1, r6, #4
 800d7b8:	4628      	mov	r0, r5
 800d7ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d7be:	f7ff bbbf 	b.w	800cf40 <uxr_deserialize_CLIENT_Representation>
 800d7c2:	2204      	movs	r2, #4
 800d7c4:	18b1      	adds	r1, r6, r2
 800d7c6:	4628      	mov	r0, r5
 800d7c8:	f005 f8e4 	bl	8012994 <ucdr_deserialize_array_uint8_t>
 800d7cc:	2202      	movs	r2, #2
 800d7ce:	f106 0108 	add.w	r1, r6, #8
 800d7d2:	4604      	mov	r4, r0
 800d7d4:	4628      	mov	r0, r5
 800d7d6:	f005 f8dd 	bl	8012994 <ucdr_deserialize_array_uint8_t>
 800d7da:	2202      	movs	r2, #2
 800d7dc:	4004      	ands	r4, r0
 800d7de:	f106 010a 	add.w	r1, r6, #10
 800d7e2:	4628      	mov	r0, r5
 800d7e4:	f005 f8d6 	bl	8012994 <ucdr_deserialize_array_uint8_t>
 800d7e8:	b2e4      	uxtb	r4, r4
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	f106 010c 	add.w	r1, r6, #12
 800d7f0:	4628      	mov	r0, r5
 800d7f2:	401c      	ands	r4, r3
 800d7f4:	f7fa f8ec 	bl	80079d0 <ucdr_deserialize_bool>
 800d7f8:	4004      	ands	r4, r0
 800d7fa:	e78e      	b.n	800d71a <uxr_deserialize_ObjectVariant+0x2a>
 800d7fc:	68b1      	ldr	r1, [r6, #8]
 800d7fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d802:	4628      	mov	r0, r5
 800d804:	f005 f992 	bl	8012b2c <ucdr_deserialize_string>
 800d808:	4604      	mov	r4, r0
 800d80a:	e7b6      	b.n	800d77a <uxr_deserialize_ObjectVariant+0x8a>
 800d80c:	68b1      	ldr	r1, [r6, #8]
 800d80e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d812:	4628      	mov	r0, r5
 800d814:	f005 f98a 	bl	8012b2c <ucdr_deserialize_string>
 800d818:	4604      	mov	r4, r0
 800d81a:	e7c4      	b.n	800d7a6 <uxr_deserialize_ObjectVariant+0xb6>
 800d81c:	f106 0308 	add.w	r3, r6, #8
 800d820:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d824:	f106 010c 	add.w	r1, r6, #12
 800d828:	4628      	mov	r0, r5
 800d82a:	f005 f955 	bl	8012ad8 <ucdr_deserialize_sequence_uint8_t>
 800d82e:	4604      	mov	r4, r0
 800d830:	e7b9      	b.n	800d7a6 <uxr_deserialize_ObjectVariant+0xb6>
 800d832:	bf00      	nop

0800d834 <uxr_deserialize_BaseObjectRequest>:
 800d834:	b570      	push	{r4, r5, r6, lr}
 800d836:	2202      	movs	r2, #2
 800d838:	4605      	mov	r5, r0
 800d83a:	460e      	mov	r6, r1
 800d83c:	f005 f8aa 	bl	8012994 <ucdr_deserialize_array_uint8_t>
 800d840:	2202      	movs	r2, #2
 800d842:	4604      	mov	r4, r0
 800d844:	18b1      	adds	r1, r6, r2
 800d846:	4628      	mov	r0, r5
 800d848:	f005 f8a4 	bl	8012994 <ucdr_deserialize_array_uint8_t>
 800d84c:	4020      	ands	r0, r4
 800d84e:	b2c0      	uxtb	r0, r0
 800d850:	bd70      	pop	{r4, r5, r6, pc}
 800d852:	bf00      	nop

0800d854 <uxr_serialize_ActivityInfoVariant>:
 800d854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d858:	460d      	mov	r5, r1
 800d85a:	7809      	ldrb	r1, [r1, #0]
 800d85c:	4607      	mov	r7, r0
 800d85e:	f7fa f8cf 	bl	8007a00 <ucdr_serialize_uint8_t>
 800d862:	4681      	mov	r9, r0
 800d864:	b138      	cbz	r0, 800d876 <uxr_serialize_ActivityInfoVariant+0x22>
 800d866:	782b      	ldrb	r3, [r5, #0]
 800d868:	2b06      	cmp	r3, #6
 800d86a:	f000 8082 	beq.w	800d972 <uxr_serialize_ActivityInfoVariant+0x11e>
 800d86e:	2b0d      	cmp	r3, #13
 800d870:	d016      	beq.n	800d8a0 <uxr_serialize_ActivityInfoVariant+0x4c>
 800d872:	2b05      	cmp	r3, #5
 800d874:	d002      	beq.n	800d87c <uxr_serialize_ActivityInfoVariant+0x28>
 800d876:	4648      	mov	r0, r9
 800d878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d87c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800d880:	4638      	mov	r0, r7
 800d882:	f7fa fdf9 	bl	8008478 <ucdr_serialize_int16_t>
 800d886:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800d88a:	4681      	mov	r9, r0
 800d88c:	4638      	mov	r0, r7
 800d88e:	f7fa fd23 	bl	80082d8 <ucdr_serialize_uint64_t>
 800d892:	ea09 0000 	and.w	r0, r9, r0
 800d896:	fa5f f980 	uxtb.w	r9, r0
 800d89a:	4648      	mov	r0, r9
 800d89c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8a0:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800d8a4:	4638      	mov	r0, r7
 800d8a6:	f7fa fde7 	bl	8008478 <ucdr_serialize_int16_t>
 800d8aa:	68e9      	ldr	r1, [r5, #12]
 800d8ac:	4681      	mov	r9, r0
 800d8ae:	4638      	mov	r0, r7
 800d8b0:	f7fa fabc 	bl	8007e2c <ucdr_serialize_uint32_t>
 800d8b4:	68eb      	ldr	r3, [r5, #12]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d0eb      	beq.n	800d892 <uxr_serialize_ActivityInfoVariant+0x3e>
 800d8ba:	b320      	cbz	r0, 800d906 <uxr_serialize_ActivityInfoVariant+0xb2>
 800d8bc:	f105 080c 	add.w	r8, r5, #12
 800d8c0:	2600      	movs	r6, #0
 800d8c2:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800d8c6:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800d8ca:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800d8ce:	4638      	mov	r0, r7
 800d8d0:	f7fa f896 	bl	8007a00 <ucdr_serialize_uint8_t>
 800d8d4:	2800      	cmp	r0, #0
 800d8d6:	d053      	beq.n	800d980 <uxr_serialize_ActivityInfoVariant+0x12c>
 800d8d8:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800d8dc:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800d8e0:	0074      	lsls	r4, r6, #1
 800d8e2:	00c9      	lsls	r1, r1, #3
 800d8e4:	2b03      	cmp	r3, #3
 800d8e6:	d854      	bhi.n	800d992 <uxr_serialize_ActivityInfoVariant+0x13e>
 800d8e8:	e8df f003 	tbb	[pc, r3]
 800d8ec:	02102132 	.word	0x02102132
 800d8f0:	4441      	add	r1, r8
 800d8f2:	4638      	mov	r0, r7
 800d8f4:	6889      	ldr	r1, [r1, #8]
 800d8f6:	f005 f909 	bl	8012b0c <ucdr_serialize_string>
 800d8fa:	68ea      	ldr	r2, [r5, #12]
 800d8fc:	3601      	adds	r6, #1
 800d8fe:	4296      	cmp	r6, r2
 800d900:	d242      	bcs.n	800d988 <uxr_serialize_ActivityInfoVariant+0x134>
 800d902:	2800      	cmp	r0, #0
 800d904:	d1dd      	bne.n	800d8c2 <uxr_serialize_ActivityInfoVariant+0x6e>
 800d906:	f04f 0900 	mov.w	r9, #0
 800d90a:	e7b4      	b.n	800d876 <uxr_serialize_ActivityInfoVariant+0x22>
 800d90c:	3108      	adds	r1, #8
 800d90e:	4441      	add	r1, r8
 800d910:	2210      	movs	r2, #16
 800d912:	4638      	mov	r0, r7
 800d914:	f004 ffda 	bl	80128cc <ucdr_serialize_array_uint8_t>
 800d918:	4434      	add	r4, r6
 800d91a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800d91e:	4604      	mov	r4, r0
 800d920:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d922:	4638      	mov	r0, r7
 800d924:	f7fa fa82 	bl	8007e2c <ucdr_serialize_uint32_t>
 800d928:	4020      	ands	r0, r4
 800d92a:	b2c0      	uxtb	r0, r0
 800d92c:	e7e5      	b.n	800d8fa <uxr_serialize_ActivityInfoVariant+0xa6>
 800d92e:	3108      	adds	r1, #8
 800d930:	4441      	add	r1, r8
 800d932:	2204      	movs	r2, #4
 800d934:	4638      	mov	r0, r7
 800d936:	f004 ffc9 	bl	80128cc <ucdr_serialize_array_uint8_t>
 800d93a:	4434      	add	r4, r6
 800d93c:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800d940:	4604      	mov	r4, r0
 800d942:	8b19      	ldrh	r1, [r3, #24]
 800d944:	4638      	mov	r0, r7
 800d946:	f7fa f887 	bl	8007a58 <ucdr_serialize_uint16_t>
 800d94a:	4020      	ands	r0, r4
 800d94c:	b2c0      	uxtb	r0, r0
 800d94e:	e7d4      	b.n	800d8fa <uxr_serialize_ActivityInfoVariant+0xa6>
 800d950:	3108      	adds	r1, #8
 800d952:	4441      	add	r1, r8
 800d954:	2202      	movs	r2, #2
 800d956:	4638      	mov	r0, r7
 800d958:	f004 ffb8 	bl	80128cc <ucdr_serialize_array_uint8_t>
 800d95c:	4434      	add	r4, r6
 800d95e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800d962:	4604      	mov	r4, r0
 800d964:	7d99      	ldrb	r1, [r3, #22]
 800d966:	4638      	mov	r0, r7
 800d968:	f7fa f84a 	bl	8007a00 <ucdr_serialize_uint8_t>
 800d96c:	4020      	ands	r0, r4
 800d96e:	b2c0      	uxtb	r0, r0
 800d970:	e7c3      	b.n	800d8fa <uxr_serialize_ActivityInfoVariant+0xa6>
 800d972:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800d976:	4638      	mov	r0, r7
 800d978:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d97c:	f7fa bd7c 	b.w	8008478 <ucdr_serialize_int16_t>
 800d980:	68ea      	ldr	r2, [r5, #12]
 800d982:	3601      	adds	r6, #1
 800d984:	42b2      	cmp	r2, r6
 800d986:	d8be      	bhi.n	800d906 <uxr_serialize_ActivityInfoVariant+0xb2>
 800d988:	ea09 0900 	and.w	r9, r9, r0
 800d98c:	fa5f f989 	uxtb.w	r9, r9
 800d990:	e771      	b.n	800d876 <uxr_serialize_ActivityInfoVariant+0x22>
 800d992:	68eb      	ldr	r3, [r5, #12]
 800d994:	3601      	adds	r6, #1
 800d996:	429e      	cmp	r6, r3
 800d998:	f10a 0a18 	add.w	sl, sl, #24
 800d99c:	d395      	bcc.n	800d8ca <uxr_serialize_ActivityInfoVariant+0x76>
 800d99e:	e76a      	b.n	800d876 <uxr_serialize_ActivityInfoVariant+0x22>

0800d9a0 <uxr_deserialize_BaseObjectReply>:
 800d9a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9a4:	2202      	movs	r2, #2
 800d9a6:	4606      	mov	r6, r0
 800d9a8:	460f      	mov	r7, r1
 800d9aa:	f004 fff3 	bl	8012994 <ucdr_deserialize_array_uint8_t>
 800d9ae:	2202      	movs	r2, #2
 800d9b0:	18b9      	adds	r1, r7, r2
 800d9b2:	4605      	mov	r5, r0
 800d9b4:	4630      	mov	r0, r6
 800d9b6:	f004 ffed 	bl	8012994 <ucdr_deserialize_array_uint8_t>
 800d9ba:	1d39      	adds	r1, r7, #4
 800d9bc:	4680      	mov	r8, r0
 800d9be:	4630      	mov	r0, r6
 800d9c0:	f7fa f834 	bl	8007a2c <ucdr_deserialize_uint8_t>
 800d9c4:	1d79      	adds	r1, r7, #5
 800d9c6:	4604      	mov	r4, r0
 800d9c8:	4630      	mov	r0, r6
 800d9ca:	f7fa f82f 	bl	8007a2c <ucdr_deserialize_uint8_t>
 800d9ce:	ea05 0508 	and.w	r5, r5, r8
 800d9d2:	402c      	ands	r4, r5
 800d9d4:	4020      	ands	r0, r4
 800d9d6:	b2c0      	uxtb	r0, r0
 800d9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d9dc <uxr_serialize_ReadSpecification>:
 800d9dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9e0:	460e      	mov	r6, r1
 800d9e2:	7809      	ldrb	r1, [r1, #0]
 800d9e4:	4607      	mov	r7, r0
 800d9e6:	f7fa f80b 	bl	8007a00 <ucdr_serialize_uint8_t>
 800d9ea:	7871      	ldrb	r1, [r6, #1]
 800d9ec:	4604      	mov	r4, r0
 800d9ee:	4638      	mov	r0, r7
 800d9f0:	f7fa f806 	bl	8007a00 <ucdr_serialize_uint8_t>
 800d9f4:	78b1      	ldrb	r1, [r6, #2]
 800d9f6:	4004      	ands	r4, r0
 800d9f8:	4638      	mov	r0, r7
 800d9fa:	f7f9 ffd3 	bl	80079a4 <ucdr_serialize_bool>
 800d9fe:	78b3      	ldrb	r3, [r6, #2]
 800da00:	b2e4      	uxtb	r4, r4
 800da02:	4004      	ands	r4, r0
 800da04:	b94b      	cbnz	r3, 800da1a <uxr_serialize_ReadSpecification+0x3e>
 800da06:	7a31      	ldrb	r1, [r6, #8]
 800da08:	4638      	mov	r0, r7
 800da0a:	f7f9 ffcb 	bl	80079a4 <ucdr_serialize_bool>
 800da0e:	7a33      	ldrb	r3, [r6, #8]
 800da10:	4004      	ands	r4, r0
 800da12:	b943      	cbnz	r3, 800da26 <uxr_serialize_ReadSpecification+0x4a>
 800da14:	4620      	mov	r0, r4
 800da16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da1a:	6871      	ldr	r1, [r6, #4]
 800da1c:	4638      	mov	r0, r7
 800da1e:	f005 f875 	bl	8012b0c <ucdr_serialize_string>
 800da22:	4004      	ands	r4, r0
 800da24:	e7ef      	b.n	800da06 <uxr_serialize_ReadSpecification+0x2a>
 800da26:	8971      	ldrh	r1, [r6, #10]
 800da28:	4638      	mov	r0, r7
 800da2a:	f7fa f815 	bl	8007a58 <ucdr_serialize_uint16_t>
 800da2e:	89b1      	ldrh	r1, [r6, #12]
 800da30:	4605      	mov	r5, r0
 800da32:	4638      	mov	r0, r7
 800da34:	f7fa f810 	bl	8007a58 <ucdr_serialize_uint16_t>
 800da38:	89f1      	ldrh	r1, [r6, #14]
 800da3a:	4005      	ands	r5, r0
 800da3c:	4638      	mov	r0, r7
 800da3e:	f7fa f80b 	bl	8007a58 <ucdr_serialize_uint16_t>
 800da42:	8a31      	ldrh	r1, [r6, #16]
 800da44:	4680      	mov	r8, r0
 800da46:	4638      	mov	r0, r7
 800da48:	f7fa f806 	bl	8007a58 <ucdr_serialize_uint16_t>
 800da4c:	b2ed      	uxtb	r5, r5
 800da4e:	4025      	ands	r5, r4
 800da50:	ea08 0505 	and.w	r5, r8, r5
 800da54:	ea00 0405 	and.w	r4, r0, r5
 800da58:	4620      	mov	r0, r4
 800da5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da5e:	bf00      	nop

0800da60 <uxr_serialize_CREATE_CLIENT_Payload>:
 800da60:	f7ff ba16 	b.w	800ce90 <uxr_serialize_CLIENT_Representation>

0800da64 <uxr_serialize_CREATE_Payload>:
 800da64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da66:	2202      	movs	r2, #2
 800da68:	4607      	mov	r7, r0
 800da6a:	460e      	mov	r6, r1
 800da6c:	f004 ff2e 	bl	80128cc <ucdr_serialize_array_uint8_t>
 800da70:	2202      	movs	r2, #2
 800da72:	18b1      	adds	r1, r6, r2
 800da74:	4605      	mov	r5, r0
 800da76:	4638      	mov	r0, r7
 800da78:	f004 ff28 	bl	80128cc <ucdr_serialize_array_uint8_t>
 800da7c:	7931      	ldrb	r1, [r6, #4]
 800da7e:	4604      	mov	r4, r0
 800da80:	4638      	mov	r0, r7
 800da82:	f7f9 ffbd 	bl	8007a00 <ucdr_serialize_uint8_t>
 800da86:	b170      	cbz	r0, 800daa6 <uxr_serialize_CREATE_Payload+0x42>
 800da88:	7933      	ldrb	r3, [r6, #4]
 800da8a:	402c      	ands	r4, r5
 800da8c:	3b01      	subs	r3, #1
 800da8e:	b2e4      	uxtb	r4, r4
 800da90:	2b0d      	cmp	r3, #13
 800da92:	d809      	bhi.n	800daa8 <uxr_serialize_CREATE_Payload+0x44>
 800da94:	e8df f003 	tbb	[pc, r3]
 800da98:	23230a4c 	.word	0x23230a4c
 800da9c:	0a0a0a0a 	.word	0x0a0a0a0a
 800daa0:	12121208 	.word	0x12121208
 800daa4:	3e45      	.short	0x3e45
 800daa6:	2400      	movs	r4, #0
 800daa8:	4620      	mov	r0, r4
 800daaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800daac:	f106 0108 	add.w	r1, r6, #8
 800dab0:	4638      	mov	r0, r7
 800dab2:	f7ff faf3 	bl	800d09c <uxr_serialize_DATAWRITER_Representation>
 800dab6:	4004      	ands	r4, r0
 800dab8:	4620      	mov	r0, r4
 800daba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dabc:	7a31      	ldrb	r1, [r6, #8]
 800dabe:	4638      	mov	r0, r7
 800dac0:	f7f9 ff9e 	bl	8007a00 <ucdr_serialize_uint8_t>
 800dac4:	2800      	cmp	r0, #0
 800dac6:	d0ee      	beq.n	800daa6 <uxr_serialize_CREATE_Payload+0x42>
 800dac8:	7a33      	ldrb	r3, [r6, #8]
 800daca:	2b01      	cmp	r3, #1
 800dacc:	d001      	beq.n	800dad2 <uxr_serialize_CREATE_Payload+0x6e>
 800dace:	2b02      	cmp	r3, #2
 800dad0:	d1ea      	bne.n	800daa8 <uxr_serialize_CREATE_Payload+0x44>
 800dad2:	68f1      	ldr	r1, [r6, #12]
 800dad4:	4638      	mov	r0, r7
 800dad6:	f005 f819 	bl	8012b0c <ucdr_serialize_string>
 800dada:	4004      	ands	r4, r0
 800dadc:	e7e4      	b.n	800daa8 <uxr_serialize_CREATE_Payload+0x44>
 800dade:	7a31      	ldrb	r1, [r6, #8]
 800dae0:	4638      	mov	r0, r7
 800dae2:	f7f9 ff8d 	bl	8007a00 <ucdr_serialize_uint8_t>
 800dae6:	4605      	mov	r5, r0
 800dae8:	b158      	cbz	r0, 800db02 <uxr_serialize_CREATE_Payload+0x9e>
 800daea:	7a33      	ldrb	r3, [r6, #8]
 800daec:	2b02      	cmp	r3, #2
 800daee:	d034      	beq.n	800db5a <uxr_serialize_CREATE_Payload+0xf6>
 800daf0:	2b03      	cmp	r3, #3
 800daf2:	d106      	bne.n	800db02 <uxr_serialize_CREATE_Payload+0x9e>
 800daf4:	68f2      	ldr	r2, [r6, #12]
 800daf6:	f106 0110 	add.w	r1, r6, #16
 800dafa:	4638      	mov	r0, r7
 800dafc:	f004 ffda 	bl	8012ab4 <ucdr_serialize_sequence_uint8_t>
 800db00:	4605      	mov	r5, r0
 800db02:	2202      	movs	r2, #2
 800db04:	f506 7104 	add.w	r1, r6, #528	; 0x210
 800db08:	4638      	mov	r0, r7
 800db0a:	f004 fedf 	bl	80128cc <ucdr_serialize_array_uint8_t>
 800db0e:	4028      	ands	r0, r5
 800db10:	4004      	ands	r4, r0
 800db12:	e7c9      	b.n	800daa8 <uxr_serialize_CREATE_Payload+0x44>
 800db14:	f106 0108 	add.w	r1, r6, #8
 800db18:	4638      	mov	r0, r7
 800db1a:	f7ff f9b9 	bl	800ce90 <uxr_serialize_CLIENT_Representation>
 800db1e:	4004      	ands	r4, r0
 800db20:	e7c2      	b.n	800daa8 <uxr_serialize_CREATE_Payload+0x44>
 800db22:	f106 0108 	add.w	r1, r6, #8
 800db26:	4638      	mov	r0, r7
 800db28:	f7ff fa6e 	bl	800d008 <uxr_serialize_AGENT_Representation>
 800db2c:	4004      	ands	r4, r0
 800db2e:	e7bb      	b.n	800daa8 <uxr_serialize_CREATE_Payload+0x44>
 800db30:	7a31      	ldrb	r1, [r6, #8]
 800db32:	4638      	mov	r0, r7
 800db34:	f7f9 ff64 	bl	8007a00 <ucdr_serialize_uint8_t>
 800db38:	4605      	mov	r5, r0
 800db3a:	b130      	cbz	r0, 800db4a <uxr_serialize_CREATE_Payload+0xe6>
 800db3c:	7a33      	ldrb	r3, [r6, #8]
 800db3e:	2b02      	cmp	r3, #2
 800db40:	d011      	beq.n	800db66 <uxr_serialize_CREATE_Payload+0x102>
 800db42:	2b03      	cmp	r3, #3
 800db44:	d015      	beq.n	800db72 <uxr_serialize_CREATE_Payload+0x10e>
 800db46:	2b01      	cmp	r3, #1
 800db48:	d00d      	beq.n	800db66 <uxr_serialize_CREATE_Payload+0x102>
 800db4a:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 800db4e:	4638      	mov	r0, r7
 800db50:	f7fa fc92 	bl	8008478 <ucdr_serialize_int16_t>
 800db54:	4028      	ands	r0, r5
 800db56:	4004      	ands	r4, r0
 800db58:	e7a6      	b.n	800daa8 <uxr_serialize_CREATE_Payload+0x44>
 800db5a:	68f1      	ldr	r1, [r6, #12]
 800db5c:	4638      	mov	r0, r7
 800db5e:	f004 ffd5 	bl	8012b0c <ucdr_serialize_string>
 800db62:	4605      	mov	r5, r0
 800db64:	e7cd      	b.n	800db02 <uxr_serialize_CREATE_Payload+0x9e>
 800db66:	68f1      	ldr	r1, [r6, #12]
 800db68:	4638      	mov	r0, r7
 800db6a:	f004 ffcf 	bl	8012b0c <ucdr_serialize_string>
 800db6e:	4605      	mov	r5, r0
 800db70:	e7eb      	b.n	800db4a <uxr_serialize_CREATE_Payload+0xe6>
 800db72:	68f2      	ldr	r2, [r6, #12]
 800db74:	f106 0110 	add.w	r1, r6, #16
 800db78:	4638      	mov	r0, r7
 800db7a:	f004 ff9b 	bl	8012ab4 <ucdr_serialize_sequence_uint8_t>
 800db7e:	4605      	mov	r5, r0
 800db80:	e7e3      	b.n	800db4a <uxr_serialize_CREATE_Payload+0xe6>
 800db82:	bf00      	nop

0800db84 <uxr_deserialize_GET_INFO_Payload>:
 800db84:	b570      	push	{r4, r5, r6, lr}
 800db86:	2202      	movs	r2, #2
 800db88:	4605      	mov	r5, r0
 800db8a:	460e      	mov	r6, r1
 800db8c:	f004 ff02 	bl	8012994 <ucdr_deserialize_array_uint8_t>
 800db90:	2202      	movs	r2, #2
 800db92:	18b1      	adds	r1, r6, r2
 800db94:	4604      	mov	r4, r0
 800db96:	4628      	mov	r0, r5
 800db98:	f004 fefc 	bl	8012994 <ucdr_deserialize_array_uint8_t>
 800db9c:	1d31      	adds	r1, r6, #4
 800db9e:	4004      	ands	r4, r0
 800dba0:	4628      	mov	r0, r5
 800dba2:	f7fa fa73 	bl	800808c <ucdr_deserialize_uint32_t>
 800dba6:	b2e4      	uxtb	r4, r4
 800dba8:	4020      	ands	r0, r4
 800dbaa:	bd70      	pop	{r4, r5, r6, pc}

0800dbac <uxr_serialize_DELETE_Payload>:
 800dbac:	b570      	push	{r4, r5, r6, lr}
 800dbae:	2202      	movs	r2, #2
 800dbb0:	4605      	mov	r5, r0
 800dbb2:	460e      	mov	r6, r1
 800dbb4:	f004 fe8a 	bl	80128cc <ucdr_serialize_array_uint8_t>
 800dbb8:	2202      	movs	r2, #2
 800dbba:	4604      	mov	r4, r0
 800dbbc:	18b1      	adds	r1, r6, r2
 800dbbe:	4628      	mov	r0, r5
 800dbc0:	f004 fe84 	bl	80128cc <ucdr_serialize_array_uint8_t>
 800dbc4:	4020      	ands	r0, r4
 800dbc6:	b2c0      	uxtb	r0, r0
 800dbc8:	bd70      	pop	{r4, r5, r6, pc}
 800dbca:	bf00      	nop

0800dbcc <uxr_deserialize_STATUS_AGENT_Payload>:
 800dbcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbd0:	4605      	mov	r5, r0
 800dbd2:	460e      	mov	r6, r1
 800dbd4:	f7f9 ff2a 	bl	8007a2c <ucdr_deserialize_uint8_t>
 800dbd8:	1c71      	adds	r1, r6, #1
 800dbda:	4604      	mov	r4, r0
 800dbdc:	4628      	mov	r0, r5
 800dbde:	f7f9 ff25 	bl	8007a2c <ucdr_deserialize_uint8_t>
 800dbe2:	2204      	movs	r2, #4
 800dbe4:	18b1      	adds	r1, r6, r2
 800dbe6:	4680      	mov	r8, r0
 800dbe8:	4628      	mov	r0, r5
 800dbea:	f004 fed3 	bl	8012994 <ucdr_deserialize_array_uint8_t>
 800dbee:	f106 0108 	add.w	r1, r6, #8
 800dbf2:	4607      	mov	r7, r0
 800dbf4:	2202      	movs	r2, #2
 800dbf6:	4628      	mov	r0, r5
 800dbf8:	f004 fecc 	bl	8012994 <ucdr_deserialize_array_uint8_t>
 800dbfc:	ea04 0308 	and.w	r3, r4, r8
 800dc00:	b2db      	uxtb	r3, r3
 800dc02:	ea03 0407 	and.w	r4, r3, r7
 800dc06:	2202      	movs	r2, #2
 800dc08:	4607      	mov	r7, r0
 800dc0a:	f106 010a 	add.w	r1, r6, #10
 800dc0e:	4628      	mov	r0, r5
 800dc10:	f004 fec0 	bl	8012994 <ucdr_deserialize_array_uint8_t>
 800dc14:	f106 010c 	add.w	r1, r6, #12
 800dc18:	4603      	mov	r3, r0
 800dc1a:	4628      	mov	r0, r5
 800dc1c:	461d      	mov	r5, r3
 800dc1e:	f7f9 fed7 	bl	80079d0 <ucdr_deserialize_bool>
 800dc22:	403c      	ands	r4, r7
 800dc24:	4025      	ands	r5, r4
 800dc26:	4028      	ands	r0, r5
 800dc28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dc2c <uxr_deserialize_STATUS_Payload>:
 800dc2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc30:	2202      	movs	r2, #2
 800dc32:	4606      	mov	r6, r0
 800dc34:	460f      	mov	r7, r1
 800dc36:	f004 fead 	bl	8012994 <ucdr_deserialize_array_uint8_t>
 800dc3a:	2202      	movs	r2, #2
 800dc3c:	18b9      	adds	r1, r7, r2
 800dc3e:	4605      	mov	r5, r0
 800dc40:	4630      	mov	r0, r6
 800dc42:	f004 fea7 	bl	8012994 <ucdr_deserialize_array_uint8_t>
 800dc46:	1d39      	adds	r1, r7, #4
 800dc48:	4680      	mov	r8, r0
 800dc4a:	4630      	mov	r0, r6
 800dc4c:	f7f9 feee 	bl	8007a2c <ucdr_deserialize_uint8_t>
 800dc50:	1d79      	adds	r1, r7, #5
 800dc52:	4604      	mov	r4, r0
 800dc54:	4630      	mov	r0, r6
 800dc56:	f7f9 fee9 	bl	8007a2c <ucdr_deserialize_uint8_t>
 800dc5a:	ea05 0508 	and.w	r5, r5, r8
 800dc5e:	402c      	ands	r4, r5
 800dc60:	4020      	ands	r0, r4
 800dc62:	b2c0      	uxtb	r0, r0
 800dc64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dc68 <uxr_serialize_INFO_Payload>:
 800dc68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc6c:	2202      	movs	r2, #2
 800dc6e:	460c      	mov	r4, r1
 800dc70:	4605      	mov	r5, r0
 800dc72:	f004 fe2b 	bl	80128cc <ucdr_serialize_array_uint8_t>
 800dc76:	2202      	movs	r2, #2
 800dc78:	18a1      	adds	r1, r4, r2
 800dc7a:	4680      	mov	r8, r0
 800dc7c:	4628      	mov	r0, r5
 800dc7e:	f004 fe25 	bl	80128cc <ucdr_serialize_array_uint8_t>
 800dc82:	7921      	ldrb	r1, [r4, #4]
 800dc84:	4607      	mov	r7, r0
 800dc86:	4628      	mov	r0, r5
 800dc88:	f7f9 feba 	bl	8007a00 <ucdr_serialize_uint8_t>
 800dc8c:	7961      	ldrb	r1, [r4, #5]
 800dc8e:	4606      	mov	r6, r0
 800dc90:	4628      	mov	r0, r5
 800dc92:	f7f9 feb5 	bl	8007a00 <ucdr_serialize_uint8_t>
 800dc96:	ea08 0807 	and.w	r8, r8, r7
 800dc9a:	ea06 0608 	and.w	r6, r6, r8
 800dc9e:	4006      	ands	r6, r0
 800dca0:	7a21      	ldrb	r1, [r4, #8]
 800dca2:	4628      	mov	r0, r5
 800dca4:	f7f9 fe7e 	bl	80079a4 <ucdr_serialize_bool>
 800dca8:	7a23      	ldrb	r3, [r4, #8]
 800dcaa:	b2f7      	uxtb	r7, r6
 800dcac:	4606      	mov	r6, r0
 800dcae:	b96b      	cbnz	r3, 800dccc <uxr_serialize_INFO_Payload+0x64>
 800dcb0:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 800dcb4:	4628      	mov	r0, r5
 800dcb6:	f7f9 fe75 	bl	80079a4 <ucdr_serialize_bool>
 800dcba:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 800dcbe:	4030      	ands	r0, r6
 800dcc0:	b2c6      	uxtb	r6, r0
 800dcc2:	b983      	cbnz	r3, 800dce6 <uxr_serialize_INFO_Payload+0x7e>
 800dcc4:	ea06 0007 	and.w	r0, r6, r7
 800dcc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dccc:	7b21      	ldrb	r1, [r4, #12]
 800dcce:	4628      	mov	r0, r5
 800dcd0:	f7f9 fe96 	bl	8007a00 <ucdr_serialize_uint8_t>
 800dcd4:	b188      	cbz	r0, 800dcfa <uxr_serialize_INFO_Payload+0x92>
 800dcd6:	f104 010c 	add.w	r1, r4, #12
 800dcda:	4628      	mov	r0, r5
 800dcdc:	f7ff fa06 	bl	800d0ec <uxr_serialize_ObjectVariant.part.0>
 800dce0:	4030      	ands	r0, r6
 800dce2:	b2c6      	uxtb	r6, r0
 800dce4:	e7e4      	b.n	800dcb0 <uxr_serialize_INFO_Payload+0x48>
 800dce6:	f504 7108 	add.w	r1, r4, #544	; 0x220
 800dcea:	4628      	mov	r0, r5
 800dcec:	f7ff fdb2 	bl	800d854 <uxr_serialize_ActivityInfoVariant>
 800dcf0:	4006      	ands	r6, r0
 800dcf2:	ea06 0007 	and.w	r0, r6, r7
 800dcf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcfa:	4606      	mov	r6, r0
 800dcfc:	e7d8      	b.n	800dcb0 <uxr_serialize_INFO_Payload+0x48>
 800dcfe:	bf00      	nop

0800dd00 <uxr_serialize_READ_DATA_Payload>:
 800dd00:	b570      	push	{r4, r5, r6, lr}
 800dd02:	2202      	movs	r2, #2
 800dd04:	4605      	mov	r5, r0
 800dd06:	460e      	mov	r6, r1
 800dd08:	f004 fde0 	bl	80128cc <ucdr_serialize_array_uint8_t>
 800dd0c:	2202      	movs	r2, #2
 800dd0e:	18b1      	adds	r1, r6, r2
 800dd10:	4604      	mov	r4, r0
 800dd12:	4628      	mov	r0, r5
 800dd14:	f004 fdda 	bl	80128cc <ucdr_serialize_array_uint8_t>
 800dd18:	1d31      	adds	r1, r6, #4
 800dd1a:	4004      	ands	r4, r0
 800dd1c:	4628      	mov	r0, r5
 800dd1e:	f7ff fe5d 	bl	800d9dc <uxr_serialize_ReadSpecification>
 800dd22:	b2e4      	uxtb	r4, r4
 800dd24:	4020      	ands	r0, r4
 800dd26:	bd70      	pop	{r4, r5, r6, pc}

0800dd28 <uxr_serialize_WRITE_DATA_Payload_Data>:
 800dd28:	b570      	push	{r4, r5, r6, lr}
 800dd2a:	2202      	movs	r2, #2
 800dd2c:	4605      	mov	r5, r0
 800dd2e:	460e      	mov	r6, r1
 800dd30:	f004 fdcc 	bl	80128cc <ucdr_serialize_array_uint8_t>
 800dd34:	2202      	movs	r2, #2
 800dd36:	4604      	mov	r4, r0
 800dd38:	18b1      	adds	r1, r6, r2
 800dd3a:	4628      	mov	r0, r5
 800dd3c:	f004 fdc6 	bl	80128cc <ucdr_serialize_array_uint8_t>
 800dd40:	4020      	ands	r0, r4
 800dd42:	b2c0      	uxtb	r0, r0
 800dd44:	bd70      	pop	{r4, r5, r6, pc}
 800dd46:	bf00      	nop

0800dd48 <uxr_serialize_ACKNACK_Payload>:
 800dd48:	b570      	push	{r4, r5, r6, lr}
 800dd4a:	460c      	mov	r4, r1
 800dd4c:	460e      	mov	r6, r1
 800dd4e:	f834 1b02 	ldrh.w	r1, [r4], #2
 800dd52:	4605      	mov	r5, r0
 800dd54:	f7f9 fe80 	bl	8007a58 <ucdr_serialize_uint16_t>
 800dd58:	2202      	movs	r2, #2
 800dd5a:	4621      	mov	r1, r4
 800dd5c:	4604      	mov	r4, r0
 800dd5e:	4628      	mov	r0, r5
 800dd60:	f004 fdb4 	bl	80128cc <ucdr_serialize_array_uint8_t>
 800dd64:	7931      	ldrb	r1, [r6, #4]
 800dd66:	4004      	ands	r4, r0
 800dd68:	4628      	mov	r0, r5
 800dd6a:	f7f9 fe49 	bl	8007a00 <ucdr_serialize_uint8_t>
 800dd6e:	b2e4      	uxtb	r4, r4
 800dd70:	4020      	ands	r0, r4
 800dd72:	bd70      	pop	{r4, r5, r6, pc}

0800dd74 <uxr_deserialize_ACKNACK_Payload>:
 800dd74:	b570      	push	{r4, r5, r6, lr}
 800dd76:	4605      	mov	r5, r0
 800dd78:	460e      	mov	r6, r1
 800dd7a:	f7f9 ff6d 	bl	8007c58 <ucdr_deserialize_uint16_t>
 800dd7e:	2202      	movs	r2, #2
 800dd80:	18b1      	adds	r1, r6, r2
 800dd82:	4604      	mov	r4, r0
 800dd84:	4628      	mov	r0, r5
 800dd86:	f004 fe05 	bl	8012994 <ucdr_deserialize_array_uint8_t>
 800dd8a:	1d31      	adds	r1, r6, #4
 800dd8c:	4004      	ands	r4, r0
 800dd8e:	4628      	mov	r0, r5
 800dd90:	f7f9 fe4c 	bl	8007a2c <ucdr_deserialize_uint8_t>
 800dd94:	b2e4      	uxtb	r4, r4
 800dd96:	4020      	ands	r0, r4
 800dd98:	bd70      	pop	{r4, r5, r6, pc}
 800dd9a:	bf00      	nop

0800dd9c <uxr_serialize_HEARTBEAT_Payload>:
 800dd9c:	b570      	push	{r4, r5, r6, lr}
 800dd9e:	460d      	mov	r5, r1
 800dda0:	8809      	ldrh	r1, [r1, #0]
 800dda2:	4606      	mov	r6, r0
 800dda4:	f7f9 fe58 	bl	8007a58 <ucdr_serialize_uint16_t>
 800dda8:	8869      	ldrh	r1, [r5, #2]
 800ddaa:	4604      	mov	r4, r0
 800ddac:	4630      	mov	r0, r6
 800ddae:	f7f9 fe53 	bl	8007a58 <ucdr_serialize_uint16_t>
 800ddb2:	7929      	ldrb	r1, [r5, #4]
 800ddb4:	4004      	ands	r4, r0
 800ddb6:	4630      	mov	r0, r6
 800ddb8:	f7f9 fe22 	bl	8007a00 <ucdr_serialize_uint8_t>
 800ddbc:	b2e4      	uxtb	r4, r4
 800ddbe:	4020      	ands	r0, r4
 800ddc0:	bd70      	pop	{r4, r5, r6, pc}
 800ddc2:	bf00      	nop

0800ddc4 <uxr_deserialize_HEARTBEAT_Payload>:
 800ddc4:	b570      	push	{r4, r5, r6, lr}
 800ddc6:	4605      	mov	r5, r0
 800ddc8:	460e      	mov	r6, r1
 800ddca:	f7f9 ff45 	bl	8007c58 <ucdr_deserialize_uint16_t>
 800ddce:	1cb1      	adds	r1, r6, #2
 800ddd0:	4604      	mov	r4, r0
 800ddd2:	4628      	mov	r0, r5
 800ddd4:	f7f9 ff40 	bl	8007c58 <ucdr_deserialize_uint16_t>
 800ddd8:	1d31      	adds	r1, r6, #4
 800ddda:	4004      	ands	r4, r0
 800dddc:	4628      	mov	r0, r5
 800ddde:	f7f9 fe25 	bl	8007a2c <ucdr_deserialize_uint8_t>
 800dde2:	b2e4      	uxtb	r4, r4
 800dde4:	4020      	ands	r0, r4
 800dde6:	bd70      	pop	{r4, r5, r6, pc}

0800dde8 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800dde8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddec:	4605      	mov	r5, r0
 800ddee:	460e      	mov	r6, r1
 800ddf0:	f7fa fcce 	bl	8008790 <ucdr_deserialize_int32_t>
 800ddf4:	1d31      	adds	r1, r6, #4
 800ddf6:	4607      	mov	r7, r0
 800ddf8:	4628      	mov	r0, r5
 800ddfa:	f7fa f947 	bl	800808c <ucdr_deserialize_uint32_t>
 800ddfe:	f106 0108 	add.w	r1, r6, #8
 800de02:	4680      	mov	r8, r0
 800de04:	4628      	mov	r0, r5
 800de06:	f7fa fcc3 	bl	8008790 <ucdr_deserialize_int32_t>
 800de0a:	f106 010c 	add.w	r1, r6, #12
 800de0e:	4604      	mov	r4, r0
 800de10:	4628      	mov	r0, r5
 800de12:	f7fa f93b 	bl	800808c <ucdr_deserialize_uint32_t>
 800de16:	ea07 0708 	and.w	r7, r7, r8
 800de1a:	403c      	ands	r4, r7
 800de1c:	f106 0110 	add.w	r1, r6, #16
 800de20:	4004      	ands	r4, r0
 800de22:	4628      	mov	r0, r5
 800de24:	f7fa fcb4 	bl	8008790 <ucdr_deserialize_int32_t>
 800de28:	f106 0114 	add.w	r1, r6, #20
 800de2c:	4607      	mov	r7, r0
 800de2e:	4628      	mov	r0, r5
 800de30:	f7fa f92c 	bl	800808c <ucdr_deserialize_uint32_t>
 800de34:	b2e4      	uxtb	r4, r4
 800de36:	403c      	ands	r4, r7
 800de38:	4020      	ands	r0, r4
 800de3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de3e:	bf00      	nop

0800de40 <uxr_serialize_SampleIdentity>:
 800de40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de44:	220c      	movs	r2, #12
 800de46:	4604      	mov	r4, r0
 800de48:	460d      	mov	r5, r1
 800de4a:	f004 fd3f 	bl	80128cc <ucdr_serialize_array_uint8_t>
 800de4e:	2203      	movs	r2, #3
 800de50:	f105 010c 	add.w	r1, r5, #12
 800de54:	4607      	mov	r7, r0
 800de56:	4620      	mov	r0, r4
 800de58:	f004 fd38 	bl	80128cc <ucdr_serialize_array_uint8_t>
 800de5c:	7be9      	ldrb	r1, [r5, #15]
 800de5e:	4680      	mov	r8, r0
 800de60:	4620      	mov	r0, r4
 800de62:	f7f9 fdcd 	bl	8007a00 <ucdr_serialize_uint8_t>
 800de66:	6929      	ldr	r1, [r5, #16]
 800de68:	4606      	mov	r6, r0
 800de6a:	4620      	mov	r0, r4
 800de6c:	f7fa fbf8 	bl	8008660 <ucdr_serialize_int32_t>
 800de70:	6969      	ldr	r1, [r5, #20]
 800de72:	4603      	mov	r3, r0
 800de74:	4620      	mov	r0, r4
 800de76:	ea07 0708 	and.w	r7, r7, r8
 800de7a:	461c      	mov	r4, r3
 800de7c:	f7f9 ffd6 	bl	8007e2c <ucdr_serialize_uint32_t>
 800de80:	403e      	ands	r6, r7
 800de82:	4034      	ands	r4, r6
 800de84:	4020      	ands	r0, r4
 800de86:	b2c0      	uxtb	r0, r0
 800de88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800de8c <uxr_deserialize_SampleIdentity>:
 800de8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de90:	220c      	movs	r2, #12
 800de92:	4604      	mov	r4, r0
 800de94:	460d      	mov	r5, r1
 800de96:	f004 fd7d 	bl	8012994 <ucdr_deserialize_array_uint8_t>
 800de9a:	2203      	movs	r2, #3
 800de9c:	f105 010c 	add.w	r1, r5, #12
 800dea0:	4607      	mov	r7, r0
 800dea2:	4620      	mov	r0, r4
 800dea4:	f004 fd76 	bl	8012994 <ucdr_deserialize_array_uint8_t>
 800dea8:	f105 010f 	add.w	r1, r5, #15
 800deac:	4680      	mov	r8, r0
 800deae:	4620      	mov	r0, r4
 800deb0:	f7f9 fdbc 	bl	8007a2c <ucdr_deserialize_uint8_t>
 800deb4:	f105 0110 	add.w	r1, r5, #16
 800deb8:	4606      	mov	r6, r0
 800deba:	4620      	mov	r0, r4
 800debc:	f7fa fc68 	bl	8008790 <ucdr_deserialize_int32_t>
 800dec0:	f105 0114 	add.w	r1, r5, #20
 800dec4:	4603      	mov	r3, r0
 800dec6:	4620      	mov	r0, r4
 800dec8:	ea07 0708 	and.w	r7, r7, r8
 800decc:	461c      	mov	r4, r3
 800dece:	f7fa f8dd 	bl	800808c <ucdr_deserialize_uint32_t>
 800ded2:	403e      	ands	r6, r7
 800ded4:	4034      	ands	r4, r6
 800ded6:	4020      	ands	r0, r4
 800ded8:	b2c0      	uxtb	r0, r0
 800deda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dede:	bf00      	nop

0800dee0 <rcl_client_get_rmw_handle>:
 800dee0:	b118      	cbz	r0, 800deea <rcl_client_get_rmw_handle+0xa>
 800dee2:	6800      	ldr	r0, [r0, #0]
 800dee4:	b108      	cbz	r0, 800deea <rcl_client_get_rmw_handle+0xa>
 800dee6:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800deea:	4770      	bx	lr

0800deec <rcl_send_request>:
 800deec:	b570      	push	{r4, r5, r6, lr}
 800deee:	b082      	sub	sp, #8
 800def0:	b1e8      	cbz	r0, 800df2e <rcl_send_request+0x42>
 800def2:	4604      	mov	r4, r0
 800def4:	6800      	ldr	r0, [r0, #0]
 800def6:	b1d0      	cbz	r0, 800df2e <rcl_send_request+0x42>
 800def8:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800defc:	b1bb      	cbz	r3, 800df2e <rcl_send_request+0x42>
 800defe:	460e      	mov	r6, r1
 800df00:	b1d1      	cbz	r1, 800df38 <rcl_send_request+0x4c>
 800df02:	4615      	mov	r5, r2
 800df04:	b1c2      	cbz	r2, 800df38 <rcl_send_request+0x4c>
 800df06:	2105      	movs	r1, #5
 800df08:	f500 7088 	add.w	r0, r0, #272	; 0x110
 800df0c:	f7fc fa52 	bl	800a3b4 <__atomic_load_8>
 800df10:	6823      	ldr	r3, [r4, #0]
 800df12:	e9c5 0100 	strd	r0, r1, [r5]
 800df16:	462a      	mov	r2, r5
 800df18:	4631      	mov	r1, r6
 800df1a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800df1e:	f003 ff63 	bl	8011de8 <rmw_send_request>
 800df22:	4606      	mov	r6, r0
 800df24:	b160      	cbz	r0, 800df40 <rcl_send_request+0x54>
 800df26:	2601      	movs	r6, #1
 800df28:	4630      	mov	r0, r6
 800df2a:	b002      	add	sp, #8
 800df2c:	bd70      	pop	{r4, r5, r6, pc}
 800df2e:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 800df32:	4630      	mov	r0, r6
 800df34:	b002      	add	sp, #8
 800df36:	bd70      	pop	{r4, r5, r6, pc}
 800df38:	260b      	movs	r6, #11
 800df3a:	4630      	mov	r0, r6
 800df3c:	b002      	add	sp, #8
 800df3e:	bd70      	pop	{r4, r5, r6, pc}
 800df40:	6820      	ldr	r0, [r4, #0]
 800df42:	2105      	movs	r1, #5
 800df44:	e9d5 2300 	ldrd	r2, r3, [r5]
 800df48:	f500 7088 	add.w	r0, r0, #272	; 0x110
 800df4c:	9100      	str	r1, [sp, #0]
 800df4e:	f7fc fa9d 	bl	800a48c <__atomic_exchange_8>
 800df52:	4630      	mov	r0, r6
 800df54:	b002      	add	sp, #8
 800df56:	bd70      	pop	{r4, r5, r6, pc}

0800df58 <rcl_take_response>:
 800df58:	b570      	push	{r4, r5, r6, lr}
 800df5a:	468e      	mov	lr, r1
 800df5c:	460c      	mov	r4, r1
 800df5e:	4616      	mov	r6, r2
 800df60:	4605      	mov	r5, r0
 800df62:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800df66:	b08c      	sub	sp, #48	; 0x30
 800df68:	f10d 0c18 	add.w	ip, sp, #24
 800df6c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800df70:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800df74:	e88c 0003 	stmia.w	ip, {r0, r1}
 800df78:	b35d      	cbz	r5, 800dfd2 <rcl_take_response+0x7a>
 800df7a:	682b      	ldr	r3, [r5, #0]
 800df7c:	b34b      	cbz	r3, 800dfd2 <rcl_take_response+0x7a>
 800df7e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800df82:	b330      	cbz	r0, 800dfd2 <rcl_take_response+0x7a>
 800df84:	b346      	cbz	r6, 800dfd8 <rcl_take_response+0x80>
 800df86:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800dfe0 <rcl_take_response+0x88>
 800df8a:	2300      	movs	r3, #0
 800df8c:	f88d 3007 	strb.w	r3, [sp, #7]
 800df90:	4632      	mov	r2, r6
 800df92:	f10d 0307 	add.w	r3, sp, #7
 800df96:	a902      	add	r1, sp, #8
 800df98:	ed8d 7b02 	vstr	d7, [sp, #8]
 800df9c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800dfa0:	f004 f82a 	bl	8011ff8 <rmw_take_response>
 800dfa4:	4605      	mov	r5, r0
 800dfa6:	b9c8      	cbnz	r0, 800dfdc <rcl_take_response+0x84>
 800dfa8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800dfac:	f240 13f5 	movw	r3, #501	; 0x1f5
 800dfb0:	2a00      	cmp	r2, #0
 800dfb2:	bf08      	it	eq
 800dfb4:	461d      	moveq	r5, r3
 800dfb6:	f10d 0e18 	add.w	lr, sp, #24
 800dfba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800dfbe:	46a4      	mov	ip, r4
 800dfc0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dfc4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800dfc8:	e88c 0003 	stmia.w	ip, {r0, r1}
 800dfcc:	4628      	mov	r0, r5
 800dfce:	b00c      	add	sp, #48	; 0x30
 800dfd0:	bd70      	pop	{r4, r5, r6, pc}
 800dfd2:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 800dfd6:	e7ee      	b.n	800dfb6 <rcl_take_response+0x5e>
 800dfd8:	250b      	movs	r5, #11
 800dfda:	e7ec      	b.n	800dfb6 <rcl_take_response+0x5e>
 800dfdc:	2501      	movs	r5, #1
 800dfde:	e7ea      	b.n	800dfb6 <rcl_take_response+0x5e>
	...

0800dfe8 <rcl_client_is_valid>:
 800dfe8:	b130      	cbz	r0, 800dff8 <rcl_client_is_valid+0x10>
 800dfea:	6800      	ldr	r0, [r0, #0]
 800dfec:	b120      	cbz	r0, 800dff8 <rcl_client_is_valid+0x10>
 800dfee:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800dff2:	3800      	subs	r0, #0
 800dff4:	bf18      	it	ne
 800dff6:	2001      	movne	r0, #1
 800dff8:	4770      	bx	lr
 800dffa:	bf00      	nop

0800dffc <rcl_convert_rmw_ret_to_rcl_ret>:
 800dffc:	280b      	cmp	r0, #11
 800dffe:	dc0d      	bgt.n	800e01c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800e000:	2800      	cmp	r0, #0
 800e002:	db09      	blt.n	800e018 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800e004:	280b      	cmp	r0, #11
 800e006:	d807      	bhi.n	800e018 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800e008:	e8df f000 	tbb	[pc, r0]
 800e00c:	07060607 	.word	0x07060607
 800e010:	06060606 	.word	0x06060606
 800e014:	07070606 	.word	0x07070606
 800e018:	2001      	movs	r0, #1
 800e01a:	4770      	bx	lr
 800e01c:	28cb      	cmp	r0, #203	; 0xcb
 800e01e:	bf18      	it	ne
 800e020:	2001      	movne	r0, #1
 800e022:	4770      	bx	lr

0800e024 <rcl_get_zero_initialized_context>:
 800e024:	4a03      	ldr	r2, [pc, #12]	; (800e034 <rcl_get_zero_initialized_context+0x10>)
 800e026:	4603      	mov	r3, r0
 800e028:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e02c:	e883 0003 	stmia.w	r3, {r0, r1}
 800e030:	4618      	mov	r0, r3
 800e032:	4770      	bx	lr
 800e034:	080167cc 	.word	0x080167cc

0800e038 <rcl_context_is_valid>:
 800e038:	b118      	cbz	r0, 800e042 <rcl_context_is_valid+0xa>
 800e03a:	6840      	ldr	r0, [r0, #4]
 800e03c:	3800      	subs	r0, #0
 800e03e:	bf18      	it	ne
 800e040:	2001      	movne	r0, #1
 800e042:	4770      	bx	lr

0800e044 <__cleanup_context>:
 800e044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e048:	4606      	mov	r6, r0
 800e04a:	6800      	ldr	r0, [r0, #0]
 800e04c:	2300      	movs	r3, #0
 800e04e:	6073      	str	r3, [r6, #4]
 800e050:	2800      	cmp	r0, #0
 800e052:	d049      	beq.n	800e0e8 <__cleanup_context+0xa4>
 800e054:	6947      	ldr	r7, [r0, #20]
 800e056:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800e05a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800e05e:	b137      	cbz	r7, 800e06e <__cleanup_context+0x2a>
 800e060:	3014      	adds	r0, #20
 800e062:	f000 fac9 	bl	800e5f8 <rcl_init_options_fini>
 800e066:	4607      	mov	r7, r0
 800e068:	2800      	cmp	r0, #0
 800e06a:	d144      	bne.n	800e0f6 <__cleanup_context+0xb2>
 800e06c:	6830      	ldr	r0, [r6, #0]
 800e06e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e070:	b143      	cbz	r3, 800e084 <__cleanup_context+0x40>
 800e072:	3028      	adds	r0, #40	; 0x28
 800e074:	f003 fd00 	bl	8011a78 <rmw_context_fini>
 800e078:	b118      	cbz	r0, 800e082 <__cleanup_context+0x3e>
 800e07a:	2f00      	cmp	r7, #0
 800e07c:	d03e      	beq.n	800e0fc <__cleanup_context+0xb8>
 800e07e:	f7fc fa53 	bl	800a528 <rcutils_reset_error>
 800e082:	6830      	ldr	r0, [r6, #0]
 800e084:	6a03      	ldr	r3, [r0, #32]
 800e086:	b1db      	cbz	r3, 800e0c0 <__cleanup_context+0x7c>
 800e088:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800e08c:	2a01      	cmp	r2, #1
 800e08e:	f17c 0100 	sbcs.w	r1, ip, #0
 800e092:	db11      	blt.n	800e0b8 <__cleanup_context+0x74>
 800e094:	2400      	movs	r4, #0
 800e096:	4625      	mov	r5, r4
 800e098:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e09c:	4649      	mov	r1, r9
 800e09e:	b1b8      	cbz	r0, 800e0d0 <__cleanup_context+0x8c>
 800e0a0:	47c0      	blx	r8
 800e0a2:	6833      	ldr	r3, [r6, #0]
 800e0a4:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800e0a8:	3401      	adds	r4, #1
 800e0aa:	f145 0500 	adc.w	r5, r5, #0
 800e0ae:	4294      	cmp	r4, r2
 800e0b0:	eb75 010c 	sbcs.w	r1, r5, ip
 800e0b4:	6a1b      	ldr	r3, [r3, #32]
 800e0b6:	dbef      	blt.n	800e098 <__cleanup_context+0x54>
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	4649      	mov	r1, r9
 800e0bc:	47c0      	blx	r8
 800e0be:	6830      	ldr	r0, [r6, #0]
 800e0c0:	4649      	mov	r1, r9
 800e0c2:	47c0      	blx	r8
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	e9c6 3300 	strd	r3, r3, [r6]
 800e0ca:	4638      	mov	r0, r7
 800e0cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0d0:	3401      	adds	r4, #1
 800e0d2:	f145 0500 	adc.w	r5, r5, #0
 800e0d6:	4294      	cmp	r4, r2
 800e0d8:	eb75 010c 	sbcs.w	r1, r5, ip
 800e0dc:	dbdc      	blt.n	800e098 <__cleanup_context+0x54>
 800e0de:	4618      	mov	r0, r3
 800e0e0:	4649      	mov	r1, r9
 800e0e2:	47c0      	blx	r8
 800e0e4:	6830      	ldr	r0, [r6, #0]
 800e0e6:	e7eb      	b.n	800e0c0 <__cleanup_context+0x7c>
 800e0e8:	4607      	mov	r7, r0
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	e9c6 3300 	strd	r3, r3, [r6]
 800e0f0:	4638      	mov	r0, r7
 800e0f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0f6:	f7fc fa17 	bl	800a528 <rcutils_reset_error>
 800e0fa:	e7b7      	b.n	800e06c <__cleanup_context+0x28>
 800e0fc:	f7ff ff7e 	bl	800dffc <rcl_convert_rmw_ret_to_rcl_ret>
 800e100:	4607      	mov	r7, r0
 800e102:	e7bc      	b.n	800e07e <__cleanup_context+0x3a>

0800e104 <rcl_get_zero_initialized_guard_condition>:
 800e104:	4a03      	ldr	r2, [pc, #12]	; (800e114 <rcl_get_zero_initialized_guard_condition+0x10>)
 800e106:	4603      	mov	r3, r0
 800e108:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e10c:	e883 0003 	stmia.w	r3, {r0, r1}
 800e110:	4618      	mov	r0, r3
 800e112:	4770      	bx	lr
 800e114:	080167d4 	.word	0x080167d4

0800e118 <rcl_guard_condition_init>:
 800e118:	b082      	sub	sp, #8
 800e11a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e11c:	b087      	sub	sp, #28
 800e11e:	ac0c      	add	r4, sp, #48	; 0x30
 800e120:	e884 000c 	stmia.w	r4, {r2, r3}
 800e124:	46a6      	mov	lr, r4
 800e126:	460d      	mov	r5, r1
 800e128:	4604      	mov	r4, r0
 800e12a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e12e:	f10d 0c04 	add.w	ip, sp, #4
 800e132:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e136:	f8de 3000 	ldr.w	r3, [lr]
 800e13a:	f8cc 3000 	str.w	r3, [ip]
 800e13e:	a801      	add	r0, sp, #4
 800e140:	f7fc f92a 	bl	800a398 <rcutils_allocator_is_valid>
 800e144:	b338      	cbz	r0, 800e196 <rcl_guard_condition_init+0x7e>
 800e146:	b334      	cbz	r4, 800e196 <rcl_guard_condition_init+0x7e>
 800e148:	6866      	ldr	r6, [r4, #4]
 800e14a:	b9ee      	cbnz	r6, 800e188 <rcl_guard_condition_init+0x70>
 800e14c:	b31d      	cbz	r5, 800e196 <rcl_guard_condition_init+0x7e>
 800e14e:	4628      	mov	r0, r5
 800e150:	f7ff ff72 	bl	800e038 <rcl_context_is_valid>
 800e154:	b308      	cbz	r0, 800e19a <rcl_guard_condition_init+0x82>
 800e156:	9b01      	ldr	r3, [sp, #4]
 800e158:	9905      	ldr	r1, [sp, #20]
 800e15a:	201c      	movs	r0, #28
 800e15c:	4798      	blx	r3
 800e15e:	4607      	mov	r7, r0
 800e160:	6060      	str	r0, [r4, #4]
 800e162:	b310      	cbz	r0, 800e1aa <rcl_guard_condition_init+0x92>
 800e164:	6828      	ldr	r0, [r5, #0]
 800e166:	3028      	adds	r0, #40	; 0x28
 800e168:	f003 fa30 	bl	80115cc <rmw_create_guard_condition>
 800e16c:	6038      	str	r0, [r7, #0]
 800e16e:	6860      	ldr	r0, [r4, #4]
 800e170:	6805      	ldr	r5, [r0, #0]
 800e172:	b1a5      	cbz	r5, 800e19e <rcl_guard_condition_init+0x86>
 800e174:	2301      	movs	r3, #1
 800e176:	ac01      	add	r4, sp, #4
 800e178:	7103      	strb	r3, [r0, #4]
 800e17a:	f100 0708 	add.w	r7, r0, #8
 800e17e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e180:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800e182:	6823      	ldr	r3, [r4, #0]
 800e184:	603b      	str	r3, [r7, #0]
 800e186:	e000      	b.n	800e18a <rcl_guard_condition_init+0x72>
 800e188:	2664      	movs	r6, #100	; 0x64
 800e18a:	4630      	mov	r0, r6
 800e18c:	b007      	add	sp, #28
 800e18e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e192:	b002      	add	sp, #8
 800e194:	4770      	bx	lr
 800e196:	260b      	movs	r6, #11
 800e198:	e7f7      	b.n	800e18a <rcl_guard_condition_init+0x72>
 800e19a:	2665      	movs	r6, #101	; 0x65
 800e19c:	e7f5      	b.n	800e18a <rcl_guard_condition_init+0x72>
 800e19e:	9b02      	ldr	r3, [sp, #8]
 800e1a0:	9905      	ldr	r1, [sp, #20]
 800e1a2:	4798      	blx	r3
 800e1a4:	2601      	movs	r6, #1
 800e1a6:	6065      	str	r5, [r4, #4]
 800e1a8:	e7ef      	b.n	800e18a <rcl_guard_condition_init+0x72>
 800e1aa:	260a      	movs	r6, #10
 800e1ac:	e7ed      	b.n	800e18a <rcl_guard_condition_init+0x72>
 800e1ae:	bf00      	nop

0800e1b0 <rcl_guard_condition_init_from_rmw>:
 800e1b0:	b082      	sub	sp, #8
 800e1b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1b6:	b086      	sub	sp, #24
 800e1b8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800e1bc:	4604      	mov	r4, r0
 800e1be:	f84c 3f04 	str.w	r3, [ip, #4]!
 800e1c2:	460e      	mov	r6, r1
 800e1c4:	4617      	mov	r7, r2
 800e1c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e1ca:	f10d 0e04 	add.w	lr, sp, #4
 800e1ce:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e1d2:	f8dc 3000 	ldr.w	r3, [ip]
 800e1d6:	f8ce 3000 	str.w	r3, [lr]
 800e1da:	a801      	add	r0, sp, #4
 800e1dc:	f7fc f8dc 	bl	800a398 <rcutils_allocator_is_valid>
 800e1e0:	b350      	cbz	r0, 800e238 <rcl_guard_condition_init_from_rmw+0x88>
 800e1e2:	b34c      	cbz	r4, 800e238 <rcl_guard_condition_init_from_rmw+0x88>
 800e1e4:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800e1e8:	f1b8 0f00 	cmp.w	r8, #0
 800e1ec:	d11e      	bne.n	800e22c <rcl_guard_condition_init_from_rmw+0x7c>
 800e1ee:	b31f      	cbz	r7, 800e238 <rcl_guard_condition_init_from_rmw+0x88>
 800e1f0:	4638      	mov	r0, r7
 800e1f2:	f7ff ff21 	bl	800e038 <rcl_context_is_valid>
 800e1f6:	b328      	cbz	r0, 800e244 <rcl_guard_condition_init_from_rmw+0x94>
 800e1f8:	9b01      	ldr	r3, [sp, #4]
 800e1fa:	9905      	ldr	r1, [sp, #20]
 800e1fc:	201c      	movs	r0, #28
 800e1fe:	4798      	blx	r3
 800e200:	4605      	mov	r5, r0
 800e202:	6060      	str	r0, [r4, #4]
 800e204:	b358      	cbz	r0, 800e25e <rcl_guard_condition_init_from_rmw+0xae>
 800e206:	b1fe      	cbz	r6, 800e248 <rcl_guard_condition_init_from_rmw+0x98>
 800e208:	6006      	str	r6, [r0, #0]
 800e20a:	f880 8004 	strb.w	r8, [r0, #4]
 800e20e:	ac01      	add	r4, sp, #4
 800e210:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e212:	f105 0c08 	add.w	ip, r5, #8
 800e216:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e21a:	6823      	ldr	r3, [r4, #0]
 800e21c:	f8cc 3000 	str.w	r3, [ip]
 800e220:	2000      	movs	r0, #0
 800e222:	b006      	add	sp, #24
 800e224:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e228:	b002      	add	sp, #8
 800e22a:	4770      	bx	lr
 800e22c:	2064      	movs	r0, #100	; 0x64
 800e22e:	b006      	add	sp, #24
 800e230:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e234:	b002      	add	sp, #8
 800e236:	4770      	bx	lr
 800e238:	200b      	movs	r0, #11
 800e23a:	b006      	add	sp, #24
 800e23c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e240:	b002      	add	sp, #8
 800e242:	4770      	bx	lr
 800e244:	2065      	movs	r0, #101	; 0x65
 800e246:	e7f2      	b.n	800e22e <rcl_guard_condition_init_from_rmw+0x7e>
 800e248:	6838      	ldr	r0, [r7, #0]
 800e24a:	3028      	adds	r0, #40	; 0x28
 800e24c:	f003 f9be 	bl	80115cc <rmw_create_guard_condition>
 800e250:	6028      	str	r0, [r5, #0]
 800e252:	6865      	ldr	r5, [r4, #4]
 800e254:	682e      	ldr	r6, [r5, #0]
 800e256:	b126      	cbz	r6, 800e262 <rcl_guard_condition_init_from_rmw+0xb2>
 800e258:	2301      	movs	r3, #1
 800e25a:	712b      	strb	r3, [r5, #4]
 800e25c:	e7d7      	b.n	800e20e <rcl_guard_condition_init_from_rmw+0x5e>
 800e25e:	200a      	movs	r0, #10
 800e260:	e7e5      	b.n	800e22e <rcl_guard_condition_init_from_rmw+0x7e>
 800e262:	4628      	mov	r0, r5
 800e264:	9b02      	ldr	r3, [sp, #8]
 800e266:	9905      	ldr	r1, [sp, #20]
 800e268:	4798      	blx	r3
 800e26a:	6066      	str	r6, [r4, #4]
 800e26c:	2001      	movs	r0, #1
 800e26e:	e7de      	b.n	800e22e <rcl_guard_condition_init_from_rmw+0x7e>

0800e270 <rcl_guard_condition_fini>:
 800e270:	b570      	push	{r4, r5, r6, lr}
 800e272:	b082      	sub	sp, #8
 800e274:	b1f0      	cbz	r0, 800e2b4 <rcl_guard_condition_fini+0x44>
 800e276:	6843      	ldr	r3, [r0, #4]
 800e278:	4604      	mov	r4, r0
 800e27a:	b163      	cbz	r3, 800e296 <rcl_guard_condition_fini+0x26>
 800e27c:	6818      	ldr	r0, [r3, #0]
 800e27e:	68de      	ldr	r6, [r3, #12]
 800e280:	6999      	ldr	r1, [r3, #24]
 800e282:	b160      	cbz	r0, 800e29e <rcl_guard_condition_fini+0x2e>
 800e284:	791d      	ldrb	r5, [r3, #4]
 800e286:	b965      	cbnz	r5, 800e2a2 <rcl_guard_condition_fini+0x32>
 800e288:	4618      	mov	r0, r3
 800e28a:	47b0      	blx	r6
 800e28c:	2300      	movs	r3, #0
 800e28e:	4628      	mov	r0, r5
 800e290:	6063      	str	r3, [r4, #4]
 800e292:	b002      	add	sp, #8
 800e294:	bd70      	pop	{r4, r5, r6, pc}
 800e296:	461d      	mov	r5, r3
 800e298:	4628      	mov	r0, r5
 800e29a:	b002      	add	sp, #8
 800e29c:	bd70      	pop	{r4, r5, r6, pc}
 800e29e:	4605      	mov	r5, r0
 800e2a0:	e7f2      	b.n	800e288 <rcl_guard_condition_fini+0x18>
 800e2a2:	9101      	str	r1, [sp, #4]
 800e2a4:	f003 f9a6 	bl	80115f4 <rmw_destroy_guard_condition>
 800e2a8:	1e05      	subs	r5, r0, #0
 800e2aa:	6863      	ldr	r3, [r4, #4]
 800e2ac:	9901      	ldr	r1, [sp, #4]
 800e2ae:	bf18      	it	ne
 800e2b0:	2501      	movne	r5, #1
 800e2b2:	e7e9      	b.n	800e288 <rcl_guard_condition_fini+0x18>
 800e2b4:	250b      	movs	r5, #11
 800e2b6:	4628      	mov	r0, r5
 800e2b8:	b002      	add	sp, #8
 800e2ba:	bd70      	pop	{r4, r5, r6, pc}

0800e2bc <rcl_guard_condition_get_default_options>:
 800e2bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2be:	b087      	sub	sp, #28
 800e2c0:	4606      	mov	r6, r0
 800e2c2:	4668      	mov	r0, sp
 800e2c4:	f7fc f85a 	bl	800a37c <rcutils_get_default_allocator>
 800e2c8:	4b09      	ldr	r3, [pc, #36]	; (800e2f0 <rcl_guard_condition_get_default_options+0x34>)
 800e2ca:	46ee      	mov	lr, sp
 800e2cc:	469c      	mov	ip, r3
 800e2ce:	461d      	mov	r5, r3
 800e2d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e2d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e2d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e2da:	4634      	mov	r4, r6
 800e2dc:	f8de 7000 	ldr.w	r7, [lr]
 800e2e0:	f8cc 7000 	str.w	r7, [ip]
 800e2e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e2e6:	4630      	mov	r0, r6
 800e2e8:	6027      	str	r7, [r4, #0]
 800e2ea:	b007      	add	sp, #28
 800e2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2ee:	bf00      	nop
 800e2f0:	2000dc4c 	.word	0x2000dc4c

0800e2f4 <rcl_trigger_guard_condition>:
 800e2f4:	b148      	cbz	r0, 800e30a <rcl_trigger_guard_condition+0x16>
 800e2f6:	b508      	push	{r3, lr}
 800e2f8:	6843      	ldr	r3, [r0, #4]
 800e2fa:	b143      	cbz	r3, 800e30e <rcl_trigger_guard_condition+0x1a>
 800e2fc:	6818      	ldr	r0, [r3, #0]
 800e2fe:	f004 f8af 	bl	8012460 <rmw_trigger_guard_condition>
 800e302:	3800      	subs	r0, #0
 800e304:	bf18      	it	ne
 800e306:	2001      	movne	r0, #1
 800e308:	bd08      	pop	{r3, pc}
 800e30a:	200b      	movs	r0, #11
 800e30c:	4770      	bx	lr
 800e30e:	200b      	movs	r0, #11
 800e310:	bd08      	pop	{r3, pc}
 800e312:	bf00      	nop

0800e314 <rcl_guard_condition_get_rmw_handle>:
 800e314:	b110      	cbz	r0, 800e31c <rcl_guard_condition_get_rmw_handle+0x8>
 800e316:	6840      	ldr	r0, [r0, #4]
 800e318:	b100      	cbz	r0, 800e31c <rcl_guard_condition_get_rmw_handle+0x8>
 800e31a:	6800      	ldr	r0, [r0, #0]
 800e31c:	4770      	bx	lr
 800e31e:	bf00      	nop

0800e320 <rcl_init>:
 800e320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e324:	1e05      	subs	r5, r0, #0
 800e326:	b09e      	sub	sp, #120	; 0x78
 800e328:	460e      	mov	r6, r1
 800e32a:	4690      	mov	r8, r2
 800e32c:	461f      	mov	r7, r3
 800e32e:	f340 809c 	ble.w	800e46a <rcl_init+0x14a>
 800e332:	2900      	cmp	r1, #0
 800e334:	f000 809c 	beq.w	800e470 <rcl_init+0x150>
 800e338:	f1a1 0e04 	sub.w	lr, r1, #4
 800e33c:	f04f 0c00 	mov.w	ip, #0
 800e340:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800e344:	f10c 0c01 	add.w	ip, ip, #1
 800e348:	2c00      	cmp	r4, #0
 800e34a:	f000 8091 	beq.w	800e470 <rcl_init+0x150>
 800e34e:	4565      	cmp	r5, ip
 800e350:	d1f6      	bne.n	800e340 <rcl_init+0x20>
 800e352:	f1b8 0f00 	cmp.w	r8, #0
 800e356:	f000 808b 	beq.w	800e470 <rcl_init+0x150>
 800e35a:	f8d8 4000 	ldr.w	r4, [r8]
 800e35e:	2c00      	cmp	r4, #0
 800e360:	f000 8086 	beq.w	800e470 <rcl_init+0x150>
 800e364:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e366:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 800e36a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e36e:	6823      	ldr	r3, [r4, #0]
 800e370:	f8cc 3000 	str.w	r3, [ip]
 800e374:	a819      	add	r0, sp, #100	; 0x64
 800e376:	f7fc f80f 	bl	800a398 <rcutils_allocator_is_valid>
 800e37a:	2800      	cmp	r0, #0
 800e37c:	d078      	beq.n	800e470 <rcl_init+0x150>
 800e37e:	2f00      	cmp	r7, #0
 800e380:	d076      	beq.n	800e470 <rcl_init+0x150>
 800e382:	683b      	ldr	r3, [r7, #0]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d178      	bne.n	800e47a <rcl_init+0x15a>
 800e388:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800e38c:	2178      	movs	r1, #120	; 0x78
 800e38e:	2001      	movs	r0, #1
 800e390:	4798      	blx	r3
 800e392:	4604      	mov	r4, r0
 800e394:	6038      	str	r0, [r7, #0]
 800e396:	2800      	cmp	r0, #0
 800e398:	f000 80b6 	beq.w	800e508 <rcl_init+0x1e8>
 800e39c:	a802      	add	r0, sp, #8
 800e39e:	f002 fe97 	bl	80110d0 <rmw_get_zero_initialized_context>
 800e3a2:	a902      	add	r1, sp, #8
 800e3a4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800e3a8:	2250      	movs	r2, #80	; 0x50
 800e3aa:	ac19      	add	r4, sp, #100	; 0x64
 800e3ac:	f007 f83b 	bl	8015426 <memcpy>
 800e3b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e3b2:	f8d7 e000 	ldr.w	lr, [r7]
 800e3b6:	46f4      	mov	ip, lr
 800e3b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e3bc:	6823      	ldr	r3, [r4, #0]
 800e3be:	f8cc 3000 	str.w	r3, [ip]
 800e3c2:	f10e 0114 	add.w	r1, lr, #20
 800e3c6:	4640      	mov	r0, r8
 800e3c8:	f000 f940 	bl	800e64c <rcl_init_options_copy>
 800e3cc:	4604      	mov	r4, r0
 800e3ce:	2800      	cmp	r0, #0
 800e3d0:	d144      	bne.n	800e45c <rcl_init+0x13c>
 800e3d2:	f8d7 9000 	ldr.w	r9, [r7]
 800e3d6:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800e3da:	f8c9 0020 	str.w	r0, [r9, #32]
 800e3de:	f8c9 5018 	str.w	r5, [r9, #24]
 800e3e2:	f8c9 801c 	str.w	r8, [r9, #28]
 800e3e6:	2d00      	cmp	r5, #0
 800e3e8:	d04e      	beq.n	800e488 <rcl_init+0x168>
 800e3ea:	2e00      	cmp	r6, #0
 800e3ec:	d04c      	beq.n	800e488 <rcl_init+0x168>
 800e3ee:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800e3f2:	2104      	movs	r1, #4
 800e3f4:	4628      	mov	r0, r5
 800e3f6:	4798      	blx	r3
 800e3f8:	f8c9 0020 	str.w	r0, [r9, #32]
 800e3fc:	f8d7 9000 	ldr.w	r9, [r7]
 800e400:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800e404:	46ca      	mov	sl, r9
 800e406:	b343      	cbz	r3, 800e45a <rcl_init+0x13a>
 800e408:	2d01      	cmp	r5, #1
 800e40a:	f178 0300 	sbcs.w	r3, r8, #0
 800e40e:	db3b      	blt.n	800e488 <rcl_init+0x168>
 800e410:	2400      	movs	r4, #0
 800e412:	3e04      	subs	r6, #4
 800e414:	46a1      	mov	r9, r4
 800e416:	e00b      	b.n	800e430 <rcl_init+0x110>
 800e418:	6831      	ldr	r1, [r6, #0]
 800e41a:	f007 f804 	bl	8015426 <memcpy>
 800e41e:	3401      	adds	r4, #1
 800e420:	f149 0900 	adc.w	r9, r9, #0
 800e424:	45c8      	cmp	r8, r9
 800e426:	bf08      	it	eq
 800e428:	42a5      	cmpeq	r5, r4
 800e42a:	d02b      	beq.n	800e484 <rcl_init+0x164>
 800e42c:	f8d7 a000 	ldr.w	sl, [r7]
 800e430:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800e434:	f7f1 fede 	bl	80001f4 <strlen>
 800e438:	1c42      	adds	r2, r0, #1
 800e43a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e43c:	991d      	ldr	r1, [sp, #116]	; 0x74
 800e43e:	f8da a020 	ldr.w	sl, [sl, #32]
 800e442:	9201      	str	r2, [sp, #4]
 800e444:	4610      	mov	r0, r2
 800e446:	4798      	blx	r3
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800e44e:	6a1b      	ldr	r3, [r3, #32]
 800e450:	9a01      	ldr	r2, [sp, #4]
 800e452:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e456:	2800      	cmp	r0, #0
 800e458:	d1de      	bne.n	800e418 <rcl_init+0xf8>
 800e45a:	240a      	movs	r4, #10
 800e45c:	4638      	mov	r0, r7
 800e45e:	f7ff fdf1 	bl	800e044 <__cleanup_context>
 800e462:	4620      	mov	r0, r4
 800e464:	b01e      	add	sp, #120	; 0x78
 800e466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e46a:	2900      	cmp	r1, #0
 800e46c:	f43f af71 	beq.w	800e352 <rcl_init+0x32>
 800e470:	240b      	movs	r4, #11
 800e472:	4620      	mov	r0, r4
 800e474:	b01e      	add	sp, #120	; 0x78
 800e476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e47a:	2464      	movs	r4, #100	; 0x64
 800e47c:	4620      	mov	r0, r4
 800e47e:	b01e      	add	sp, #120	; 0x78
 800e480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e484:	f8d7 9000 	ldr.w	r9, [r7]
 800e488:	4926      	ldr	r1, [pc, #152]	; (800e524 <rcl_init+0x204>)
 800e48a:	680b      	ldr	r3, [r1, #0]
 800e48c:	3301      	adds	r3, #1
 800e48e:	d036      	beq.n	800e4fe <rcl_init+0x1de>
 800e490:	600b      	str	r3, [r1, #0]
 800e492:	461a      	mov	r2, r3
 800e494:	2400      	movs	r4, #0
 800e496:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800e49a:	607b      	str	r3, [r7, #4]
 800e49c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e49e:	3301      	adds	r3, #1
 800e4a0:	e9c0 2406 	strd	r2, r4, [r0, #24]
 800e4a4:	d034      	beq.n	800e510 <rcl_init+0x1f0>
 800e4a6:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800e4aa:	b93b      	cbnz	r3, 800e4bc <rcl_init+0x19c>
 800e4ac:	3030      	adds	r0, #48	; 0x30
 800e4ae:	f000 f939 	bl	800e724 <rcl_get_localhost_only>
 800e4b2:	4604      	mov	r4, r0
 800e4b4:	2800      	cmp	r0, #0
 800e4b6:	d1d1      	bne.n	800e45c <rcl_init+0x13c>
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	6958      	ldr	r0, [r3, #20]
 800e4bc:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800e4be:	aa18      	add	r2, sp, #96	; 0x60
 800e4c0:	a917      	add	r1, sp, #92	; 0x5c
 800e4c2:	f000 fff9 	bl	800f4b8 <rcl_validate_enclave_name>
 800e4c6:	4604      	mov	r4, r0
 800e4c8:	2800      	cmp	r0, #0
 800e4ca:	d1c7      	bne.n	800e45c <rcl_init+0x13c>
 800e4cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e4ce:	b9eb      	cbnz	r3, 800e50c <rcl_init+0x1ec>
 800e4d0:	6839      	ldr	r1, [r7, #0]
 800e4d2:	694b      	ldr	r3, [r1, #20]
 800e4d4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800e4d6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800e4da:	f000 fc3d 	bl	800ed58 <rcl_get_security_options_from_environment>
 800e4de:	4604      	mov	r4, r0
 800e4e0:	2800      	cmp	r0, #0
 800e4e2:	d1bb      	bne.n	800e45c <rcl_init+0x13c>
 800e4e4:	6839      	ldr	r1, [r7, #0]
 800e4e6:	6948      	ldr	r0, [r1, #20]
 800e4e8:	3128      	adds	r1, #40	; 0x28
 800e4ea:	3018      	adds	r0, #24
 800e4ec:	f003 f98e 	bl	801180c <rmw_init>
 800e4f0:	4604      	mov	r4, r0
 800e4f2:	2800      	cmp	r0, #0
 800e4f4:	d0bd      	beq.n	800e472 <rcl_init+0x152>
 800e4f6:	f7ff fd81 	bl	800dffc <rcl_convert_rmw_ret_to_rcl_ret>
 800e4fa:	4604      	mov	r4, r0
 800e4fc:	e7ae      	b.n	800e45c <rcl_init+0x13c>
 800e4fe:	2201      	movs	r2, #1
 800e500:	461c      	mov	r4, r3
 800e502:	600a      	str	r2, [r1, #0]
 800e504:	4613      	mov	r3, r2
 800e506:	e7c6      	b.n	800e496 <rcl_init+0x176>
 800e508:	240a      	movs	r4, #10
 800e50a:	e7b2      	b.n	800e472 <rcl_init+0x152>
 800e50c:	2401      	movs	r4, #1
 800e50e:	e7a5      	b.n	800e45c <rcl_init+0x13c>
 800e510:	3024      	adds	r0, #36	; 0x24
 800e512:	f005 feff 	bl	8014314 <rcl_get_default_domain_id>
 800e516:	4604      	mov	r4, r0
 800e518:	2800      	cmp	r0, #0
 800e51a:	d19f      	bne.n	800e45c <rcl_init+0x13c>
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	6958      	ldr	r0, [r3, #20]
 800e520:	e7c1      	b.n	800e4a6 <rcl_init+0x186>
 800e522:	bf00      	nop
 800e524:	2000dc60 	.word	0x2000dc60

0800e528 <rcl_get_zero_initialized_init_options>:
 800e528:	2000      	movs	r0, #0
 800e52a:	4770      	bx	lr

0800e52c <rcl_init_options_init>:
 800e52c:	b084      	sub	sp, #16
 800e52e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e530:	b097      	sub	sp, #92	; 0x5c
 800e532:	ae1d      	add	r6, sp, #116	; 0x74
 800e534:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800e538:	2800      	cmp	r0, #0
 800e53a:	d058      	beq.n	800e5ee <rcl_init_options_init+0xc2>
 800e53c:	6803      	ldr	r3, [r0, #0]
 800e53e:	4605      	mov	r5, r0
 800e540:	b133      	cbz	r3, 800e550 <rcl_init_options_init+0x24>
 800e542:	2464      	movs	r4, #100	; 0x64
 800e544:	4620      	mov	r0, r4
 800e546:	b017      	add	sp, #92	; 0x5c
 800e548:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e54c:	b004      	add	sp, #16
 800e54e:	4770      	bx	lr
 800e550:	4630      	mov	r0, r6
 800e552:	f7fb ff21 	bl	800a398 <rcutils_allocator_is_valid>
 800e556:	2800      	cmp	r0, #0
 800e558:	d049      	beq.n	800e5ee <rcl_init_options_init+0xc2>
 800e55a:	46b4      	mov	ip, r6
 800e55c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e560:	ac11      	add	r4, sp, #68	; 0x44
 800e562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e564:	f8dc 3000 	ldr.w	r3, [ip]
 800e568:	6023      	str	r3, [r4, #0]
 800e56a:	9921      	ldr	r1, [sp, #132]	; 0x84
 800e56c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e56e:	2050      	movs	r0, #80	; 0x50
 800e570:	4798      	blx	r3
 800e572:	4604      	mov	r4, r0
 800e574:	6028      	str	r0, [r5, #0]
 800e576:	2800      	cmp	r0, #0
 800e578:	d03b      	beq.n	800e5f2 <rcl_init_options_init+0xc6>
 800e57a:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800e57e:	4686      	mov	lr, r0
 800e580:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e584:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e588:	f8dc 3000 	ldr.w	r3, [ip]
 800e58c:	f8ce 3000 	str.w	r3, [lr]
 800e590:	a802      	add	r0, sp, #8
 800e592:	f002 fdad 	bl	80110f0 <rmw_get_zero_initialized_init_options>
 800e596:	f10d 0e08 	add.w	lr, sp, #8
 800e59a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e59e:	f104 0c18 	add.w	ip, r4, #24
 800e5a2:	682f      	ldr	r7, [r5, #0]
 800e5a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e5a8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e5ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e5b0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e5b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e5b8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e5bc:	ac20      	add	r4, sp, #128	; 0x80
 800e5be:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e5c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e5c6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e5ca:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800e5ce:	f107 0018 	add.w	r0, r7, #24
 800e5d2:	f003 f823 	bl	801161c <rmw_init_options_init>
 800e5d6:	4604      	mov	r4, r0
 800e5d8:	2800      	cmp	r0, #0
 800e5da:	d0b3      	beq.n	800e544 <rcl_init_options_init+0x18>
 800e5dc:	9921      	ldr	r1, [sp, #132]	; 0x84
 800e5de:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e5e0:	6828      	ldr	r0, [r5, #0]
 800e5e2:	4798      	blx	r3
 800e5e4:	4620      	mov	r0, r4
 800e5e6:	f7ff fd09 	bl	800dffc <rcl_convert_rmw_ret_to_rcl_ret>
 800e5ea:	4604      	mov	r4, r0
 800e5ec:	e7aa      	b.n	800e544 <rcl_init_options_init+0x18>
 800e5ee:	240b      	movs	r4, #11
 800e5f0:	e7a8      	b.n	800e544 <rcl_init_options_init+0x18>
 800e5f2:	240a      	movs	r4, #10
 800e5f4:	e7a6      	b.n	800e544 <rcl_init_options_init+0x18>
 800e5f6:	bf00      	nop

0800e5f8 <rcl_init_options_fini>:
 800e5f8:	b530      	push	{r4, r5, lr}
 800e5fa:	b087      	sub	sp, #28
 800e5fc:	b1f0      	cbz	r0, 800e63c <rcl_init_options_fini+0x44>
 800e5fe:	6803      	ldr	r3, [r0, #0]
 800e600:	4604      	mov	r4, r0
 800e602:	b1db      	cbz	r3, 800e63c <rcl_init_options_fini+0x44>
 800e604:	469c      	mov	ip, r3
 800e606:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e60a:	f10d 0e04 	add.w	lr, sp, #4
 800e60e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e612:	f8dc 3000 	ldr.w	r3, [ip]
 800e616:	f8ce 3000 	str.w	r3, [lr]
 800e61a:	a801      	add	r0, sp, #4
 800e61c:	f7fb febc 	bl	800a398 <rcutils_allocator_is_valid>
 800e620:	b160      	cbz	r0, 800e63c <rcl_init_options_fini+0x44>
 800e622:	6820      	ldr	r0, [r4, #0]
 800e624:	3018      	adds	r0, #24
 800e626:	f003 f8a9 	bl	801177c <rmw_init_options_fini>
 800e62a:	4605      	mov	r5, r0
 800e62c:	b950      	cbnz	r0, 800e644 <rcl_init_options_fini+0x4c>
 800e62e:	6820      	ldr	r0, [r4, #0]
 800e630:	9b02      	ldr	r3, [sp, #8]
 800e632:	9905      	ldr	r1, [sp, #20]
 800e634:	4798      	blx	r3
 800e636:	4628      	mov	r0, r5
 800e638:	b007      	add	sp, #28
 800e63a:	bd30      	pop	{r4, r5, pc}
 800e63c:	250b      	movs	r5, #11
 800e63e:	4628      	mov	r0, r5
 800e640:	b007      	add	sp, #28
 800e642:	bd30      	pop	{r4, r5, pc}
 800e644:	f7ff fcda 	bl	800dffc <rcl_convert_rmw_ret_to_rcl_ret>
 800e648:	4605      	mov	r5, r0
 800e64a:	e7f8      	b.n	800e63e <rcl_init_options_fini+0x46>

0800e64c <rcl_init_options_copy>:
 800e64c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e650:	b094      	sub	sp, #80	; 0x50
 800e652:	2800      	cmp	r0, #0
 800e654:	d058      	beq.n	800e708 <rcl_init_options_copy+0xbc>
 800e656:	4604      	mov	r4, r0
 800e658:	6800      	ldr	r0, [r0, #0]
 800e65a:	2800      	cmp	r0, #0
 800e65c:	d054      	beq.n	800e708 <rcl_init_options_copy+0xbc>
 800e65e:	460e      	mov	r6, r1
 800e660:	f7fb fe9a 	bl	800a398 <rcutils_allocator_is_valid>
 800e664:	2800      	cmp	r0, #0
 800e666:	d04f      	beq.n	800e708 <rcl_init_options_copy+0xbc>
 800e668:	2e00      	cmp	r6, #0
 800e66a:	d04d      	beq.n	800e708 <rcl_init_options_copy+0xbc>
 800e66c:	6833      	ldr	r3, [r6, #0]
 800e66e:	b123      	cbz	r3, 800e67a <rcl_init_options_copy+0x2e>
 800e670:	2464      	movs	r4, #100	; 0x64
 800e672:	4620      	mov	r0, r4
 800e674:	b014      	add	sp, #80	; 0x50
 800e676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e67a:	6827      	ldr	r7, [r4, #0]
 800e67c:	46bc      	mov	ip, r7
 800e67e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e682:	ad0f      	add	r5, sp, #60	; 0x3c
 800e684:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e686:	f8dc 3000 	ldr.w	r3, [ip]
 800e68a:	f8d7 8000 	ldr.w	r8, [r7]
 800e68e:	602b      	str	r3, [r5, #0]
 800e690:	4619      	mov	r1, r3
 800e692:	2050      	movs	r0, #80	; 0x50
 800e694:	47c0      	blx	r8
 800e696:	4605      	mov	r5, r0
 800e698:	6030      	str	r0, [r6, #0]
 800e69a:	b3d0      	cbz	r0, 800e712 <rcl_init_options_copy+0xc6>
 800e69c:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 800e6a0:	4686      	mov	lr, r0
 800e6a2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e6a6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e6aa:	f8dc 3000 	ldr.w	r3, [ip]
 800e6ae:	f8ce 3000 	str.w	r3, [lr]
 800e6b2:	4668      	mov	r0, sp
 800e6b4:	f002 fd1c 	bl	80110f0 <rmw_get_zero_initialized_init_options>
 800e6b8:	46ee      	mov	lr, sp
 800e6ba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e6be:	f105 0c18 	add.w	ip, r5, #24
 800e6c2:	6824      	ldr	r4, [r4, #0]
 800e6c4:	6835      	ldr	r5, [r6, #0]
 800e6c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e6ca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e6ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e6d2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e6d6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e6da:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e6de:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e6e2:	f104 0018 	add.w	r0, r4, #24
 800e6e6:	f105 0118 	add.w	r1, r5, #24
 800e6ea:	f002 ffff 	bl	80116ec <rmw_init_options_copy>
 800e6ee:	4604      	mov	r4, r0
 800e6f0:	2800      	cmp	r0, #0
 800e6f2:	d0be      	beq.n	800e672 <rcl_init_options_copy+0x26>
 800e6f4:	f7fb ff02 	bl	800a4fc <rcutils_get_error_string>
 800e6f8:	f7fb ff16 	bl	800a528 <rcutils_reset_error>
 800e6fc:	4630      	mov	r0, r6
 800e6fe:	f7ff ff7b 	bl	800e5f8 <rcl_init_options_fini>
 800e702:	b140      	cbz	r0, 800e716 <rcl_init_options_copy+0xca>
 800e704:	4604      	mov	r4, r0
 800e706:	e7b4      	b.n	800e672 <rcl_init_options_copy+0x26>
 800e708:	240b      	movs	r4, #11
 800e70a:	4620      	mov	r0, r4
 800e70c:	b014      	add	sp, #80	; 0x50
 800e70e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e712:	240a      	movs	r4, #10
 800e714:	e7ad      	b.n	800e672 <rcl_init_options_copy+0x26>
 800e716:	4620      	mov	r0, r4
 800e718:	b014      	add	sp, #80	; 0x50
 800e71a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e71e:	f7ff bc6d 	b.w	800dffc <rcl_convert_rmw_ret_to_rcl_ret>
 800e722:	bf00      	nop

0800e724 <rcl_get_localhost_only>:
 800e724:	b510      	push	{r4, lr}
 800e726:	b082      	sub	sp, #8
 800e728:	2300      	movs	r3, #0
 800e72a:	9301      	str	r3, [sp, #4]
 800e72c:	b1b8      	cbz	r0, 800e75e <rcl_get_localhost_only+0x3a>
 800e72e:	4604      	mov	r4, r0
 800e730:	a901      	add	r1, sp, #4
 800e732:	480c      	ldr	r0, [pc, #48]	; (800e764 <rcl_get_localhost_only+0x40>)
 800e734:	f002 fa20 	bl	8010b78 <rcutils_get_env>
 800e738:	b110      	cbz	r0, 800e740 <rcl_get_localhost_only+0x1c>
 800e73a:	2001      	movs	r0, #1
 800e73c:	b002      	add	sp, #8
 800e73e:	bd10      	pop	{r4, pc}
 800e740:	9b01      	ldr	r3, [sp, #4]
 800e742:	b113      	cbz	r3, 800e74a <rcl_get_localhost_only+0x26>
 800e744:	781a      	ldrb	r2, [r3, #0]
 800e746:	2a31      	cmp	r2, #49	; 0x31
 800e748:	d004      	beq.n	800e754 <rcl_get_localhost_only+0x30>
 800e74a:	2302      	movs	r3, #2
 800e74c:	2000      	movs	r0, #0
 800e74e:	7023      	strb	r3, [r4, #0]
 800e750:	b002      	add	sp, #8
 800e752:	bd10      	pop	{r4, pc}
 800e754:	785b      	ldrb	r3, [r3, #1]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d1f7      	bne.n	800e74a <rcl_get_localhost_only+0x26>
 800e75a:	2301      	movs	r3, #1
 800e75c:	e7f6      	b.n	800e74c <rcl_get_localhost_only+0x28>
 800e75e:	200b      	movs	r0, #11
 800e760:	b002      	add	sp, #8
 800e762:	bd10      	pop	{r4, pc}
 800e764:	080167dc 	.word	0x080167dc

0800e768 <rcl_get_zero_initialized_node>:
 800e768:	4a03      	ldr	r2, [pc, #12]	; (800e778 <rcl_get_zero_initialized_node+0x10>)
 800e76a:	4603      	mov	r3, r0
 800e76c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e770:	e883 0003 	stmia.w	r3, {r0, r1}
 800e774:	4618      	mov	r0, r3
 800e776:	4770      	bx	lr
 800e778:	08016804 	.word	0x08016804

0800e77c <rcl_node_init>:
 800e77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e780:	b0a9      	sub	sp, #164	; 0xa4
 800e782:	4604      	mov	r4, r0
 800e784:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 800e788:	a823      	add	r0, sp, #140	; 0x8c
 800e78a:	460e      	mov	r6, r1
 800e78c:	4615      	mov	r5, r2
 800e78e:	461f      	mov	r7, r3
 800e790:	f7ff fd94 	bl	800e2bc <rcl_guard_condition_get_default_options>
 800e794:	f1b8 0f00 	cmp.w	r8, #0
 800e798:	f000 80e6 	beq.w	800e968 <rcl_node_init+0x1ec>
 800e79c:	4640      	mov	r0, r8
 800e79e:	f7fb fdfb 	bl	800a398 <rcutils_allocator_is_valid>
 800e7a2:	2800      	cmp	r0, #0
 800e7a4:	f000 80e0 	beq.w	800e968 <rcl_node_init+0x1ec>
 800e7a8:	2e00      	cmp	r6, #0
 800e7aa:	f000 80dd 	beq.w	800e968 <rcl_node_init+0x1ec>
 800e7ae:	2d00      	cmp	r5, #0
 800e7b0:	f000 80da 	beq.w	800e968 <rcl_node_init+0x1ec>
 800e7b4:	2c00      	cmp	r4, #0
 800e7b6:	f000 80d7 	beq.w	800e968 <rcl_node_init+0x1ec>
 800e7ba:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e7be:	f1b9 0f00 	cmp.w	r9, #0
 800e7c2:	f040 80fd 	bne.w	800e9c0 <rcl_node_init+0x244>
 800e7c6:	2f00      	cmp	r7, #0
 800e7c8:	f000 80ce 	beq.w	800e968 <rcl_node_init+0x1ec>
 800e7cc:	4638      	mov	r0, r7
 800e7ce:	f7ff fc33 	bl	800e038 <rcl_context_is_valid>
 800e7d2:	4682      	mov	sl, r0
 800e7d4:	2800      	cmp	r0, #0
 800e7d6:	f000 80cd 	beq.w	800e974 <rcl_node_init+0x1f8>
 800e7da:	464a      	mov	r2, r9
 800e7dc:	a922      	add	r1, sp, #136	; 0x88
 800e7de:	4630      	mov	r0, r6
 800e7e0:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 800e7e4:	f002 fe26 	bl	8011434 <rmw_validate_node_name>
 800e7e8:	4681      	mov	r9, r0
 800e7ea:	2800      	cmp	r0, #0
 800e7ec:	f040 80be 	bne.w	800e96c <rcl_node_init+0x1f0>
 800e7f0:	9822      	ldr	r0, [sp, #136]	; 0x88
 800e7f2:	2800      	cmp	r0, #0
 800e7f4:	f040 80f0 	bne.w	800e9d8 <rcl_node_init+0x25c>
 800e7f8:	4628      	mov	r0, r5
 800e7fa:	f7f1 fcfb 	bl	80001f4 <strlen>
 800e7fe:	2800      	cmp	r0, #0
 800e800:	f040 80bb 	bne.w	800e97a <rcl_node_init+0x1fe>
 800e804:	4d7c      	ldr	r5, [pc, #496]	; (800e9f8 <rcl_node_init+0x27c>)
 800e806:	a922      	add	r1, sp, #136	; 0x88
 800e808:	2200      	movs	r2, #0
 800e80a:	4628      	mov	r0, r5
 800e80c:	f002 fdf4 	bl	80113f8 <rmw_validate_namespace>
 800e810:	4681      	mov	r9, r0
 800e812:	2800      	cmp	r0, #0
 800e814:	f040 80aa 	bne.w	800e96c <rcl_node_init+0x1f0>
 800e818:	4682      	mov	sl, r0
 800e81a:	9822      	ldr	r0, [sp, #136]	; 0x88
 800e81c:	2800      	cmp	r0, #0
 800e81e:	f040 80e0 	bne.w	800e9e2 <rcl_node_init+0x266>
 800e822:	f8d8 3000 	ldr.w	r3, [r8]
 800e826:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e82a:	2078      	movs	r0, #120	; 0x78
 800e82c:	4798      	blx	r3
 800e82e:	4681      	mov	r9, r0
 800e830:	6060      	str	r0, [r4, #4]
 800e832:	2800      	cmp	r0, #0
 800e834:	f000 80ca 	beq.w	800e9cc <rcl_node_init+0x250>
 800e838:	2200      	movs	r2, #0
 800e83a:	2300      	movs	r3, #0
 800e83c:	e9c9 231a 	strd	r2, r3, [r9, #104]	; 0x68
 800e840:	e9c9 231c 	strd	r2, r3, [r9, #112]	; 0x70
 800e844:	a808      	add	r0, sp, #32
 800e846:	f000 f907 	bl	800ea58 <rcl_node_get_default_options>
 800e84a:	a908      	add	r1, sp, #32
 800e84c:	4648      	mov	r0, r9
 800e84e:	2268      	movs	r2, #104	; 0x68
 800e850:	f006 fde9 	bl	8015426 <memcpy>
 800e854:	6861      	ldr	r1, [r4, #4]
 800e856:	6027      	str	r7, [r4, #0]
 800e858:	4640      	mov	r0, r8
 800e85a:	f000 f90b 	bl	800ea74 <rcl_node_options_copy>
 800e85e:	2800      	cmp	r0, #0
 800e860:	d158      	bne.n	800e914 <rcl_node_init+0x198>
 800e862:	4628      	mov	r0, r5
 800e864:	f7f1 fcc6 	bl	80001f4 <strlen>
 800e868:	4428      	add	r0, r5
 800e86a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800e86e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800e872:	2b2f      	cmp	r3, #47	; 0x2f
 800e874:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e878:	9300      	str	r3, [sp, #0]
 800e87a:	bf0c      	ite	eq
 800e87c:	4b5f      	ldreq	r3, [pc, #380]	; (800e9fc <rcl_node_init+0x280>)
 800e87e:	4b60      	ldrne	r3, [pc, #384]	; (800ea00 <rcl_node_init+0x284>)
 800e880:	9302      	str	r3, [sp, #8]
 800e882:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e886:	9301      	str	r3, [sp, #4]
 800e888:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800e88c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e890:	f002 f99a 	bl	8010bc8 <rcutils_format_string_limit>
 800e894:	6823      	ldr	r3, [r4, #0]
 800e896:	f8c9 0074 	str.w	r0, [r9, #116]	; 0x74
 800e89a:	6818      	ldr	r0, [r3, #0]
 800e89c:	4631      	mov	r1, r6
 800e89e:	3028      	adds	r0, #40	; 0x28
 800e8a0:	462a      	mov	r2, r5
 800e8a2:	6866      	ldr	r6, [r4, #4]
 800e8a4:	f003 fa06 	bl	8011cb4 <rmw_create_node>
 800e8a8:	6863      	ldr	r3, [r4, #4]
 800e8aa:	66b0      	str	r0, [r6, #104]	; 0x68
 800e8ac:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800e8ae:	2800      	cmp	r0, #0
 800e8b0:	d032      	beq.n	800e918 <rcl_node_init+0x19c>
 800e8b2:	f003 fa93 	bl	8011ddc <rmw_node_get_graph_guard_condition>
 800e8b6:	4681      	mov	r9, r0
 800e8b8:	b360      	cbz	r0, 800e914 <rcl_node_init+0x198>
 800e8ba:	f8d8 3000 	ldr.w	r3, [r8]
 800e8be:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e8c2:	6866      	ldr	r6, [r4, #4]
 800e8c4:	2008      	movs	r0, #8
 800e8c6:	4798      	blx	r3
 800e8c8:	6863      	ldr	r3, [r4, #4]
 800e8ca:	66f0      	str	r0, [r6, #108]	; 0x6c
 800e8cc:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 800e8d0:	f1bb 0f00 	cmp.w	fp, #0
 800e8d4:	d020      	beq.n	800e918 <rcl_node_init+0x19c>
 800e8d6:	a806      	add	r0, sp, #24
 800e8d8:	f7ff fc14 	bl	800e104 <rcl_get_zero_initialized_guard_condition>
 800e8dc:	a806      	add	r0, sp, #24
 800e8de:	c803      	ldmia	r0, {r0, r1}
 800e8e0:	6863      	ldr	r3, [r4, #4]
 800e8e2:	46c4      	mov	ip, r8
 800e8e4:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 800e8e8:	e88b 0003 	stmia.w	fp, {r0, r1}
 800e8ec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e8f0:	ae23      	add	r6, sp, #140	; 0x8c
 800e8f2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e8f4:	f8dc 3000 	ldr.w	r3, [ip]
 800e8f8:	6033      	str	r3, [r6, #0]
 800e8fa:	ab28      	add	r3, sp, #160	; 0xa0
 800e8fc:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800e900:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e904:	4649      	mov	r1, r9
 800e906:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e908:	463a      	mov	r2, r7
 800e90a:	4670      	mov	r0, lr
 800e90c:	f7ff fc50 	bl	800e1b0 <rcl_guard_condition_init_from_rmw>
 800e910:	4681      	mov	r9, r0
 800e912:	b328      	cbz	r0, 800e960 <rcl_node_init+0x1e4>
 800e914:	6863      	ldr	r3, [r4, #4]
 800e916:	b1f3      	cbz	r3, 800e956 <rcl_node_init+0x1da>
 800e918:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800e91a:	b128      	cbz	r0, 800e928 <rcl_node_init+0x1ac>
 800e91c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e920:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e924:	4798      	blx	r3
 800e926:	6863      	ldr	r3, [r4, #4]
 800e928:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800e92a:	b110      	cbz	r0, 800e932 <rcl_node_init+0x1b6>
 800e92c:	f003 f9da 	bl	8011ce4 <rmw_destroy_node>
 800e930:	6863      	ldr	r3, [r4, #4]
 800e932:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800e934:	b148      	cbz	r0, 800e94a <rcl_node_init+0x1ce>
 800e936:	f7ff fc9b 	bl	800e270 <rcl_guard_condition_fini>
 800e93a:	6863      	ldr	r3, [r4, #4]
 800e93c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e940:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800e942:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e946:	4798      	blx	r3
 800e948:	6863      	ldr	r3, [r4, #4]
 800e94a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e94e:	4618      	mov	r0, r3
 800e950:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e954:	4798      	blx	r3
 800e956:	2300      	movs	r3, #0
 800e958:	e9c4 3300 	strd	r3, r3, [r4]
 800e95c:	f04f 0901 	mov.w	r9, #1
 800e960:	f1ba 0f00 	cmp.w	sl, #0
 800e964:	d125      	bne.n	800e9b2 <rcl_node_init+0x236>
 800e966:	e001      	b.n	800e96c <rcl_node_init+0x1f0>
 800e968:	f04f 090b 	mov.w	r9, #11
 800e96c:	4648      	mov	r0, r9
 800e96e:	b029      	add	sp, #164	; 0xa4
 800e970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e974:	f04f 0965 	mov.w	r9, #101	; 0x65
 800e978:	e7f8      	b.n	800e96c <rcl_node_init+0x1f0>
 800e97a:	782b      	ldrb	r3, [r5, #0]
 800e97c:	2b2f      	cmp	r3, #47	; 0x2f
 800e97e:	f43f af42 	beq.w	800e806 <rcl_node_init+0x8a>
 800e982:	9503      	str	r5, [sp, #12]
 800e984:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800e988:	9300      	str	r3, [sp, #0]
 800e98a:	4b1e      	ldr	r3, [pc, #120]	; (800ea04 <rcl_node_init+0x288>)
 800e98c:	9302      	str	r3, [sp, #8]
 800e98e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e992:	9301      	str	r3, [sp, #4]
 800e994:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800e998:	f002 f916 	bl	8010bc8 <rcutils_format_string_limit>
 800e99c:	4605      	mov	r5, r0
 800e99e:	b340      	cbz	r0, 800e9f2 <rcl_node_init+0x276>
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	a922      	add	r1, sp, #136	; 0x88
 800e9a4:	9222      	str	r2, [sp, #136]	; 0x88
 800e9a6:	f002 fd27 	bl	80113f8 <rmw_validate_namespace>
 800e9aa:	4681      	mov	r9, r0
 800e9ac:	2800      	cmp	r0, #0
 800e9ae:	f43f af34 	beq.w	800e81a <rcl_node_init+0x9e>
 800e9b2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e9b6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e9ba:	4628      	mov	r0, r5
 800e9bc:	4798      	blx	r3
 800e9be:	e7d5      	b.n	800e96c <rcl_node_init+0x1f0>
 800e9c0:	f04f 0964 	mov.w	r9, #100	; 0x64
 800e9c4:	4648      	mov	r0, r9
 800e9c6:	b029      	add	sp, #164	; 0xa4
 800e9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9cc:	f04f 090a 	mov.w	r9, #10
 800e9d0:	f1ba 0f00 	cmp.w	sl, #0
 800e9d4:	d1ed      	bne.n	800e9b2 <rcl_node_init+0x236>
 800e9d6:	e7c9      	b.n	800e96c <rcl_node_init+0x1f0>
 800e9d8:	f002 fd7e 	bl	80114d8 <rmw_node_name_validation_result_string>
 800e9dc:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 800e9e0:	e7c4      	b.n	800e96c <rcl_node_init+0x1f0>
 800e9e2:	f002 fd1b 	bl	801141c <rmw_namespace_validation_result_string>
 800e9e6:	f04f 09ca 	mov.w	r9, #202	; 0xca
 800e9ea:	f1ba 0f00 	cmp.w	sl, #0
 800e9ee:	d1e0      	bne.n	800e9b2 <rcl_node_init+0x236>
 800e9f0:	e7bc      	b.n	800e96c <rcl_node_init+0x1f0>
 800e9f2:	f04f 090a 	mov.w	r9, #10
 800e9f6:	e7b9      	b.n	800e96c <rcl_node_init+0x1f0>
 800e9f8:	080167f4 	.word	0x080167f4
 800e9fc:	0801667c 	.word	0x0801667c
 800ea00:	080167fc 	.word	0x080167fc
 800ea04:	080167f8 	.word	0x080167f8

0800ea08 <rcl_node_is_valid>:
 800ea08:	b130      	cbz	r0, 800ea18 <rcl_node_is_valid+0x10>
 800ea0a:	6843      	ldr	r3, [r0, #4]
 800ea0c:	b123      	cbz	r3, 800ea18 <rcl_node_is_valid+0x10>
 800ea0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea10:	b113      	cbz	r3, 800ea18 <rcl_node_is_valid+0x10>
 800ea12:	6800      	ldr	r0, [r0, #0]
 800ea14:	f7ff bb10 	b.w	800e038 <rcl_context_is_valid>
 800ea18:	2000      	movs	r0, #0
 800ea1a:	4770      	bx	lr

0800ea1c <rcl_node_get_name>:
 800ea1c:	b120      	cbz	r0, 800ea28 <rcl_node_get_name+0xc>
 800ea1e:	6840      	ldr	r0, [r0, #4]
 800ea20:	b110      	cbz	r0, 800ea28 <rcl_node_get_name+0xc>
 800ea22:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800ea24:	b100      	cbz	r0, 800ea28 <rcl_node_get_name+0xc>
 800ea26:	6880      	ldr	r0, [r0, #8]
 800ea28:	4770      	bx	lr
 800ea2a:	bf00      	nop

0800ea2c <rcl_node_get_namespace>:
 800ea2c:	b120      	cbz	r0, 800ea38 <rcl_node_get_namespace+0xc>
 800ea2e:	6840      	ldr	r0, [r0, #4]
 800ea30:	b110      	cbz	r0, 800ea38 <rcl_node_get_namespace+0xc>
 800ea32:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800ea34:	b100      	cbz	r0, 800ea38 <rcl_node_get_namespace+0xc>
 800ea36:	68c0      	ldr	r0, [r0, #12]
 800ea38:	4770      	bx	lr
 800ea3a:	bf00      	nop

0800ea3c <rcl_node_get_options>:
 800ea3c:	b128      	cbz	r0, 800ea4a <rcl_node_get_options+0xe>
 800ea3e:	6840      	ldr	r0, [r0, #4]
 800ea40:	b118      	cbz	r0, 800ea4a <rcl_node_get_options+0xe>
 800ea42:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	bf08      	it	eq
 800ea48:	2000      	moveq	r0, #0
 800ea4a:	4770      	bx	lr

0800ea4c <rcl_node_get_rmw_handle>:
 800ea4c:	b110      	cbz	r0, 800ea54 <rcl_node_get_rmw_handle+0x8>
 800ea4e:	6840      	ldr	r0, [r0, #4]
 800ea50:	b100      	cbz	r0, 800ea54 <rcl_node_get_rmw_handle+0x8>
 800ea52:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800ea54:	4770      	bx	lr
 800ea56:	bf00      	nop

0800ea58 <rcl_node_get_default_options>:
 800ea58:	b510      	push	{r4, lr}
 800ea5a:	2268      	movs	r2, #104	; 0x68
 800ea5c:	4604      	mov	r4, r0
 800ea5e:	2100      	movs	r1, #0
 800ea60:	f006 fbc2 	bl	80151e8 <memset>
 800ea64:	4620      	mov	r0, r4
 800ea66:	f7fb fc89 	bl	800a37c <rcutils_get_default_allocator>
 800ea6a:	2301      	movs	r3, #1
 800ea6c:	7523      	strb	r3, [r4, #20]
 800ea6e:	4620      	mov	r0, r4
 800ea70:	bd10      	pop	{r4, pc}
 800ea72:	bf00      	nop

0800ea74 <rcl_node_options_copy>:
 800ea74:	b1d0      	cbz	r0, 800eaac <rcl_node_options_copy+0x38>
 800ea76:	b570      	push	{r4, r5, r6, lr}
 800ea78:	460c      	mov	r4, r1
 800ea7a:	b1a9      	cbz	r1, 800eaa8 <rcl_node_options_copy+0x34>
 800ea7c:	4288      	cmp	r0, r1
 800ea7e:	4684      	mov	ip, r0
 800ea80:	d012      	beq.n	800eaa8 <rcl_node_options_copy+0x34>
 800ea82:	4605      	mov	r5, r0
 800ea84:	8a86      	ldrh	r6, [r0, #20]
 800ea86:	468e      	mov	lr, r1
 800ea88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea8a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ea8e:	682b      	ldr	r3, [r5, #0]
 800ea90:	f8ce 3000 	str.w	r3, [lr]
 800ea94:	f10c 0118 	add.w	r1, ip, #24
 800ea98:	2250      	movs	r2, #80	; 0x50
 800ea9a:	82a6      	strh	r6, [r4, #20]
 800ea9c:	f104 0018 	add.w	r0, r4, #24
 800eaa0:	f006 fcc1 	bl	8015426 <memcpy>
 800eaa4:	2000      	movs	r0, #0
 800eaa6:	bd70      	pop	{r4, r5, r6, pc}
 800eaa8:	200b      	movs	r0, #11
 800eaaa:	bd70      	pop	{r4, r5, r6, pc}
 800eaac:	200b      	movs	r0, #11
 800eaae:	4770      	bx	lr

0800eab0 <rcl_node_resolve_name>:
 800eab0:	b082      	sub	sp, #8
 800eab2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eab6:	b091      	sub	sp, #68	; 0x44
 800eab8:	ac1a      	add	r4, sp, #104	; 0x68
 800eaba:	e884 000c 	stmia.w	r4, {r2, r3}
 800eabe:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 800eac2:	2800      	cmp	r0, #0
 800eac4:	d03b      	beq.n	800eb3e <rcl_node_resolve_name+0x8e>
 800eac6:	460c      	mov	r4, r1
 800eac8:	4605      	mov	r5, r0
 800eaca:	f7ff ffb7 	bl	800ea3c <rcl_node_get_options>
 800eace:	2800      	cmp	r0, #0
 800ead0:	d037      	beq.n	800eb42 <rcl_node_resolve_name+0x92>
 800ead2:	4628      	mov	r0, r5
 800ead4:	f7ff ffa2 	bl	800ea1c <rcl_node_get_name>
 800ead8:	4606      	mov	r6, r0
 800eada:	4628      	mov	r0, r5
 800eadc:	f7ff ffa6 	bl	800ea2c <rcl_node_get_namespace>
 800eae0:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 800eae4:	4681      	mov	r9, r0
 800eae6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800eaea:	ad0b      	add	r5, sp, #44	; 0x2c
 800eaec:	46ac      	mov	ip, r5
 800eaee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eaf2:	f8de 3000 	ldr.w	r3, [lr]
 800eaf6:	f8cc 3000 	str.w	r3, [ip]
 800eafa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eafc:	b1fb      	cbz	r3, 800eb3e <rcl_node_resolve_name+0x8e>
 800eafe:	468a      	mov	sl, r1
 800eb00:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 800eb04:	f002 f9b8 	bl	8010e78 <rcutils_get_zero_initialized_string_map>
 800eb08:	ab10      	add	r3, sp, #64	; 0x40
 800eb0a:	9008      	str	r0, [sp, #32]
 800eb0c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800eb10:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800eb14:	2100      	movs	r1, #0
 800eb16:	e895 000c 	ldmia.w	r5, {r2, r3}
 800eb1a:	a808      	add	r0, sp, #32
 800eb1c:	f002 fa24 	bl	8010f68 <rcutils_string_map_init>
 800eb20:	4607      	mov	r7, r0
 800eb22:	b180      	cbz	r0, 800eb46 <rcl_node_resolve_name+0x96>
 800eb24:	f7fb fcea 	bl	800a4fc <rcutils_get_error_string>
 800eb28:	f7fb fcfe 	bl	800a528 <rcutils_reset_error>
 800eb2c:	2f0a      	cmp	r7, #10
 800eb2e:	bf18      	it	ne
 800eb30:	2701      	movne	r7, #1
 800eb32:	4638      	mov	r0, r7
 800eb34:	b011      	add	sp, #68	; 0x44
 800eb36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb3a:	b002      	add	sp, #8
 800eb3c:	4770      	bx	lr
 800eb3e:	270b      	movs	r7, #11
 800eb40:	e7f7      	b.n	800eb32 <rcl_node_resolve_name+0x82>
 800eb42:	2701      	movs	r7, #1
 800eb44:	e7f5      	b.n	800eb32 <rcl_node_resolve_name+0x82>
 800eb46:	9009      	str	r0, [sp, #36]	; 0x24
 800eb48:	9007      	str	r0, [sp, #28]
 800eb4a:	a808      	add	r0, sp, #32
 800eb4c:	f005 fd74 	bl	8014638 <rcl_get_default_topic_name_substitutions>
 800eb50:	4607      	mov	r7, r0
 800eb52:	b1a8      	cbz	r0, 800eb80 <rcl_node_resolve_name+0xd0>
 800eb54:	280a      	cmp	r0, #10
 800eb56:	9c07      	ldr	r4, [sp, #28]
 800eb58:	d000      	beq.n	800eb5c <rcl_node_resolve_name+0xac>
 800eb5a:	2701      	movs	r7, #1
 800eb5c:	a808      	add	r0, sp, #32
 800eb5e:	f002 fa43 	bl	8010fe8 <rcutils_string_map_fini>
 800eb62:	2800      	cmp	r0, #0
 800eb64:	d13d      	bne.n	800ebe2 <rcl_node_resolve_name+0x132>
 800eb66:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb68:	4659      	mov	r1, fp
 800eb6a:	47d0      	blx	sl
 800eb6c:	4659      	mov	r1, fp
 800eb6e:	4620      	mov	r0, r4
 800eb70:	47d0      	blx	sl
 800eb72:	f1b8 0f00 	cmp.w	r8, #0
 800eb76:	d0dc      	beq.n	800eb32 <rcl_node_resolve_name+0x82>
 800eb78:	2f67      	cmp	r7, #103	; 0x67
 800eb7a:	bf08      	it	eq
 800eb7c:	2768      	moveq	r7, #104	; 0x68
 800eb7e:	e7d8      	b.n	800eb32 <rcl_node_resolve_name+0x82>
 800eb80:	ab09      	add	r3, sp, #36	; 0x24
 800eb82:	9305      	str	r3, [sp, #20]
 800eb84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800eb86:	46ec      	mov	ip, sp
 800eb88:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eb8c:	682b      	ldr	r3, [r5, #0]
 800eb8e:	f8cc 3000 	str.w	r3, [ip]
 800eb92:	464a      	mov	r2, r9
 800eb94:	4631      	mov	r1, r6
 800eb96:	4620      	mov	r0, r4
 800eb98:	ab08      	add	r3, sp, #32
 800eb9a:	f005 fbef 	bl	801437c <rcl_expand_topic_name>
 800eb9e:	4607      	mov	r7, r0
 800eba0:	b9b8      	cbnz	r0, 800ebd2 <rcl_node_resolve_name+0x122>
 800eba2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800eba4:	9009      	str	r0, [sp, #36]	; 0x24
 800eba6:	4602      	mov	r2, r0
 800eba8:	a90a      	add	r1, sp, #40	; 0x28
 800ebaa:	4620      	mov	r0, r4
 800ebac:	f002 fb60 	bl	8011270 <rmw_validate_full_topic_name>
 800ebb0:	b988      	cbnz	r0, 800ebd6 <rcl_node_resolve_name+0x126>
 800ebb2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ebb4:	b9d5      	cbnz	r5, 800ebec <rcl_node_resolve_name+0x13c>
 800ebb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ebb8:	a808      	add	r0, sp, #32
 800ebba:	601c      	str	r4, [r3, #0]
 800ebbc:	f002 fa14 	bl	8010fe8 <rcutils_string_map_fini>
 800ebc0:	4607      	mov	r7, r0
 800ebc2:	b1a8      	cbz	r0, 800ebf0 <rcl_node_resolve_name+0x140>
 800ebc4:	f7fb fc9a 	bl	800a4fc <rcutils_get_error_string>
 800ebc8:	462c      	mov	r4, r5
 800ebca:	f7fb fcad 	bl	800a528 <rcutils_reset_error>
 800ebce:	2701      	movs	r7, #1
 800ebd0:	e7c9      	b.n	800eb66 <rcl_node_resolve_name+0xb6>
 800ebd2:	9c07      	ldr	r4, [sp, #28]
 800ebd4:	e7c2      	b.n	800eb5c <rcl_node_resolve_name+0xac>
 800ebd6:	f7fb fc91 	bl	800a4fc <rcutils_get_error_string>
 800ebda:	2701      	movs	r7, #1
 800ebdc:	f7fb fca4 	bl	800a528 <rcutils_reset_error>
 800ebe0:	e7bc      	b.n	800eb5c <rcl_node_resolve_name+0xac>
 800ebe2:	f7fb fc8b 	bl	800a4fc <rcutils_get_error_string>
 800ebe6:	f7fb fc9f 	bl	800a528 <rcutils_reset_error>
 800ebea:	e7bc      	b.n	800eb66 <rcl_node_resolve_name+0xb6>
 800ebec:	2767      	movs	r7, #103	; 0x67
 800ebee:	e7b5      	b.n	800eb5c <rcl_node_resolve_name+0xac>
 800ebf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ebf2:	4659      	mov	r1, fp
 800ebf4:	47d0      	blx	sl
 800ebf6:	4659      	mov	r1, fp
 800ebf8:	4638      	mov	r0, r7
 800ebfa:	47d0      	blx	sl
 800ebfc:	e799      	b.n	800eb32 <rcl_node_resolve_name+0x82>
 800ebfe:	bf00      	nop

0800ec00 <exact_match_lookup>:
 800ec00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec02:	f102 0708 	add.w	r7, r2, #8
 800ec06:	460b      	mov	r3, r1
 800ec08:	4614      	mov	r4, r2
 800ec0a:	4606      	mov	r6, r0
 800ec0c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800ec10:	b085      	sub	sp, #20
 800ec12:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ec16:	4618      	mov	r0, r3
 800ec18:	4919      	ldr	r1, [pc, #100]	; (800ec80 <exact_match_lookup+0x80>)
 800ec1a:	e894 000c 	ldmia.w	r4, {r2, r3}
 800ec1e:	f001 ffc5 	bl	8010bac <rcutils_join_path>
 800ec22:	7833      	ldrb	r3, [r6, #0]
 800ec24:	2b2f      	cmp	r3, #47	; 0x2f
 800ec26:	4605      	mov	r5, r0
 800ec28:	d023      	beq.n	800ec72 <exact_match_lookup+0x72>
 800ec2a:	f104 030c 	add.w	r3, r4, #12
 800ec2e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ec32:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ec36:	1c70      	adds	r0, r6, #1
 800ec38:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ec3c:	f001 ffbc 	bl	8010bb8 <rcutils_to_native_path>
 800ec40:	4606      	mov	r6, r0
 800ec42:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800ec46:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ec4a:	4631      	mov	r1, r6
 800ec4c:	e894 000c 	ldmia.w	r4, {r2, r3}
 800ec50:	4628      	mov	r0, r5
 800ec52:	f001 ffab 	bl	8010bac <rcutils_join_path>
 800ec56:	6862      	ldr	r2, [r4, #4]
 800ec58:	6921      	ldr	r1, [r4, #16]
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	4630      	mov	r0, r6
 800ec5e:	461e      	mov	r6, r3
 800ec60:	4790      	blx	r2
 800ec62:	4628      	mov	r0, r5
 800ec64:	6863      	ldr	r3, [r4, #4]
 800ec66:	6921      	ldr	r1, [r4, #16]
 800ec68:	4798      	blx	r3
 800ec6a:	4635      	mov	r5, r6
 800ec6c:	4628      	mov	r0, r5
 800ec6e:	b005      	add	sp, #20
 800ec70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec72:	7873      	ldrb	r3, [r6, #1]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d1d8      	bne.n	800ec2a <exact_match_lookup+0x2a>
 800ec78:	4628      	mov	r0, r5
 800ec7a:	b005      	add	sp, #20
 800ec7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec7e:	bf00      	nop
 800ec80:	08016848 	.word	0x08016848

0800ec84 <rcl_get_secure_root>:
 800ec84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec88:	b085      	sub	sp, #20
 800ec8a:	b168      	cbz	r0, 800eca8 <rcl_get_secure_root+0x24>
 800ec8c:	4607      	mov	r7, r0
 800ec8e:	4608      	mov	r0, r1
 800ec90:	460c      	mov	r4, r1
 800ec92:	f7fb fb81 	bl	800a398 <rcutils_allocator_is_valid>
 800ec96:	b138      	cbz	r0, 800eca8 <rcl_get_secure_root+0x24>
 800ec98:	2300      	movs	r3, #0
 800ec9a:	482d      	ldr	r0, [pc, #180]	; (800ed50 <rcl_get_secure_root+0xcc>)
 800ec9c:	9303      	str	r3, [sp, #12]
 800ec9e:	a903      	add	r1, sp, #12
 800eca0:	f001 ff6a 	bl	8010b78 <rcutils_get_env>
 800eca4:	4605      	mov	r5, r0
 800eca6:	b120      	cbz	r0, 800ecb2 <rcl_get_secure_root+0x2e>
 800eca8:	2500      	movs	r5, #0
 800ecaa:	4628      	mov	r0, r5
 800ecac:	b005      	add	sp, #20
 800ecae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ecb2:	9b03      	ldr	r3, [sp, #12]
 800ecb4:	781a      	ldrb	r2, [r3, #0]
 800ecb6:	2a00      	cmp	r2, #0
 800ecb8:	d0f6      	beq.n	800eca8 <rcl_get_secure_root+0x24>
 800ecba:	f104 090c 	add.w	r9, r4, #12
 800ecbe:	e899 0003 	ldmia.w	r9, {r0, r1}
 800ecc2:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800eccc:	f002 f896 	bl	8010dfc <rcutils_strdup>
 800ecd0:	4680      	mov	r8, r0
 800ecd2:	2800      	cmp	r0, #0
 800ecd4:	d0e8      	beq.n	800eca8 <rcl_get_secure_root+0x24>
 800ecd6:	481f      	ldr	r0, [pc, #124]	; (800ed54 <rcl_get_secure_root+0xd0>)
 800ecd8:	9503      	str	r5, [sp, #12]
 800ecda:	a903      	add	r1, sp, #12
 800ecdc:	f001 ff4c 	bl	8010b78 <rcutils_get_env>
 800ece0:	b160      	cbz	r0, 800ecfc <rcl_get_secure_root+0x78>
 800ece2:	2600      	movs	r6, #0
 800ece4:	6863      	ldr	r3, [r4, #4]
 800ece6:	6921      	ldr	r1, [r4, #16]
 800ece8:	4630      	mov	r0, r6
 800ecea:	4798      	blx	r3
 800ecec:	4640      	mov	r0, r8
 800ecee:	6863      	ldr	r3, [r4, #4]
 800ecf0:	6921      	ldr	r1, [r4, #16]
 800ecf2:	4798      	blx	r3
 800ecf4:	4628      	mov	r0, r5
 800ecf6:	b005      	add	sp, #20
 800ecf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ecfc:	9b03      	ldr	r3, [sp, #12]
 800ecfe:	781e      	ldrb	r6, [r3, #0]
 800ed00:	b1f6      	cbz	r6, 800ed40 <rcl_get_secure_root+0xbc>
 800ed02:	e899 0003 	ldmia.w	r9, {r0, r1}
 800ed06:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800ed10:	f002 f874 	bl	8010dfc <rcutils_strdup>
 800ed14:	4606      	mov	r6, r0
 800ed16:	2800      	cmp	r0, #0
 800ed18:	d0e3      	beq.n	800ece2 <rcl_get_secure_root+0x5e>
 800ed1a:	4622      	mov	r2, r4
 800ed1c:	4641      	mov	r1, r8
 800ed1e:	f7ff ff6f 	bl	800ec00 <exact_match_lookup>
 800ed22:	4605      	mov	r5, r0
 800ed24:	2d00      	cmp	r5, #0
 800ed26:	d0dd      	beq.n	800ece4 <rcl_get_secure_root+0x60>
 800ed28:	4628      	mov	r0, r5
 800ed2a:	f001 ff3d 	bl	8010ba8 <rcutils_is_directory>
 800ed2e:	4603      	mov	r3, r0
 800ed30:	2800      	cmp	r0, #0
 800ed32:	d1d7      	bne.n	800ece4 <rcl_get_secure_root+0x60>
 800ed34:	4628      	mov	r0, r5
 800ed36:	6921      	ldr	r1, [r4, #16]
 800ed38:	461d      	mov	r5, r3
 800ed3a:	6863      	ldr	r3, [r4, #4]
 800ed3c:	4798      	blx	r3
 800ed3e:	e7d1      	b.n	800ece4 <rcl_get_secure_root+0x60>
 800ed40:	4622      	mov	r2, r4
 800ed42:	4638      	mov	r0, r7
 800ed44:	4641      	mov	r1, r8
 800ed46:	f7ff ff5b 	bl	800ec00 <exact_match_lookup>
 800ed4a:	4605      	mov	r5, r0
 800ed4c:	e7ea      	b.n	800ed24 <rcl_get_secure_root+0xa0>
 800ed4e:	bf00      	nop
 800ed50:	08016854 	.word	0x08016854
 800ed54:	0801686c 	.word	0x0801686c

0800ed58 <rcl_get_security_options_from_environment>:
 800ed58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed5c:	b082      	sub	sp, #8
 800ed5e:	2300      	movs	r3, #0
 800ed60:	4606      	mov	r6, r0
 800ed62:	460f      	mov	r7, r1
 800ed64:	4820      	ldr	r0, [pc, #128]	; (800ede8 <rcl_get_security_options_from_environment+0x90>)
 800ed66:	9301      	str	r3, [sp, #4]
 800ed68:	a901      	add	r1, sp, #4
 800ed6a:	4690      	mov	r8, r2
 800ed6c:	f001 ff04 	bl	8010b78 <rcutils_get_env>
 800ed70:	b120      	cbz	r0, 800ed7c <rcl_get_security_options_from_environment+0x24>
 800ed72:	2501      	movs	r5, #1
 800ed74:	4628      	mov	r0, r5
 800ed76:	b002      	add	sp, #8
 800ed78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed7c:	491b      	ldr	r1, [pc, #108]	; (800edec <rcl_get_security_options_from_environment+0x94>)
 800ed7e:	4604      	mov	r4, r0
 800ed80:	9801      	ldr	r0, [sp, #4]
 800ed82:	f7f1 fa2d 	bl	80001e0 <strcmp>
 800ed86:	4605      	mov	r5, r0
 800ed88:	b9e8      	cbnz	r0, 800edc6 <rcl_get_security_options_from_environment+0x6e>
 800ed8a:	9001      	str	r0, [sp, #4]
 800ed8c:	f1b8 0f00 	cmp.w	r8, #0
 800ed90:	d020      	beq.n	800edd4 <rcl_get_security_options_from_environment+0x7c>
 800ed92:	4817      	ldr	r0, [pc, #92]	; (800edf0 <rcl_get_security_options_from_environment+0x98>)
 800ed94:	a901      	add	r1, sp, #4
 800ed96:	f001 feef 	bl	8010b78 <rcutils_get_env>
 800ed9a:	2800      	cmp	r0, #0
 800ed9c:	d1e9      	bne.n	800ed72 <rcl_get_security_options_from_environment+0x1a>
 800ed9e:	4915      	ldr	r1, [pc, #84]	; (800edf4 <rcl_get_security_options_from_environment+0x9c>)
 800eda0:	9801      	ldr	r0, [sp, #4]
 800eda2:	f7f1 fa1d 	bl	80001e0 <strcmp>
 800eda6:	fab0 f080 	clz	r0, r0
 800edaa:	0940      	lsrs	r0, r0, #5
 800edac:	f888 0000 	strb.w	r0, [r8]
 800edb0:	4639      	mov	r1, r7
 800edb2:	4630      	mov	r0, r6
 800edb4:	f7ff ff66 	bl	800ec84 <rcl_get_secure_root>
 800edb8:	b170      	cbz	r0, 800edd8 <rcl_get_security_options_from_environment+0x80>
 800edba:	f8c8 0004 	str.w	r0, [r8, #4]
 800edbe:	4628      	mov	r0, r5
 800edc0:	b002      	add	sp, #8
 800edc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edc6:	4625      	mov	r5, r4
 800edc8:	4628      	mov	r0, r5
 800edca:	f888 4000 	strb.w	r4, [r8]
 800edce:	b002      	add	sp, #8
 800edd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edd4:	250b      	movs	r5, #11
 800edd6:	e7cd      	b.n	800ed74 <rcl_get_security_options_from_environment+0x1c>
 800edd8:	f898 5000 	ldrb.w	r5, [r8]
 800eddc:	f1a5 0501 	sub.w	r5, r5, #1
 800ede0:	fab5 f585 	clz	r5, r5
 800ede4:	096d      	lsrs	r5, r5, #5
 800ede6:	e7c5      	b.n	800ed74 <rcl_get_security_options_from_environment+0x1c>
 800ede8:	0801680c 	.word	0x0801680c
 800edec:	08016820 	.word	0x08016820
 800edf0:	08016828 	.word	0x08016828
 800edf4:	08016840 	.word	0x08016840

0800edf8 <rcl_service_get_rmw_handle>:
 800edf8:	b118      	cbz	r0, 800ee02 <rcl_service_get_rmw_handle+0xa>
 800edfa:	6800      	ldr	r0, [r0, #0]
 800edfc:	b108      	cbz	r0, 800ee02 <rcl_service_get_rmw_handle+0xa>
 800edfe:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800ee02:	4770      	bx	lr

0800ee04 <rcl_take_request>:
 800ee04:	b570      	push	{r4, r5, r6, lr}
 800ee06:	468e      	mov	lr, r1
 800ee08:	460c      	mov	r4, r1
 800ee0a:	4616      	mov	r6, r2
 800ee0c:	4605      	mov	r5, r0
 800ee0e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ee12:	b08c      	sub	sp, #48	; 0x30
 800ee14:	f10d 0c18 	add.w	ip, sp, #24
 800ee18:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ee1c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ee20:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ee24:	b30d      	cbz	r5, 800ee6a <rcl_take_request+0x66>
 800ee26:	682b      	ldr	r3, [r5, #0]
 800ee28:	b1fb      	cbz	r3, 800ee6a <rcl_take_request+0x66>
 800ee2a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800ee2e:	b1e0      	cbz	r0, 800ee6a <rcl_take_request+0x66>
 800ee30:	b336      	cbz	r6, 800ee80 <rcl_take_request+0x7c>
 800ee32:	2300      	movs	r3, #0
 800ee34:	f88d 3007 	strb.w	r3, [sp, #7]
 800ee38:	4632      	mov	r2, r6
 800ee3a:	f10d 0307 	add.w	r3, sp, #7
 800ee3e:	a902      	add	r1, sp, #8
 800ee40:	f003 f820 	bl	8011e84 <rmw_take_request>
 800ee44:	4605      	mov	r5, r0
 800ee46:	b198      	cbz	r0, 800ee70 <rcl_take_request+0x6c>
 800ee48:	280a      	cmp	r0, #10
 800ee4a:	bf18      	it	ne
 800ee4c:	2501      	movne	r5, #1
 800ee4e:	f10d 0e18 	add.w	lr, sp, #24
 800ee52:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ee56:	46a4      	mov	ip, r4
 800ee58:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ee5c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ee60:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ee64:	4628      	mov	r0, r5
 800ee66:	b00c      	add	sp, #48	; 0x30
 800ee68:	bd70      	pop	{r4, r5, r6, pc}
 800ee6a:	f44f 7516 	mov.w	r5, #600	; 0x258
 800ee6e:	e7ee      	b.n	800ee4e <rcl_take_request+0x4a>
 800ee70:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ee74:	f240 2359 	movw	r3, #601	; 0x259
 800ee78:	2a00      	cmp	r2, #0
 800ee7a:	bf08      	it	eq
 800ee7c:	461d      	moveq	r5, r3
 800ee7e:	e7e6      	b.n	800ee4e <rcl_take_request+0x4a>
 800ee80:	250b      	movs	r5, #11
 800ee82:	e7e4      	b.n	800ee4e <rcl_take_request+0x4a>

0800ee84 <rcl_send_response>:
 800ee84:	b170      	cbz	r0, 800eea4 <rcl_send_response+0x20>
 800ee86:	6800      	ldr	r0, [r0, #0]
 800ee88:	b160      	cbz	r0, 800eea4 <rcl_send_response+0x20>
 800ee8a:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800ee8e:	b148      	cbz	r0, 800eea4 <rcl_send_response+0x20>
 800ee90:	b159      	cbz	r1, 800eeaa <rcl_send_response+0x26>
 800ee92:	b510      	push	{r4, lr}
 800ee94:	b15a      	cbz	r2, 800eeae <rcl_send_response+0x2a>
 800ee96:	f003 f853 	bl	8011f40 <rmw_send_response>
 800ee9a:	b110      	cbz	r0, 800eea2 <rcl_send_response+0x1e>
 800ee9c:	2802      	cmp	r0, #2
 800ee9e:	bf18      	it	ne
 800eea0:	2001      	movne	r0, #1
 800eea2:	bd10      	pop	{r4, pc}
 800eea4:	f44f 7016 	mov.w	r0, #600	; 0x258
 800eea8:	4770      	bx	lr
 800eeaa:	200b      	movs	r0, #11
 800eeac:	4770      	bx	lr
 800eeae:	200b      	movs	r0, #11
 800eeb0:	bd10      	pop	{r4, pc}
 800eeb2:	bf00      	nop

0800eeb4 <rcl_service_is_valid>:
 800eeb4:	b130      	cbz	r0, 800eec4 <rcl_service_is_valid+0x10>
 800eeb6:	6800      	ldr	r0, [r0, #0]
 800eeb8:	b120      	cbz	r0, 800eec4 <rcl_service_is_valid+0x10>
 800eeba:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800eebe:	3800      	subs	r0, #0
 800eec0:	bf18      	it	ne
 800eec2:	2001      	movne	r0, #1
 800eec4:	4770      	bx	lr
 800eec6:	bf00      	nop

0800eec8 <rcl_get_zero_initialized_subscription>:
 800eec8:	4b01      	ldr	r3, [pc, #4]	; (800eed0 <rcl_get_zero_initialized_subscription+0x8>)
 800eeca:	6818      	ldr	r0, [r3, #0]
 800eecc:	4770      	bx	lr
 800eece:	bf00      	nop
 800eed0:	0801688c 	.word	0x0801688c

0800eed4 <rcl_subscription_init>:
 800eed4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eed8:	b089      	sub	sp, #36	; 0x24
 800eeda:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800eedc:	b1d6      	cbz	r6, 800ef14 <rcl_subscription_init+0x40>
 800eede:	f106 0950 	add.w	r9, r6, #80	; 0x50
 800eee2:	4604      	mov	r4, r0
 800eee4:	4648      	mov	r0, r9
 800eee6:	460d      	mov	r5, r1
 800eee8:	4690      	mov	r8, r2
 800eeea:	461f      	mov	r7, r3
 800eeec:	f7fb fa54 	bl	800a398 <rcutils_allocator_is_valid>
 800eef0:	b180      	cbz	r0, 800ef14 <rcl_subscription_init+0x40>
 800eef2:	b17c      	cbz	r4, 800ef14 <rcl_subscription_init+0x40>
 800eef4:	4628      	mov	r0, r5
 800eef6:	f7ff fd87 	bl	800ea08 <rcl_node_is_valid>
 800eefa:	2800      	cmp	r0, #0
 800eefc:	d054      	beq.n	800efa8 <rcl_subscription_init+0xd4>
 800eefe:	f1b8 0f00 	cmp.w	r8, #0
 800ef02:	d007      	beq.n	800ef14 <rcl_subscription_init+0x40>
 800ef04:	b137      	cbz	r7, 800ef14 <rcl_subscription_init+0x40>
 800ef06:	6823      	ldr	r3, [r4, #0]
 800ef08:	b14b      	cbz	r3, 800ef1e <rcl_subscription_init+0x4a>
 800ef0a:	2764      	movs	r7, #100	; 0x64
 800ef0c:	4638      	mov	r0, r7
 800ef0e:	b009      	add	sp, #36	; 0x24
 800ef10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef14:	270b      	movs	r7, #11
 800ef16:	4638      	mov	r0, r7
 800ef18:	b009      	add	sp, #36	; 0x24
 800ef1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef1e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800ef22:	aa07      	add	r2, sp, #28
 800ef24:	9205      	str	r2, [sp, #20]
 800ef26:	9307      	str	r3, [sp, #28]
 800ef28:	f106 0358 	add.w	r3, r6, #88	; 0x58
 800ef2c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ef30:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800ef34:	4639      	mov	r1, r7
 800ef36:	e899 000c 	ldmia.w	r9, {r2, r3}
 800ef3a:	4628      	mov	r0, r5
 800ef3c:	f7ff fdb8 	bl	800eab0 <rcl_node_resolve_name>
 800ef40:	4607      	mov	r7, r0
 800ef42:	2800      	cmp	r0, #0
 800ef44:	d15f      	bne.n	800f006 <rcl_subscription_init+0x132>
 800ef46:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	; 0x5c
 800ef4a:	21c8      	movs	r1, #200	; 0xc8
 800ef4c:	2001      	movs	r0, #1
 800ef4e:	4798      	blx	r3
 800ef50:	6020      	str	r0, [r4, #0]
 800ef52:	2800      	cmp	r0, #0
 800ef54:	d05d      	beq.n	800f012 <rcl_subscription_init+0x13e>
 800ef56:	4628      	mov	r0, r5
 800ef58:	f7ff fd78 	bl	800ea4c <rcl_node_get_rmw_handle>
 800ef5c:	f106 0364 	add.w	r3, r6, #100	; 0x64
 800ef60:	9300      	str	r3, [sp, #0]
 800ef62:	9a07      	ldr	r2, [sp, #28]
 800ef64:	6827      	ldr	r7, [r4, #0]
 800ef66:	4641      	mov	r1, r8
 800ef68:	4633      	mov	r3, r6
 800ef6a:	f003 f8d3 	bl	8012114 <rmw_create_subscription>
 800ef6e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 800ef72:	6827      	ldr	r7, [r4, #0]
 800ef74:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800ef78:	b348      	cbz	r0, 800efce <rcl_subscription_init+0xfa>
 800ef7a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800ef7e:	f003 f9ab 	bl	80122d8 <rmw_subscription_get_actual_qos>
 800ef82:	4607      	mov	r7, r0
 800ef84:	b9a8      	cbnz	r0, 800efb2 <rcl_subscription_init+0xde>
 800ef86:	6820      	ldr	r0, [r4, #0]
 800ef88:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
 800ef8c:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 800ef90:	2270      	movs	r2, #112	; 0x70
 800ef92:	4631      	mov	r1, r6
 800ef94:	f006 fa47 	bl	8015426 <memcpy>
 800ef98:	9807      	ldr	r0, [sp, #28]
 800ef9a:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800ef9c:	6e31      	ldr	r1, [r6, #96]	; 0x60
 800ef9e:	4798      	blx	r3
 800efa0:	4638      	mov	r0, r7
 800efa2:	b009      	add	sp, #36	; 0x24
 800efa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800efa8:	27c8      	movs	r7, #200	; 0xc8
 800efaa:	4638      	mov	r0, r7
 800efac:	b009      	add	sp, #36	; 0x24
 800efae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800efb2:	6827      	ldr	r7, [r4, #0]
 800efb4:	b32f      	cbz	r7, 800f002 <rcl_subscription_init+0x12e>
 800efb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800efba:	b14b      	cbz	r3, 800efd0 <rcl_subscription_init+0xfc>
 800efbc:	4628      	mov	r0, r5
 800efbe:	f7ff fd45 	bl	800ea4c <rcl_node_get_rmw_handle>
 800efc2:	6823      	ldr	r3, [r4, #0]
 800efc4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800efc8:	f003 f996 	bl	80122f8 <rmw_destroy_subscription>
 800efcc:	6827      	ldr	r7, [r4, #0]
 800efce:	b197      	cbz	r7, 800eff6 <rcl_subscription_init+0x122>
 800efd0:	f107 0550 	add.w	r5, r7, #80	; 0x50
 800efd4:	4628      	mov	r0, r5
 800efd6:	f7fb f9df 	bl	800a398 <rcutils_allocator_is_valid>
 800efda:	b158      	cbz	r0, 800eff4 <rcl_subscription_init+0x120>
 800efdc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800efde:	b148      	cbz	r0, 800eff4 <rcl_subscription_init+0x120>
 800efe0:	4629      	mov	r1, r5
 800efe2:	f002 f899 	bl	8011118 <rmw_subscription_content_filter_options_fini>
 800efe6:	4605      	mov	r5, r0
 800efe8:	b9b8      	cbnz	r0, 800f01a <rcl_subscription_init+0x146>
 800efea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800efec:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800efee:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800eff0:	4798      	blx	r3
 800eff2:	66fd      	str	r5, [r7, #108]	; 0x6c
 800eff4:	6827      	ldr	r7, [r4, #0]
 800eff6:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800eff8:	6e31      	ldr	r1, [r6, #96]	; 0x60
 800effa:	4638      	mov	r0, r7
 800effc:	4798      	blx	r3
 800effe:	2300      	movs	r3, #0
 800f000:	6023      	str	r3, [r4, #0]
 800f002:	2701      	movs	r7, #1
 800f004:	e7c8      	b.n	800ef98 <rcl_subscription_init+0xc4>
 800f006:	2867      	cmp	r0, #103	; 0x67
 800f008:	d0c6      	beq.n	800ef98 <rcl_subscription_init+0xc4>
 800f00a:	2869      	cmp	r0, #105	; 0x69
 800f00c:	d003      	beq.n	800f016 <rcl_subscription_init+0x142>
 800f00e:	280a      	cmp	r0, #10
 800f010:	d1f7      	bne.n	800f002 <rcl_subscription_init+0x12e>
 800f012:	270a      	movs	r7, #10
 800f014:	e7c0      	b.n	800ef98 <rcl_subscription_init+0xc4>
 800f016:	2767      	movs	r7, #103	; 0x67
 800f018:	e7be      	b.n	800ef98 <rcl_subscription_init+0xc4>
 800f01a:	f7fe ffef 	bl	800dffc <rcl_convert_rmw_ret_to_rcl_ret>
 800f01e:	6827      	ldr	r7, [r4, #0]
 800f020:	e7e9      	b.n	800eff6 <rcl_subscription_init+0x122>
 800f022:	bf00      	nop

0800f024 <rcl_subscription_get_default_options>:
 800f024:	b570      	push	{r4, r5, r6, lr}
 800f026:	4d14      	ldr	r5, [pc, #80]	; (800f078 <rcl_subscription_get_default_options+0x54>)
 800f028:	4914      	ldr	r1, [pc, #80]	; (800f07c <rcl_subscription_get_default_options+0x58>)
 800f02a:	b08a      	sub	sp, #40	; 0x28
 800f02c:	4604      	mov	r4, r0
 800f02e:	2250      	movs	r2, #80	; 0x50
 800f030:	4628      	mov	r0, r5
 800f032:	f006 f9f8 	bl	8015426 <memcpy>
 800f036:	a804      	add	r0, sp, #16
 800f038:	f7fb f9a0 	bl	800a37c <rcutils_get_default_allocator>
 800f03c:	f10d 0c10 	add.w	ip, sp, #16
 800f040:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f044:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 800f048:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f04c:	466e      	mov	r6, sp
 800f04e:	f8dc 3000 	ldr.w	r3, [ip]
 800f052:	f8ce 3000 	str.w	r3, [lr]
 800f056:	4630      	mov	r0, r6
 800f058:	f002 f878 	bl	801114c <rmw_get_default_subscription_options>
 800f05c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800f060:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800f064:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f068:	2270      	movs	r2, #112	; 0x70
 800f06a:	4629      	mov	r1, r5
 800f06c:	4620      	mov	r0, r4
 800f06e:	f006 f9da 	bl	8015426 <memcpy>
 800f072:	4620      	mov	r0, r4
 800f074:	b00a      	add	sp, #40	; 0x28
 800f076:	bd70      	pop	{r4, r5, r6, pc}
 800f078:	2000dc68 	.word	0x2000dc68
 800f07c:	08016890 	.word	0x08016890

0800f080 <rcl_take>:
 800f080:	2800      	cmp	r0, #0
 800f082:	d04a      	beq.n	800f11a <rcl_take+0x9a>
 800f084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f088:	4604      	mov	r4, r0
 800f08a:	6800      	ldr	r0, [r0, #0]
 800f08c:	b0a4      	sub	sp, #144	; 0x90
 800f08e:	2800      	cmp	r0, #0
 800f090:	d03b      	beq.n	800f10a <rcl_take+0x8a>
 800f092:	461f      	mov	r7, r3
 800f094:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d036      	beq.n	800f10a <rcl_take+0x8a>
 800f09c:	460e      	mov	r6, r1
 800f09e:	2900      	cmp	r1, #0
 800f0a0:	d039      	beq.n	800f116 <rcl_take+0x96>
 800f0a2:	4615      	mov	r5, r2
 800f0a4:	2a00      	cmp	r2, #0
 800f0a6:	d03c      	beq.n	800f122 <rcl_take+0xa2>
 800f0a8:	a802      	add	r0, sp, #8
 800f0aa:	f002 f8d9 	bl	8011260 <rmw_get_zero_initialized_message_info>
 800f0ae:	f10d 0c08 	add.w	ip, sp, #8
 800f0b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f0b6:	46ae      	mov	lr, r5
 800f0b8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f0bc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f0c0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f0c4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f0c8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f0cc:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800f0d0:	f04f 0800 	mov.w	r8, #0
 800f0d4:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800f0d8:	f88d 804f 	strb.w	r8, [sp, #79]	; 0x4f
 800f0dc:	6822      	ldr	r2, [r4, #0]
 800f0de:	462b      	mov	r3, r5
 800f0e0:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
 800f0e4:	9700      	str	r7, [sp, #0]
 800f0e6:	f10d 024f 	add.w	r2, sp, #79	; 0x4f
 800f0ea:	4631      	mov	r1, r6
 800f0ec:	f003 f964 	bl	80123b8 <rmw_take_with_info>
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	b9c0      	cbnz	r0, 800f126 <rcl_take+0xa6>
 800f0f4:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
 800f0f8:	f240 1291 	movw	r2, #401	; 0x191
 800f0fc:	2900      	cmp	r1, #0
 800f0fe:	bf08      	it	eq
 800f100:	4613      	moveq	r3, r2
 800f102:	4618      	mov	r0, r3
 800f104:	b024      	add	sp, #144	; 0x90
 800f106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f10a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800f10e:	4618      	mov	r0, r3
 800f110:	b024      	add	sp, #144	; 0x90
 800f112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f116:	230b      	movs	r3, #11
 800f118:	e7f3      	b.n	800f102 <rcl_take+0x82>
 800f11a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800f11e:	4618      	mov	r0, r3
 800f120:	4770      	bx	lr
 800f122:	ad14      	add	r5, sp, #80	; 0x50
 800f124:	e7c0      	b.n	800f0a8 <rcl_take+0x28>
 800f126:	f7fe ff69 	bl	800dffc <rcl_convert_rmw_ret_to_rcl_ret>
 800f12a:	4603      	mov	r3, r0
 800f12c:	e7e9      	b.n	800f102 <rcl_take+0x82>
 800f12e:	bf00      	nop

0800f130 <rcl_subscription_get_rmw_handle>:
 800f130:	b118      	cbz	r0, 800f13a <rcl_subscription_get_rmw_handle+0xa>
 800f132:	6800      	ldr	r0, [r0, #0]
 800f134:	b108      	cbz	r0, 800f13a <rcl_subscription_get_rmw_handle+0xa>
 800f136:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 800f13a:	4770      	bx	lr

0800f13c <rcl_subscription_is_valid>:
 800f13c:	b130      	cbz	r0, 800f14c <rcl_subscription_is_valid+0x10>
 800f13e:	6800      	ldr	r0, [r0, #0]
 800f140:	b120      	cbz	r0, 800f14c <rcl_subscription_is_valid+0x10>
 800f142:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 800f146:	3800      	subs	r0, #0
 800f148:	bf18      	it	ne
 800f14a:	2001      	movne	r0, #1
 800f14c:	4770      	bx	lr
 800f14e:	bf00      	nop

0800f150 <rcl_get_system_time>:
 800f150:	4608      	mov	r0, r1
 800f152:	f7fb ba05 	b.w	800a560 <rcutils_system_time_now>
 800f156:	bf00      	nop

0800f158 <rcl_get_steady_time>:
 800f158:	4608      	mov	r0, r1
 800f15a:	f7fb ba29 	b.w	800a5b0 <rcutils_steady_time_now>
 800f15e:	bf00      	nop

0800f160 <rcl_get_ros_time>:
 800f160:	7a03      	ldrb	r3, [r0, #8]
 800f162:	b510      	push	{r4, lr}
 800f164:	460c      	mov	r4, r1
 800f166:	b133      	cbz	r3, 800f176 <rcl_get_ros_time+0x16>
 800f168:	2105      	movs	r1, #5
 800f16a:	f7fb f923 	bl	800a3b4 <__atomic_load_8>
 800f16e:	e9c4 0100 	strd	r0, r1, [r4]
 800f172:	2000      	movs	r0, #0
 800f174:	bd10      	pop	{r4, pc}
 800f176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f17a:	4608      	mov	r0, r1
 800f17c:	f7fb b9f0 	b.w	800a560 <rcutils_system_time_now>

0800f180 <rcl_clock_init>:
 800f180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f182:	4605      	mov	r5, r0
 800f184:	4610      	mov	r0, r2
 800f186:	4614      	mov	r4, r2
 800f188:	460e      	mov	r6, r1
 800f18a:	f7fb f905 	bl	800a398 <rcutils_allocator_is_valid>
 800f18e:	b128      	cbz	r0, 800f19c <rcl_clock_init+0x1c>
 800f190:	2d03      	cmp	r5, #3
 800f192:	d803      	bhi.n	800f19c <rcl_clock_init+0x1c>
 800f194:	e8df f005 	tbb	[pc, r5]
 800f198:	06532e1d 	.word	0x06532e1d
 800f19c:	f04f 0c0b 	mov.w	ip, #11
 800f1a0:	4660      	mov	r0, ip
 800f1a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1a4:	2e00      	cmp	r6, #0
 800f1a6:	d0f9      	beq.n	800f19c <rcl_clock_init+0x1c>
 800f1a8:	2c00      	cmp	r4, #0
 800f1aa:	d0f7      	beq.n	800f19c <rcl_clock_init+0x1c>
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800f1b2:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 800f268 <rcl_clock_init+0xe8>
 800f1b6:	6133      	str	r3, [r6, #16]
 800f1b8:	f106 0514 	add.w	r5, r6, #20
 800f1bc:	469c      	mov	ip, r3
 800f1be:	2703      	movs	r7, #3
 800f1c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f1c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f1c4:	6823      	ldr	r3, [r4, #0]
 800f1c6:	602b      	str	r3, [r5, #0]
 800f1c8:	7037      	strb	r7, [r6, #0]
 800f1ca:	f8c6 e00c 	str.w	lr, [r6, #12]
 800f1ce:	4660      	mov	r0, ip
 800f1d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1d2:	2e00      	cmp	r6, #0
 800f1d4:	d0e2      	beq.n	800f19c <rcl_clock_init+0x1c>
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	7033      	strb	r3, [r6, #0]
 800f1da:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800f1de:	e9c6 3303 	strd	r3, r3, [r6, #12]
 800f1e2:	469c      	mov	ip, r3
 800f1e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f1e6:	f106 0514 	add.w	r5, r6, #20
 800f1ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f1ec:	6823      	ldr	r3, [r4, #0]
 800f1ee:	602b      	str	r3, [r5, #0]
 800f1f0:	4660      	mov	r0, ip
 800f1f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1f4:	2e00      	cmp	r6, #0
 800f1f6:	d0d1      	beq.n	800f19c <rcl_clock_init+0x1c>
 800f1f8:	2c00      	cmp	r4, #0
 800f1fa:	d0cf      	beq.n	800f19c <rcl_clock_init+0x1c>
 800f1fc:	2700      	movs	r7, #0
 800f1fe:	7037      	strb	r7, [r6, #0]
 800f200:	46a4      	mov	ip, r4
 800f202:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f206:	f106 0514 	add.w	r5, r6, #20
 800f20a:	e9c6 7701 	strd	r7, r7, [r6, #4]
 800f20e:	e9c6 7703 	strd	r7, r7, [r6, #12]
 800f212:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f214:	f8dc 3000 	ldr.w	r3, [ip]
 800f218:	602b      	str	r3, [r5, #0]
 800f21a:	6921      	ldr	r1, [r4, #16]
 800f21c:	6823      	ldr	r3, [r4, #0]
 800f21e:	2010      	movs	r0, #16
 800f220:	4798      	blx	r3
 800f222:	6130      	str	r0, [r6, #16]
 800f224:	b1d0      	cbz	r0, 800f25c <rcl_clock_init+0xdc>
 800f226:	2200      	movs	r2, #0
 800f228:	2300      	movs	r3, #0
 800f22a:	e9c0 2300 	strd	r2, r3, [r0]
 800f22e:	2301      	movs	r3, #1
 800f230:	7207      	strb	r7, [r0, #8]
 800f232:	4a0c      	ldr	r2, [pc, #48]	; (800f264 <rcl_clock_init+0xe4>)
 800f234:	7033      	strb	r3, [r6, #0]
 800f236:	46bc      	mov	ip, r7
 800f238:	60f2      	str	r2, [r6, #12]
 800f23a:	4660      	mov	r0, ip
 800f23c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f23e:	2e00      	cmp	r6, #0
 800f240:	d0ac      	beq.n	800f19c <rcl_clock_init+0x1c>
 800f242:	2c00      	cmp	r4, #0
 800f244:	d0aa      	beq.n	800f19c <rcl_clock_init+0x1c>
 800f246:	2300      	movs	r3, #0
 800f248:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800f24c:	f8df e01c 	ldr.w	lr, [pc, #28]	; 800f26c <rcl_clock_init+0xec>
 800f250:	6133      	str	r3, [r6, #16]
 800f252:	f106 0514 	add.w	r5, r6, #20
 800f256:	469c      	mov	ip, r3
 800f258:	2702      	movs	r7, #2
 800f25a:	e7b1      	b.n	800f1c0 <rcl_clock_init+0x40>
 800f25c:	f04f 0c0a 	mov.w	ip, #10
 800f260:	e79e      	b.n	800f1a0 <rcl_clock_init+0x20>
 800f262:	bf00      	nop
 800f264:	0800f161 	.word	0x0800f161
 800f268:	0800f159 	.word	0x0800f159
 800f26c:	0800f151 	.word	0x0800f151

0800f270 <rcl_clock_get_now>:
 800f270:	b140      	cbz	r0, 800f284 <rcl_clock_get_now+0x14>
 800f272:	b139      	cbz	r1, 800f284 <rcl_clock_get_now+0x14>
 800f274:	7803      	ldrb	r3, [r0, #0]
 800f276:	b11b      	cbz	r3, 800f280 <rcl_clock_get_now+0x10>
 800f278:	68c3      	ldr	r3, [r0, #12]
 800f27a:	b10b      	cbz	r3, 800f280 <rcl_clock_get_now+0x10>
 800f27c:	6900      	ldr	r0, [r0, #16]
 800f27e:	4718      	bx	r3
 800f280:	2001      	movs	r0, #1
 800f282:	4770      	bx	lr
 800f284:	200b      	movs	r0, #11
 800f286:	4770      	bx	lr

0800f288 <rcl_clock_add_jump_callback>:
 800f288:	b082      	sub	sp, #8
 800f28a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f28e:	a906      	add	r1, sp, #24
 800f290:	e881 000c 	stmia.w	r1, {r2, r3}
 800f294:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	; 0x30
 800f298:	b320      	cbz	r0, 800f2e4 <rcl_clock_add_jump_callback+0x5c>
 800f29a:	4604      	mov	r4, r0
 800f29c:	3014      	adds	r0, #20
 800f29e:	f7fb f87b 	bl	800a398 <rcutils_allocator_is_valid>
 800f2a2:	b1f8      	cbz	r0, 800f2e4 <rcl_clock_add_jump_callback+0x5c>
 800f2a4:	b1f6      	cbz	r6, 800f2e4 <rcl_clock_add_jump_callback+0x5c>
 800f2a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	db1b      	blt.n	800f2e4 <rcl_clock_add_jump_callback+0x5c>
 800f2ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f2b0:	2a01      	cmp	r2, #1
 800f2b2:	f173 0300 	sbcs.w	r3, r3, #0
 800f2b6:	da15      	bge.n	800f2e4 <rcl_clock_add_jump_callback+0x5c>
 800f2b8:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 800f2bc:	2f00      	cmp	r7, #0
 800f2be:	d042      	beq.n	800f346 <rcl_clock_add_jump_callback+0xbe>
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	4602      	mov	r2, r0
 800f2c4:	e003      	b.n	800f2ce <rcl_clock_add_jump_callback+0x46>
 800f2c6:	42bb      	cmp	r3, r7
 800f2c8:	f102 0228 	add.w	r2, r2, #40	; 0x28
 800f2cc:	d011      	beq.n	800f2f2 <rcl_clock_add_jump_callback+0x6a>
 800f2ce:	6811      	ldr	r1, [r2, #0]
 800f2d0:	42b1      	cmp	r1, r6
 800f2d2:	f103 0301 	add.w	r3, r3, #1
 800f2d6:	d1f6      	bne.n	800f2c6 <rcl_clock_add_jump_callback+0x3e>
 800f2d8:	6a11      	ldr	r1, [r2, #32]
 800f2da:	42a9      	cmp	r1, r5
 800f2dc:	d1f3      	bne.n	800f2c6 <rcl_clock_add_jump_callback+0x3e>
 800f2de:	f04f 0e01 	mov.w	lr, #1
 800f2e2:	e001      	b.n	800f2e8 <rcl_clock_add_jump_callback+0x60>
 800f2e4:	f04f 0e0b 	mov.w	lr, #11
 800f2e8:	4670      	mov	r0, lr
 800f2ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f2ee:	b002      	add	sp, #8
 800f2f0:	4770      	bx	lr
 800f2f2:	3301      	adds	r3, #1
 800f2f4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800f2f8:	00d9      	lsls	r1, r3, #3
 800f2fa:	69e3      	ldr	r3, [r4, #28]
 800f2fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800f2fe:	4798      	blx	r3
 800f300:	b1f0      	cbz	r0, 800f340 <rcl_clock_add_jump_callback+0xb8>
 800f302:	68a3      	ldr	r3, [r4, #8]
 800f304:	6060      	str	r0, [r4, #4]
 800f306:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800f30a:	f10d 0c18 	add.w	ip, sp, #24
 800f30e:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 800f312:	f103 0801 	add.w	r8, r3, #1
 800f316:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 800f31a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f31e:	f106 0708 	add.w	r7, r6, #8
 800f322:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800f324:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800f328:	f04f 0e00 	mov.w	lr, #0
 800f32c:	e887 0003 	stmia.w	r7, {r0, r1}
 800f330:	6235      	str	r5, [r6, #32]
 800f332:	4670      	mov	r0, lr
 800f334:	f8c4 8008 	str.w	r8, [r4, #8]
 800f338:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f33c:	b002      	add	sp, #8
 800f33e:	4770      	bx	lr
 800f340:	f04f 0e0a 	mov.w	lr, #10
 800f344:	e7d0      	b.n	800f2e8 <rcl_clock_add_jump_callback+0x60>
 800f346:	2128      	movs	r1, #40	; 0x28
 800f348:	e7d7      	b.n	800f2fa <rcl_clock_add_jump_callback+0x72>
 800f34a:	bf00      	nop

0800f34c <rcl_clock_remove_jump_callback>:
 800f34c:	2800      	cmp	r0, #0
 800f34e:	d057      	beq.n	800f400 <rcl_clock_remove_jump_callback+0xb4>
 800f350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f354:	4605      	mov	r5, r0
 800f356:	3014      	adds	r0, #20
 800f358:	4688      	mov	r8, r1
 800f35a:	4692      	mov	sl, r2
 800f35c:	f7fb f81c 	bl	800a398 <rcutils_allocator_is_valid>
 800f360:	2800      	cmp	r0, #0
 800f362:	d03b      	beq.n	800f3dc <rcl_clock_remove_jump_callback+0x90>
 800f364:	f1b8 0f00 	cmp.w	r8, #0
 800f368:	d038      	beq.n	800f3dc <rcl_clock_remove_jump_callback+0x90>
 800f36a:	68ae      	ldr	r6, [r5, #8]
 800f36c:	b166      	cbz	r6, 800f388 <rcl_clock_remove_jump_callback+0x3c>
 800f36e:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800f372:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 800f376:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 800f37a:	464c      	mov	r4, r9
 800f37c:	6823      	ldr	r3, [r4, #0]
 800f37e:	4543      	cmp	r3, r8
 800f380:	d005      	beq.n	800f38e <rcl_clock_remove_jump_callback+0x42>
 800f382:	3428      	adds	r4, #40	; 0x28
 800f384:	42a7      	cmp	r7, r4
 800f386:	d1f9      	bne.n	800f37c <rcl_clock_remove_jump_callback+0x30>
 800f388:	2001      	movs	r0, #1
 800f38a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f38e:	6a23      	ldr	r3, [r4, #32]
 800f390:	3428      	adds	r4, #40	; 0x28
 800f392:	42bc      	cmp	r4, r7
 800f394:	d02d      	beq.n	800f3f2 <rcl_clock_remove_jump_callback+0xa6>
 800f396:	4553      	cmp	r3, sl
 800f398:	d1f0      	bne.n	800f37c <rcl_clock_remove_jump_callback+0x30>
 800f39a:	46a6      	mov	lr, r4
 800f39c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f3a0:	f1a4 0c28 	sub.w	ip, r4, #40	; 0x28
 800f3a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f3a8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f3ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f3b0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f3b4:	3428      	adds	r4, #40	; 0x28
 800f3b6:	42a7      	cmp	r7, r4
 800f3b8:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f3bc:	d1ed      	bne.n	800f39a <rcl_clock_remove_jump_callback+0x4e>
 800f3be:	3e01      	subs	r6, #1
 800f3c0:	60ae      	str	r6, [r5, #8]
 800f3c2:	b176      	cbz	r6, 800f3e2 <rcl_clock_remove_jump_callback+0x96>
 800f3c4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 800f3c8:	69eb      	ldr	r3, [r5, #28]
 800f3ca:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800f3cc:	00f1      	lsls	r1, r6, #3
 800f3ce:	4648      	mov	r0, r9
 800f3d0:	4798      	blx	r3
 800f3d2:	b1b8      	cbz	r0, 800f404 <rcl_clock_remove_jump_callback+0xb8>
 800f3d4:	6068      	str	r0, [r5, #4]
 800f3d6:	2000      	movs	r0, #0
 800f3d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3dc:	200b      	movs	r0, #11
 800f3de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3e2:	4648      	mov	r0, r9
 800f3e4:	69ab      	ldr	r3, [r5, #24]
 800f3e6:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800f3e8:	4798      	blx	r3
 800f3ea:	606e      	str	r6, [r5, #4]
 800f3ec:	4630      	mov	r0, r6
 800f3ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3f2:	4553      	cmp	r3, sl
 800f3f4:	d1c8      	bne.n	800f388 <rcl_clock_remove_jump_callback+0x3c>
 800f3f6:	3e01      	subs	r6, #1
 800f3f8:	60ae      	str	r6, [r5, #8]
 800f3fa:	2e00      	cmp	r6, #0
 800f3fc:	d1e2      	bne.n	800f3c4 <rcl_clock_remove_jump_callback+0x78>
 800f3fe:	e7f0      	b.n	800f3e2 <rcl_clock_remove_jump_callback+0x96>
 800f400:	200b      	movs	r0, #11
 800f402:	4770      	bx	lr
 800f404:	200a      	movs	r0, #10
 800f406:	e7ea      	b.n	800f3de <rcl_clock_remove_jump_callback+0x92>

0800f408 <rcl_validate_enclave_name_with_size>:
 800f408:	b378      	cbz	r0, 800f46a <rcl_validate_enclave_name_with_size+0x62>
 800f40a:	b570      	push	{r4, r5, r6, lr}
 800f40c:	4615      	mov	r5, r2
 800f40e:	b0c2      	sub	sp, #264	; 0x108
 800f410:	b302      	cbz	r2, 800f454 <rcl_validate_enclave_name_with_size+0x4c>
 800f412:	461e      	mov	r6, r3
 800f414:	466a      	mov	r2, sp
 800f416:	ab01      	add	r3, sp, #4
 800f418:	460c      	mov	r4, r1
 800f41a:	f001 ff9f 	bl	801135c <rmw_validate_namespace_with_size>
 800f41e:	4684      	mov	ip, r0
 800f420:	b9e8      	cbnz	r0, 800f45e <rcl_validate_enclave_name_with_size+0x56>
 800f422:	9b00      	ldr	r3, [sp, #0]
 800f424:	b923      	cbnz	r3, 800f430 <rcl_validate_enclave_name_with_size+0x28>
 800f426:	2300      	movs	r3, #0
 800f428:	602b      	str	r3, [r5, #0]
 800f42a:	4660      	mov	r0, ip
 800f42c:	b042      	add	sp, #264	; 0x108
 800f42e:	bd70      	pop	{r4, r5, r6, pc}
 800f430:	2b07      	cmp	r3, #7
 800f432:	d007      	beq.n	800f444 <rcl_validate_enclave_name_with_size+0x3c>
 800f434:	1e5a      	subs	r2, r3, #1
 800f436:	2a05      	cmp	r2, #5
 800f438:	d833      	bhi.n	800f4a2 <rcl_validate_enclave_name_with_size+0x9a>
 800f43a:	e8df f002 	tbb	[pc, r2]
 800f43e:	2c2f      	.short	0x2c2f
 800f440:	1a232629 	.word	0x1a232629
 800f444:	2cff      	cmp	r4, #255	; 0xff
 800f446:	d9ee      	bls.n	800f426 <rcl_validate_enclave_name_with_size+0x1e>
 800f448:	602b      	str	r3, [r5, #0]
 800f44a:	2e00      	cmp	r6, #0
 800f44c:	d0ed      	beq.n	800f42a <rcl_validate_enclave_name_with_size+0x22>
 800f44e:	23fe      	movs	r3, #254	; 0xfe
 800f450:	6033      	str	r3, [r6, #0]
 800f452:	e7ea      	b.n	800f42a <rcl_validate_enclave_name_with_size+0x22>
 800f454:	f04f 0c0b 	mov.w	ip, #11
 800f458:	4660      	mov	r0, ip
 800f45a:	b042      	add	sp, #264	; 0x108
 800f45c:	bd70      	pop	{r4, r5, r6, pc}
 800f45e:	f7fe fdcd 	bl	800dffc <rcl_convert_rmw_ret_to_rcl_ret>
 800f462:	4684      	mov	ip, r0
 800f464:	4660      	mov	r0, ip
 800f466:	b042      	add	sp, #264	; 0x108
 800f468:	bd70      	pop	{r4, r5, r6, pc}
 800f46a:	f04f 0c0b 	mov.w	ip, #11
 800f46e:	4660      	mov	r0, ip
 800f470:	4770      	bx	lr
 800f472:	2306      	movs	r3, #6
 800f474:	602b      	str	r3, [r5, #0]
 800f476:	2e00      	cmp	r6, #0
 800f478:	d0d7      	beq.n	800f42a <rcl_validate_enclave_name_with_size+0x22>
 800f47a:	9b01      	ldr	r3, [sp, #4]
 800f47c:	6033      	str	r3, [r6, #0]
 800f47e:	4660      	mov	r0, ip
 800f480:	b042      	add	sp, #264	; 0x108
 800f482:	bd70      	pop	{r4, r5, r6, pc}
 800f484:	2305      	movs	r3, #5
 800f486:	602b      	str	r3, [r5, #0]
 800f488:	e7f5      	b.n	800f476 <rcl_validate_enclave_name_with_size+0x6e>
 800f48a:	2304      	movs	r3, #4
 800f48c:	602b      	str	r3, [r5, #0]
 800f48e:	e7f2      	b.n	800f476 <rcl_validate_enclave_name_with_size+0x6e>
 800f490:	2303      	movs	r3, #3
 800f492:	602b      	str	r3, [r5, #0]
 800f494:	e7ef      	b.n	800f476 <rcl_validate_enclave_name_with_size+0x6e>
 800f496:	2302      	movs	r3, #2
 800f498:	602b      	str	r3, [r5, #0]
 800f49a:	e7ec      	b.n	800f476 <rcl_validate_enclave_name_with_size+0x6e>
 800f49c:	2301      	movs	r3, #1
 800f49e:	602b      	str	r3, [r5, #0]
 800f4a0:	e7e9      	b.n	800f476 <rcl_validate_enclave_name_with_size+0x6e>
 800f4a2:	4a04      	ldr	r2, [pc, #16]	; (800f4b4 <rcl_validate_enclave_name_with_size+0xac>)
 800f4a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f4a8:	a802      	add	r0, sp, #8
 800f4aa:	f001 fc7b 	bl	8010da4 <rcutils_snprintf>
 800f4ae:	f04f 0c01 	mov.w	ip, #1
 800f4b2:	e7ba      	b.n	800f42a <rcl_validate_enclave_name_with_size+0x22>
 800f4b4:	080168e0 	.word	0x080168e0

0800f4b8 <rcl_validate_enclave_name>:
 800f4b8:	b168      	cbz	r0, 800f4d6 <rcl_validate_enclave_name+0x1e>
 800f4ba:	b570      	push	{r4, r5, r6, lr}
 800f4bc:	460d      	mov	r5, r1
 800f4be:	4616      	mov	r6, r2
 800f4c0:	4604      	mov	r4, r0
 800f4c2:	f7f0 fe97 	bl	80001f4 <strlen>
 800f4c6:	4633      	mov	r3, r6
 800f4c8:	4601      	mov	r1, r0
 800f4ca:	462a      	mov	r2, r5
 800f4cc:	4620      	mov	r0, r4
 800f4ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f4d2:	f7ff bf99 	b.w	800f408 <rcl_validate_enclave_name_with_size>
 800f4d6:	200b      	movs	r0, #11
 800f4d8:	4770      	bx	lr
 800f4da:	bf00      	nop

0800f4dc <rcl_get_zero_initialized_wait_set>:
 800f4dc:	b510      	push	{r4, lr}
 800f4de:	4c08      	ldr	r4, [pc, #32]	; (800f500 <rcl_get_zero_initialized_wait_set+0x24>)
 800f4e0:	4686      	mov	lr, r0
 800f4e2:	4684      	mov	ip, r0
 800f4e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f4e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f4ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f4ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f4f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f4f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f4f6:	6823      	ldr	r3, [r4, #0]
 800f4f8:	f8cc 3000 	str.w	r3, [ip]
 800f4fc:	4670      	mov	r0, lr
 800f4fe:	bd10      	pop	{r4, pc}
 800f500:	08016940 	.word	0x08016940

0800f504 <rcl_wait_set_is_valid>:
 800f504:	b118      	cbz	r0, 800f50e <rcl_wait_set_is_valid+0xa>
 800f506:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800f508:	3800      	subs	r0, #0
 800f50a:	bf18      	it	ne
 800f50c:	2001      	movne	r0, #1
 800f50e:	4770      	bx	lr

0800f510 <rcl_wait_set_fini>:
 800f510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f514:	b082      	sub	sp, #8
 800f516:	2800      	cmp	r0, #0
 800f518:	f000 8095 	beq.w	800f646 <rcl_wait_set_fini+0x136>
 800f51c:	6b06      	ldr	r6, [r0, #48]	; 0x30
 800f51e:	4604      	mov	r4, r0
 800f520:	2e00      	cmp	r6, #0
 800f522:	f000 808c 	beq.w	800f63e <rcl_wait_set_fini+0x12e>
 800f526:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 800f528:	f003 f944 	bl	80127b4 <rmw_destroy_wait_set>
 800f52c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f52e:	1e06      	subs	r6, r0, #0
 800f530:	bf18      	it	ne
 800f532:	f44f 7661 	movne.w	r6, #900	; 0x384
 800f536:	2d00      	cmp	r5, #0
 800f538:	f000 8081 	beq.w	800f63e <rcl_wait_set_fini+0x12e>
 800f53c:	6820      	ldr	r0, [r4, #0]
 800f53e:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 800f542:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f544:	2700      	movs	r7, #0
 800f546:	6067      	str	r7, [r4, #4]
 800f548:	602f      	str	r7, [r5, #0]
 800f54a:	b120      	cbz	r0, 800f556 <rcl_wait_set_fini+0x46>
 800f54c:	9101      	str	r1, [sp, #4]
 800f54e:	47c0      	blx	r8
 800f550:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f552:	9901      	ldr	r1, [sp, #4]
 800f554:	6027      	str	r7, [r4, #0]
 800f556:	68a8      	ldr	r0, [r5, #8]
 800f558:	b120      	cbz	r0, 800f564 <rcl_wait_set_fini+0x54>
 800f55a:	47c0      	blx	r8
 800f55c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f55e:	2300      	movs	r3, #0
 800f560:	e9c5 3301 	strd	r3, r3, [r5, #4]
 800f564:	68a0      	ldr	r0, [r4, #8]
 800f566:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 800f568:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f56a:	f04f 0800 	mov.w	r8, #0
 800f56e:	f8c4 800c 	str.w	r8, [r4, #12]
 800f572:	f8c5 800c 	str.w	r8, [r5, #12]
 800f576:	b128      	cbz	r0, 800f584 <rcl_wait_set_fini+0x74>
 800f578:	47b8      	blx	r7
 800f57a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f57c:	f8c4 8008 	str.w	r8, [r4, #8]
 800f580:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 800f582:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f584:	6968      	ldr	r0, [r5, #20]
 800f586:	f04f 0800 	mov.w	r8, #0
 800f58a:	f8c5 8010 	str.w	r8, [r5, #16]
 800f58e:	b128      	cbz	r0, 800f59c <rcl_wait_set_fini+0x8c>
 800f590:	47b8      	blx	r7
 800f592:	f8c5 8014 	str.w	r8, [r5, #20]
 800f596:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f598:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 800f59a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f59c:	6920      	ldr	r0, [r4, #16]
 800f59e:	f04f 0800 	mov.w	r8, #0
 800f5a2:	f8c4 8014 	str.w	r8, [r4, #20]
 800f5a6:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 800f5aa:	b128      	cbz	r0, 800f5b8 <rcl_wait_set_fini+0xa8>
 800f5ac:	47b8      	blx	r7
 800f5ae:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f5b0:	f8c4 8010 	str.w	r8, [r4, #16]
 800f5b4:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 800f5b6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f5b8:	69a0      	ldr	r0, [r4, #24]
 800f5ba:	f04f 0800 	mov.w	r8, #0
 800f5be:	f8c4 801c 	str.w	r8, [r4, #28]
 800f5c2:	f8c5 8018 	str.w	r8, [r5, #24]
 800f5c6:	b128      	cbz	r0, 800f5d4 <rcl_wait_set_fini+0xc4>
 800f5c8:	9101      	str	r1, [sp, #4]
 800f5ca:	47b8      	blx	r7
 800f5cc:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f5ce:	9901      	ldr	r1, [sp, #4]
 800f5d0:	f8c4 8018 	str.w	r8, [r4, #24]
 800f5d4:	6a28      	ldr	r0, [r5, #32]
 800f5d6:	b120      	cbz	r0, 800f5e2 <rcl_wait_set_fini+0xd2>
 800f5d8:	47b8      	blx	r7
 800f5da:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f5dc:	2300      	movs	r3, #0
 800f5de:	e9c5 3307 	strd	r3, r3, [r5, #28]
 800f5e2:	6a20      	ldr	r0, [r4, #32]
 800f5e4:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 800f5e8:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f5ea:	2700      	movs	r7, #0
 800f5ec:	6267      	str	r7, [r4, #36]	; 0x24
 800f5ee:	626f      	str	r7, [r5, #36]	; 0x24
 800f5f0:	b120      	cbz	r0, 800f5fc <rcl_wait_set_fini+0xec>
 800f5f2:	9101      	str	r1, [sp, #4]
 800f5f4:	47c0      	blx	r8
 800f5f6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f5f8:	9901      	ldr	r1, [sp, #4]
 800f5fa:	6227      	str	r7, [r4, #32]
 800f5fc:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800f5fe:	b120      	cbz	r0, 800f60a <rcl_wait_set_fini+0xfa>
 800f600:	47c0      	blx	r8
 800f602:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f604:	2300      	movs	r3, #0
 800f606:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 800f60a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800f60c:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 800f610:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f612:	2700      	movs	r7, #0
 800f614:	62e7      	str	r7, [r4, #44]	; 0x2c
 800f616:	632f      	str	r7, [r5, #48]	; 0x30
 800f618:	b120      	cbz	r0, 800f624 <rcl_wait_set_fini+0x114>
 800f61a:	9101      	str	r1, [sp, #4]
 800f61c:	47c0      	blx	r8
 800f61e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f620:	9901      	ldr	r1, [sp, #4]
 800f622:	62a7      	str	r7, [r4, #40]	; 0x28
 800f624:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 800f626:	b120      	cbz	r0, 800f632 <rcl_wait_set_fini+0x122>
 800f628:	47c0      	blx	r8
 800f62a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800f62c:	2300      	movs	r3, #0
 800f62e:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 800f632:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800f634:	6da9      	ldr	r1, [r5, #88]	; 0x58
 800f636:	4628      	mov	r0, r5
 800f638:	4798      	blx	r3
 800f63a:	2300      	movs	r3, #0
 800f63c:	6323      	str	r3, [r4, #48]	; 0x30
 800f63e:	4630      	mov	r0, r6
 800f640:	b002      	add	sp, #8
 800f642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f646:	260b      	movs	r6, #11
 800f648:	4630      	mov	r0, r6
 800f64a:	b002      	add	sp, #8
 800f64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f650 <rcl_wait_set_add_subscription>:
 800f650:	b318      	cbz	r0, 800f69a <rcl_wait_set_add_subscription+0x4a>
 800f652:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800f654:	b570      	push	{r4, r5, r6, lr}
 800f656:	4604      	mov	r4, r0
 800f658:	b30b      	cbz	r3, 800f69e <rcl_wait_set_add_subscription+0x4e>
 800f65a:	b319      	cbz	r1, 800f6a4 <rcl_wait_set_add_subscription+0x54>
 800f65c:	681d      	ldr	r5, [r3, #0]
 800f65e:	6840      	ldr	r0, [r0, #4]
 800f660:	4285      	cmp	r5, r0
 800f662:	d217      	bcs.n	800f694 <rcl_wait_set_add_subscription+0x44>
 800f664:	6820      	ldr	r0, [r4, #0]
 800f666:	1c6e      	adds	r6, r5, #1
 800f668:	601e      	str	r6, [r3, #0]
 800f66a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800f66e:	b102      	cbz	r2, 800f672 <rcl_wait_set_add_subscription+0x22>
 800f670:	6015      	str	r5, [r2, #0]
 800f672:	4608      	mov	r0, r1
 800f674:	f7ff fd5c 	bl	800f130 <rcl_subscription_get_rmw_handle>
 800f678:	b150      	cbz	r0, 800f690 <rcl_wait_set_add_subscription+0x40>
 800f67a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f67c:	6842      	ldr	r2, [r0, #4]
 800f67e:	689b      	ldr	r3, [r3, #8]
 800f680:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f684:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f686:	6853      	ldr	r3, [r2, #4]
 800f688:	3301      	adds	r3, #1
 800f68a:	2000      	movs	r0, #0
 800f68c:	6053      	str	r3, [r2, #4]
 800f68e:	bd70      	pop	{r4, r5, r6, pc}
 800f690:	2001      	movs	r0, #1
 800f692:	bd70      	pop	{r4, r5, r6, pc}
 800f694:	f240 3086 	movw	r0, #902	; 0x386
 800f698:	bd70      	pop	{r4, r5, r6, pc}
 800f69a:	200b      	movs	r0, #11
 800f69c:	4770      	bx	lr
 800f69e:	f44f 7061 	mov.w	r0, #900	; 0x384
 800f6a2:	bd70      	pop	{r4, r5, r6, pc}
 800f6a4:	200b      	movs	r0, #11
 800f6a6:	bd70      	pop	{r4, r5, r6, pc}

0800f6a8 <rcl_wait_set_clear>:
 800f6a8:	2800      	cmp	r0, #0
 800f6aa:	d073      	beq.n	800f794 <rcl_wait_set_clear+0xec>
 800f6ac:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800f6ae:	b510      	push	{r4, lr}
 800f6b0:	4604      	mov	r4, r0
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d070      	beq.n	800f798 <rcl_wait_set_clear+0xf0>
 800f6b6:	6800      	ldr	r0, [r0, #0]
 800f6b8:	b138      	cbz	r0, 800f6ca <rcl_wait_set_clear+0x22>
 800f6ba:	6862      	ldr	r2, [r4, #4]
 800f6bc:	2100      	movs	r1, #0
 800f6be:	0092      	lsls	r2, r2, #2
 800f6c0:	f005 fd92 	bl	80151e8 <memset>
 800f6c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f6c6:	2200      	movs	r2, #0
 800f6c8:	601a      	str	r2, [r3, #0]
 800f6ca:	68a0      	ldr	r0, [r4, #8]
 800f6cc:	b138      	cbz	r0, 800f6de <rcl_wait_set_clear+0x36>
 800f6ce:	68e2      	ldr	r2, [r4, #12]
 800f6d0:	2100      	movs	r1, #0
 800f6d2:	0092      	lsls	r2, r2, #2
 800f6d4:	f005 fd88 	bl	80151e8 <memset>
 800f6d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f6da:	2200      	movs	r2, #0
 800f6dc:	60da      	str	r2, [r3, #12]
 800f6de:	69a0      	ldr	r0, [r4, #24]
 800f6e0:	b138      	cbz	r0, 800f6f2 <rcl_wait_set_clear+0x4a>
 800f6e2:	69e2      	ldr	r2, [r4, #28]
 800f6e4:	2100      	movs	r1, #0
 800f6e6:	0092      	lsls	r2, r2, #2
 800f6e8:	f005 fd7e 	bl	80151e8 <memset>
 800f6ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	619a      	str	r2, [r3, #24]
 800f6f2:	6a20      	ldr	r0, [r4, #32]
 800f6f4:	b138      	cbz	r0, 800f706 <rcl_wait_set_clear+0x5e>
 800f6f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800f6f8:	2100      	movs	r1, #0
 800f6fa:	0092      	lsls	r2, r2, #2
 800f6fc:	f005 fd74 	bl	80151e8 <memset>
 800f700:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f702:	2200      	movs	r2, #0
 800f704:	625a      	str	r2, [r3, #36]	; 0x24
 800f706:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800f708:	b138      	cbz	r0, 800f71a <rcl_wait_set_clear+0x72>
 800f70a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f70c:	2100      	movs	r1, #0
 800f70e:	0092      	lsls	r2, r2, #2
 800f710:	f005 fd6a 	bl	80151e8 <memset>
 800f714:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f716:	2200      	movs	r2, #0
 800f718:	631a      	str	r2, [r3, #48]	; 0x30
 800f71a:	6920      	ldr	r0, [r4, #16]
 800f71c:	b138      	cbz	r0, 800f72e <rcl_wait_set_clear+0x86>
 800f71e:	6962      	ldr	r2, [r4, #20]
 800f720:	2100      	movs	r1, #0
 800f722:	0092      	lsls	r2, r2, #2
 800f724:	f005 fd60 	bl	80151e8 <memset>
 800f728:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f72a:	2200      	movs	r2, #0
 800f72c:	641a      	str	r2, [r3, #64]	; 0x40
 800f72e:	6898      	ldr	r0, [r3, #8]
 800f730:	b138      	cbz	r0, 800f742 <rcl_wait_set_clear+0x9a>
 800f732:	685a      	ldr	r2, [r3, #4]
 800f734:	2100      	movs	r1, #0
 800f736:	0092      	lsls	r2, r2, #2
 800f738:	f005 fd56 	bl	80151e8 <memset>
 800f73c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f73e:	2200      	movs	r2, #0
 800f740:	605a      	str	r2, [r3, #4]
 800f742:	6958      	ldr	r0, [r3, #20]
 800f744:	b138      	cbz	r0, 800f756 <rcl_wait_set_clear+0xae>
 800f746:	691a      	ldr	r2, [r3, #16]
 800f748:	2100      	movs	r1, #0
 800f74a:	0092      	lsls	r2, r2, #2
 800f74c:	f005 fd4c 	bl	80151e8 <memset>
 800f750:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f752:	2200      	movs	r2, #0
 800f754:	611a      	str	r2, [r3, #16]
 800f756:	6a18      	ldr	r0, [r3, #32]
 800f758:	b138      	cbz	r0, 800f76a <rcl_wait_set_clear+0xc2>
 800f75a:	69da      	ldr	r2, [r3, #28]
 800f75c:	2100      	movs	r1, #0
 800f75e:	0092      	lsls	r2, r2, #2
 800f760:	f005 fd42 	bl	80151e8 <memset>
 800f764:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f766:	2200      	movs	r2, #0
 800f768:	61da      	str	r2, [r3, #28]
 800f76a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800f76c:	b138      	cbz	r0, 800f77e <rcl_wait_set_clear+0xd6>
 800f76e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f770:	2100      	movs	r1, #0
 800f772:	0092      	lsls	r2, r2, #2
 800f774:	f005 fd38 	bl	80151e8 <memset>
 800f778:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f77a:	2200      	movs	r2, #0
 800f77c:	629a      	str	r2, [r3, #40]	; 0x28
 800f77e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800f780:	b138      	cbz	r0, 800f792 <rcl_wait_set_clear+0xea>
 800f782:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f784:	2100      	movs	r1, #0
 800f786:	0092      	lsls	r2, r2, #2
 800f788:	f005 fd2e 	bl	80151e8 <memset>
 800f78c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f78e:	2000      	movs	r0, #0
 800f790:	6358      	str	r0, [r3, #52]	; 0x34
 800f792:	bd10      	pop	{r4, pc}
 800f794:	200b      	movs	r0, #11
 800f796:	4770      	bx	lr
 800f798:	f44f 7061 	mov.w	r0, #900	; 0x384
 800f79c:	bd10      	pop	{r4, pc}
 800f79e:	bf00      	nop

0800f7a0 <rcl_wait_set_resize>:
 800f7a0:	2800      	cmp	r0, #0
 800f7a2:	f000 8185 	beq.w	800fab0 <rcl_wait_set_resize+0x310>
 800f7a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7aa:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800f7ac:	b083      	sub	sp, #12
 800f7ae:	4605      	mov	r5, r0
 800f7b0:	2c00      	cmp	r4, #0
 800f7b2:	f000 817f 	beq.w	800fab4 <rcl_wait_set_resize+0x314>
 800f7b6:	f04f 0900 	mov.w	r9, #0
 800f7ba:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800f7be:	461f      	mov	r7, r3
 800f7c0:	4688      	mov	r8, r1
 800f7c2:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	; 0x4c
 800f7c6:	4616      	mov	r6, r2
 800f7c8:	f8c0 9004 	str.w	r9, [r0, #4]
 800f7cc:	f8c4 9000 	str.w	r9, [r4]
 800f7d0:	2900      	cmp	r1, #0
 800f7d2:	f000 80bd 	beq.w	800f950 <rcl_wait_set_resize+0x1b0>
 800f7d6:	008c      	lsls	r4, r1, #2
 800f7d8:	6800      	ldr	r0, [r0, #0]
 800f7da:	9301      	str	r3, [sp, #4]
 800f7dc:	4652      	mov	r2, sl
 800f7de:	4621      	mov	r1, r4
 800f7e0:	4798      	blx	r3
 800f7e2:	9b01      	ldr	r3, [sp, #4]
 800f7e4:	6028      	str	r0, [r5, #0]
 800f7e6:	2800      	cmp	r0, #0
 800f7e8:	f000 80cb 	beq.w	800f982 <rcl_wait_set_resize+0x1e2>
 800f7ec:	4622      	mov	r2, r4
 800f7ee:	4649      	mov	r1, r9
 800f7f0:	9301      	str	r3, [sp, #4]
 800f7f2:	f005 fcf9 	bl	80151e8 <memset>
 800f7f6:	f8c5 8004 	str.w	r8, [r5, #4]
 800f7fa:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 800f7fe:	9b01      	ldr	r3, [sp, #4]
 800f800:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800f804:	f8c8 9004 	str.w	r9, [r8, #4]
 800f808:	4652      	mov	r2, sl
 800f80a:	4621      	mov	r1, r4
 800f80c:	4798      	blx	r3
 800f80e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800f810:	f8c8 0008 	str.w	r0, [r8, #8]
 800f814:	689b      	ldr	r3, [r3, #8]
 800f816:	2b00      	cmp	r3, #0
 800f818:	f000 80ac 	beq.w	800f974 <rcl_wait_set_resize+0x1d4>
 800f81c:	4622      	mov	r2, r4
 800f81e:	4649      	mov	r1, r9
 800f820:	4618      	mov	r0, r3
 800f822:	f005 fce1 	bl	80151e8 <memset>
 800f826:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800f828:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800f82c:	f04f 0800 	mov.w	r8, #0
 800f830:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 800f834:	f8c5 800c 	str.w	r8, [r5, #12]
 800f838:	f8c4 800c 	str.w	r8, [r4, #12]
 800f83c:	2e00      	cmp	r6, #0
 800f83e:	f040 80a4 	bne.w	800f98a <rcl_wait_set_resize+0x1ea>
 800f842:	68a8      	ldr	r0, [r5, #8]
 800f844:	b128      	cbz	r0, 800f852 <rcl_wait_set_resize+0xb2>
 800f846:	4649      	mov	r1, r9
 800f848:	4790      	blx	r2
 800f84a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800f84c:	60ae      	str	r6, [r5, #8]
 800f84e:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800f852:	f04f 0800 	mov.w	r8, #0
 800f856:	19f6      	adds	r6, r6, r7
 800f858:	f8c4 8010 	str.w	r8, [r4, #16]
 800f85c:	f040 80ac 	bne.w	800f9b8 <rcl_wait_set_resize+0x218>
 800f860:	6960      	ldr	r0, [r4, #20]
 800f862:	b130      	cbz	r0, 800f872 <rcl_wait_set_resize+0xd2>
 800f864:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800f866:	4649      	mov	r1, r9
 800f868:	4798      	blx	r3
 800f86a:	6166      	str	r6, [r4, #20]
 800f86c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800f86e:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800f872:	2600      	movs	r6, #0
 800f874:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 800f878:	616e      	str	r6, [r5, #20]
 800f87a:	6426      	str	r6, [r4, #64]	; 0x40
 800f87c:	2f00      	cmp	r7, #0
 800f87e:	f040 80ad 	bne.w	800f9dc <rcl_wait_set_resize+0x23c>
 800f882:	6928      	ldr	r0, [r5, #16]
 800f884:	b138      	cbz	r0, 800f896 <rcl_wait_set_resize+0xf6>
 800f886:	4649      	mov	r1, r9
 800f888:	47d0      	blx	sl
 800f88a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800f88c:	612f      	str	r7, [r5, #16]
 800f88e:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 800f892:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800f896:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f898:	2600      	movs	r6, #0
 800f89a:	61ee      	str	r6, [r5, #28]
 800f89c:	61a6      	str	r6, [r4, #24]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	f040 80af 	bne.w	800fa02 <rcl_wait_set_resize+0x262>
 800f8a4:	69a8      	ldr	r0, [r5, #24]
 800f8a6:	b120      	cbz	r0, 800f8b2 <rcl_wait_set_resize+0x112>
 800f8a8:	4649      	mov	r1, r9
 800f8aa:	47d0      	blx	sl
 800f8ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f8ae:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800f8b0:	61ab      	str	r3, [r5, #24]
 800f8b2:	6a20      	ldr	r0, [r4, #32]
 800f8b4:	b128      	cbz	r0, 800f8c2 <rcl_wait_set_resize+0x122>
 800f8b6:	4649      	mov	r1, r9
 800f8b8:	47d0      	blx	sl
 800f8ba:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800f8bc:	2300      	movs	r3, #0
 800f8be:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800f8c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f8c4:	6da7      	ldr	r7, [r4, #88]	; 0x58
 800f8c6:	2600      	movs	r6, #0
 800f8c8:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 800f8cc:	626e      	str	r6, [r5, #36]	; 0x24
 800f8ce:	6266      	str	r6, [r4, #36]	; 0x24
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	f000 80b6 	beq.w	800fa42 <rcl_wait_set_resize+0x2a2>
 800f8d6:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800f8da:	6a28      	ldr	r0, [r5, #32]
 800f8dc:	463a      	mov	r2, r7
 800f8de:	4651      	mov	r1, sl
 800f8e0:	47c8      	blx	r9
 800f8e2:	6228      	str	r0, [r5, #32]
 800f8e4:	2800      	cmp	r0, #0
 800f8e6:	d04c      	beq.n	800f982 <rcl_wait_set_resize+0x1e2>
 800f8e8:	4652      	mov	r2, sl
 800f8ea:	4631      	mov	r1, r6
 800f8ec:	f005 fc7c 	bl	80151e8 <memset>
 800f8f0:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800f8f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f8f4:	626b      	str	r3, [r5, #36]	; 0x24
 800f8f6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f8f8:	62a6      	str	r6, [r4, #40]	; 0x28
 800f8fa:	463a      	mov	r2, r7
 800f8fc:	4651      	mov	r1, sl
 800f8fe:	47c8      	blx	r9
 800f900:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800f902:	62e0      	str	r0, [r4, #44]	; 0x2c
 800f904:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800f906:	2c00      	cmp	r4, #0
 800f908:	f000 80f0 	beq.w	800faec <rcl_wait_set_resize+0x34c>
 800f90c:	4620      	mov	r0, r4
 800f90e:	4652      	mov	r2, sl
 800f910:	4631      	mov	r1, r6
 800f912:	f005 fc69 	bl	80151e8 <memset>
 800f916:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800f918:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f91a:	6da7      	ldr	r7, [r4, #88]	; 0x58
 800f91c:	2600      	movs	r6, #0
 800f91e:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 800f922:	62ee      	str	r6, [r5, #44]	; 0x2c
 800f924:	6326      	str	r6, [r4, #48]	; 0x30
 800f926:	2b00      	cmp	r3, #0
 800f928:	f040 809d 	bne.w	800fa66 <rcl_wait_set_resize+0x2c6>
 800f92c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800f92e:	b120      	cbz	r0, 800f93a <rcl_wait_set_resize+0x19a>
 800f930:	4639      	mov	r1, r7
 800f932:	47c0      	blx	r8
 800f934:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f936:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800f938:	62ab      	str	r3, [r5, #40]	; 0x28
 800f93a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800f93c:	b310      	cbz	r0, 800f984 <rcl_wait_set_resize+0x1e4>
 800f93e:	4639      	mov	r1, r7
 800f940:	47c0      	blx	r8
 800f942:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800f944:	2000      	movs	r0, #0
 800f946:	e9c3 000d 	strd	r0, r0, [r3, #52]	; 0x34
 800f94a:	b003      	add	sp, #12
 800f94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f950:	6800      	ldr	r0, [r0, #0]
 800f952:	b120      	cbz	r0, 800f95e <rcl_wait_set_resize+0x1be>
 800f954:	4651      	mov	r1, sl
 800f956:	47d8      	blx	fp
 800f958:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800f95a:	f8c5 8000 	str.w	r8, [r5]
 800f95e:	68a0      	ldr	r0, [r4, #8]
 800f960:	2800      	cmp	r0, #0
 800f962:	f43f af61 	beq.w	800f828 <rcl_wait_set_resize+0x88>
 800f966:	4651      	mov	r1, sl
 800f968:	47d8      	blx	fp
 800f96a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800f96c:	2300      	movs	r3, #0
 800f96e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800f972:	e759      	b.n	800f828 <rcl_wait_set_resize+0x88>
 800f974:	6828      	ldr	r0, [r5, #0]
 800f976:	9301      	str	r3, [sp, #4]
 800f978:	4651      	mov	r1, sl
 800f97a:	47d8      	blx	fp
 800f97c:	9b01      	ldr	r3, [sp, #4]
 800f97e:	e9c5 3300 	strd	r3, r3, [r5]
 800f982:	200a      	movs	r0, #10
 800f984:	b003      	add	sp, #12
 800f986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f98a:	00b4      	lsls	r4, r6, #2
 800f98c:	68a8      	ldr	r0, [r5, #8]
 800f98e:	464a      	mov	r2, r9
 800f990:	4621      	mov	r1, r4
 800f992:	4798      	blx	r3
 800f994:	60a8      	str	r0, [r5, #8]
 800f996:	2800      	cmp	r0, #0
 800f998:	d0f3      	beq.n	800f982 <rcl_wait_set_resize+0x1e2>
 800f99a:	4622      	mov	r2, r4
 800f99c:	4641      	mov	r1, r8
 800f99e:	f005 fc23 	bl	80151e8 <memset>
 800f9a2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800f9a4:	60ee      	str	r6, [r5, #12]
 800f9a6:	f04f 0800 	mov.w	r8, #0
 800f9aa:	19f6      	adds	r6, r6, r7
 800f9ac:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800f9b0:	f8c4 8010 	str.w	r8, [r4, #16]
 800f9b4:	f43f af54 	beq.w	800f860 <rcl_wait_set_resize+0xc0>
 800f9b8:	00b6      	lsls	r6, r6, #2
 800f9ba:	464a      	mov	r2, r9
 800f9bc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800f9be:	6960      	ldr	r0, [r4, #20]
 800f9c0:	4631      	mov	r1, r6
 800f9c2:	4798      	blx	r3
 800f9c4:	4681      	mov	r9, r0
 800f9c6:	6160      	str	r0, [r4, #20]
 800f9c8:	2800      	cmp	r0, #0
 800f9ca:	d076      	beq.n	800faba <rcl_wait_set_resize+0x31a>
 800f9cc:	4632      	mov	r2, r6
 800f9ce:	4641      	mov	r1, r8
 800f9d0:	f005 fc0a 	bl	80151e8 <memset>
 800f9d4:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800f9d6:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800f9da:	e74a      	b.n	800f872 <rcl_wait_set_resize+0xd2>
 800f9dc:	00bc      	lsls	r4, r7, #2
 800f9de:	6928      	ldr	r0, [r5, #16]
 800f9e0:	464a      	mov	r2, r9
 800f9e2:	4621      	mov	r1, r4
 800f9e4:	47c0      	blx	r8
 800f9e6:	6128      	str	r0, [r5, #16]
 800f9e8:	2800      	cmp	r0, #0
 800f9ea:	d0ca      	beq.n	800f982 <rcl_wait_set_resize+0x1e2>
 800f9ec:	4622      	mov	r2, r4
 800f9ee:	4631      	mov	r1, r6
 800f9f0:	f005 fbfa 	bl	80151e8 <memset>
 800f9f4:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800f9f6:	616f      	str	r7, [r5, #20]
 800f9f8:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 800f9fc:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800fa00:	e749      	b.n	800f896 <rcl_wait_set_resize+0xf6>
 800fa02:	009c      	lsls	r4, r3, #2
 800fa04:	69a8      	ldr	r0, [r5, #24]
 800fa06:	464a      	mov	r2, r9
 800fa08:	4621      	mov	r1, r4
 800fa0a:	47c0      	blx	r8
 800fa0c:	61a8      	str	r0, [r5, #24]
 800fa0e:	2800      	cmp	r0, #0
 800fa10:	d0b7      	beq.n	800f982 <rcl_wait_set_resize+0x1e2>
 800fa12:	4622      	mov	r2, r4
 800fa14:	4631      	mov	r1, r6
 800fa16:	f005 fbe7 	bl	80151e8 <memset>
 800fa1a:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 800fa1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fa1e:	61eb      	str	r3, [r5, #28]
 800fa20:	6a38      	ldr	r0, [r7, #32]
 800fa22:	61fe      	str	r6, [r7, #28]
 800fa24:	464a      	mov	r2, r9
 800fa26:	4621      	mov	r1, r4
 800fa28:	47c0      	blx	r8
 800fa2a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800fa2c:	6238      	str	r0, [r7, #32]
 800fa2e:	6a1f      	ldr	r7, [r3, #32]
 800fa30:	2f00      	cmp	r7, #0
 800fa32:	d054      	beq.n	800fade <rcl_wait_set_resize+0x33e>
 800fa34:	4622      	mov	r2, r4
 800fa36:	4631      	mov	r1, r6
 800fa38:	4638      	mov	r0, r7
 800fa3a:	f005 fbd5 	bl	80151e8 <memset>
 800fa3e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800fa40:	e73f      	b.n	800f8c2 <rcl_wait_set_resize+0x122>
 800fa42:	6a28      	ldr	r0, [r5, #32]
 800fa44:	b120      	cbz	r0, 800fa50 <rcl_wait_set_resize+0x2b0>
 800fa46:	4639      	mov	r1, r7
 800fa48:	47c0      	blx	r8
 800fa4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fa4c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800fa4e:	622b      	str	r3, [r5, #32]
 800fa50:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800fa52:	2800      	cmp	r0, #0
 800fa54:	f43f af60 	beq.w	800f918 <rcl_wait_set_resize+0x178>
 800fa58:	4639      	mov	r1, r7
 800fa5a:	47c0      	blx	r8
 800fa5c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 800fa5e:	2300      	movs	r3, #0
 800fa60:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 800fa64:	e758      	b.n	800f918 <rcl_wait_set_resize+0x178>
 800fa66:	009c      	lsls	r4, r3, #2
 800fa68:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800fa6a:	463a      	mov	r2, r7
 800fa6c:	4621      	mov	r1, r4
 800fa6e:	47c8      	blx	r9
 800fa70:	62a8      	str	r0, [r5, #40]	; 0x28
 800fa72:	2800      	cmp	r0, #0
 800fa74:	d085      	beq.n	800f982 <rcl_wait_set_resize+0x1e2>
 800fa76:	4622      	mov	r2, r4
 800fa78:	4631      	mov	r1, r6
 800fa7a:	f005 fbb5 	bl	80151e8 <memset>
 800fa7e:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 800fa82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa84:	62eb      	str	r3, [r5, #44]	; 0x2c
 800fa86:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 800fa8a:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
 800fa8e:	463a      	mov	r2, r7
 800fa90:	4621      	mov	r1, r4
 800fa92:	47c8      	blx	r9
 800fa94:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800fa96:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 800fa9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa9c:	b36b      	cbz	r3, 800fafa <rcl_wait_set_resize+0x35a>
 800fa9e:	4622      	mov	r2, r4
 800faa0:	4631      	mov	r1, r6
 800faa2:	4618      	mov	r0, r3
 800faa4:	f005 fba0 	bl	80151e8 <memset>
 800faa8:	4630      	mov	r0, r6
 800faaa:	b003      	add	sp, #12
 800faac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fab0:	200b      	movs	r0, #11
 800fab2:	4770      	bx	lr
 800fab4:	f44f 7061 	mov.w	r0, #900	; 0x384
 800fab8:	e764      	b.n	800f984 <rcl_wait_set_resize+0x1e4>
 800faba:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800fabc:	68a8      	ldr	r0, [r5, #8]
 800fabe:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800fac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fac2:	4798      	blx	r3
 800fac4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800fac6:	6928      	ldr	r0, [r5, #16]
 800fac8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800faca:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800facc:	f8c5 900c 	str.w	r9, [r5, #12]
 800fad0:	f8c5 9008 	str.w	r9, [r5, #8]
 800fad4:	4790      	blx	r2
 800fad6:	e9c5 9904 	strd	r9, r9, [r5, #16]
 800fada:	200a      	movs	r0, #10
 800fadc:	e752      	b.n	800f984 <rcl_wait_set_resize+0x1e4>
 800fade:	69a8      	ldr	r0, [r5, #24]
 800fae0:	4649      	mov	r1, r9
 800fae2:	47d0      	blx	sl
 800fae4:	e9c5 7706 	strd	r7, r7, [r5, #24]
 800fae8:	200a      	movs	r0, #10
 800faea:	e74b      	b.n	800f984 <rcl_wait_set_resize+0x1e4>
 800faec:	6a28      	ldr	r0, [r5, #32]
 800faee:	4639      	mov	r1, r7
 800faf0:	47c0      	blx	r8
 800faf2:	e9c5 4408 	strd	r4, r4, [r5, #32]
 800faf6:	200a      	movs	r0, #10
 800faf8:	e744      	b.n	800f984 <rcl_wait_set_resize+0x1e4>
 800fafa:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800fafc:	9301      	str	r3, [sp, #4]
 800fafe:	4639      	mov	r1, r7
 800fb00:	47c0      	blx	r8
 800fb02:	9b01      	ldr	r3, [sp, #4]
 800fb04:	200a      	movs	r0, #10
 800fb06:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 800fb0a:	e73b      	b.n	800f984 <rcl_wait_set_resize+0x1e4>

0800fb0c <rcl_wait_set_init>:
 800fb0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb10:	b084      	sub	sp, #16
 800fb12:	4604      	mov	r4, r0
 800fb14:	a810      	add	r0, sp, #64	; 0x40
 800fb16:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 800fb1a:	460f      	mov	r7, r1
 800fb1c:	4690      	mov	r8, r2
 800fb1e:	4699      	mov	r9, r3
 800fb20:	f7fa fc3a 	bl	800a398 <rcutils_allocator_is_valid>
 800fb24:	2800      	cmp	r0, #0
 800fb26:	d06b      	beq.n	800fc00 <rcl_wait_set_init+0xf4>
 800fb28:	2c00      	cmp	r4, #0
 800fb2a:	d069      	beq.n	800fc00 <rcl_wait_set_init+0xf4>
 800fb2c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800fb2e:	b125      	cbz	r5, 800fb3a <rcl_wait_set_init+0x2e>
 800fb30:	2564      	movs	r5, #100	; 0x64
 800fb32:	4628      	mov	r0, r5
 800fb34:	b004      	add	sp, #16
 800fb36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb3a:	f1ba 0f00 	cmp.w	sl, #0
 800fb3e:	d05f      	beq.n	800fc00 <rcl_wait_set_init+0xf4>
 800fb40:	4650      	mov	r0, sl
 800fb42:	f7fe fa79 	bl	800e038 <rcl_context_is_valid>
 800fb46:	2800      	cmp	r0, #0
 800fb48:	d067      	beq.n	800fc1a <rcl_wait_set_init+0x10e>
 800fb4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fb4c:	9914      	ldr	r1, [sp, #80]	; 0x50
 800fb4e:	205c      	movs	r0, #92	; 0x5c
 800fb50:	4798      	blx	r3
 800fb52:	6320      	str	r0, [r4, #48]	; 0x30
 800fb54:	2800      	cmp	r0, #0
 800fb56:	d062      	beq.n	800fc1e <rcl_wait_set_init+0x112>
 800fb58:	4629      	mov	r1, r5
 800fb5a:	225c      	movs	r2, #92	; 0x5c
 800fb5c:	f005 fb44 	bl	80151e8 <memset>
 800fb60:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800fb64:	eb03 0e02 	add.w	lr, r3, r2
 800fb68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fb6a:	6b26      	ldr	r6, [r4, #48]	; 0x30
 800fb6c:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 800fb70:	449e      	add	lr, r3
 800fb72:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fb76:	e9c6 5501 	strd	r5, r5, [r6, #4]
 800fb7a:	e9c6 5504 	strd	r5, r5, [r6, #16]
 800fb7e:	e9c6 5507 	strd	r5, r5, [r6, #28]
 800fb82:	e9c6 550a 	strd	r5, r5, [r6, #40]	; 0x28
 800fb86:	e9c6 550d 	strd	r5, r5, [r6, #52]	; 0x34
 800fb8a:	f106 0548 	add.w	r5, r6, #72	; 0x48
 800fb8e:	f8c6 a044 	str.w	sl, [r6, #68]	; 0x44
 800fb92:	f8da a000 	ldr.w	sl, [sl]
 800fb96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fb98:	44c6      	add	lr, r8
 800fb9a:	f8dc 3000 	ldr.w	r3, [ip]
 800fb9e:	602b      	str	r3, [r5, #0]
 800fba0:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 800fba4:	f10a 0028 	add.w	r0, sl, #40	; 0x28
 800fba8:	f002 fdfa 	bl	80127a0 <rmw_create_wait_set>
 800fbac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fbae:	63f0      	str	r0, [r6, #60]	; 0x3c
 800fbb0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800fbb2:	b350      	cbz	r0, 800fc0a <rcl_wait_set_init+0xfe>
 800fbb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fbb6:	9302      	str	r3, [sp, #8]
 800fbb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fbba:	9301      	str	r3, [sp, #4]
 800fbbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fbbe:	9300      	str	r3, [sp, #0]
 800fbc0:	4642      	mov	r2, r8
 800fbc2:	464b      	mov	r3, r9
 800fbc4:	4639      	mov	r1, r7
 800fbc6:	4620      	mov	r0, r4
 800fbc8:	f7ff fdea 	bl	800f7a0 <rcl_wait_set_resize>
 800fbcc:	4605      	mov	r5, r0
 800fbce:	2800      	cmp	r0, #0
 800fbd0:	d0af      	beq.n	800fb32 <rcl_wait_set_init+0x26>
 800fbd2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fbd4:	bb2b      	cbnz	r3, 800fc22 <rcl_wait_set_init+0x116>
 800fbd6:	2600      	movs	r6, #0
 800fbd8:	e9cd 6601 	strd	r6, r6, [sp, #4]
 800fbdc:	9600      	str	r6, [sp, #0]
 800fbde:	4633      	mov	r3, r6
 800fbe0:	4632      	mov	r2, r6
 800fbe2:	4631      	mov	r1, r6
 800fbe4:	4620      	mov	r0, r4
 800fbe6:	f7ff fddb 	bl	800f7a0 <rcl_wait_set_resize>
 800fbea:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800fbec:	2800      	cmp	r0, #0
 800fbee:	d0a0      	beq.n	800fb32 <rcl_wait_set_init+0x26>
 800fbf0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800fbf2:	6d81      	ldr	r1, [r0, #88]	; 0x58
 800fbf4:	4798      	blx	r3
 800fbf6:	4628      	mov	r0, r5
 800fbf8:	6326      	str	r6, [r4, #48]	; 0x30
 800fbfa:	b004      	add	sp, #16
 800fbfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc00:	250b      	movs	r5, #11
 800fc02:	4628      	mov	r0, r5
 800fc04:	b004      	add	sp, #16
 800fc06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc0a:	2501      	movs	r5, #1
 800fc0c:	f002 fdd2 	bl	80127b4 <rmw_destroy_wait_set>
 800fc10:	2800      	cmp	r0, #0
 800fc12:	bf18      	it	ne
 800fc14:	f44f 7561 	movne.w	r5, #900	; 0x384
 800fc18:	e7dd      	b.n	800fbd6 <rcl_wait_set_init+0xca>
 800fc1a:	2565      	movs	r5, #101	; 0x65
 800fc1c:	e789      	b.n	800fb32 <rcl_wait_set_init+0x26>
 800fc1e:	250a      	movs	r5, #10
 800fc20:	e787      	b.n	800fb32 <rcl_wait_set_init+0x26>
 800fc22:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800fc24:	e7f2      	b.n	800fc0c <rcl_wait_set_init+0x100>
 800fc26:	bf00      	nop

0800fc28 <rcl_wait_set_add_guard_condition>:
 800fc28:	b318      	cbz	r0, 800fc72 <rcl_wait_set_add_guard_condition+0x4a>
 800fc2a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800fc2c:	b570      	push	{r4, r5, r6, lr}
 800fc2e:	4604      	mov	r4, r0
 800fc30:	b30b      	cbz	r3, 800fc76 <rcl_wait_set_add_guard_condition+0x4e>
 800fc32:	b319      	cbz	r1, 800fc7c <rcl_wait_set_add_guard_condition+0x54>
 800fc34:	68dd      	ldr	r5, [r3, #12]
 800fc36:	68c0      	ldr	r0, [r0, #12]
 800fc38:	4285      	cmp	r5, r0
 800fc3a:	d217      	bcs.n	800fc6c <rcl_wait_set_add_guard_condition+0x44>
 800fc3c:	68a0      	ldr	r0, [r4, #8]
 800fc3e:	1c6e      	adds	r6, r5, #1
 800fc40:	60de      	str	r6, [r3, #12]
 800fc42:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800fc46:	b102      	cbz	r2, 800fc4a <rcl_wait_set_add_guard_condition+0x22>
 800fc48:	6015      	str	r5, [r2, #0]
 800fc4a:	4608      	mov	r0, r1
 800fc4c:	f7fe fb62 	bl	800e314 <rcl_guard_condition_get_rmw_handle>
 800fc50:	b150      	cbz	r0, 800fc68 <rcl_wait_set_add_guard_condition+0x40>
 800fc52:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fc54:	6842      	ldr	r2, [r0, #4]
 800fc56:	695b      	ldr	r3, [r3, #20]
 800fc58:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fc5c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fc5e:	6913      	ldr	r3, [r2, #16]
 800fc60:	3301      	adds	r3, #1
 800fc62:	2000      	movs	r0, #0
 800fc64:	6113      	str	r3, [r2, #16]
 800fc66:	bd70      	pop	{r4, r5, r6, pc}
 800fc68:	2001      	movs	r0, #1
 800fc6a:	bd70      	pop	{r4, r5, r6, pc}
 800fc6c:	f240 3086 	movw	r0, #902	; 0x386
 800fc70:	bd70      	pop	{r4, r5, r6, pc}
 800fc72:	200b      	movs	r0, #11
 800fc74:	4770      	bx	lr
 800fc76:	f44f 7061 	mov.w	r0, #900	; 0x384
 800fc7a:	bd70      	pop	{r4, r5, r6, pc}
 800fc7c:	200b      	movs	r0, #11
 800fc7e:	bd70      	pop	{r4, r5, r6, pc}

0800fc80 <rcl_wait_set_add_timer>:
 800fc80:	b328      	cbz	r0, 800fcce <rcl_wait_set_add_timer+0x4e>
 800fc82:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800fc84:	b570      	push	{r4, r5, r6, lr}
 800fc86:	4604      	mov	r4, r0
 800fc88:	b31b      	cbz	r3, 800fcd2 <rcl_wait_set_add_timer+0x52>
 800fc8a:	b329      	cbz	r1, 800fcd8 <rcl_wait_set_add_timer+0x58>
 800fc8c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800fc8e:	6965      	ldr	r5, [r4, #20]
 800fc90:	42a8      	cmp	r0, r5
 800fc92:	d219      	bcs.n	800fcc8 <rcl_wait_set_add_timer+0x48>
 800fc94:	6925      	ldr	r5, [r4, #16]
 800fc96:	1c46      	adds	r6, r0, #1
 800fc98:	641e      	str	r6, [r3, #64]	; 0x40
 800fc9a:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 800fc9e:	b102      	cbz	r2, 800fca2 <rcl_wait_set_add_timer+0x22>
 800fca0:	6010      	str	r0, [r2, #0]
 800fca2:	4608      	mov	r0, r1
 800fca4:	f7f9 fbb8 	bl	8009418 <rcl_timer_get_guard_condition>
 800fca8:	b168      	cbz	r0, 800fcc6 <rcl_wait_set_add_timer+0x46>
 800fcaa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fcac:	68e3      	ldr	r3, [r4, #12]
 800fcae:	6c15      	ldr	r5, [r2, #64]	; 0x40
 800fcb0:	3b01      	subs	r3, #1
 800fcb2:	441d      	add	r5, r3
 800fcb4:	f7fe fb2e 	bl	800e314 <rcl_guard_condition_get_rmw_handle>
 800fcb8:	b180      	cbz	r0, 800fcdc <rcl_wait_set_add_timer+0x5c>
 800fcba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fcbc:	6842      	ldr	r2, [r0, #4]
 800fcbe:	695b      	ldr	r3, [r3, #20]
 800fcc0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fcc4:	2000      	movs	r0, #0
 800fcc6:	bd70      	pop	{r4, r5, r6, pc}
 800fcc8:	f240 3086 	movw	r0, #902	; 0x386
 800fccc:	bd70      	pop	{r4, r5, r6, pc}
 800fcce:	200b      	movs	r0, #11
 800fcd0:	4770      	bx	lr
 800fcd2:	f44f 7061 	mov.w	r0, #900	; 0x384
 800fcd6:	bd70      	pop	{r4, r5, r6, pc}
 800fcd8:	200b      	movs	r0, #11
 800fcda:	bd70      	pop	{r4, r5, r6, pc}
 800fcdc:	2001      	movs	r0, #1
 800fcde:	bd70      	pop	{r4, r5, r6, pc}

0800fce0 <rcl_wait_set_add_client>:
 800fce0:	b318      	cbz	r0, 800fd2a <rcl_wait_set_add_client+0x4a>
 800fce2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800fce4:	b570      	push	{r4, r5, r6, lr}
 800fce6:	4604      	mov	r4, r0
 800fce8:	b30b      	cbz	r3, 800fd2e <rcl_wait_set_add_client+0x4e>
 800fcea:	b319      	cbz	r1, 800fd34 <rcl_wait_set_add_client+0x54>
 800fcec:	699d      	ldr	r5, [r3, #24]
 800fcee:	69c0      	ldr	r0, [r0, #28]
 800fcf0:	4285      	cmp	r5, r0
 800fcf2:	d217      	bcs.n	800fd24 <rcl_wait_set_add_client+0x44>
 800fcf4:	69a0      	ldr	r0, [r4, #24]
 800fcf6:	1c6e      	adds	r6, r5, #1
 800fcf8:	619e      	str	r6, [r3, #24]
 800fcfa:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800fcfe:	b102      	cbz	r2, 800fd02 <rcl_wait_set_add_client+0x22>
 800fd00:	6015      	str	r5, [r2, #0]
 800fd02:	4608      	mov	r0, r1
 800fd04:	f7fe f8ec 	bl	800dee0 <rcl_client_get_rmw_handle>
 800fd08:	b150      	cbz	r0, 800fd20 <rcl_wait_set_add_client+0x40>
 800fd0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fd0c:	6842      	ldr	r2, [r0, #4]
 800fd0e:	6a1b      	ldr	r3, [r3, #32]
 800fd10:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fd14:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fd16:	69d3      	ldr	r3, [r2, #28]
 800fd18:	3301      	adds	r3, #1
 800fd1a:	2000      	movs	r0, #0
 800fd1c:	61d3      	str	r3, [r2, #28]
 800fd1e:	bd70      	pop	{r4, r5, r6, pc}
 800fd20:	2001      	movs	r0, #1
 800fd22:	bd70      	pop	{r4, r5, r6, pc}
 800fd24:	f240 3086 	movw	r0, #902	; 0x386
 800fd28:	bd70      	pop	{r4, r5, r6, pc}
 800fd2a:	200b      	movs	r0, #11
 800fd2c:	4770      	bx	lr
 800fd2e:	f44f 7061 	mov.w	r0, #900	; 0x384
 800fd32:	bd70      	pop	{r4, r5, r6, pc}
 800fd34:	200b      	movs	r0, #11
 800fd36:	bd70      	pop	{r4, r5, r6, pc}

0800fd38 <rcl_wait_set_add_service>:
 800fd38:	b318      	cbz	r0, 800fd82 <rcl_wait_set_add_service+0x4a>
 800fd3a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800fd3c:	b570      	push	{r4, r5, r6, lr}
 800fd3e:	4604      	mov	r4, r0
 800fd40:	b30b      	cbz	r3, 800fd86 <rcl_wait_set_add_service+0x4e>
 800fd42:	b319      	cbz	r1, 800fd8c <rcl_wait_set_add_service+0x54>
 800fd44:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800fd46:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800fd48:	4285      	cmp	r5, r0
 800fd4a:	d217      	bcs.n	800fd7c <rcl_wait_set_add_service+0x44>
 800fd4c:	6a20      	ldr	r0, [r4, #32]
 800fd4e:	1c6e      	adds	r6, r5, #1
 800fd50:	625e      	str	r6, [r3, #36]	; 0x24
 800fd52:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 800fd56:	b102      	cbz	r2, 800fd5a <rcl_wait_set_add_service+0x22>
 800fd58:	6015      	str	r5, [r2, #0]
 800fd5a:	4608      	mov	r0, r1
 800fd5c:	f7ff f84c 	bl	800edf8 <rcl_service_get_rmw_handle>
 800fd60:	b150      	cbz	r0, 800fd78 <rcl_wait_set_add_service+0x40>
 800fd62:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fd64:	6842      	ldr	r2, [r0, #4]
 800fd66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd68:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fd6c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fd6e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800fd70:	3301      	adds	r3, #1
 800fd72:	2000      	movs	r0, #0
 800fd74:	6293      	str	r3, [r2, #40]	; 0x28
 800fd76:	bd70      	pop	{r4, r5, r6, pc}
 800fd78:	2001      	movs	r0, #1
 800fd7a:	bd70      	pop	{r4, r5, r6, pc}
 800fd7c:	f240 3086 	movw	r0, #902	; 0x386
 800fd80:	bd70      	pop	{r4, r5, r6, pc}
 800fd82:	200b      	movs	r0, #11
 800fd84:	4770      	bx	lr
 800fd86:	f44f 7061 	mov.w	r0, #900	; 0x384
 800fd8a:	bd70      	pop	{r4, r5, r6, pc}
 800fd8c:	200b      	movs	r0, #11
 800fd8e:	bd70      	pop	{r4, r5, r6, pc}

0800fd90 <rcl_wait>:
 800fd90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd94:	ed2d 8b02 	vpush	{d8}
 800fd98:	b08d      	sub	sp, #52	; 0x34
 800fd9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fd9e:	2800      	cmp	r0, #0
 800fda0:	f000 8143 	beq.w	801002a <rcl_wait+0x29a>
 800fda4:	6b06      	ldr	r6, [r0, #48]	; 0x30
 800fda6:	4605      	mov	r5, r0
 800fda8:	2e00      	cmp	r6, #0
 800fdaa:	f000 8112 	beq.w	800ffd2 <rcl_wait+0x242>
 800fdae:	6843      	ldr	r3, [r0, #4]
 800fdb0:	b983      	cbnz	r3, 800fdd4 <rcl_wait+0x44>
 800fdb2:	68eb      	ldr	r3, [r5, #12]
 800fdb4:	b973      	cbnz	r3, 800fdd4 <rcl_wait+0x44>
 800fdb6:	696b      	ldr	r3, [r5, #20]
 800fdb8:	b963      	cbnz	r3, 800fdd4 <rcl_wait+0x44>
 800fdba:	69eb      	ldr	r3, [r5, #28]
 800fdbc:	b953      	cbnz	r3, 800fdd4 <rcl_wait+0x44>
 800fdbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fdc0:	b943      	cbnz	r3, 800fdd4 <rcl_wait+0x44>
 800fdc2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800fdc4:	b933      	cbnz	r3, 800fdd4 <rcl_wait+0x44>
 800fdc6:	f240 3085 	movw	r0, #901	; 0x385
 800fdca:	b00d      	add	sp, #52	; 0x34
 800fdcc:	ecbd 8b02 	vpop	{d8}
 800fdd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdd4:	9b04      	ldr	r3, [sp, #16]
 800fdd6:	6c32      	ldr	r2, [r6, #64]	; 0x40
 800fdd8:	2b01      	cmp	r3, #1
 800fdda:	9b05      	ldr	r3, [sp, #20]
 800fddc:	f173 0300 	sbcs.w	r3, r3, #0
 800fde0:	f2c0 80f0 	blt.w	800ffc4 <rcl_wait+0x234>
 800fde4:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 800fde8:	4643      	mov	r3, r8
 800fdea:	2a00      	cmp	r2, #0
 800fdec:	f000 8133 	beq.w	8010056 <rcl_wait+0x2c6>
 800fdf0:	2400      	movs	r4, #0
 800fdf2:	4613      	mov	r3, r2
 800fdf4:	ed9f 8b9c 	vldr	d8, [pc, #624]	; 8010068 <rcl_wait+0x2d8>
 800fdf8:	46a2      	mov	sl, r4
 800fdfa:	46a3      	mov	fp, r4
 800fdfc:	f240 3921 	movw	r9, #801	; 0x321
 800fe00:	4632      	mov	r2, r6
 800fe02:	e014      	b.n	800fe2e <rcl_wait+0x9e>
 800fe04:	2800      	cmp	r0, #0
 800fe06:	d1e0      	bne.n	800fdca <rcl_wait+0x3a>
 800fe08:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fe0c:	4542      	cmp	r2, r8
 800fe0e:	eb73 0107 	sbcs.w	r1, r3, r7
 800fe12:	da03      	bge.n	800fe1c <rcl_wait+0x8c>
 800fe14:	4690      	mov	r8, r2
 800fe16:	461f      	mov	r7, r3
 800fe18:	f04f 0b01 	mov.w	fp, #1
 800fe1c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800fe1e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800fe20:	3401      	adds	r4, #1
 800fe22:	f14a 0a00 	adc.w	sl, sl, #0
 800fe26:	429c      	cmp	r4, r3
 800fe28:	f17a 0100 	sbcs.w	r1, sl, #0
 800fe2c:	d228      	bcs.n	800fe80 <rcl_wait+0xf0>
 800fe2e:	6928      	ldr	r0, [r5, #16]
 800fe30:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800fe34:	a908      	add	r1, sp, #32
 800fe36:	00a6      	lsls	r6, r4, #2
 800fe38:	2800      	cmp	r0, #0
 800fe3a:	d0f1      	beq.n	800fe20 <rcl_wait+0x90>
 800fe3c:	68eb      	ldr	r3, [r5, #12]
 800fe3e:	f8d2 c014 	ldr.w	ip, [r2, #20]
 800fe42:	4423      	add	r3, r4
 800fe44:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 800fe48:	f1be 0f00 	cmp.w	lr, #0
 800fe4c:	d006      	beq.n	800fe5c <rcl_wait+0xcc>
 800fe4e:	6913      	ldr	r3, [r2, #16]
 800fe50:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 800fe54:	3301      	adds	r3, #1
 800fe56:	6113      	str	r3, [r2, #16]
 800fe58:	692b      	ldr	r3, [r5, #16]
 800fe5a:	5998      	ldr	r0, [r3, r6]
 800fe5c:	ed8d 8b08 	vstr	d8, [sp, #32]
 800fe60:	f7f9 faa8 	bl	80093b4 <rcl_timer_get_time_until_next_call>
 800fe64:	4548      	cmp	r0, r9
 800fe66:	d1cd      	bne.n	800fe04 <rcl_wait+0x74>
 800fe68:	692b      	ldr	r3, [r5, #16]
 800fe6a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800fe6c:	2100      	movs	r1, #0
 800fe6e:	5199      	str	r1, [r3, r6]
 800fe70:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800fe72:	3401      	adds	r4, #1
 800fe74:	f14a 0a00 	adc.w	sl, sl, #0
 800fe78:	429c      	cmp	r4, r3
 800fe7a:	f17a 0100 	sbcs.w	r1, sl, #0
 800fe7e:	d3d6      	bcc.n	800fe2e <rcl_wait+0x9e>
 800fe80:	4616      	mov	r6, r2
 800fe82:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800fe86:	4313      	orrs	r3, r2
 800fe88:	46d9      	mov	r9, fp
 800fe8a:	f040 80a9 	bne.w	800ffe0 <rcl_wait+0x250>
 800fe8e:	2300      	movs	r3, #0
 800fe90:	2200      	movs	r2, #0
 800fe92:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800fe96:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800fe9a:	ab08      	add	r3, sp, #32
 800fe9c:	9302      	str	r3, [sp, #8]
 800fe9e:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 800fea0:	f106 0334 	add.w	r3, r6, #52	; 0x34
 800fea4:	e9cd 3200 	strd	r3, r2, [sp]
 800fea8:	f106 0110 	add.w	r1, r6, #16
 800feac:	f106 031c 	add.w	r3, r6, #28
 800feb0:	f106 0228 	add.w	r2, r6, #40	; 0x28
 800feb4:	1d30      	adds	r0, r6, #4
 800feb6:	f002 fafb 	bl	80124b0 <rmw_wait>
 800feba:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800febc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800febe:	4680      	mov	r8, r0
 800fec0:	b1ca      	cbz	r2, 800fef6 <rcl_wait+0x166>
 800fec2:	2400      	movs	r4, #0
 800fec4:	4627      	mov	r7, r4
 800fec6:	692a      	ldr	r2, [r5, #16]
 800fec8:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 800fecc:	f10d 011f 	add.w	r1, sp, #31
 800fed0:	00a6      	lsls	r6, r4, #2
 800fed2:	b160      	cbz	r0, 800feee <rcl_wait+0x15e>
 800fed4:	f88d 701f 	strb.w	r7, [sp, #31]
 800fed8:	f7f9 fa32 	bl	8009340 <rcl_timer_is_ready>
 800fedc:	2800      	cmp	r0, #0
 800fede:	f47f af74 	bne.w	800fdca <rcl_wait+0x3a>
 800fee2:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800fee6:	b90b      	cbnz	r3, 800feec <rcl_wait+0x15c>
 800fee8:	692a      	ldr	r2, [r5, #16]
 800feea:	5193      	str	r3, [r2, r6]
 800feec:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800feee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fef0:	3401      	adds	r4, #1
 800fef2:	42a2      	cmp	r2, r4
 800fef4:	d8e7      	bhi.n	800fec6 <rcl_wait+0x136>
 800fef6:	f038 0002 	bics.w	r0, r8, #2
 800fefa:	f040 8090 	bne.w	801001e <rcl_wait+0x28e>
 800fefe:	686e      	ldr	r6, [r5, #4]
 800ff00:	4602      	mov	r2, r0
 800ff02:	b91e      	cbnz	r6, 800ff0c <rcl_wait+0x17c>
 800ff04:	e00d      	b.n	800ff22 <rcl_wait+0x192>
 800ff06:	3201      	adds	r2, #1
 800ff08:	42b2      	cmp	r2, r6
 800ff0a:	d00a      	beq.n	800ff22 <rcl_wait+0x192>
 800ff0c:	6899      	ldr	r1, [r3, #8]
 800ff0e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800ff12:	2900      	cmp	r1, #0
 800ff14:	d1f7      	bne.n	800ff06 <rcl_wait+0x176>
 800ff16:	682c      	ldr	r4, [r5, #0]
 800ff18:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800ff1c:	3201      	adds	r2, #1
 800ff1e:	42b2      	cmp	r2, r6
 800ff20:	d1f4      	bne.n	800ff0c <rcl_wait+0x17c>
 800ff22:	68ee      	ldr	r6, [r5, #12]
 800ff24:	2200      	movs	r2, #0
 800ff26:	b91e      	cbnz	r6, 800ff30 <rcl_wait+0x1a0>
 800ff28:	e00d      	b.n	800ff46 <rcl_wait+0x1b6>
 800ff2a:	3201      	adds	r2, #1
 800ff2c:	42b2      	cmp	r2, r6
 800ff2e:	d00a      	beq.n	800ff46 <rcl_wait+0x1b6>
 800ff30:	6959      	ldr	r1, [r3, #20]
 800ff32:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800ff36:	2900      	cmp	r1, #0
 800ff38:	d1f7      	bne.n	800ff2a <rcl_wait+0x19a>
 800ff3a:	68ac      	ldr	r4, [r5, #8]
 800ff3c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800ff40:	3201      	adds	r2, #1
 800ff42:	42b2      	cmp	r2, r6
 800ff44:	d1f4      	bne.n	800ff30 <rcl_wait+0x1a0>
 800ff46:	69ee      	ldr	r6, [r5, #28]
 800ff48:	2200      	movs	r2, #0
 800ff4a:	b91e      	cbnz	r6, 800ff54 <rcl_wait+0x1c4>
 800ff4c:	e00d      	b.n	800ff6a <rcl_wait+0x1da>
 800ff4e:	3201      	adds	r2, #1
 800ff50:	42b2      	cmp	r2, r6
 800ff52:	d00a      	beq.n	800ff6a <rcl_wait+0x1da>
 800ff54:	6a19      	ldr	r1, [r3, #32]
 800ff56:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800ff5a:	2900      	cmp	r1, #0
 800ff5c:	d1f7      	bne.n	800ff4e <rcl_wait+0x1be>
 800ff5e:	69ac      	ldr	r4, [r5, #24]
 800ff60:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800ff64:	3201      	adds	r2, #1
 800ff66:	42b2      	cmp	r2, r6
 800ff68:	d1f4      	bne.n	800ff54 <rcl_wait+0x1c4>
 800ff6a:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 800ff6c:	2200      	movs	r2, #0
 800ff6e:	b91e      	cbnz	r6, 800ff78 <rcl_wait+0x1e8>
 800ff70:	e00d      	b.n	800ff8e <rcl_wait+0x1fe>
 800ff72:	3201      	adds	r2, #1
 800ff74:	4296      	cmp	r6, r2
 800ff76:	d00a      	beq.n	800ff8e <rcl_wait+0x1fe>
 800ff78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ff7a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800ff7e:	2900      	cmp	r1, #0
 800ff80:	d1f7      	bne.n	800ff72 <rcl_wait+0x1e2>
 800ff82:	6a2c      	ldr	r4, [r5, #32]
 800ff84:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800ff88:	3201      	adds	r2, #1
 800ff8a:	4296      	cmp	r6, r2
 800ff8c:	d1f4      	bne.n	800ff78 <rcl_wait+0x1e8>
 800ff8e:	6aee      	ldr	r6, [r5, #44]	; 0x2c
 800ff90:	2200      	movs	r2, #0
 800ff92:	b91e      	cbnz	r6, 800ff9c <rcl_wait+0x20c>
 800ff94:	e00d      	b.n	800ffb2 <rcl_wait+0x222>
 800ff96:	3201      	adds	r2, #1
 800ff98:	42b2      	cmp	r2, r6
 800ff9a:	d00a      	beq.n	800ffb2 <rcl_wait+0x222>
 800ff9c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800ff9e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 800ffa2:	2900      	cmp	r1, #0
 800ffa4:	d1f7      	bne.n	800ff96 <rcl_wait+0x206>
 800ffa6:	6aac      	ldr	r4, [r5, #40]	; 0x28
 800ffa8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 800ffac:	3201      	adds	r2, #1
 800ffae:	42b2      	cmp	r2, r6
 800ffb0:	d1f4      	bne.n	800ff9c <rcl_wait+0x20c>
 800ffb2:	f1b8 0f02 	cmp.w	r8, #2
 800ffb6:	f47f af08 	bne.w	800fdca <rcl_wait+0x3a>
 800ffba:	464b      	mov	r3, r9
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	bf08      	it	eq
 800ffc0:	2002      	moveq	r0, #2
 800ffc2:	e702      	b.n	800fdca <rcl_wait+0x3a>
 800ffc4:	2a00      	cmp	r2, #0
 800ffc6:	d03a      	beq.n	801003e <rcl_wait+0x2ae>
 800ffc8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800ffcc:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 800ffd0:	e70e      	b.n	800fdf0 <rcl_wait+0x60>
 800ffd2:	f44f 7061 	mov.w	r0, #900	; 0x384
 800ffd6:	b00d      	add	sp, #52	; 0x34
 800ffd8:	ecbd 8b02 	vpop	{d8}
 800ffdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffe0:	9b04      	ldr	r3, [sp, #16]
 800ffe2:	2b01      	cmp	r3, #1
 800ffe4:	9b05      	ldr	r3, [sp, #20]
 800ffe6:	f173 0300 	sbcs.w	r3, r3, #0
 800ffea:	db24      	blt.n	8010036 <rcl_wait+0x2a6>
 800ffec:	2f00      	cmp	r7, #0
 800ffee:	bfbc      	itt	lt
 800fff0:	f04f 0800 	movlt.w	r8, #0
 800fff4:	4647      	movlt	r7, r8
 800fff6:	a31e      	add	r3, pc, #120	; (adr r3, 8010070 <rcl_wait+0x2e0>)
 800fff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fffc:	4640      	mov	r0, r8
 800fffe:	4639      	mov	r1, r7
 8010000:	f7f0 f956 	bl	80002b0 <__aeabi_ldivmod>
 8010004:	a31a      	add	r3, pc, #104	; (adr r3, 8010070 <rcl_wait+0x2e0>)
 8010006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801000a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801000e:	4640      	mov	r0, r8
 8010010:	4639      	mov	r1, r7
 8010012:	f7f0 f94d 	bl	80002b0 <__aeabi_ldivmod>
 8010016:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801001a:	ab08      	add	r3, sp, #32
 801001c:	e73e      	b.n	800fe9c <rcl_wait+0x10c>
 801001e:	2001      	movs	r0, #1
 8010020:	b00d      	add	sp, #52	; 0x34
 8010022:	ecbd 8b02 	vpop	{d8}
 8010026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801002a:	200b      	movs	r0, #11
 801002c:	b00d      	add	sp, #52	; 0x34
 801002e:	ecbd 8b02 	vpop	{d8}
 8010032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010036:	465b      	mov	r3, fp
 8010038:	2b00      	cmp	r3, #0
 801003a:	d1d7      	bne.n	800ffec <rcl_wait+0x25c>
 801003c:	e72e      	b.n	800fe9c <rcl_wait+0x10c>
 801003e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8010042:	430b      	orrs	r3, r1
 8010044:	bf08      	it	eq
 8010046:	4691      	moveq	r9, r2
 8010048:	f43f af21 	beq.w	800fe8e <rcl_wait+0xfe>
 801004c:	9b04      	ldr	r3, [sp, #16]
 801004e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8010052:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8010056:	2b01      	cmp	r3, #1
 8010058:	9b05      	ldr	r3, [sp, #20]
 801005a:	f173 0300 	sbcs.w	r3, r3, #0
 801005e:	f04f 0300 	mov.w	r3, #0
 8010062:	4699      	mov	r9, r3
 8010064:	dac2      	bge.n	800ffec <rcl_wait+0x25c>
 8010066:	e719      	b.n	800fe9c <rcl_wait+0x10c>
 8010068:	ffffffff 	.word	0xffffffff
 801006c:	7fffffff 	.word	0x7fffffff
 8010070:	3b9aca00 	.word	0x3b9aca00
 8010074:	00000000 	.word	0x00000000

08010078 <rcl_action_take_goal_response>:
 8010078:	2800      	cmp	r0, #0
 801007a:	d039      	beq.n	80100f0 <rcl_action_take_goal_response+0x78>
 801007c:	b570      	push	{r4, r5, r6, lr}
 801007e:	4604      	mov	r4, r0
 8010080:	6800      	ldr	r0, [r0, #0]
 8010082:	b380      	cbz	r0, 80100e6 <rcl_action_take_goal_response+0x6e>
 8010084:	460d      	mov	r5, r1
 8010086:	4616      	mov	r6, r2
 8010088:	f7fd ffae 	bl	800dfe8 <rcl_client_is_valid>
 801008c:	b330      	cbz	r0, 80100dc <rcl_action_take_goal_response+0x64>
 801008e:	6820      	ldr	r0, [r4, #0]
 8010090:	3004      	adds	r0, #4
 8010092:	f7fd ffa9 	bl	800dfe8 <rcl_client_is_valid>
 8010096:	b308      	cbz	r0, 80100dc <rcl_action_take_goal_response+0x64>
 8010098:	6820      	ldr	r0, [r4, #0]
 801009a:	3008      	adds	r0, #8
 801009c:	f7fd ffa4 	bl	800dfe8 <rcl_client_is_valid>
 80100a0:	b1e0      	cbz	r0, 80100dc <rcl_action_take_goal_response+0x64>
 80100a2:	6820      	ldr	r0, [r4, #0]
 80100a4:	300c      	adds	r0, #12
 80100a6:	f7ff f849 	bl	800f13c <rcl_subscription_is_valid>
 80100aa:	b1b8      	cbz	r0, 80100dc <rcl_action_take_goal_response+0x64>
 80100ac:	6820      	ldr	r0, [r4, #0]
 80100ae:	3010      	adds	r0, #16
 80100b0:	f7ff f844 	bl	800f13c <rcl_subscription_is_valid>
 80100b4:	b190      	cbz	r0, 80100dc <rcl_action_take_goal_response+0x64>
 80100b6:	b1cd      	cbz	r5, 80100ec <rcl_action_take_goal_response+0x74>
 80100b8:	b1c6      	cbz	r6, 80100ec <rcl_action_take_goal_response+0x74>
 80100ba:	6820      	ldr	r0, [r4, #0]
 80100bc:	4632      	mov	r2, r6
 80100be:	4629      	mov	r1, r5
 80100c0:	f7fd ff4a 	bl	800df58 <rcl_take_response>
 80100c4:	b148      	cbz	r0, 80100da <rcl_action_take_goal_response+0x62>
 80100c6:	280a      	cmp	r0, #10
 80100c8:	d007      	beq.n	80100da <rcl_action_take_goal_response+0x62>
 80100ca:	f240 12f5 	movw	r2, #501	; 0x1f5
 80100ce:	f640 0337 	movw	r3, #2103	; 0x837
 80100d2:	4290      	cmp	r0, r2
 80100d4:	bf0c      	ite	eq
 80100d6:	4618      	moveq	r0, r3
 80100d8:	2001      	movne	r0, #1
 80100da:	bd70      	pop	{r4, r5, r6, pc}
 80100dc:	f7fa fa24 	bl	800a528 <rcutils_reset_error>
 80100e0:	f640 0036 	movw	r0, #2102	; 0x836
 80100e4:	bd70      	pop	{r4, r5, r6, pc}
 80100e6:	f640 0036 	movw	r0, #2102	; 0x836
 80100ea:	bd70      	pop	{r4, r5, r6, pc}
 80100ec:	200b      	movs	r0, #11
 80100ee:	bd70      	pop	{r4, r5, r6, pc}
 80100f0:	f640 0036 	movw	r0, #2102	; 0x836
 80100f4:	4770      	bx	lr
 80100f6:	bf00      	nop

080100f8 <rcl_action_send_result_request>:
 80100f8:	b390      	cbz	r0, 8010160 <rcl_action_send_result_request+0x68>
 80100fa:	b570      	push	{r4, r5, r6, lr}
 80100fc:	4604      	mov	r4, r0
 80100fe:	6800      	ldr	r0, [r0, #0]
 8010100:	b348      	cbz	r0, 8010156 <rcl_action_send_result_request+0x5e>
 8010102:	460d      	mov	r5, r1
 8010104:	4616      	mov	r6, r2
 8010106:	f7fd ff6f 	bl	800dfe8 <rcl_client_is_valid>
 801010a:	b1f8      	cbz	r0, 801014c <rcl_action_send_result_request+0x54>
 801010c:	6820      	ldr	r0, [r4, #0]
 801010e:	3004      	adds	r0, #4
 8010110:	f7fd ff6a 	bl	800dfe8 <rcl_client_is_valid>
 8010114:	b1d0      	cbz	r0, 801014c <rcl_action_send_result_request+0x54>
 8010116:	6820      	ldr	r0, [r4, #0]
 8010118:	3008      	adds	r0, #8
 801011a:	f7fd ff65 	bl	800dfe8 <rcl_client_is_valid>
 801011e:	b1a8      	cbz	r0, 801014c <rcl_action_send_result_request+0x54>
 8010120:	6820      	ldr	r0, [r4, #0]
 8010122:	300c      	adds	r0, #12
 8010124:	f7ff f80a 	bl	800f13c <rcl_subscription_is_valid>
 8010128:	b180      	cbz	r0, 801014c <rcl_action_send_result_request+0x54>
 801012a:	6820      	ldr	r0, [r4, #0]
 801012c:	3010      	adds	r0, #16
 801012e:	f7ff f805 	bl	800f13c <rcl_subscription_is_valid>
 8010132:	b158      	cbz	r0, 801014c <rcl_action_send_result_request+0x54>
 8010134:	b195      	cbz	r5, 801015c <rcl_action_send_result_request+0x64>
 8010136:	b18e      	cbz	r6, 801015c <rcl_action_send_result_request+0x64>
 8010138:	6820      	ldr	r0, [r4, #0]
 801013a:	4632      	mov	r2, r6
 801013c:	4629      	mov	r1, r5
 801013e:	3008      	adds	r0, #8
 8010140:	f7fd fed4 	bl	800deec <rcl_send_request>
 8010144:	3800      	subs	r0, #0
 8010146:	bf18      	it	ne
 8010148:	2001      	movne	r0, #1
 801014a:	bd70      	pop	{r4, r5, r6, pc}
 801014c:	f7fa f9ec 	bl	800a528 <rcutils_reset_error>
 8010150:	f640 0036 	movw	r0, #2102	; 0x836
 8010154:	bd70      	pop	{r4, r5, r6, pc}
 8010156:	f640 0036 	movw	r0, #2102	; 0x836
 801015a:	bd70      	pop	{r4, r5, r6, pc}
 801015c:	200b      	movs	r0, #11
 801015e:	bd70      	pop	{r4, r5, r6, pc}
 8010160:	f640 0036 	movw	r0, #2102	; 0x836
 8010164:	4770      	bx	lr
 8010166:	bf00      	nop

08010168 <rcl_action_take_result_response>:
 8010168:	2800      	cmp	r0, #0
 801016a:	d03a      	beq.n	80101e2 <rcl_action_take_result_response+0x7a>
 801016c:	b570      	push	{r4, r5, r6, lr}
 801016e:	4604      	mov	r4, r0
 8010170:	6800      	ldr	r0, [r0, #0]
 8010172:	b388      	cbz	r0, 80101d8 <rcl_action_take_result_response+0x70>
 8010174:	460d      	mov	r5, r1
 8010176:	4616      	mov	r6, r2
 8010178:	f7fd ff36 	bl	800dfe8 <rcl_client_is_valid>
 801017c:	b338      	cbz	r0, 80101ce <rcl_action_take_result_response+0x66>
 801017e:	6820      	ldr	r0, [r4, #0]
 8010180:	3004      	adds	r0, #4
 8010182:	f7fd ff31 	bl	800dfe8 <rcl_client_is_valid>
 8010186:	b310      	cbz	r0, 80101ce <rcl_action_take_result_response+0x66>
 8010188:	6820      	ldr	r0, [r4, #0]
 801018a:	3008      	adds	r0, #8
 801018c:	f7fd ff2c 	bl	800dfe8 <rcl_client_is_valid>
 8010190:	b1e8      	cbz	r0, 80101ce <rcl_action_take_result_response+0x66>
 8010192:	6820      	ldr	r0, [r4, #0]
 8010194:	300c      	adds	r0, #12
 8010196:	f7fe ffd1 	bl	800f13c <rcl_subscription_is_valid>
 801019a:	b1c0      	cbz	r0, 80101ce <rcl_action_take_result_response+0x66>
 801019c:	6820      	ldr	r0, [r4, #0]
 801019e:	3010      	adds	r0, #16
 80101a0:	f7fe ffcc 	bl	800f13c <rcl_subscription_is_valid>
 80101a4:	b198      	cbz	r0, 80101ce <rcl_action_take_result_response+0x66>
 80101a6:	b1d5      	cbz	r5, 80101de <rcl_action_take_result_response+0x76>
 80101a8:	b1ce      	cbz	r6, 80101de <rcl_action_take_result_response+0x76>
 80101aa:	6820      	ldr	r0, [r4, #0]
 80101ac:	4632      	mov	r2, r6
 80101ae:	4629      	mov	r1, r5
 80101b0:	3008      	adds	r0, #8
 80101b2:	f7fd fed1 	bl	800df58 <rcl_take_response>
 80101b6:	b148      	cbz	r0, 80101cc <rcl_action_take_result_response+0x64>
 80101b8:	280a      	cmp	r0, #10
 80101ba:	d007      	beq.n	80101cc <rcl_action_take_result_response+0x64>
 80101bc:	f240 12f5 	movw	r2, #501	; 0x1f5
 80101c0:	f640 0337 	movw	r3, #2103	; 0x837
 80101c4:	4290      	cmp	r0, r2
 80101c6:	bf0c      	ite	eq
 80101c8:	4618      	moveq	r0, r3
 80101ca:	2001      	movne	r0, #1
 80101cc:	bd70      	pop	{r4, r5, r6, pc}
 80101ce:	f7fa f9ab 	bl	800a528 <rcutils_reset_error>
 80101d2:	f640 0036 	movw	r0, #2102	; 0x836
 80101d6:	bd70      	pop	{r4, r5, r6, pc}
 80101d8:	f640 0036 	movw	r0, #2102	; 0x836
 80101dc:	bd70      	pop	{r4, r5, r6, pc}
 80101de:	200b      	movs	r0, #11
 80101e0:	bd70      	pop	{r4, r5, r6, pc}
 80101e2:	f640 0036 	movw	r0, #2102	; 0x836
 80101e6:	4770      	bx	lr

080101e8 <rcl_action_take_cancel_response>:
 80101e8:	2800      	cmp	r0, #0
 80101ea:	d03a      	beq.n	8010262 <rcl_action_take_cancel_response+0x7a>
 80101ec:	b570      	push	{r4, r5, r6, lr}
 80101ee:	4604      	mov	r4, r0
 80101f0:	6800      	ldr	r0, [r0, #0]
 80101f2:	b388      	cbz	r0, 8010258 <rcl_action_take_cancel_response+0x70>
 80101f4:	460d      	mov	r5, r1
 80101f6:	4616      	mov	r6, r2
 80101f8:	f7fd fef6 	bl	800dfe8 <rcl_client_is_valid>
 80101fc:	b338      	cbz	r0, 801024e <rcl_action_take_cancel_response+0x66>
 80101fe:	6820      	ldr	r0, [r4, #0]
 8010200:	3004      	adds	r0, #4
 8010202:	f7fd fef1 	bl	800dfe8 <rcl_client_is_valid>
 8010206:	b310      	cbz	r0, 801024e <rcl_action_take_cancel_response+0x66>
 8010208:	6820      	ldr	r0, [r4, #0]
 801020a:	3008      	adds	r0, #8
 801020c:	f7fd feec 	bl	800dfe8 <rcl_client_is_valid>
 8010210:	b1e8      	cbz	r0, 801024e <rcl_action_take_cancel_response+0x66>
 8010212:	6820      	ldr	r0, [r4, #0]
 8010214:	300c      	adds	r0, #12
 8010216:	f7fe ff91 	bl	800f13c <rcl_subscription_is_valid>
 801021a:	b1c0      	cbz	r0, 801024e <rcl_action_take_cancel_response+0x66>
 801021c:	6820      	ldr	r0, [r4, #0]
 801021e:	3010      	adds	r0, #16
 8010220:	f7fe ff8c 	bl	800f13c <rcl_subscription_is_valid>
 8010224:	b198      	cbz	r0, 801024e <rcl_action_take_cancel_response+0x66>
 8010226:	b1d5      	cbz	r5, 801025e <rcl_action_take_cancel_response+0x76>
 8010228:	b1ce      	cbz	r6, 801025e <rcl_action_take_cancel_response+0x76>
 801022a:	6820      	ldr	r0, [r4, #0]
 801022c:	4632      	mov	r2, r6
 801022e:	4629      	mov	r1, r5
 8010230:	3004      	adds	r0, #4
 8010232:	f7fd fe91 	bl	800df58 <rcl_take_response>
 8010236:	b148      	cbz	r0, 801024c <rcl_action_take_cancel_response+0x64>
 8010238:	280a      	cmp	r0, #10
 801023a:	d007      	beq.n	801024c <rcl_action_take_cancel_response+0x64>
 801023c:	f240 12f5 	movw	r2, #501	; 0x1f5
 8010240:	f640 0337 	movw	r3, #2103	; 0x837
 8010244:	4290      	cmp	r0, r2
 8010246:	bf0c      	ite	eq
 8010248:	4618      	moveq	r0, r3
 801024a:	2001      	movne	r0, #1
 801024c:	bd70      	pop	{r4, r5, r6, pc}
 801024e:	f7fa f96b 	bl	800a528 <rcutils_reset_error>
 8010252:	f640 0036 	movw	r0, #2102	; 0x836
 8010256:	bd70      	pop	{r4, r5, r6, pc}
 8010258:	f640 0036 	movw	r0, #2102	; 0x836
 801025c:	bd70      	pop	{r4, r5, r6, pc}
 801025e:	200b      	movs	r0, #11
 8010260:	bd70      	pop	{r4, r5, r6, pc}
 8010262:	f640 0036 	movw	r0, #2102	; 0x836
 8010266:	4770      	bx	lr

08010268 <rcl_action_take_feedback>:
 8010268:	2800      	cmp	r0, #0
 801026a:	d038      	beq.n	80102de <rcl_action_take_feedback+0x76>
 801026c:	b530      	push	{r4, r5, lr}
 801026e:	4604      	mov	r4, r0
 8010270:	6800      	ldr	r0, [r0, #0]
 8010272:	b091      	sub	sp, #68	; 0x44
 8010274:	b378      	cbz	r0, 80102d6 <rcl_action_take_feedback+0x6e>
 8010276:	460d      	mov	r5, r1
 8010278:	f7fd feb6 	bl	800dfe8 <rcl_client_is_valid>
 801027c:	b328      	cbz	r0, 80102ca <rcl_action_take_feedback+0x62>
 801027e:	6820      	ldr	r0, [r4, #0]
 8010280:	3004      	adds	r0, #4
 8010282:	f7fd feb1 	bl	800dfe8 <rcl_client_is_valid>
 8010286:	b300      	cbz	r0, 80102ca <rcl_action_take_feedback+0x62>
 8010288:	6820      	ldr	r0, [r4, #0]
 801028a:	3008      	adds	r0, #8
 801028c:	f7fd feac 	bl	800dfe8 <rcl_client_is_valid>
 8010290:	b1d8      	cbz	r0, 80102ca <rcl_action_take_feedback+0x62>
 8010292:	6820      	ldr	r0, [r4, #0]
 8010294:	300c      	adds	r0, #12
 8010296:	f7fe ff51 	bl	800f13c <rcl_subscription_is_valid>
 801029a:	b1b0      	cbz	r0, 80102ca <rcl_action_take_feedback+0x62>
 801029c:	6820      	ldr	r0, [r4, #0]
 801029e:	3010      	adds	r0, #16
 80102a0:	f7fe ff4c 	bl	800f13c <rcl_subscription_is_valid>
 80102a4:	b188      	cbz	r0, 80102ca <rcl_action_take_feedback+0x62>
 80102a6:	b1ed      	cbz	r5, 80102e4 <rcl_action_take_feedback+0x7c>
 80102a8:	6820      	ldr	r0, [r4, #0]
 80102aa:	2300      	movs	r3, #0
 80102ac:	466a      	mov	r2, sp
 80102ae:	4629      	mov	r1, r5
 80102b0:	300c      	adds	r0, #12
 80102b2:	f7fe fee5 	bl	800f080 <rcl_take>
 80102b6:	b160      	cbz	r0, 80102d2 <rcl_action_take_feedback+0x6a>
 80102b8:	f240 1391 	movw	r3, #401	; 0x191
 80102bc:	4298      	cmp	r0, r3
 80102be:	d014      	beq.n	80102ea <rcl_action_take_feedback+0x82>
 80102c0:	280a      	cmp	r0, #10
 80102c2:	bf18      	it	ne
 80102c4:	2001      	movne	r0, #1
 80102c6:	b011      	add	sp, #68	; 0x44
 80102c8:	bd30      	pop	{r4, r5, pc}
 80102ca:	f7fa f92d 	bl	800a528 <rcutils_reset_error>
 80102ce:	f640 0036 	movw	r0, #2102	; 0x836
 80102d2:	b011      	add	sp, #68	; 0x44
 80102d4:	bd30      	pop	{r4, r5, pc}
 80102d6:	f640 0036 	movw	r0, #2102	; 0x836
 80102da:	b011      	add	sp, #68	; 0x44
 80102dc:	bd30      	pop	{r4, r5, pc}
 80102de:	f640 0036 	movw	r0, #2102	; 0x836
 80102e2:	4770      	bx	lr
 80102e4:	200b      	movs	r0, #11
 80102e6:	b011      	add	sp, #68	; 0x44
 80102e8:	bd30      	pop	{r4, r5, pc}
 80102ea:	f640 0037 	movw	r0, #2103	; 0x837
 80102ee:	e7f0      	b.n	80102d2 <rcl_action_take_feedback+0x6a>

080102f0 <rcl_action_wait_set_add_action_client>:
 80102f0:	2800      	cmp	r0, #0
 80102f2:	d048      	beq.n	8010386 <rcl_action_wait_set_add_action_client+0x96>
 80102f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102f6:	460c      	mov	r4, r1
 80102f8:	2900      	cmp	r1, #0
 80102fa:	d03c      	beq.n	8010376 <rcl_action_wait_set_add_action_client+0x86>
 80102fc:	4605      	mov	r5, r0
 80102fe:	6808      	ldr	r0, [r1, #0]
 8010300:	2800      	cmp	r0, #0
 8010302:	d038      	beq.n	8010376 <rcl_action_wait_set_add_action_client+0x86>
 8010304:	4617      	mov	r7, r2
 8010306:	461e      	mov	r6, r3
 8010308:	f7fd fe6e 	bl	800dfe8 <rcl_client_is_valid>
 801030c:	b3b0      	cbz	r0, 801037c <rcl_action_wait_set_add_action_client+0x8c>
 801030e:	6820      	ldr	r0, [r4, #0]
 8010310:	3004      	adds	r0, #4
 8010312:	f7fd fe69 	bl	800dfe8 <rcl_client_is_valid>
 8010316:	b388      	cbz	r0, 801037c <rcl_action_wait_set_add_action_client+0x8c>
 8010318:	6820      	ldr	r0, [r4, #0]
 801031a:	3008      	adds	r0, #8
 801031c:	f7fd fe64 	bl	800dfe8 <rcl_client_is_valid>
 8010320:	b360      	cbz	r0, 801037c <rcl_action_wait_set_add_action_client+0x8c>
 8010322:	6820      	ldr	r0, [r4, #0]
 8010324:	300c      	adds	r0, #12
 8010326:	f7fe ff09 	bl	800f13c <rcl_subscription_is_valid>
 801032a:	b338      	cbz	r0, 801037c <rcl_action_wait_set_add_action_client+0x8c>
 801032c:	6820      	ldr	r0, [r4, #0]
 801032e:	3010      	adds	r0, #16
 8010330:	f7fe ff04 	bl	800f13c <rcl_subscription_is_valid>
 8010334:	b310      	cbz	r0, 801037c <rcl_action_wait_set_add_action_client+0x8c>
 8010336:	6821      	ldr	r1, [r4, #0]
 8010338:	4628      	mov	r0, r5
 801033a:	f501 72e2 	add.w	r2, r1, #452	; 0x1c4
 801033e:	f7ff fccf 	bl	800fce0 <rcl_wait_set_add_client>
 8010342:	b9b8      	cbnz	r0, 8010374 <rcl_action_wait_set_add_action_client+0x84>
 8010344:	6821      	ldr	r1, [r4, #0]
 8010346:	4628      	mov	r0, r5
 8010348:	f501 72e4 	add.w	r2, r1, #456	; 0x1c8
 801034c:	3104      	adds	r1, #4
 801034e:	f7ff fcc7 	bl	800fce0 <rcl_wait_set_add_client>
 8010352:	b978      	cbnz	r0, 8010374 <rcl_action_wait_set_add_action_client+0x84>
 8010354:	6821      	ldr	r1, [r4, #0]
 8010356:	4628      	mov	r0, r5
 8010358:	f501 72e6 	add.w	r2, r1, #460	; 0x1cc
 801035c:	3108      	adds	r1, #8
 801035e:	f7ff fcbf 	bl	800fce0 <rcl_wait_set_add_client>
 8010362:	b938      	cbnz	r0, 8010374 <rcl_action_wait_set_add_action_client+0x84>
 8010364:	6821      	ldr	r1, [r4, #0]
 8010366:	4628      	mov	r0, r5
 8010368:	f501 72e8 	add.w	r2, r1, #464	; 0x1d0
 801036c:	310c      	adds	r1, #12
 801036e:	f7ff f96f 	bl	800f650 <rcl_wait_set_add_subscription>
 8010372:	b158      	cbz	r0, 801038c <rcl_action_wait_set_add_action_client+0x9c>
 8010374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010376:	f640 0036 	movw	r0, #2102	; 0x836
 801037a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801037c:	f7fa f8d4 	bl	800a528 <rcutils_reset_error>
 8010380:	f640 0036 	movw	r0, #2102	; 0x836
 8010384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010386:	f44f 7061 	mov.w	r0, #900	; 0x384
 801038a:	4770      	bx	lr
 801038c:	6821      	ldr	r1, [r4, #0]
 801038e:	4628      	mov	r0, r5
 8010390:	f501 72ea 	add.w	r2, r1, #468	; 0x1d4
 8010394:	3110      	adds	r1, #16
 8010396:	f7ff f95b 	bl	800f650 <rcl_wait_set_add_subscription>
 801039a:	2800      	cmp	r0, #0
 801039c:	d1ea      	bne.n	8010374 <rcl_action_wait_set_add_action_client+0x84>
 801039e:	b11f      	cbz	r7, 80103a8 <rcl_action_wait_set_add_action_client+0xb8>
 80103a0:	6823      	ldr	r3, [r4, #0]
 80103a2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 80103a6:	603b      	str	r3, [r7, #0]
 80103a8:	2e00      	cmp	r6, #0
 80103aa:	d0e3      	beq.n	8010374 <rcl_action_wait_set_add_action_client+0x84>
 80103ac:	6823      	ldr	r3, [r4, #0]
 80103ae:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 80103b2:	6033      	str	r3, [r6, #0]
 80103b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103b6:	bf00      	nop

080103b8 <rcl_action_client_wait_set_get_entities_ready>:
 80103b8:	2800      	cmp	r0, #0
 80103ba:	f000 808d 	beq.w	80104d8 <rcl_action_client_wait_set_get_entities_ready+0x120>
 80103be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103c2:	460c      	mov	r4, r1
 80103c4:	2900      	cmp	r1, #0
 80103c6:	d077      	beq.n	80104b8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80103c8:	4605      	mov	r5, r0
 80103ca:	6808      	ldr	r0, [r1, #0]
 80103cc:	2800      	cmp	r0, #0
 80103ce:	d073      	beq.n	80104b8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 80103d0:	4616      	mov	r6, r2
 80103d2:	461f      	mov	r7, r3
 80103d4:	f7fd fe08 	bl	800dfe8 <rcl_client_is_valid>
 80103d8:	2800      	cmp	r0, #0
 80103da:	d071      	beq.n	80104c0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80103dc:	6820      	ldr	r0, [r4, #0]
 80103de:	3004      	adds	r0, #4
 80103e0:	f7fd fe02 	bl	800dfe8 <rcl_client_is_valid>
 80103e4:	2800      	cmp	r0, #0
 80103e6:	d06b      	beq.n	80104c0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80103e8:	6820      	ldr	r0, [r4, #0]
 80103ea:	3008      	adds	r0, #8
 80103ec:	f7fd fdfc 	bl	800dfe8 <rcl_client_is_valid>
 80103f0:	2800      	cmp	r0, #0
 80103f2:	d065      	beq.n	80104c0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 80103f4:	6820      	ldr	r0, [r4, #0]
 80103f6:	300c      	adds	r0, #12
 80103f8:	f7fe fea0 	bl	800f13c <rcl_subscription_is_valid>
 80103fc:	2800      	cmp	r0, #0
 80103fe:	d05f      	beq.n	80104c0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8010400:	6820      	ldr	r0, [r4, #0]
 8010402:	3010      	adds	r0, #16
 8010404:	f7fe fe9a 	bl	800f13c <rcl_subscription_is_valid>
 8010408:	2800      	cmp	r0, #0
 801040a:	d059      	beq.n	80104c0 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801040c:	2e00      	cmp	r6, #0
 801040e:	d060      	beq.n	80104d2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8010410:	2f00      	cmp	r7, #0
 8010412:	d05e      	beq.n	80104d2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8010414:	9b06      	ldr	r3, [sp, #24]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d05b      	beq.n	80104d2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801041a:	9b07      	ldr	r3, [sp, #28]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d058      	beq.n	80104d2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8010420:	9b08      	ldr	r3, [sp, #32]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d055      	beq.n	80104d2 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8010426:	6823      	ldr	r3, [r4, #0]
 8010428:	686a      	ldr	r2, [r5, #4]
 801042a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
 801042e:	428a      	cmp	r2, r1
 8010430:	d94c      	bls.n	80104cc <rcl_action_client_wait_set_get_entities_ready+0x114>
 8010432:	f8d3 01d4 	ldr.w	r0, [r3, #468]	; 0x1d4
 8010436:	4282      	cmp	r2, r0
 8010438:	d948      	bls.n	80104cc <rcl_action_client_wait_set_get_entities_ready+0x114>
 801043a:	f8d3 41c4 	ldr.w	r4, [r3, #452]	; 0x1c4
 801043e:	69ea      	ldr	r2, [r5, #28]
 8010440:	42a2      	cmp	r2, r4
 8010442:	d943      	bls.n	80104cc <rcl_action_client_wait_set_get_entities_ready+0x114>
 8010444:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	; 0x1c8
 8010448:	4562      	cmp	r2, ip
 801044a:	d93f      	bls.n	80104cc <rcl_action_client_wait_set_get_entities_ready+0x114>
 801044c:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	; 0x1cc
 8010450:	4572      	cmp	r2, lr
 8010452:	d93b      	bls.n	80104cc <rcl_action_client_wait_set_get_entities_ready+0x114>
 8010454:	69aa      	ldr	r2, [r5, #24]
 8010456:	682d      	ldr	r5, [r5, #0]
 8010458:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 801045c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 8010460:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 8010464:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 8010468:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 801046c:	f103 0c0c 	add.w	ip, r3, #12
 8010470:	eba5 050c 	sub.w	r5, r5, ip
 8010474:	fab5 f585 	clz	r5, r5
 8010478:	096d      	lsrs	r5, r5, #5
 801047a:	7035      	strb	r5, [r6, #0]
 801047c:	f103 0510 	add.w	r5, r3, #16
 8010480:	1b64      	subs	r4, r4, r5
 8010482:	fab4 f484 	clz	r4, r4
 8010486:	0964      	lsrs	r4, r4, #5
 8010488:	703c      	strb	r4, [r7, #0]
 801048a:	eba3 0008 	sub.w	r0, r3, r8
 801048e:	1d1c      	adds	r4, r3, #4
 8010490:	3308      	adds	r3, #8
 8010492:	1ad3      	subs	r3, r2, r3
 8010494:	fab0 f080 	clz	r0, r0
 8010498:	9a06      	ldr	r2, [sp, #24]
 801049a:	0940      	lsrs	r0, r0, #5
 801049c:	1b09      	subs	r1, r1, r4
 801049e:	7010      	strb	r0, [r2, #0]
 80104a0:	fab1 f181 	clz	r1, r1
 80104a4:	9a07      	ldr	r2, [sp, #28]
 80104a6:	0949      	lsrs	r1, r1, #5
 80104a8:	7011      	strb	r1, [r2, #0]
 80104aa:	fab3 f383 	clz	r3, r3
 80104ae:	9a08      	ldr	r2, [sp, #32]
 80104b0:	095b      	lsrs	r3, r3, #5
 80104b2:	2000      	movs	r0, #0
 80104b4:	7013      	strb	r3, [r2, #0]
 80104b6:	e001      	b.n	80104bc <rcl_action_client_wait_set_get_entities_ready+0x104>
 80104b8:	f640 0036 	movw	r0, #2102	; 0x836
 80104bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104c0:	f7fa f832 	bl	800a528 <rcutils_reset_error>
 80104c4:	f640 0036 	movw	r0, #2102	; 0x836
 80104c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104cc:	2001      	movs	r0, #1
 80104ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104d2:	200b      	movs	r0, #11
 80104d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104d8:	f44f 7061 	mov.w	r0, #900	; 0x384
 80104dc:	4770      	bx	lr
 80104de:	bf00      	nop

080104e0 <rcl_action_take_goal_request>:
 80104e0:	2800      	cmp	r0, #0
 80104e2:	d039      	beq.n	8010558 <rcl_action_take_goal_request+0x78>
 80104e4:	b570      	push	{r4, r5, r6, lr}
 80104e6:	4604      	mov	r4, r0
 80104e8:	6800      	ldr	r0, [r0, #0]
 80104ea:	b380      	cbz	r0, 801054e <rcl_action_take_goal_request+0x6e>
 80104ec:	460d      	mov	r5, r1
 80104ee:	4616      	mov	r6, r2
 80104f0:	f7fe fce0 	bl	800eeb4 <rcl_service_is_valid>
 80104f4:	b330      	cbz	r0, 8010544 <rcl_action_take_goal_request+0x64>
 80104f6:	6820      	ldr	r0, [r4, #0]
 80104f8:	3004      	adds	r0, #4
 80104fa:	f7fe fcdb 	bl	800eeb4 <rcl_service_is_valid>
 80104fe:	b308      	cbz	r0, 8010544 <rcl_action_take_goal_request+0x64>
 8010500:	6820      	ldr	r0, [r4, #0]
 8010502:	3008      	adds	r0, #8
 8010504:	f7fe fcd6 	bl	800eeb4 <rcl_service_is_valid>
 8010508:	b1e0      	cbz	r0, 8010544 <rcl_action_take_goal_request+0x64>
 801050a:	6820      	ldr	r0, [r4, #0]
 801050c:	300c      	adds	r0, #12
 801050e:	f7f8 fd17 	bl	8008f40 <rcl_publisher_is_valid>
 8010512:	b1b8      	cbz	r0, 8010544 <rcl_action_take_goal_request+0x64>
 8010514:	6820      	ldr	r0, [r4, #0]
 8010516:	3010      	adds	r0, #16
 8010518:	f7f8 fd12 	bl	8008f40 <rcl_publisher_is_valid>
 801051c:	b190      	cbz	r0, 8010544 <rcl_action_take_goal_request+0x64>
 801051e:	b1cd      	cbz	r5, 8010554 <rcl_action_take_goal_request+0x74>
 8010520:	b1c6      	cbz	r6, 8010554 <rcl_action_take_goal_request+0x74>
 8010522:	6820      	ldr	r0, [r4, #0]
 8010524:	4632      	mov	r2, r6
 8010526:	4629      	mov	r1, r5
 8010528:	f7fe fc6c 	bl	800ee04 <rcl_take_request>
 801052c:	b148      	cbz	r0, 8010542 <rcl_action_take_goal_request+0x62>
 801052e:	280a      	cmp	r0, #10
 8010530:	d007      	beq.n	8010542 <rcl_action_take_goal_request+0x62>
 8010532:	f240 2259 	movw	r2, #601	; 0x259
 8010536:	f640 0399 	movw	r3, #2201	; 0x899
 801053a:	4290      	cmp	r0, r2
 801053c:	bf0c      	ite	eq
 801053e:	4618      	moveq	r0, r3
 8010540:	2001      	movne	r0, #1
 8010542:	bd70      	pop	{r4, r5, r6, pc}
 8010544:	f7f9 fff0 	bl	800a528 <rcutils_reset_error>
 8010548:	f640 0098 	movw	r0, #2200	; 0x898
 801054c:	bd70      	pop	{r4, r5, r6, pc}
 801054e:	f640 0098 	movw	r0, #2200	; 0x898
 8010552:	bd70      	pop	{r4, r5, r6, pc}
 8010554:	200b      	movs	r0, #11
 8010556:	bd70      	pop	{r4, r5, r6, pc}
 8010558:	f640 0098 	movw	r0, #2200	; 0x898
 801055c:	4770      	bx	lr
 801055e:	bf00      	nop

08010560 <rcl_action_send_goal_response>:
 8010560:	b388      	cbz	r0, 80105c6 <rcl_action_send_goal_response+0x66>
 8010562:	b570      	push	{r4, r5, r6, lr}
 8010564:	4604      	mov	r4, r0
 8010566:	6800      	ldr	r0, [r0, #0]
 8010568:	b340      	cbz	r0, 80105bc <rcl_action_send_goal_response+0x5c>
 801056a:	460d      	mov	r5, r1
 801056c:	4616      	mov	r6, r2
 801056e:	f7fe fca1 	bl	800eeb4 <rcl_service_is_valid>
 8010572:	b1f0      	cbz	r0, 80105b2 <rcl_action_send_goal_response+0x52>
 8010574:	6820      	ldr	r0, [r4, #0]
 8010576:	3004      	adds	r0, #4
 8010578:	f7fe fc9c 	bl	800eeb4 <rcl_service_is_valid>
 801057c:	b1c8      	cbz	r0, 80105b2 <rcl_action_send_goal_response+0x52>
 801057e:	6820      	ldr	r0, [r4, #0]
 8010580:	3008      	adds	r0, #8
 8010582:	f7fe fc97 	bl	800eeb4 <rcl_service_is_valid>
 8010586:	b1a0      	cbz	r0, 80105b2 <rcl_action_send_goal_response+0x52>
 8010588:	6820      	ldr	r0, [r4, #0]
 801058a:	300c      	adds	r0, #12
 801058c:	f7f8 fcd8 	bl	8008f40 <rcl_publisher_is_valid>
 8010590:	b178      	cbz	r0, 80105b2 <rcl_action_send_goal_response+0x52>
 8010592:	6820      	ldr	r0, [r4, #0]
 8010594:	3010      	adds	r0, #16
 8010596:	f7f8 fcd3 	bl	8008f40 <rcl_publisher_is_valid>
 801059a:	b150      	cbz	r0, 80105b2 <rcl_action_send_goal_response+0x52>
 801059c:	b18d      	cbz	r5, 80105c2 <rcl_action_send_goal_response+0x62>
 801059e:	b186      	cbz	r6, 80105c2 <rcl_action_send_goal_response+0x62>
 80105a0:	6820      	ldr	r0, [r4, #0]
 80105a2:	4632      	mov	r2, r6
 80105a4:	4629      	mov	r1, r5
 80105a6:	f7fe fc6d 	bl	800ee84 <rcl_send_response>
 80105aa:	3800      	subs	r0, #0
 80105ac:	bf18      	it	ne
 80105ae:	2001      	movne	r0, #1
 80105b0:	bd70      	pop	{r4, r5, r6, pc}
 80105b2:	f7f9 ffb9 	bl	800a528 <rcutils_reset_error>
 80105b6:	f640 0098 	movw	r0, #2200	; 0x898
 80105ba:	bd70      	pop	{r4, r5, r6, pc}
 80105bc:	f640 0098 	movw	r0, #2200	; 0x898
 80105c0:	bd70      	pop	{r4, r5, r6, pc}
 80105c2:	200b      	movs	r0, #11
 80105c4:	bd70      	pop	{r4, r5, r6, pc}
 80105c6:	f640 0098 	movw	r0, #2200	; 0x898
 80105ca:	4770      	bx	lr

080105cc <rcl_action_take_result_request>:
 80105cc:	2800      	cmp	r0, #0
 80105ce:	d03a      	beq.n	8010646 <rcl_action_take_result_request+0x7a>
 80105d0:	b570      	push	{r4, r5, r6, lr}
 80105d2:	4604      	mov	r4, r0
 80105d4:	6800      	ldr	r0, [r0, #0]
 80105d6:	b388      	cbz	r0, 801063c <rcl_action_take_result_request+0x70>
 80105d8:	460d      	mov	r5, r1
 80105da:	4616      	mov	r6, r2
 80105dc:	f7fe fc6a 	bl	800eeb4 <rcl_service_is_valid>
 80105e0:	b338      	cbz	r0, 8010632 <rcl_action_take_result_request+0x66>
 80105e2:	6820      	ldr	r0, [r4, #0]
 80105e4:	3004      	adds	r0, #4
 80105e6:	f7fe fc65 	bl	800eeb4 <rcl_service_is_valid>
 80105ea:	b310      	cbz	r0, 8010632 <rcl_action_take_result_request+0x66>
 80105ec:	6820      	ldr	r0, [r4, #0]
 80105ee:	3008      	adds	r0, #8
 80105f0:	f7fe fc60 	bl	800eeb4 <rcl_service_is_valid>
 80105f4:	b1e8      	cbz	r0, 8010632 <rcl_action_take_result_request+0x66>
 80105f6:	6820      	ldr	r0, [r4, #0]
 80105f8:	300c      	adds	r0, #12
 80105fa:	f7f8 fca1 	bl	8008f40 <rcl_publisher_is_valid>
 80105fe:	b1c0      	cbz	r0, 8010632 <rcl_action_take_result_request+0x66>
 8010600:	6820      	ldr	r0, [r4, #0]
 8010602:	3010      	adds	r0, #16
 8010604:	f7f8 fc9c 	bl	8008f40 <rcl_publisher_is_valid>
 8010608:	b198      	cbz	r0, 8010632 <rcl_action_take_result_request+0x66>
 801060a:	b1d5      	cbz	r5, 8010642 <rcl_action_take_result_request+0x76>
 801060c:	b1ce      	cbz	r6, 8010642 <rcl_action_take_result_request+0x76>
 801060e:	6820      	ldr	r0, [r4, #0]
 8010610:	4632      	mov	r2, r6
 8010612:	4629      	mov	r1, r5
 8010614:	3008      	adds	r0, #8
 8010616:	f7fe fbf5 	bl	800ee04 <rcl_take_request>
 801061a:	b148      	cbz	r0, 8010630 <rcl_action_take_result_request+0x64>
 801061c:	280a      	cmp	r0, #10
 801061e:	d007      	beq.n	8010630 <rcl_action_take_result_request+0x64>
 8010620:	f240 2259 	movw	r2, #601	; 0x259
 8010624:	f640 0399 	movw	r3, #2201	; 0x899
 8010628:	4290      	cmp	r0, r2
 801062a:	bf0c      	ite	eq
 801062c:	4618      	moveq	r0, r3
 801062e:	2001      	movne	r0, #1
 8010630:	bd70      	pop	{r4, r5, r6, pc}
 8010632:	f7f9 ff79 	bl	800a528 <rcutils_reset_error>
 8010636:	f640 0098 	movw	r0, #2200	; 0x898
 801063a:	bd70      	pop	{r4, r5, r6, pc}
 801063c:	f640 0098 	movw	r0, #2200	; 0x898
 8010640:	bd70      	pop	{r4, r5, r6, pc}
 8010642:	200b      	movs	r0, #11
 8010644:	bd70      	pop	{r4, r5, r6, pc}
 8010646:	f640 0098 	movw	r0, #2200	; 0x898
 801064a:	4770      	bx	lr

0801064c <rcl_action_take_cancel_request>:
 801064c:	2800      	cmp	r0, #0
 801064e:	d03a      	beq.n	80106c6 <rcl_action_take_cancel_request+0x7a>
 8010650:	b570      	push	{r4, r5, r6, lr}
 8010652:	4604      	mov	r4, r0
 8010654:	6800      	ldr	r0, [r0, #0]
 8010656:	b388      	cbz	r0, 80106bc <rcl_action_take_cancel_request+0x70>
 8010658:	460d      	mov	r5, r1
 801065a:	4616      	mov	r6, r2
 801065c:	f7fe fc2a 	bl	800eeb4 <rcl_service_is_valid>
 8010660:	b338      	cbz	r0, 80106b2 <rcl_action_take_cancel_request+0x66>
 8010662:	6820      	ldr	r0, [r4, #0]
 8010664:	3004      	adds	r0, #4
 8010666:	f7fe fc25 	bl	800eeb4 <rcl_service_is_valid>
 801066a:	b310      	cbz	r0, 80106b2 <rcl_action_take_cancel_request+0x66>
 801066c:	6820      	ldr	r0, [r4, #0]
 801066e:	3008      	adds	r0, #8
 8010670:	f7fe fc20 	bl	800eeb4 <rcl_service_is_valid>
 8010674:	b1e8      	cbz	r0, 80106b2 <rcl_action_take_cancel_request+0x66>
 8010676:	6820      	ldr	r0, [r4, #0]
 8010678:	300c      	adds	r0, #12
 801067a:	f7f8 fc61 	bl	8008f40 <rcl_publisher_is_valid>
 801067e:	b1c0      	cbz	r0, 80106b2 <rcl_action_take_cancel_request+0x66>
 8010680:	6820      	ldr	r0, [r4, #0]
 8010682:	3010      	adds	r0, #16
 8010684:	f7f8 fc5c 	bl	8008f40 <rcl_publisher_is_valid>
 8010688:	b198      	cbz	r0, 80106b2 <rcl_action_take_cancel_request+0x66>
 801068a:	b1d5      	cbz	r5, 80106c2 <rcl_action_take_cancel_request+0x76>
 801068c:	b1ce      	cbz	r6, 80106c2 <rcl_action_take_cancel_request+0x76>
 801068e:	6820      	ldr	r0, [r4, #0]
 8010690:	4632      	mov	r2, r6
 8010692:	4629      	mov	r1, r5
 8010694:	3004      	adds	r0, #4
 8010696:	f7fe fbb5 	bl	800ee04 <rcl_take_request>
 801069a:	b148      	cbz	r0, 80106b0 <rcl_action_take_cancel_request+0x64>
 801069c:	280a      	cmp	r0, #10
 801069e:	d007      	beq.n	80106b0 <rcl_action_take_cancel_request+0x64>
 80106a0:	f240 2259 	movw	r2, #601	; 0x259
 80106a4:	f640 0399 	movw	r3, #2201	; 0x899
 80106a8:	4290      	cmp	r0, r2
 80106aa:	bf0c      	ite	eq
 80106ac:	4618      	moveq	r0, r3
 80106ae:	2001      	movne	r0, #1
 80106b0:	bd70      	pop	{r4, r5, r6, pc}
 80106b2:	f7f9 ff39 	bl	800a528 <rcutils_reset_error>
 80106b6:	f640 0098 	movw	r0, #2200	; 0x898
 80106ba:	bd70      	pop	{r4, r5, r6, pc}
 80106bc:	f640 0098 	movw	r0, #2200	; 0x898
 80106c0:	bd70      	pop	{r4, r5, r6, pc}
 80106c2:	200b      	movs	r0, #11
 80106c4:	bd70      	pop	{r4, r5, r6, pc}
 80106c6:	f640 0098 	movw	r0, #2200	; 0x898
 80106ca:	4770      	bx	lr

080106cc <rcl_action_send_cancel_response>:
 80106cc:	b390      	cbz	r0, 8010734 <rcl_action_send_cancel_response+0x68>
 80106ce:	b570      	push	{r4, r5, r6, lr}
 80106d0:	4604      	mov	r4, r0
 80106d2:	6800      	ldr	r0, [r0, #0]
 80106d4:	b348      	cbz	r0, 801072a <rcl_action_send_cancel_response+0x5e>
 80106d6:	460d      	mov	r5, r1
 80106d8:	4616      	mov	r6, r2
 80106da:	f7fe fbeb 	bl	800eeb4 <rcl_service_is_valid>
 80106de:	b1f8      	cbz	r0, 8010720 <rcl_action_send_cancel_response+0x54>
 80106e0:	6820      	ldr	r0, [r4, #0]
 80106e2:	3004      	adds	r0, #4
 80106e4:	f7fe fbe6 	bl	800eeb4 <rcl_service_is_valid>
 80106e8:	b1d0      	cbz	r0, 8010720 <rcl_action_send_cancel_response+0x54>
 80106ea:	6820      	ldr	r0, [r4, #0]
 80106ec:	3008      	adds	r0, #8
 80106ee:	f7fe fbe1 	bl	800eeb4 <rcl_service_is_valid>
 80106f2:	b1a8      	cbz	r0, 8010720 <rcl_action_send_cancel_response+0x54>
 80106f4:	6820      	ldr	r0, [r4, #0]
 80106f6:	300c      	adds	r0, #12
 80106f8:	f7f8 fc22 	bl	8008f40 <rcl_publisher_is_valid>
 80106fc:	b180      	cbz	r0, 8010720 <rcl_action_send_cancel_response+0x54>
 80106fe:	6820      	ldr	r0, [r4, #0]
 8010700:	3010      	adds	r0, #16
 8010702:	f7f8 fc1d 	bl	8008f40 <rcl_publisher_is_valid>
 8010706:	b158      	cbz	r0, 8010720 <rcl_action_send_cancel_response+0x54>
 8010708:	b195      	cbz	r5, 8010730 <rcl_action_send_cancel_response+0x64>
 801070a:	b18e      	cbz	r6, 8010730 <rcl_action_send_cancel_response+0x64>
 801070c:	6820      	ldr	r0, [r4, #0]
 801070e:	4632      	mov	r2, r6
 8010710:	4629      	mov	r1, r5
 8010712:	3004      	adds	r0, #4
 8010714:	f7fe fbb6 	bl	800ee84 <rcl_send_response>
 8010718:	3800      	subs	r0, #0
 801071a:	bf18      	it	ne
 801071c:	2001      	movne	r0, #1
 801071e:	bd70      	pop	{r4, r5, r6, pc}
 8010720:	f7f9 ff02 	bl	800a528 <rcutils_reset_error>
 8010724:	f640 0098 	movw	r0, #2200	; 0x898
 8010728:	bd70      	pop	{r4, r5, r6, pc}
 801072a:	f640 0098 	movw	r0, #2200	; 0x898
 801072e:	bd70      	pop	{r4, r5, r6, pc}
 8010730:	200b      	movs	r0, #11
 8010732:	bd70      	pop	{r4, r5, r6, pc}
 8010734:	f640 0098 	movw	r0, #2200	; 0x898
 8010738:	4770      	bx	lr
 801073a:	bf00      	nop

0801073c <rcl_action_wait_set_add_action_server>:
 801073c:	2800      	cmp	r0, #0
 801073e:	d04d      	beq.n	80107dc <rcl_action_wait_set_add_action_server+0xa0>
 8010740:	b570      	push	{r4, r5, r6, lr}
 8010742:	460c      	mov	r4, r1
 8010744:	b159      	cbz	r1, 801075e <rcl_action_wait_set_add_action_server+0x22>
 8010746:	4605      	mov	r5, r0
 8010748:	6808      	ldr	r0, [r1, #0]
 801074a:	b140      	cbz	r0, 801075e <rcl_action_wait_set_add_action_server+0x22>
 801074c:	4616      	mov	r6, r2
 801074e:	f7fe fbb1 	bl	800eeb4 <rcl_service_is_valid>
 8010752:	b120      	cbz	r0, 801075e <rcl_action_wait_set_add_action_server+0x22>
 8010754:	6820      	ldr	r0, [r4, #0]
 8010756:	3004      	adds	r0, #4
 8010758:	f7fe fbac 	bl	800eeb4 <rcl_service_is_valid>
 801075c:	b910      	cbnz	r0, 8010764 <rcl_action_wait_set_add_action_server+0x28>
 801075e:	f640 0098 	movw	r0, #2200	; 0x898
 8010762:	bd70      	pop	{r4, r5, r6, pc}
 8010764:	6820      	ldr	r0, [r4, #0]
 8010766:	3008      	adds	r0, #8
 8010768:	f7fe fba4 	bl	800eeb4 <rcl_service_is_valid>
 801076c:	2800      	cmp	r0, #0
 801076e:	d0f6      	beq.n	801075e <rcl_action_wait_set_add_action_server+0x22>
 8010770:	6820      	ldr	r0, [r4, #0]
 8010772:	300c      	adds	r0, #12
 8010774:	f7f8 fbfc 	bl	8008f70 <rcl_publisher_is_valid_except_context>
 8010778:	2800      	cmp	r0, #0
 801077a:	d0f0      	beq.n	801075e <rcl_action_wait_set_add_action_server+0x22>
 801077c:	6820      	ldr	r0, [r4, #0]
 801077e:	3010      	adds	r0, #16
 8010780:	f7f8 fbf6 	bl	8008f70 <rcl_publisher_is_valid_except_context>
 8010784:	2800      	cmp	r0, #0
 8010786:	d0ea      	beq.n	801075e <rcl_action_wait_set_add_action_server+0x22>
 8010788:	6821      	ldr	r1, [r4, #0]
 801078a:	4628      	mov	r0, r5
 801078c:	f501 72ee 	add.w	r2, r1, #476	; 0x1dc
 8010790:	f7ff fad2 	bl	800fd38 <rcl_wait_set_add_service>
 8010794:	2800      	cmp	r0, #0
 8010796:	d1e4      	bne.n	8010762 <rcl_action_wait_set_add_action_server+0x26>
 8010798:	6821      	ldr	r1, [r4, #0]
 801079a:	4628      	mov	r0, r5
 801079c:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
 80107a0:	3104      	adds	r1, #4
 80107a2:	f7ff fac9 	bl	800fd38 <rcl_wait_set_add_service>
 80107a6:	2800      	cmp	r0, #0
 80107a8:	d1db      	bne.n	8010762 <rcl_action_wait_set_add_action_server+0x26>
 80107aa:	6821      	ldr	r1, [r4, #0]
 80107ac:	4628      	mov	r0, r5
 80107ae:	f501 72f2 	add.w	r2, r1, #484	; 0x1e4
 80107b2:	3108      	adds	r1, #8
 80107b4:	f7ff fac0 	bl	800fd38 <rcl_wait_set_add_service>
 80107b8:	2800      	cmp	r0, #0
 80107ba:	d1d2      	bne.n	8010762 <rcl_action_wait_set_add_action_server+0x26>
 80107bc:	6821      	ldr	r1, [r4, #0]
 80107be:	4628      	mov	r0, r5
 80107c0:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
 80107c4:	3114      	adds	r1, #20
 80107c6:	f7ff fa5b 	bl	800fc80 <rcl_wait_set_add_timer>
 80107ca:	2800      	cmp	r0, #0
 80107cc:	d1c9      	bne.n	8010762 <rcl_action_wait_set_add_action_server+0x26>
 80107ce:	2e00      	cmp	r6, #0
 80107d0:	d0c7      	beq.n	8010762 <rcl_action_wait_set_add_action_server+0x26>
 80107d2:	6823      	ldr	r3, [r4, #0]
 80107d4:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 80107d8:	6033      	str	r3, [r6, #0]
 80107da:	bd70      	pop	{r4, r5, r6, pc}
 80107dc:	f44f 7061 	mov.w	r0, #900	; 0x384
 80107e0:	4770      	bx	lr
 80107e2:	bf00      	nop

080107e4 <rcl_action_server_wait_set_get_entities_ready>:
 80107e4:	2800      	cmp	r0, #0
 80107e6:	d05a      	beq.n	801089e <rcl_action_server_wait_set_get_entities_ready+0xba>
 80107e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107ea:	460c      	mov	r4, r1
 80107ec:	b161      	cbz	r1, 8010808 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80107ee:	4605      	mov	r5, r0
 80107f0:	6808      	ldr	r0, [r1, #0]
 80107f2:	b148      	cbz	r0, 8010808 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80107f4:	4616      	mov	r6, r2
 80107f6:	461f      	mov	r7, r3
 80107f8:	f7fe fb5c 	bl	800eeb4 <rcl_service_is_valid>
 80107fc:	b120      	cbz	r0, 8010808 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80107fe:	6820      	ldr	r0, [r4, #0]
 8010800:	3004      	adds	r0, #4
 8010802:	f7fe fb57 	bl	800eeb4 <rcl_service_is_valid>
 8010806:	b910      	cbnz	r0, 801080e <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8010808:	f640 0098 	movw	r0, #2200	; 0x898
 801080c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801080e:	6820      	ldr	r0, [r4, #0]
 8010810:	3008      	adds	r0, #8
 8010812:	f7fe fb4f 	bl	800eeb4 <rcl_service_is_valid>
 8010816:	2800      	cmp	r0, #0
 8010818:	d0f6      	beq.n	8010808 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801081a:	6820      	ldr	r0, [r4, #0]
 801081c:	300c      	adds	r0, #12
 801081e:	f7f8 fba7 	bl	8008f70 <rcl_publisher_is_valid_except_context>
 8010822:	2800      	cmp	r0, #0
 8010824:	d0f0      	beq.n	8010808 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8010826:	6820      	ldr	r0, [r4, #0]
 8010828:	3010      	adds	r0, #16
 801082a:	f7f8 fba1 	bl	8008f70 <rcl_publisher_is_valid_except_context>
 801082e:	2800      	cmp	r0, #0
 8010830:	d0ea      	beq.n	8010808 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8010832:	b3be      	cbz	r6, 80108a4 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8010834:	b3b7      	cbz	r7, 80108a4 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8010836:	9b06      	ldr	r3, [sp, #24]
 8010838:	b3a3      	cbz	r3, 80108a4 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801083a:	9b07      	ldr	r3, [sp, #28]
 801083c:	b393      	cbz	r3, 80108a4 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801083e:	6821      	ldr	r1, [r4, #0]
 8010840:	692a      	ldr	r2, [r5, #16]
 8010842:	6a2c      	ldr	r4, [r5, #32]
 8010844:	f8d1 51e8 	ldr.w	r5, [r1, #488]	; 0x1e8
 8010848:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
 801084c:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8010850:	f8d1 01e4 	ldr.w	r0, [r1, #484]	; 0x1e4
 8010854:	f8d1 51dc 	ldr.w	r5, [r1, #476]	; 0x1dc
 8010858:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 801085c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8010860:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8010864:	1a64      	subs	r4, r4, r1
 8010866:	fab4 f484 	clz	r4, r4
 801086a:	0964      	lsrs	r4, r4, #5
 801086c:	7034      	strb	r4, [r6, #0]
 801086e:	1d0c      	adds	r4, r1, #4
 8010870:	1b1b      	subs	r3, r3, r4
 8010872:	fab3 f383 	clz	r3, r3
 8010876:	095b      	lsrs	r3, r3, #5
 8010878:	f101 0408 	add.w	r4, r1, #8
 801087c:	703b      	strb	r3, [r7, #0]
 801087e:	f101 0314 	add.w	r3, r1, #20
 8010882:	1b01      	subs	r1, r0, r4
 8010884:	1ad3      	subs	r3, r2, r3
 8010886:	fab1 f181 	clz	r1, r1
 801088a:	9a06      	ldr	r2, [sp, #24]
 801088c:	0949      	lsrs	r1, r1, #5
 801088e:	7011      	strb	r1, [r2, #0]
 8010890:	fab3 f383 	clz	r3, r3
 8010894:	9a07      	ldr	r2, [sp, #28]
 8010896:	095b      	lsrs	r3, r3, #5
 8010898:	2000      	movs	r0, #0
 801089a:	7013      	strb	r3, [r2, #0]
 801089c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801089e:	f44f 7061 	mov.w	r0, #900	; 0x384
 80108a2:	4770      	bx	lr
 80108a4:	200b      	movs	r0, #11
 80108a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080108a8 <_execute_event_handler>:
 80108a8:	2002      	movs	r0, #2
 80108aa:	4770      	bx	lr

080108ac <_cancel_goal_event_handler>:
 80108ac:	2003      	movs	r0, #3
 80108ae:	4770      	bx	lr

080108b0 <_succeed_event_handler>:
 80108b0:	2004      	movs	r0, #4
 80108b2:	4770      	bx	lr

080108b4 <_abort_event_handler>:
 80108b4:	2006      	movs	r0, #6
 80108b6:	4770      	bx	lr

080108b8 <_canceled_event_handler>:
 80108b8:	2005      	movs	r0, #5
 80108ba:	4770      	bx	lr

080108bc <rcl_action_transition_goal_state>:
 80108bc:	b2c2      	uxtb	r2, r0
 80108be:	2a06      	cmp	r2, #6
 80108c0:	d80c      	bhi.n	80108dc <rcl_action_transition_goal_state+0x20>
 80108c2:	2904      	cmp	r1, #4
 80108c4:	d80a      	bhi.n	80108dc <rcl_action_transition_goal_state+0x20>
 80108c6:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80108ca:	b410      	push	{r4}
 80108cc:	1853      	adds	r3, r2, r1
 80108ce:	4c06      	ldr	r4, [pc, #24]	; (80108e8 <rcl_action_transition_goal_state+0x2c>)
 80108d0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80108d4:	b123      	cbz	r3, 80108e0 <rcl_action_transition_goal_state+0x24>
 80108d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80108da:	4718      	bx	r3
 80108dc:	2000      	movs	r0, #0
 80108de:	4770      	bx	lr
 80108e0:	2000      	movs	r0, #0
 80108e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80108e6:	4770      	bx	lr
 80108e8:	08016974 	.word	0x08016974

080108ec <rcl_action_get_zero_initialized_cancel_response>:
 80108ec:	b510      	push	{r4, lr}
 80108ee:	4c07      	ldr	r4, [pc, #28]	; (801090c <rcl_action_get_zero_initialized_cancel_response+0x20>)
 80108f0:	4686      	mov	lr, r0
 80108f2:	4684      	mov	ip, r0
 80108f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80108f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80108fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80108fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010900:	6823      	ldr	r3, [r4, #0]
 8010902:	f8cc 3000 	str.w	r3, [ip]
 8010906:	4670      	mov	r0, lr
 8010908:	bd10      	pop	{r4, pc}
 801090a:	bf00      	nop
 801090c:	08016a00 	.word	0x08016a00

08010910 <rclc_action_send_result_request>:
 8010910:	b1d0      	cbz	r0, 8010948 <rclc_action_send_result_request+0x38>
 8010912:	b500      	push	{lr}
 8010914:	4684      	mov	ip, r0
 8010916:	b087      	sub	sp, #28
 8010918:	f8d0 0009 	ldr.w	r0, [r0, #9]
 801091c:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8010920:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8010924:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8010928:	f10d 0e08 	add.w	lr, sp, #8
 801092c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010930:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8010934:	f10c 0240 	add.w	r2, ip, #64	; 0x40
 8010938:	a902      	add	r1, sp, #8
 801093a:	3010      	adds	r0, #16
 801093c:	f7ff fbdc 	bl	80100f8 <rcl_action_send_result_request>
 8010940:	b920      	cbnz	r0, 801094c <rclc_action_send_result_request+0x3c>
 8010942:	b007      	add	sp, #28
 8010944:	f85d fb04 	ldr.w	pc, [sp], #4
 8010948:	200b      	movs	r0, #11
 801094a:	4770      	bx	lr
 801094c:	9001      	str	r0, [sp, #4]
 801094e:	f7f9 fdeb 	bl	800a528 <rcutils_reset_error>
 8010952:	9801      	ldr	r0, [sp, #4]
 8010954:	b007      	add	sp, #28
 8010956:	f85d fb04 	ldr.w	pc, [sp], #4
 801095a:	bf00      	nop

0801095c <rclc_action_take_goal_handle>:
 801095c:	b160      	cbz	r0, 8010978 <rclc_action_take_goal_handle+0x1c>
 801095e:	6883      	ldr	r3, [r0, #8]
 8010960:	b143      	cbz	r3, 8010974 <rclc_action_take_goal_handle+0x18>
 8010962:	6819      	ldr	r1, [r3, #0]
 8010964:	6081      	str	r1, [r0, #8]
 8010966:	2200      	movs	r2, #0
 8010968:	721a      	strb	r2, [r3, #8]
 801096a:	68c1      	ldr	r1, [r0, #12]
 801096c:	6019      	str	r1, [r3, #0]
 801096e:	621a      	str	r2, [r3, #32]
 8010970:	849a      	strh	r2, [r3, #36]	; 0x24
 8010972:	60c3      	str	r3, [r0, #12]
 8010974:	4618      	mov	r0, r3
 8010976:	4770      	bx	lr
 8010978:	4603      	mov	r3, r0
 801097a:	e7fb      	b.n	8010974 <rclc_action_take_goal_handle+0x18>

0801097c <rclc_action_remove_used_goal_handle>:
 801097c:	b180      	cbz	r0, 80109a0 <rclc_action_remove_used_goal_handle+0x24>
 801097e:	b179      	cbz	r1, 80109a0 <rclc_action_remove_used_goal_handle+0x24>
 8010980:	68c3      	ldr	r3, [r0, #12]
 8010982:	4299      	cmp	r1, r3
 8010984:	d00d      	beq.n	80109a2 <rclc_action_remove_used_goal_handle+0x26>
 8010986:	b12b      	cbz	r3, 8010994 <rclc_action_remove_used_goal_handle+0x18>
 8010988:	681a      	ldr	r2, [r3, #0]
 801098a:	4291      	cmp	r1, r2
 801098c:	d003      	beq.n	8010996 <rclc_action_remove_used_goal_handle+0x1a>
 801098e:	4613      	mov	r3, r2
 8010990:	2b00      	cmp	r3, #0
 8010992:	d1f9      	bne.n	8010988 <rclc_action_remove_used_goal_handle+0xc>
 8010994:	4770      	bx	lr
 8010996:	680a      	ldr	r2, [r1, #0]
 8010998:	601a      	str	r2, [r3, #0]
 801099a:	6883      	ldr	r3, [r0, #8]
 801099c:	600b      	str	r3, [r1, #0]
 801099e:	6081      	str	r1, [r0, #8]
 80109a0:	4770      	bx	lr
 80109a2:	680b      	ldr	r3, [r1, #0]
 80109a4:	60c3      	str	r3, [r0, #12]
 80109a6:	e7f8      	b.n	801099a <rclc_action_remove_used_goal_handle+0x1e>

080109a8 <rclc_action_find_goal_handle_by_uuid>:
 80109a8:	b538      	push	{r3, r4, r5, lr}
 80109aa:	b180      	cbz	r0, 80109ce <rclc_action_find_goal_handle_by_uuid+0x26>
 80109ac:	460d      	mov	r5, r1
 80109ae:	b181      	cbz	r1, 80109d2 <rclc_action_find_goal_handle_by_uuid+0x2a>
 80109b0:	68c4      	ldr	r4, [r0, #12]
 80109b2:	b914      	cbnz	r4, 80109ba <rclc_action_find_goal_handle_by_uuid+0x12>
 80109b4:	e009      	b.n	80109ca <rclc_action_find_goal_handle_by_uuid+0x22>
 80109b6:	6824      	ldr	r4, [r4, #0]
 80109b8:	b13c      	cbz	r4, 80109ca <rclc_action_find_goal_handle_by_uuid+0x22>
 80109ba:	f104 0009 	add.w	r0, r4, #9
 80109be:	2210      	movs	r2, #16
 80109c0:	4629      	mov	r1, r5
 80109c2:	f004 fbe7 	bl	8015194 <memcmp>
 80109c6:	2800      	cmp	r0, #0
 80109c8:	d1f5      	bne.n	80109b6 <rclc_action_find_goal_handle_by_uuid+0xe>
 80109ca:	4620      	mov	r0, r4
 80109cc:	bd38      	pop	{r3, r4, r5, pc}
 80109ce:	4604      	mov	r4, r0
 80109d0:	e7fb      	b.n	80109ca <rclc_action_find_goal_handle_by_uuid+0x22>
 80109d2:	460c      	mov	r4, r1
 80109d4:	e7f9      	b.n	80109ca <rclc_action_find_goal_handle_by_uuid+0x22>
 80109d6:	bf00      	nop

080109d8 <rclc_action_find_first_handle_by_status>:
 80109d8:	b140      	cbz	r0, 80109ec <rclc_action_find_first_handle_by_status+0x14>
 80109da:	68c0      	ldr	r0, [r0, #12]
 80109dc:	b910      	cbnz	r0, 80109e4 <rclc_action_find_first_handle_by_status+0xc>
 80109de:	e005      	b.n	80109ec <rclc_action_find_first_handle_by_status+0x14>
 80109e0:	6800      	ldr	r0, [r0, #0]
 80109e2:	b118      	cbz	r0, 80109ec <rclc_action_find_first_handle_by_status+0x14>
 80109e4:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80109e8:	428b      	cmp	r3, r1
 80109ea:	d1f9      	bne.n	80109e0 <rclc_action_find_first_handle_by_status+0x8>
 80109ec:	4770      	bx	lr
 80109ee:	bf00      	nop

080109f0 <rclc_action_find_first_terminated_handle>:
 80109f0:	b140      	cbz	r0, 8010a04 <rclc_action_find_first_terminated_handle+0x14>
 80109f2:	68c0      	ldr	r0, [r0, #12]
 80109f4:	b910      	cbnz	r0, 80109fc <rclc_action_find_first_terminated_handle+0xc>
 80109f6:	e005      	b.n	8010a04 <rclc_action_find_first_terminated_handle+0x14>
 80109f8:	6800      	ldr	r0, [r0, #0]
 80109fa:	b118      	cbz	r0, 8010a04 <rclc_action_find_first_terminated_handle+0x14>
 80109fc:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8010a00:	2b03      	cmp	r3, #3
 8010a02:	ddf9      	ble.n	80109f8 <rclc_action_find_first_terminated_handle+0x8>
 8010a04:	4770      	bx	lr
 8010a06:	bf00      	nop

08010a08 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8010a08:	b170      	cbz	r0, 8010a28 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8010a0a:	68c0      	ldr	r0, [r0, #12]
 8010a0c:	b160      	cbz	r0, 8010a28 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8010a0e:	b410      	push	{r4}
 8010a10:	e001      	b.n	8010a16 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8010a12:	6800      	ldr	r0, [r0, #0]
 8010a14:	b128      	cbz	r0, 8010a22 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8010a16:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	; 0x28
 8010a1a:	4299      	cmp	r1, r3
 8010a1c:	bf08      	it	eq
 8010a1e:	4294      	cmpeq	r4, r2
 8010a20:	d1f7      	bne.n	8010a12 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8010a22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a26:	4770      	bx	lr
 8010a28:	4770      	bx	lr
 8010a2a:	bf00      	nop

08010a2c <rclc_action_find_handle_by_result_request_sequence_number>:
 8010a2c:	b170      	cbz	r0, 8010a4c <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8010a2e:	68c0      	ldr	r0, [r0, #12]
 8010a30:	b160      	cbz	r0, 8010a4c <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8010a32:	b410      	push	{r4}
 8010a34:	e001      	b.n	8010a3a <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8010a36:	6800      	ldr	r0, [r0, #0]
 8010a38:	b128      	cbz	r0, 8010a46 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8010a3a:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	; 0x40
 8010a3e:	4299      	cmp	r1, r3
 8010a40:	bf08      	it	eq
 8010a42:	4294      	cmpeq	r4, r2
 8010a44:	d1f7      	bne.n	8010a36 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8010a46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a4a:	4770      	bx	lr
 8010a4c:	4770      	bx	lr
 8010a4e:	bf00      	nop

08010a50 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8010a50:	b170      	cbz	r0, 8010a70 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8010a52:	68c0      	ldr	r0, [r0, #12]
 8010a54:	b160      	cbz	r0, 8010a70 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8010a56:	b410      	push	{r4}
 8010a58:	e001      	b.n	8010a5e <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8010a5a:	6800      	ldr	r0, [r0, #0]
 8010a5c:	b128      	cbz	r0, 8010a6a <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8010a5e:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	; 0x58
 8010a62:	4299      	cmp	r1, r3
 8010a64:	bf08      	it	eq
 8010a66:	4294      	cmpeq	r4, r2
 8010a68:	d1f7      	bne.n	8010a5a <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8010a6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a6e:	4770      	bx	lr
 8010a70:	4770      	bx	lr
 8010a72:	bf00      	nop

08010a74 <rclc_action_find_first_handle_with_goal_response>:
 8010a74:	b140      	cbz	r0, 8010a88 <rclc_action_find_first_handle_with_goal_response+0x14>
 8010a76:	68c0      	ldr	r0, [r0, #12]
 8010a78:	b910      	cbnz	r0, 8010a80 <rclc_action_find_first_handle_with_goal_response+0xc>
 8010a7a:	e005      	b.n	8010a88 <rclc_action_find_first_handle_with_goal_response+0x14>
 8010a7c:	6800      	ldr	r0, [r0, #0]
 8010a7e:	b118      	cbz	r0, 8010a88 <rclc_action_find_first_handle_with_goal_response+0x14>
 8010a80:	f890 3020 	ldrb.w	r3, [r0, #32]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d0f9      	beq.n	8010a7c <rclc_action_find_first_handle_with_goal_response+0x8>
 8010a88:	4770      	bx	lr
 8010a8a:	bf00      	nop

08010a8c <rclc_action_find_first_handle_with_result_response>:
 8010a8c:	b140      	cbz	r0, 8010aa0 <rclc_action_find_first_handle_with_result_response+0x14>
 8010a8e:	68c0      	ldr	r0, [r0, #12]
 8010a90:	b910      	cbnz	r0, 8010a98 <rclc_action_find_first_handle_with_result_response+0xc>
 8010a92:	e005      	b.n	8010aa0 <rclc_action_find_first_handle_with_result_response+0x14>
 8010a94:	6800      	ldr	r0, [r0, #0]
 8010a96:	b118      	cbz	r0, 8010aa0 <rclc_action_find_first_handle_with_result_response+0x14>
 8010a98:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d0f9      	beq.n	8010a94 <rclc_action_find_first_handle_with_result_response+0x8>
 8010aa0:	4770      	bx	lr
 8010aa2:	bf00      	nop

08010aa4 <rclc_action_server_response_goal_request>:
 8010aa4:	b198      	cbz	r0, 8010ace <rclc_action_server_response_goal_request+0x2a>
 8010aa6:	b510      	push	{r4, lr}
 8010aa8:	6844      	ldr	r4, [r0, #4]
 8010aaa:	b086      	sub	sp, #24
 8010aac:	2200      	movs	r2, #0
 8010aae:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8010ab2:	460b      	mov	r3, r1
 8010ab4:	9205      	str	r2, [sp, #20]
 8010ab6:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8010aba:	aa03      	add	r2, sp, #12
 8010abc:	f104 0010 	add.w	r0, r4, #16
 8010ac0:	f88d 300c 	strb.w	r3, [sp, #12]
 8010ac4:	f7ff fd4c 	bl	8010560 <rcl_action_send_goal_response>
 8010ac8:	b918      	cbnz	r0, 8010ad2 <rclc_action_server_response_goal_request+0x2e>
 8010aca:	b006      	add	sp, #24
 8010acc:	bd10      	pop	{r4, pc}
 8010ace:	200b      	movs	r0, #11
 8010ad0:	4770      	bx	lr
 8010ad2:	9001      	str	r0, [sp, #4]
 8010ad4:	f7f9 fd28 	bl	800a528 <rcutils_reset_error>
 8010ad8:	9801      	ldr	r0, [sp, #4]
 8010ada:	b006      	add	sp, #24
 8010adc:	bd10      	pop	{r4, pc}
 8010ade:	bf00      	nop

08010ae0 <rclc_action_server_goal_cancel_accept>:
 8010ae0:	b310      	cbz	r0, 8010b28 <rclc_action_server_goal_cancel_accept+0x48>
 8010ae2:	b510      	push	{r4, lr}
 8010ae4:	b090      	sub	sp, #64	; 0x40
 8010ae6:	4604      	mov	r4, r0
 8010ae8:	a806      	add	r0, sp, #24
 8010aea:	f7ff feff 	bl	80108ec <rcl_action_get_zero_initialized_cancel_response>
 8010aee:	2300      	movs	r3, #0
 8010af0:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8010af4:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8010af8:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8010afc:	f88d 3018 	strb.w	r3, [sp, #24]
 8010b00:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8010b04:	f8cd d01c 	str.w	sp, [sp, #28]
 8010b08:	46ec      	mov	ip, sp
 8010b0a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010b0e:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8010b30 <rclc_action_server_goal_cancel_accept+0x50>
 8010b12:	6860      	ldr	r0, [r4, #4]
 8010b14:	aa06      	add	r2, sp, #24
 8010b16:	f104 0158 	add.w	r1, r4, #88	; 0x58
 8010b1a:	3010      	adds	r0, #16
 8010b1c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8010b20:	f7ff fdd4 	bl	80106cc <rcl_action_send_cancel_response>
 8010b24:	b010      	add	sp, #64	; 0x40
 8010b26:	bd10      	pop	{r4, pc}
 8010b28:	200b      	movs	r0, #11
 8010b2a:	4770      	bx	lr
 8010b2c:	f3af 8000 	nop.w
 8010b30:	00000001 	.word	0x00000001
 8010b34:	00000001 	.word	0x00000001

08010b38 <rclc_action_server_goal_cancel_reject>:
 8010b38:	b082      	sub	sp, #8
 8010b3a:	b530      	push	{r4, r5, lr}
 8010b3c:	b08b      	sub	sp, #44	; 0x2c
 8010b3e:	ac0e      	add	r4, sp, #56	; 0x38
 8010b40:	e884 000c 	stmia.w	r4, {r2, r3}
 8010b44:	b188      	cbz	r0, 8010b6a <rclc_action_server_goal_cancel_reject+0x32>
 8010b46:	4604      	mov	r4, r0
 8010b48:	a801      	add	r0, sp, #4
 8010b4a:	460d      	mov	r5, r1
 8010b4c:	f7ff fece 	bl	80108ec <rcl_action_get_zero_initialized_cancel_response>
 8010b50:	aa01      	add	r2, sp, #4
 8010b52:	a90e      	add	r1, sp, #56	; 0x38
 8010b54:	f104 0010 	add.w	r0, r4, #16
 8010b58:	f88d 5004 	strb.w	r5, [sp, #4]
 8010b5c:	f7ff fdb6 	bl	80106cc <rcl_action_send_cancel_response>
 8010b60:	b00b      	add	sp, #44	; 0x2c
 8010b62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010b66:	b002      	add	sp, #8
 8010b68:	4770      	bx	lr
 8010b6a:	200b      	movs	r0, #11
 8010b6c:	b00b      	add	sp, #44	; 0x2c
 8010b6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010b72:	b002      	add	sp, #8
 8010b74:	4770      	bx	lr
 8010b76:	bf00      	nop

08010b78 <rcutils_get_env>:
 8010b78:	b168      	cbz	r0, 8010b96 <rcutils_get_env+0x1e>
 8010b7a:	b510      	push	{r4, lr}
 8010b7c:	460c      	mov	r4, r1
 8010b7e:	b129      	cbz	r1, 8010b8c <rcutils_get_env+0x14>
 8010b80:	f003 ff60 	bl	8014a44 <getenv>
 8010b84:	b120      	cbz	r0, 8010b90 <rcutils_get_env+0x18>
 8010b86:	6020      	str	r0, [r4, #0]
 8010b88:	2000      	movs	r0, #0
 8010b8a:	bd10      	pop	{r4, pc}
 8010b8c:	4803      	ldr	r0, [pc, #12]	; (8010b9c <rcutils_get_env+0x24>)
 8010b8e:	bd10      	pop	{r4, pc}
 8010b90:	4b03      	ldr	r3, [pc, #12]	; (8010ba0 <rcutils_get_env+0x28>)
 8010b92:	6023      	str	r3, [r4, #0]
 8010b94:	bd10      	pop	{r4, pc}
 8010b96:	4803      	ldr	r0, [pc, #12]	; (8010ba4 <rcutils_get_env+0x2c>)
 8010b98:	4770      	bx	lr
 8010b9a:	bf00      	nop
 8010b9c:	08016a40 	.word	0x08016a40
 8010ba0:	08016b64 	.word	0x08016b64
 8010ba4:	08016a24 	.word	0x08016a24

08010ba8 <rcutils_is_directory>:
 8010ba8:	2000      	movs	r0, #0
 8010baa:	4770      	bx	lr

08010bac <rcutils_join_path>:
 8010bac:	b082      	sub	sp, #8
 8010bae:	e88d 000c 	stmia.w	sp, {r2, r3}
 8010bb2:	2000      	movs	r0, #0
 8010bb4:	b002      	add	sp, #8
 8010bb6:	4770      	bx	lr

08010bb8 <rcutils_to_native_path>:
 8010bb8:	b084      	sub	sp, #16
 8010bba:	a801      	add	r0, sp, #4
 8010bbc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8010bc0:	b004      	add	sp, #16
 8010bc2:	2000      	movs	r0, #0
 8010bc4:	4770      	bx	lr
 8010bc6:	bf00      	nop

08010bc8 <rcutils_format_string_limit>:
 8010bc8:	b40f      	push	{r0, r1, r2, r3}
 8010bca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bcc:	b083      	sub	sp, #12
 8010bce:	ac08      	add	r4, sp, #32
 8010bd0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8010bd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010bd6:	b34e      	cbz	r6, 8010c2c <rcutils_format_string_limit+0x64>
 8010bd8:	a808      	add	r0, sp, #32
 8010bda:	f7f9 fbdd 	bl	800a398 <rcutils_allocator_is_valid>
 8010bde:	b328      	cbz	r0, 8010c2c <rcutils_format_string_limit+0x64>
 8010be0:	2100      	movs	r1, #0
 8010be2:	ab0f      	add	r3, sp, #60	; 0x3c
 8010be4:	4632      	mov	r2, r6
 8010be6:	4608      	mov	r0, r1
 8010be8:	e9cd 3300 	strd	r3, r3, [sp]
 8010bec:	f000 f8f4 	bl	8010dd8 <rcutils_vsnprintf>
 8010bf0:	1c43      	adds	r3, r0, #1
 8010bf2:	4605      	mov	r5, r0
 8010bf4:	d01a      	beq.n	8010c2c <rcutils_format_string_limit+0x64>
 8010bf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010bf8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010bfa:	1c47      	adds	r7, r0, #1
 8010bfc:	429f      	cmp	r7, r3
 8010bfe:	bf84      	itt	hi
 8010c00:	461f      	movhi	r7, r3
 8010c02:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 8010c06:	4638      	mov	r0, r7
 8010c08:	9b08      	ldr	r3, [sp, #32]
 8010c0a:	4798      	blx	r3
 8010c0c:	4604      	mov	r4, r0
 8010c0e:	b168      	cbz	r0, 8010c2c <rcutils_format_string_limit+0x64>
 8010c10:	9b01      	ldr	r3, [sp, #4]
 8010c12:	4632      	mov	r2, r6
 8010c14:	4639      	mov	r1, r7
 8010c16:	f000 f8df 	bl	8010dd8 <rcutils_vsnprintf>
 8010c1a:	2800      	cmp	r0, #0
 8010c1c:	db02      	blt.n	8010c24 <rcutils_format_string_limit+0x5c>
 8010c1e:	2300      	movs	r3, #0
 8010c20:	5563      	strb	r3, [r4, r5]
 8010c22:	e004      	b.n	8010c2e <rcutils_format_string_limit+0x66>
 8010c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c26:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010c28:	4620      	mov	r0, r4
 8010c2a:	4798      	blx	r3
 8010c2c:	2400      	movs	r4, #0
 8010c2e:	4620      	mov	r0, r4
 8010c30:	b003      	add	sp, #12
 8010c32:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010c36:	b004      	add	sp, #16
 8010c38:	4770      	bx	lr
 8010c3a:	bf00      	nop

08010c3c <rcutils_repl_str>:
 8010c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c40:	ed2d 8b02 	vpush	{d8}
 8010c44:	b087      	sub	sp, #28
 8010c46:	4680      	mov	r8, r0
 8010c48:	4608      	mov	r0, r1
 8010c4a:	f8cd 8004 	str.w	r8, [sp, #4]
 8010c4e:	ee08 2a10 	vmov	s16, r2
 8010c52:	468a      	mov	sl, r1
 8010c54:	4699      	mov	r9, r3
 8010c56:	f7ef facd 	bl	80001f4 <strlen>
 8010c5a:	2600      	movs	r6, #0
 8010c5c:	4647      	mov	r7, r8
 8010c5e:	9002      	str	r0, [sp, #8]
 8010c60:	46b3      	mov	fp, r6
 8010c62:	2510      	movs	r5, #16
 8010c64:	46b0      	mov	r8, r6
 8010c66:	e01d      	b.n	8010ca4 <rcutils_repl_str+0x68>
 8010c68:	f10b 0b01 	add.w	fp, fp, #1
 8010c6c:	455e      	cmp	r6, fp
 8010c6e:	d211      	bcs.n	8010c94 <rcutils_repl_str+0x58>
 8010c70:	442e      	add	r6, r5
 8010c72:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8010c76:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8010c7a:	00b1      	lsls	r1, r6, #2
 8010c7c:	4798      	blx	r3
 8010c7e:	2800      	cmp	r0, #0
 8010c80:	f000 8088 	beq.w	8010d94 <rcutils_repl_str+0x158>
 8010c84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010c88:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8010c8c:	4680      	mov	r8, r0
 8010c8e:	bf28      	it	cs
 8010c90:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8010c94:	9a01      	ldr	r2, [sp, #4]
 8010c96:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8010c9a:	1aa2      	subs	r2, r4, r2
 8010c9c:	f843 2c04 	str.w	r2, [r3, #-4]
 8010ca0:	9b02      	ldr	r3, [sp, #8]
 8010ca2:	18e7      	adds	r7, r4, r3
 8010ca4:	4651      	mov	r1, sl
 8010ca6:	4638      	mov	r0, r7
 8010ca8:	f004 fac5 	bl	8015236 <strstr>
 8010cac:	4604      	mov	r4, r0
 8010cae:	4640      	mov	r0, r8
 8010cb0:	2c00      	cmp	r4, #0
 8010cb2:	d1d9      	bne.n	8010c68 <rcutils_repl_str+0x2c>
 8010cb4:	46b8      	mov	r8, r7
 8010cb6:	4607      	mov	r7, r0
 8010cb8:	4640      	mov	r0, r8
 8010cba:	f7ef fa9b 	bl	80001f4 <strlen>
 8010cbe:	9b01      	ldr	r3, [sp, #4]
 8010cc0:	eba8 0303 	sub.w	r3, r8, r3
 8010cc4:	181c      	adds	r4, r3, r0
 8010cc6:	9404      	str	r4, [sp, #16]
 8010cc8:	f1bb 0f00 	cmp.w	fp, #0
 8010ccc:	d04a      	beq.n	8010d64 <rcutils_repl_str+0x128>
 8010cce:	ee18 0a10 	vmov	r0, s16
 8010cd2:	f7ef fa8f 	bl	80001f4 <strlen>
 8010cd6:	9b02      	ldr	r3, [sp, #8]
 8010cd8:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8010cdc:	1ac3      	subs	r3, r0, r3
 8010cde:	fb0b 4303 	mla	r3, fp, r3, r4
 8010ce2:	461a      	mov	r2, r3
 8010ce4:	9305      	str	r3, [sp, #20]
 8010ce6:	4606      	mov	r6, r0
 8010ce8:	f8d9 3000 	ldr.w	r3, [r9]
 8010cec:	1c50      	adds	r0, r2, #1
 8010cee:	4798      	blx	r3
 8010cf0:	9003      	str	r0, [sp, #12]
 8010cf2:	2800      	cmp	r0, #0
 8010cf4:	d04f      	beq.n	8010d96 <rcutils_repl_str+0x15a>
 8010cf6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010cfa:	683a      	ldr	r2, [r7, #0]
 8010cfc:	4641      	mov	r1, r8
 8010cfe:	f004 fb92 	bl	8015426 <memcpy>
 8010d02:	683d      	ldr	r5, [r7, #0]
 8010d04:	9b03      	ldr	r3, [sp, #12]
 8010d06:	9701      	str	r7, [sp, #4]
 8010d08:	46ba      	mov	sl, r7
 8010d0a:	441d      	add	r5, r3
 8010d0c:	9f02      	ldr	r7, [sp, #8]
 8010d0e:	f8cd 9008 	str.w	r9, [sp, #8]
 8010d12:	2401      	movs	r4, #1
 8010d14:	46d1      	mov	r9, sl
 8010d16:	ee18 aa10 	vmov	sl, s16
 8010d1a:	e00a      	b.n	8010d32 <rcutils_repl_str+0xf6>
 8010d1c:	f8d9 5000 	ldr.w	r5, [r9]
 8010d20:	1aaa      	subs	r2, r5, r2
 8010d22:	1885      	adds	r5, r0, r2
 8010d24:	f004 fb7f 	bl	8015426 <memcpy>
 8010d28:	45a3      	cmp	fp, r4
 8010d2a:	f104 0201 	add.w	r2, r4, #1
 8010d2e:	d935      	bls.n	8010d9c <rcutils_repl_str+0x160>
 8010d30:	4614      	mov	r4, r2
 8010d32:	4632      	mov	r2, r6
 8010d34:	4651      	mov	r1, sl
 8010d36:	4628      	mov	r0, r5
 8010d38:	f004 fb75 	bl	8015426 <memcpy>
 8010d3c:	f859 2b04 	ldr.w	r2, [r9], #4
 8010d40:	45a3      	cmp	fp, r4
 8010d42:	443a      	add	r2, r7
 8010d44:	eb05 0006 	add.w	r0, r5, r6
 8010d48:	eb08 0102 	add.w	r1, r8, r2
 8010d4c:	d1e6      	bne.n	8010d1c <rcutils_repl_str+0xe0>
 8010d4e:	9b04      	ldr	r3, [sp, #16]
 8010d50:	1a9a      	subs	r2, r3, r2
 8010d52:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8010d56:	f004 fb66 	bl	8015426 <memcpy>
 8010d5a:	9a03      	ldr	r2, [sp, #12]
 8010d5c:	9905      	ldr	r1, [sp, #20]
 8010d5e:	2300      	movs	r3, #0
 8010d60:	5453      	strb	r3, [r2, r1]
 8010d62:	e00b      	b.n	8010d7c <rcutils_repl_str+0x140>
 8010d64:	4620      	mov	r0, r4
 8010d66:	f8d9 3000 	ldr.w	r3, [r9]
 8010d6a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8010d6e:	3001      	adds	r0, #1
 8010d70:	4798      	blx	r3
 8010d72:	9003      	str	r0, [sp, #12]
 8010d74:	b110      	cbz	r0, 8010d7c <rcutils_repl_str+0x140>
 8010d76:	9901      	ldr	r1, [sp, #4]
 8010d78:	f004 fb4d 	bl	8015416 <strcpy>
 8010d7c:	4638      	mov	r0, r7
 8010d7e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8010d82:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8010d86:	4798      	blx	r3
 8010d88:	9803      	ldr	r0, [sp, #12]
 8010d8a:	b007      	add	sp, #28
 8010d8c:	ecbd 8b02 	vpop	{d8}
 8010d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d94:	4647      	mov	r7, r8
 8010d96:	2300      	movs	r3, #0
 8010d98:	9303      	str	r3, [sp, #12]
 8010d9a:	e7ef      	b.n	8010d7c <rcutils_repl_str+0x140>
 8010d9c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8010da0:	e7db      	b.n	8010d5a <rcutils_repl_str+0x11e>
 8010da2:	bf00      	nop

08010da4 <rcutils_snprintf>:
 8010da4:	b40c      	push	{r2, r3}
 8010da6:	b530      	push	{r4, r5, lr}
 8010da8:	b083      	sub	sp, #12
 8010daa:	ab06      	add	r3, sp, #24
 8010dac:	f853 2b04 	ldr.w	r2, [r3], #4
 8010db0:	9301      	str	r3, [sp, #4]
 8010db2:	b152      	cbz	r2, 8010dca <rcutils_snprintf+0x26>
 8010db4:	b138      	cbz	r0, 8010dc6 <rcutils_snprintf+0x22>
 8010db6:	b141      	cbz	r1, 8010dca <rcutils_snprintf+0x26>
 8010db8:	f004 f9de 	bl	8015178 <vsniprintf>
 8010dbc:	b003      	add	sp, #12
 8010dbe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010dc2:	b002      	add	sp, #8
 8010dc4:	4770      	bx	lr
 8010dc6:	2900      	cmp	r1, #0
 8010dc8:	d0f6      	beq.n	8010db8 <rcutils_snprintf+0x14>
 8010dca:	f004 faf7 	bl	80153bc <__errno>
 8010dce:	2316      	movs	r3, #22
 8010dd0:	6003      	str	r3, [r0, #0]
 8010dd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010dd6:	e7f1      	b.n	8010dbc <rcutils_snprintf+0x18>

08010dd8 <rcutils_vsnprintf>:
 8010dd8:	b570      	push	{r4, r5, r6, lr}
 8010dda:	b13a      	cbz	r2, 8010dec <rcutils_vsnprintf+0x14>
 8010ddc:	b120      	cbz	r0, 8010de8 <rcutils_vsnprintf+0x10>
 8010dde:	b129      	cbz	r1, 8010dec <rcutils_vsnprintf+0x14>
 8010de0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010de4:	f004 b9c8 	b.w	8015178 <vsniprintf>
 8010de8:	2900      	cmp	r1, #0
 8010dea:	d0f9      	beq.n	8010de0 <rcutils_vsnprintf+0x8>
 8010dec:	f004 fae6 	bl	80153bc <__errno>
 8010df0:	2316      	movs	r3, #22
 8010df2:	6003      	str	r3, [r0, #0]
 8010df4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010df8:	bd70      	pop	{r4, r5, r6, pc}
 8010dfa:	bf00      	nop

08010dfc <rcutils_strdup>:
 8010dfc:	b084      	sub	sp, #16
 8010dfe:	b570      	push	{r4, r5, r6, lr}
 8010e00:	b082      	sub	sp, #8
 8010e02:	ac07      	add	r4, sp, #28
 8010e04:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8010e08:	4605      	mov	r5, r0
 8010e0a:	b1b0      	cbz	r0, 8010e3a <rcutils_strdup+0x3e>
 8010e0c:	f7ef f9f2 	bl	80001f4 <strlen>
 8010e10:	1c42      	adds	r2, r0, #1
 8010e12:	9b07      	ldr	r3, [sp, #28]
 8010e14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010e16:	9201      	str	r2, [sp, #4]
 8010e18:	4606      	mov	r6, r0
 8010e1a:	4610      	mov	r0, r2
 8010e1c:	4798      	blx	r3
 8010e1e:	4604      	mov	r4, r0
 8010e20:	b128      	cbz	r0, 8010e2e <rcutils_strdup+0x32>
 8010e22:	9a01      	ldr	r2, [sp, #4]
 8010e24:	4629      	mov	r1, r5
 8010e26:	f004 fafe 	bl	8015426 <memcpy>
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	55a3      	strb	r3, [r4, r6]
 8010e2e:	4620      	mov	r0, r4
 8010e30:	b002      	add	sp, #8
 8010e32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010e36:	b004      	add	sp, #16
 8010e38:	4770      	bx	lr
 8010e3a:	4604      	mov	r4, r0
 8010e3c:	e7f7      	b.n	8010e2e <rcutils_strdup+0x32>
 8010e3e:	bf00      	nop

08010e40 <rcutils_strndup>:
 8010e40:	b082      	sub	sp, #8
 8010e42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e44:	ac06      	add	r4, sp, #24
 8010e46:	e884 000c 	stmia.w	r4, {r2, r3}
 8010e4a:	4605      	mov	r5, r0
 8010e4c:	b188      	cbz	r0, 8010e72 <rcutils_strndup+0x32>
 8010e4e:	1c4f      	adds	r7, r1, #1
 8010e50:	460e      	mov	r6, r1
 8010e52:	4638      	mov	r0, r7
 8010e54:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010e56:	4790      	blx	r2
 8010e58:	4604      	mov	r4, r0
 8010e5a:	b128      	cbz	r0, 8010e68 <rcutils_strndup+0x28>
 8010e5c:	463a      	mov	r2, r7
 8010e5e:	4629      	mov	r1, r5
 8010e60:	f004 fae1 	bl	8015426 <memcpy>
 8010e64:	2300      	movs	r3, #0
 8010e66:	55a3      	strb	r3, [r4, r6]
 8010e68:	4620      	mov	r0, r4
 8010e6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010e6e:	b002      	add	sp, #8
 8010e70:	4770      	bx	lr
 8010e72:	4604      	mov	r4, r0
 8010e74:	e7f8      	b.n	8010e68 <rcutils_strndup+0x28>
 8010e76:	bf00      	nop

08010e78 <rcutils_get_zero_initialized_string_map>:
 8010e78:	4b01      	ldr	r3, [pc, #4]	; (8010e80 <rcutils_get_zero_initialized_string_map+0x8>)
 8010e7a:	2000      	movs	r0, #0
 8010e7c:	6018      	str	r0, [r3, #0]
 8010e7e:	4770      	bx	lr
 8010e80:	2000dcd8 	.word	0x2000dcd8

08010e84 <rcutils_string_map_reserve>:
 8010e84:	2800      	cmp	r0, #0
 8010e86:	d05f      	beq.n	8010f48 <rcutils_string_map_reserve+0xc4>
 8010e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e8c:	460c      	mov	r4, r1
 8010e8e:	6801      	ldr	r1, [r0, #0]
 8010e90:	b082      	sub	sp, #8
 8010e92:	4605      	mov	r5, r0
 8010e94:	b129      	cbz	r1, 8010ea2 <rcutils_string_map_reserve+0x1e>
 8010e96:	68cb      	ldr	r3, [r1, #12]
 8010e98:	42a3      	cmp	r3, r4
 8010e9a:	d906      	bls.n	8010eaa <rcutils_string_map_reserve+0x26>
 8010e9c:	461c      	mov	r4, r3
 8010e9e:	2900      	cmp	r1, #0
 8010ea0:	d1f9      	bne.n	8010e96 <rcutils_string_map_reserve+0x12>
 8010ea2:	201f      	movs	r0, #31
 8010ea4:	b002      	add	sp, #8
 8010ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010eaa:	688b      	ldr	r3, [r1, #8]
 8010eac:	42a3      	cmp	r3, r4
 8010eae:	d047      	beq.n	8010f40 <rcutils_string_map_reserve+0xbc>
 8010eb0:	6a0e      	ldr	r6, [r1, #32]
 8010eb2:	2c00      	cmp	r4, #0
 8010eb4:	d034      	beq.n	8010f20 <rcutils_string_map_reserve+0x9c>
 8010eb6:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8010eba:	d243      	bcs.n	8010f44 <rcutils_string_map_reserve+0xc0>
 8010ebc:	00a7      	lsls	r7, r4, #2
 8010ebe:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8010ec2:	6808      	ldr	r0, [r1, #0]
 8010ec4:	4632      	mov	r2, r6
 8010ec6:	4639      	mov	r1, r7
 8010ec8:	47c0      	blx	r8
 8010eca:	2800      	cmp	r0, #0
 8010ecc:	d03a      	beq.n	8010f44 <rcutils_string_map_reserve+0xc0>
 8010ece:	682b      	ldr	r3, [r5, #0]
 8010ed0:	4632      	mov	r2, r6
 8010ed2:	6018      	str	r0, [r3, #0]
 8010ed4:	4639      	mov	r1, r7
 8010ed6:	6858      	ldr	r0, [r3, #4]
 8010ed8:	47c0      	blx	r8
 8010eda:	2800      	cmp	r0, #0
 8010edc:	d032      	beq.n	8010f44 <rcutils_string_map_reserve+0xc0>
 8010ede:	682d      	ldr	r5, [r5, #0]
 8010ee0:	68ab      	ldr	r3, [r5, #8]
 8010ee2:	6068      	str	r0, [r5, #4]
 8010ee4:	42a3      	cmp	r3, r4
 8010ee6:	d226      	bcs.n	8010f36 <rcutils_string_map_reserve+0xb2>
 8010ee8:	682a      	ldr	r2, [r5, #0]
 8010eea:	eb00 0c07 	add.w	ip, r0, r7
 8010eee:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8010ef2:	45e6      	cmp	lr, ip
 8010ef4:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8010ef8:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8010efc:	d203      	bcs.n	8010f06 <rcutils_string_map_reserve+0x82>
 8010efe:	eb02 0c07 	add.w	ip, r2, r7
 8010f02:	4566      	cmp	r6, ip
 8010f04:	d322      	bcc.n	8010f4c <rcutils_string_map_reserve+0xc8>
 8010f06:	1ae3      	subs	r3, r4, r3
 8010f08:	009a      	lsls	r2, r3, #2
 8010f0a:	4670      	mov	r0, lr
 8010f0c:	2100      	movs	r1, #0
 8010f0e:	9201      	str	r2, [sp, #4]
 8010f10:	f004 f96a 	bl	80151e8 <memset>
 8010f14:	9a01      	ldr	r2, [sp, #4]
 8010f16:	2100      	movs	r1, #0
 8010f18:	4630      	mov	r0, r6
 8010f1a:	f004 f965 	bl	80151e8 <memset>
 8010f1e:	e00a      	b.n	8010f36 <rcutils_string_map_reserve+0xb2>
 8010f20:	694f      	ldr	r7, [r1, #20]
 8010f22:	6808      	ldr	r0, [r1, #0]
 8010f24:	4631      	mov	r1, r6
 8010f26:	47b8      	blx	r7
 8010f28:	682b      	ldr	r3, [r5, #0]
 8010f2a:	4631      	mov	r1, r6
 8010f2c:	6858      	ldr	r0, [r3, #4]
 8010f2e:	601c      	str	r4, [r3, #0]
 8010f30:	47b8      	blx	r7
 8010f32:	682d      	ldr	r5, [r5, #0]
 8010f34:	606c      	str	r4, [r5, #4]
 8010f36:	2000      	movs	r0, #0
 8010f38:	60ac      	str	r4, [r5, #8]
 8010f3a:	b002      	add	sp, #8
 8010f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f40:	2000      	movs	r0, #0
 8010f42:	e7af      	b.n	8010ea4 <rcutils_string_map_reserve+0x20>
 8010f44:	200a      	movs	r0, #10
 8010f46:	e7ad      	b.n	8010ea4 <rcutils_string_map_reserve+0x20>
 8010f48:	200b      	movs	r0, #11
 8010f4a:	4770      	bx	lr
 8010f4c:	1f0b      	subs	r3, r1, #4
 8010f4e:	4418      	add	r0, r3
 8010f50:	4413      	add	r3, r2
 8010f52:	3a04      	subs	r2, #4
 8010f54:	4417      	add	r7, r2
 8010f56:	2200      	movs	r2, #0
 8010f58:	f843 2f04 	str.w	r2, [r3, #4]!
 8010f5c:	42bb      	cmp	r3, r7
 8010f5e:	f840 2f04 	str.w	r2, [r0, #4]!
 8010f62:	d1f9      	bne.n	8010f58 <rcutils_string_map_reserve+0xd4>
 8010f64:	e7e7      	b.n	8010f36 <rcutils_string_map_reserve+0xb2>
 8010f66:	bf00      	nop

08010f68 <rcutils_string_map_init>:
 8010f68:	b082      	sub	sp, #8
 8010f6a:	b570      	push	{r4, r5, r6, lr}
 8010f6c:	ac04      	add	r4, sp, #16
 8010f6e:	e884 000c 	stmia.w	r4, {r2, r3}
 8010f72:	b380      	cbz	r0, 8010fd6 <rcutils_string_map_init+0x6e>
 8010f74:	6806      	ldr	r6, [r0, #0]
 8010f76:	4604      	mov	r4, r0
 8010f78:	b12e      	cbz	r6, 8010f86 <rcutils_string_map_init+0x1e>
 8010f7a:	251e      	movs	r5, #30
 8010f7c:	4628      	mov	r0, r5
 8010f7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010f82:	b002      	add	sp, #8
 8010f84:	4770      	bx	lr
 8010f86:	a804      	add	r0, sp, #16
 8010f88:	460d      	mov	r5, r1
 8010f8a:	f7f9 fa05 	bl	800a398 <rcutils_allocator_is_valid>
 8010f8e:	b310      	cbz	r0, 8010fd6 <rcutils_string_map_init+0x6e>
 8010f90:	9b04      	ldr	r3, [sp, #16]
 8010f92:	9908      	ldr	r1, [sp, #32]
 8010f94:	2024      	movs	r0, #36	; 0x24
 8010f96:	4798      	blx	r3
 8010f98:	6020      	str	r0, [r4, #0]
 8010f9a:	b310      	cbz	r0, 8010fe2 <rcutils_string_map_init+0x7a>
 8010f9c:	f10d 0e10 	add.w	lr, sp, #16
 8010fa0:	e9c0 6600 	strd	r6, r6, [r0]
 8010fa4:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8010fa8:	f100 0c10 	add.w	ip, r0, #16
 8010fac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010fb0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010fb4:	f8de 3000 	ldr.w	r3, [lr]
 8010fb8:	f8cc 3000 	str.w	r3, [ip]
 8010fbc:	4629      	mov	r1, r5
 8010fbe:	4620      	mov	r0, r4
 8010fc0:	f7ff ff60 	bl	8010e84 <rcutils_string_map_reserve>
 8010fc4:	4605      	mov	r5, r0
 8010fc6:	2800      	cmp	r0, #0
 8010fc8:	d0d8      	beq.n	8010f7c <rcutils_string_map_init+0x14>
 8010fca:	9b05      	ldr	r3, [sp, #20]
 8010fcc:	9908      	ldr	r1, [sp, #32]
 8010fce:	6820      	ldr	r0, [r4, #0]
 8010fd0:	4798      	blx	r3
 8010fd2:	6026      	str	r6, [r4, #0]
 8010fd4:	e7d2      	b.n	8010f7c <rcutils_string_map_init+0x14>
 8010fd6:	250b      	movs	r5, #11
 8010fd8:	4628      	mov	r0, r5
 8010fda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010fde:	b002      	add	sp, #8
 8010fe0:	4770      	bx	lr
 8010fe2:	250a      	movs	r5, #10
 8010fe4:	e7ca      	b.n	8010f7c <rcutils_string_map_init+0x14>
 8010fe6:	bf00      	nop

08010fe8 <rcutils_string_map_fini>:
 8010fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fec:	b082      	sub	sp, #8
 8010fee:	2800      	cmp	r0, #0
 8010ff0:	d03a      	beq.n	8011068 <rcutils_string_map_fini+0x80>
 8010ff2:	6804      	ldr	r4, [r0, #0]
 8010ff4:	4606      	mov	r6, r0
 8010ff6:	2c00      	cmp	r4, #0
 8010ff8:	d032      	beq.n	8011060 <rcutils_string_map_fini+0x78>
 8010ffa:	68a3      	ldr	r3, [r4, #8]
 8010ffc:	b32b      	cbz	r3, 801104a <rcutils_string_map_fini+0x62>
 8010ffe:	2500      	movs	r5, #0
 8011000:	6822      	ldr	r2, [r4, #0]
 8011002:	462f      	mov	r7, r5
 8011004:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8011008:	b1e0      	cbz	r0, 8011044 <rcutils_string_map_fini+0x5c>
 801100a:	6a21      	ldr	r1, [r4, #32]
 801100c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8011010:	9101      	str	r1, [sp, #4]
 8011012:	47c0      	blx	r8
 8011014:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011018:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801101c:	9901      	ldr	r1, [sp, #4]
 801101e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011022:	47c0      	blx	r8
 8011024:	68e3      	ldr	r3, [r4, #12]
 8011026:	6862      	ldr	r2, [r4, #4]
 8011028:	3b01      	subs	r3, #1
 801102a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801102e:	60e3      	str	r3, [r4, #12]
 8011030:	6834      	ldr	r4, [r6, #0]
 8011032:	68a3      	ldr	r3, [r4, #8]
 8011034:	3501      	adds	r5, #1
 8011036:	429d      	cmp	r5, r3
 8011038:	d207      	bcs.n	801104a <rcutils_string_map_fini+0x62>
 801103a:	6822      	ldr	r2, [r4, #0]
 801103c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8011040:	2800      	cmp	r0, #0
 8011042:	d1e2      	bne.n	801100a <rcutils_string_map_fini+0x22>
 8011044:	3501      	adds	r5, #1
 8011046:	429d      	cmp	r5, r3
 8011048:	d3dc      	bcc.n	8011004 <rcutils_string_map_fini+0x1c>
 801104a:	2100      	movs	r1, #0
 801104c:	4630      	mov	r0, r6
 801104e:	f7ff ff19 	bl	8010e84 <rcutils_string_map_reserve>
 8011052:	4604      	mov	r4, r0
 8011054:	b920      	cbnz	r0, 8011060 <rcutils_string_map_fini+0x78>
 8011056:	6830      	ldr	r0, [r6, #0]
 8011058:	6943      	ldr	r3, [r0, #20]
 801105a:	6a01      	ldr	r1, [r0, #32]
 801105c:	4798      	blx	r3
 801105e:	6034      	str	r4, [r6, #0]
 8011060:	4620      	mov	r0, r4
 8011062:	b002      	add	sp, #8
 8011064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011068:	240b      	movs	r4, #11
 801106a:	4620      	mov	r0, r4
 801106c:	b002      	add	sp, #8
 801106e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011072:	bf00      	nop

08011074 <rcutils_string_map_getn>:
 8011074:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011078:	b300      	cbz	r0, 80110bc <rcutils_string_map_getn+0x48>
 801107a:	6807      	ldr	r7, [r0, #0]
 801107c:	b1ff      	cbz	r7, 80110be <rcutils_string_map_getn+0x4a>
 801107e:	4688      	mov	r8, r1
 8011080:	b1e1      	cbz	r1, 80110bc <rcutils_string_map_getn+0x48>
 8011082:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8011086:	683e      	ldr	r6, [r7, #0]
 8011088:	f1ba 0f00 	cmp.w	sl, #0
 801108c:	d016      	beq.n	80110bc <rcutils_string_map_getn+0x48>
 801108e:	4691      	mov	r9, r2
 8011090:	3e04      	subs	r6, #4
 8011092:	2400      	movs	r4, #0
 8011094:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8011098:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801109c:	4628      	mov	r0, r5
 801109e:	3401      	adds	r4, #1
 80110a0:	b155      	cbz	r5, 80110b8 <rcutils_string_map_getn+0x44>
 80110a2:	f7ef f8a7 	bl	80001f4 <strlen>
 80110a6:	4548      	cmp	r0, r9
 80110a8:	4602      	mov	r2, r0
 80110aa:	4629      	mov	r1, r5
 80110ac:	bf38      	it	cc
 80110ae:	464a      	movcc	r2, r9
 80110b0:	4640      	mov	r0, r8
 80110b2:	f004 f8ae 	bl	8015212 <strncmp>
 80110b6:	b128      	cbz	r0, 80110c4 <rcutils_string_map_getn+0x50>
 80110b8:	45a2      	cmp	sl, r4
 80110ba:	d1eb      	bne.n	8011094 <rcutils_string_map_getn+0x20>
 80110bc:	2700      	movs	r7, #0
 80110be:	4638      	mov	r0, r7
 80110c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	f853 700b 	ldr.w	r7, [r3, fp]
 80110ca:	4638      	mov	r0, r7
 80110cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080110d0 <rmw_get_zero_initialized_context>:
 80110d0:	b510      	push	{r4, lr}
 80110d2:	4604      	mov	r4, r0
 80110d4:	3010      	adds	r0, #16
 80110d6:	f000 f80b 	bl	80110f0 <rmw_get_zero_initialized_init_options>
 80110da:	2300      	movs	r3, #0
 80110dc:	2000      	movs	r0, #0
 80110de:	2100      	movs	r1, #0
 80110e0:	e9c4 0100 	strd	r0, r1, [r4]
 80110e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80110e8:	60a3      	str	r3, [r4, #8]
 80110ea:	4620      	mov	r0, r4
 80110ec:	bd10      	pop	{r4, pc}
 80110ee:	bf00      	nop

080110f0 <rmw_get_zero_initialized_init_options>:
 80110f0:	b510      	push	{r4, lr}
 80110f2:	2238      	movs	r2, #56	; 0x38
 80110f4:	4604      	mov	r4, r0
 80110f6:	2100      	movs	r1, #0
 80110f8:	f004 f876 	bl	80151e8 <memset>
 80110fc:	f104 0010 	add.w	r0, r4, #16
 8011100:	f000 f806 	bl	8011110 <rmw_get_default_security_options>
 8011104:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011108:	60e3      	str	r3, [r4, #12]
 801110a:	4620      	mov	r0, r4
 801110c:	bd10      	pop	{r4, pc}
 801110e:	bf00      	nop

08011110 <rmw_get_default_security_options>:
 8011110:	2200      	movs	r2, #0
 8011112:	7002      	strb	r2, [r0, #0]
 8011114:	6042      	str	r2, [r0, #4]
 8011116:	4770      	bx	lr

08011118 <rmw_subscription_content_filter_options_fini>:
 8011118:	b1b0      	cbz	r0, 8011148 <rmw_subscription_content_filter_options_fini+0x30>
 801111a:	b538      	push	{r3, r4, r5, lr}
 801111c:	4604      	mov	r4, r0
 801111e:	4608      	mov	r0, r1
 8011120:	460d      	mov	r5, r1
 8011122:	f7f9 f939 	bl	800a398 <rcutils_allocator_is_valid>
 8011126:	b168      	cbz	r0, 8011144 <rmw_subscription_content_filter_options_fini+0x2c>
 8011128:	6820      	ldr	r0, [r4, #0]
 801112a:	b120      	cbz	r0, 8011136 <rmw_subscription_content_filter_options_fini+0x1e>
 801112c:	686b      	ldr	r3, [r5, #4]
 801112e:	6929      	ldr	r1, [r5, #16]
 8011130:	4798      	blx	r3
 8011132:	2300      	movs	r3, #0
 8011134:	6023      	str	r3, [r4, #0]
 8011136:	1d20      	adds	r0, r4, #4
 8011138:	f003 fb56 	bl	80147e8 <rcutils_string_array_fini>
 801113c:	3800      	subs	r0, #0
 801113e:	bf18      	it	ne
 8011140:	2001      	movne	r0, #1
 8011142:	bd38      	pop	{r3, r4, r5, pc}
 8011144:	200b      	movs	r0, #11
 8011146:	bd38      	pop	{r3, r4, r5, pc}
 8011148:	200b      	movs	r0, #11
 801114a:	4770      	bx	lr

0801114c <rmw_get_default_subscription_options>:
 801114c:	2200      	movs	r2, #0
 801114e:	e9c0 2200 	strd	r2, r2, [r0]
 8011152:	6082      	str	r2, [r0, #8]
 8011154:	4770      	bx	lr
 8011156:	bf00      	nop

08011158 <rmw_time_equal>:
 8011158:	b4f0      	push	{r4, r5, r6, r7}
 801115a:	b084      	sub	sp, #16
 801115c:	ac04      	add	r4, sp, #16
 801115e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8011162:	4603      	mov	r3, r0
 8011164:	4924      	ldr	r1, [pc, #144]	; (80111f8 <rmw_time_equal+0xa0>)
 8011166:	9e03      	ldr	r6, [sp, #12]
 8011168:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801116c:	2202      	movs	r2, #2
 801116e:	4299      	cmp	r1, r3
 8011170:	41aa      	sbcs	r2, r5
 8011172:	d330      	bcc.n	80111d6 <rmw_time_equal+0x7e>
 8011174:	4c21      	ldr	r4, [pc, #132]	; (80111fc <rmw_time_equal+0xa4>)
 8011176:	fba3 3204 	umull	r3, r2, r3, r4
 801117a:	fb04 2205 	mla	r2, r4, r5, r2
 801117e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011182:	43dd      	mvns	r5, r3
 8011184:	1a8c      	subs	r4, r1, r2
 8011186:	4285      	cmp	r5, r0
 8011188:	41b4      	sbcs	r4, r6
 801118a:	d332      	bcc.n	80111f2 <rmw_time_equal+0x9a>
 801118c:	eb10 0c03 	adds.w	ip, r0, r3
 8011190:	eb42 0106 	adc.w	r1, r2, r6
 8011194:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8011198:	4817      	ldr	r0, [pc, #92]	; (80111f8 <rmw_time_equal+0xa0>)
 801119a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801119c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801119e:	2202      	movs	r2, #2
 80111a0:	4298      	cmp	r0, r3
 80111a2:	41b2      	sbcs	r2, r6
 80111a4:	d31c      	bcc.n	80111e0 <rmw_time_equal+0x88>
 80111a6:	4c15      	ldr	r4, [pc, #84]	; (80111fc <rmw_time_equal+0xa4>)
 80111a8:	fba3 3204 	umull	r3, r2, r3, r4
 80111ac:	fb04 2206 	mla	r2, r4, r6, r2
 80111b0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80111b4:	43de      	mvns	r6, r3
 80111b6:	1a84      	subs	r4, r0, r2
 80111b8:	42ae      	cmp	r6, r5
 80111ba:	41bc      	sbcs	r4, r7
 80111bc:	d315      	bcc.n	80111ea <rmw_time_equal+0x92>
 80111be:	195b      	adds	r3, r3, r5
 80111c0:	eb42 0207 	adc.w	r2, r2, r7
 80111c4:	428a      	cmp	r2, r1
 80111c6:	bf08      	it	eq
 80111c8:	4563      	cmpeq	r3, ip
 80111ca:	bf0c      	ite	eq
 80111cc:	2001      	moveq	r0, #1
 80111ce:	2000      	movne	r0, #0
 80111d0:	b004      	add	sp, #16
 80111d2:	bcf0      	pop	{r4, r5, r6, r7}
 80111d4:	4770      	bx	lr
 80111d6:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80111da:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80111de:	e7d9      	b.n	8011194 <rmw_time_equal+0x3c>
 80111e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80111e4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80111e8:	e7ec      	b.n	80111c4 <rmw_time_equal+0x6c>
 80111ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80111ee:	4602      	mov	r2, r0
 80111f0:	e7e8      	b.n	80111c4 <rmw_time_equal+0x6c>
 80111f2:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80111f6:	e7cd      	b.n	8011194 <rmw_time_equal+0x3c>
 80111f8:	25c17d04 	.word	0x25c17d04
 80111fc:	3b9aca00 	.word	0x3b9aca00

08011200 <rmw_time_total_nsec>:
 8011200:	b470      	push	{r4, r5, r6}
 8011202:	b085      	sub	sp, #20
 8011204:	ac04      	add	r4, sp, #16
 8011206:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801120a:	4603      	mov	r3, r0
 801120c:	4912      	ldr	r1, [pc, #72]	; (8011258 <rmw_time_total_nsec+0x58>)
 801120e:	9e03      	ldr	r6, [sp, #12]
 8011210:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8011214:	2202      	movs	r2, #2
 8011216:	4299      	cmp	r1, r3
 8011218:	41aa      	sbcs	r2, r5
 801121a:	d311      	bcc.n	8011240 <rmw_time_total_nsec+0x40>
 801121c:	4c0f      	ldr	r4, [pc, #60]	; (801125c <rmw_time_total_nsec+0x5c>)
 801121e:	fba3 3204 	umull	r3, r2, r3, r4
 8011222:	fb04 2205 	mla	r2, r4, r5, r2
 8011226:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801122a:	43dd      	mvns	r5, r3
 801122c:	1a8c      	subs	r4, r1, r2
 801122e:	4285      	cmp	r5, r0
 8011230:	41b4      	sbcs	r4, r6
 8011232:	d30c      	bcc.n	801124e <rmw_time_total_nsec+0x4e>
 8011234:	1818      	adds	r0, r3, r0
 8011236:	eb42 0106 	adc.w	r1, r2, r6
 801123a:	b005      	add	sp, #20
 801123c:	bc70      	pop	{r4, r5, r6}
 801123e:	4770      	bx	lr
 8011240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011244:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011248:	b005      	add	sp, #20
 801124a:	bc70      	pop	{r4, r5, r6}
 801124c:	4770      	bx	lr
 801124e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011252:	b005      	add	sp, #20
 8011254:	bc70      	pop	{r4, r5, r6}
 8011256:	4770      	bx	lr
 8011258:	25c17d04 	.word	0x25c17d04
 801125c:	3b9aca00 	.word	0x3b9aca00

08011260 <rmw_get_zero_initialized_message_info>:
 8011260:	b510      	push	{r4, lr}
 8011262:	2240      	movs	r2, #64	; 0x40
 8011264:	4604      	mov	r4, r0
 8011266:	2100      	movs	r1, #0
 8011268:	f003 ffbe 	bl	80151e8 <memset>
 801126c:	4620      	mov	r0, r4
 801126e:	bd10      	pop	{r4, pc}

08011270 <rmw_validate_full_topic_name>:
 8011270:	2800      	cmp	r0, #0
 8011272:	d057      	beq.n	8011324 <rmw_validate_full_topic_name+0xb4>
 8011274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011278:	460d      	mov	r5, r1
 801127a:	2900      	cmp	r1, #0
 801127c:	d054      	beq.n	8011328 <rmw_validate_full_topic_name+0xb8>
 801127e:	4616      	mov	r6, r2
 8011280:	4604      	mov	r4, r0
 8011282:	f7ee ffb7 	bl	80001f4 <strlen>
 8011286:	b148      	cbz	r0, 801129c <rmw_validate_full_topic_name+0x2c>
 8011288:	7823      	ldrb	r3, [r4, #0]
 801128a:	2b2f      	cmp	r3, #47	; 0x2f
 801128c:	d00d      	beq.n	80112aa <rmw_validate_full_topic_name+0x3a>
 801128e:	2302      	movs	r3, #2
 8011290:	602b      	str	r3, [r5, #0]
 8011292:	b13e      	cbz	r6, 80112a4 <rmw_validate_full_topic_name+0x34>
 8011294:	2000      	movs	r0, #0
 8011296:	6030      	str	r0, [r6, #0]
 8011298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801129c:	2301      	movs	r3, #1
 801129e:	602b      	str	r3, [r5, #0]
 80112a0:	2e00      	cmp	r6, #0
 80112a2:	d1f7      	bne.n	8011294 <rmw_validate_full_topic_name+0x24>
 80112a4:	2000      	movs	r0, #0
 80112a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112aa:	1e43      	subs	r3, r0, #1
 80112ac:	5ce2      	ldrb	r2, [r4, r3]
 80112ae:	2a2f      	cmp	r2, #47	; 0x2f
 80112b0:	d03c      	beq.n	801132c <rmw_validate_full_topic_name+0xbc>
 80112b2:	1e63      	subs	r3, r4, #1
 80112b4:	eb03 0800 	add.w	r8, r3, r0
 80112b8:	f1c4 0e01 	rsb	lr, r4, #1
 80112bc:	eb0e 0703 	add.w	r7, lr, r3
 80112c0:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80112c4:	f021 0220 	bic.w	r2, r1, #32
 80112c8:	3a41      	subs	r2, #65	; 0x41
 80112ca:	2a19      	cmp	r2, #25
 80112cc:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 80112d0:	d90b      	bls.n	80112ea <rmw_validate_full_topic_name+0x7a>
 80112d2:	295f      	cmp	r1, #95	; 0x5f
 80112d4:	d009      	beq.n	80112ea <rmw_validate_full_topic_name+0x7a>
 80112d6:	f1bc 0f0a 	cmp.w	ip, #10
 80112da:	d906      	bls.n	80112ea <rmw_validate_full_topic_name+0x7a>
 80112dc:	2304      	movs	r3, #4
 80112de:	602b      	str	r3, [r5, #0]
 80112e0:	2e00      	cmp	r6, #0
 80112e2:	d0df      	beq.n	80112a4 <rmw_validate_full_topic_name+0x34>
 80112e4:	6037      	str	r7, [r6, #0]
 80112e6:	2000      	movs	r0, #0
 80112e8:	e7d6      	b.n	8011298 <rmw_validate_full_topic_name+0x28>
 80112ea:	4543      	cmp	r3, r8
 80112ec:	d1e6      	bne.n	80112bc <rmw_validate_full_topic_name+0x4c>
 80112ee:	4f1a      	ldr	r7, [pc, #104]	; (8011358 <rmw_validate_full_topic_name+0xe8>)
 80112f0:	2301      	movs	r3, #1
 80112f2:	e004      	b.n	80112fe <rmw_validate_full_topic_name+0x8e>
 80112f4:	4298      	cmp	r0, r3
 80112f6:	f104 0401 	add.w	r4, r4, #1
 80112fa:	d91c      	bls.n	8011336 <rmw_validate_full_topic_name+0xc6>
 80112fc:	4613      	mov	r3, r2
 80112fe:	4298      	cmp	r0, r3
 8011300:	f103 0201 	add.w	r2, r3, #1
 8011304:	d0f6      	beq.n	80112f4 <rmw_validate_full_topic_name+0x84>
 8011306:	7821      	ldrb	r1, [r4, #0]
 8011308:	292f      	cmp	r1, #47	; 0x2f
 801130a:	d1f3      	bne.n	80112f4 <rmw_validate_full_topic_name+0x84>
 801130c:	7861      	ldrb	r1, [r4, #1]
 801130e:	292f      	cmp	r1, #47	; 0x2f
 8011310:	d01c      	beq.n	801134c <rmw_validate_full_topic_name+0xdc>
 8011312:	5dc9      	ldrb	r1, [r1, r7]
 8011314:	0749      	lsls	r1, r1, #29
 8011316:	d5ed      	bpl.n	80112f4 <rmw_validate_full_topic_name+0x84>
 8011318:	2206      	movs	r2, #6
 801131a:	602a      	str	r2, [r5, #0]
 801131c:	2e00      	cmp	r6, #0
 801131e:	d0c1      	beq.n	80112a4 <rmw_validate_full_topic_name+0x34>
 8011320:	6033      	str	r3, [r6, #0]
 8011322:	e7bf      	b.n	80112a4 <rmw_validate_full_topic_name+0x34>
 8011324:	200b      	movs	r0, #11
 8011326:	4770      	bx	lr
 8011328:	200b      	movs	r0, #11
 801132a:	e7b5      	b.n	8011298 <rmw_validate_full_topic_name+0x28>
 801132c:	2203      	movs	r2, #3
 801132e:	602a      	str	r2, [r5, #0]
 8011330:	2e00      	cmp	r6, #0
 8011332:	d1f5      	bne.n	8011320 <rmw_validate_full_topic_name+0xb0>
 8011334:	e7b6      	b.n	80112a4 <rmw_validate_full_topic_name+0x34>
 8011336:	28f7      	cmp	r0, #247	; 0xf7
 8011338:	d802      	bhi.n	8011340 <rmw_validate_full_topic_name+0xd0>
 801133a:	2000      	movs	r0, #0
 801133c:	6028      	str	r0, [r5, #0]
 801133e:	e7ab      	b.n	8011298 <rmw_validate_full_topic_name+0x28>
 8011340:	2307      	movs	r3, #7
 8011342:	602b      	str	r3, [r5, #0]
 8011344:	2e00      	cmp	r6, #0
 8011346:	d0ad      	beq.n	80112a4 <rmw_validate_full_topic_name+0x34>
 8011348:	23f6      	movs	r3, #246	; 0xf6
 801134a:	e7e9      	b.n	8011320 <rmw_validate_full_topic_name+0xb0>
 801134c:	2205      	movs	r2, #5
 801134e:	602a      	str	r2, [r5, #0]
 8011350:	2e00      	cmp	r6, #0
 8011352:	d1e5      	bne.n	8011320 <rmw_validate_full_topic_name+0xb0>
 8011354:	e7a6      	b.n	80112a4 <rmw_validate_full_topic_name+0x34>
 8011356:	bf00      	nop
 8011358:	08017034 	.word	0x08017034

0801135c <rmw_validate_namespace_with_size>:
 801135c:	b340      	cbz	r0, 80113b0 <rmw_validate_namespace_with_size+0x54>
 801135e:	b570      	push	{r4, r5, r6, lr}
 8011360:	4614      	mov	r4, r2
 8011362:	b0c2      	sub	sp, #264	; 0x108
 8011364:	b332      	cbz	r2, 80113b4 <rmw_validate_namespace_with_size+0x58>
 8011366:	2901      	cmp	r1, #1
 8011368:	460d      	mov	r5, r1
 801136a:	461e      	mov	r6, r3
 801136c:	d102      	bne.n	8011374 <rmw_validate_namespace_with_size+0x18>
 801136e:	7803      	ldrb	r3, [r0, #0]
 8011370:	2b2f      	cmp	r3, #47	; 0x2f
 8011372:	d012      	beq.n	801139a <rmw_validate_namespace_with_size+0x3e>
 8011374:	aa01      	add	r2, sp, #4
 8011376:	4669      	mov	r1, sp
 8011378:	f7ff ff7a 	bl	8011270 <rmw_validate_full_topic_name>
 801137c:	b978      	cbnz	r0, 801139e <rmw_validate_namespace_with_size+0x42>
 801137e:	9b00      	ldr	r3, [sp, #0]
 8011380:	b14b      	cbz	r3, 8011396 <rmw_validate_namespace_with_size+0x3a>
 8011382:	2b07      	cmp	r3, #7
 8011384:	d007      	beq.n	8011396 <rmw_validate_namespace_with_size+0x3a>
 8011386:	1e5a      	subs	r2, r3, #1
 8011388:	2a05      	cmp	r2, #5
 801138a:	d82b      	bhi.n	80113e4 <rmw_validate_namespace_with_size+0x88>
 801138c:	e8df f002 	tbb	[pc, r2]
 8011390:	1e212427 	.word	0x1e212427
 8011394:	141b      	.short	0x141b
 8011396:	2df5      	cmp	r5, #245	; 0xf5
 8011398:	d803      	bhi.n	80113a2 <rmw_validate_namespace_with_size+0x46>
 801139a:	2000      	movs	r0, #0
 801139c:	6020      	str	r0, [r4, #0]
 801139e:	b042      	add	sp, #264	; 0x108
 80113a0:	bd70      	pop	{r4, r5, r6, pc}
 80113a2:	2307      	movs	r3, #7
 80113a4:	6023      	str	r3, [r4, #0]
 80113a6:	2e00      	cmp	r6, #0
 80113a8:	d0f9      	beq.n	801139e <rmw_validate_namespace_with_size+0x42>
 80113aa:	23f4      	movs	r3, #244	; 0xf4
 80113ac:	6033      	str	r3, [r6, #0]
 80113ae:	e7f6      	b.n	801139e <rmw_validate_namespace_with_size+0x42>
 80113b0:	200b      	movs	r0, #11
 80113b2:	4770      	bx	lr
 80113b4:	200b      	movs	r0, #11
 80113b6:	e7f2      	b.n	801139e <rmw_validate_namespace_with_size+0x42>
 80113b8:	2306      	movs	r3, #6
 80113ba:	6023      	str	r3, [r4, #0]
 80113bc:	2e00      	cmp	r6, #0
 80113be:	d0ee      	beq.n	801139e <rmw_validate_namespace_with_size+0x42>
 80113c0:	9b01      	ldr	r3, [sp, #4]
 80113c2:	6033      	str	r3, [r6, #0]
 80113c4:	e7eb      	b.n	801139e <rmw_validate_namespace_with_size+0x42>
 80113c6:	2305      	movs	r3, #5
 80113c8:	6023      	str	r3, [r4, #0]
 80113ca:	e7f7      	b.n	80113bc <rmw_validate_namespace_with_size+0x60>
 80113cc:	2304      	movs	r3, #4
 80113ce:	6023      	str	r3, [r4, #0]
 80113d0:	e7f4      	b.n	80113bc <rmw_validate_namespace_with_size+0x60>
 80113d2:	2303      	movs	r3, #3
 80113d4:	6023      	str	r3, [r4, #0]
 80113d6:	e7f1      	b.n	80113bc <rmw_validate_namespace_with_size+0x60>
 80113d8:	2302      	movs	r3, #2
 80113da:	6023      	str	r3, [r4, #0]
 80113dc:	e7ee      	b.n	80113bc <rmw_validate_namespace_with_size+0x60>
 80113de:	2301      	movs	r3, #1
 80113e0:	6023      	str	r3, [r4, #0]
 80113e2:	e7eb      	b.n	80113bc <rmw_validate_namespace_with_size+0x60>
 80113e4:	4a03      	ldr	r2, [pc, #12]	; (80113f4 <rmw_validate_namespace_with_size+0x98>)
 80113e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80113ea:	a802      	add	r0, sp, #8
 80113ec:	f7ff fcda 	bl	8010da4 <rcutils_snprintf>
 80113f0:	2001      	movs	r0, #1
 80113f2:	e7d4      	b.n	801139e <rmw_validate_namespace_with_size+0x42>
 80113f4:	08016a5c 	.word	0x08016a5c

080113f8 <rmw_validate_namespace>:
 80113f8:	b168      	cbz	r0, 8011416 <rmw_validate_namespace+0x1e>
 80113fa:	b570      	push	{r4, r5, r6, lr}
 80113fc:	460d      	mov	r5, r1
 80113fe:	4616      	mov	r6, r2
 8011400:	4604      	mov	r4, r0
 8011402:	f7ee fef7 	bl	80001f4 <strlen>
 8011406:	4633      	mov	r3, r6
 8011408:	4601      	mov	r1, r0
 801140a:	462a      	mov	r2, r5
 801140c:	4620      	mov	r0, r4
 801140e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011412:	f7ff bfa3 	b.w	801135c <rmw_validate_namespace_with_size>
 8011416:	200b      	movs	r0, #11
 8011418:	4770      	bx	lr
 801141a:	bf00      	nop

0801141c <rmw_namespace_validation_result_string>:
 801141c:	2807      	cmp	r0, #7
 801141e:	bf9a      	itte	ls
 8011420:	4b02      	ldrls	r3, [pc, #8]	; (801142c <rmw_namespace_validation_result_string+0x10>)
 8011422:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8011426:	4802      	ldrhi	r0, [pc, #8]	; (8011430 <rmw_namespace_validation_result_string+0x14>)
 8011428:	4770      	bx	lr
 801142a:	bf00      	nop
 801142c:	08016c54 	.word	0x08016c54
 8011430:	08016aac 	.word	0x08016aac

08011434 <rmw_validate_node_name>:
 8011434:	2800      	cmp	r0, #0
 8011436:	d03b      	beq.n	80114b0 <rmw_validate_node_name+0x7c>
 8011438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801143c:	460d      	mov	r5, r1
 801143e:	2900      	cmp	r1, #0
 8011440:	d038      	beq.n	80114b4 <rmw_validate_node_name+0x80>
 8011442:	4616      	mov	r6, r2
 8011444:	4604      	mov	r4, r0
 8011446:	f7ee fed5 	bl	80001f4 <strlen>
 801144a:	b1e0      	cbz	r0, 8011486 <rmw_validate_node_name+0x52>
 801144c:	1e63      	subs	r3, r4, #1
 801144e:	eb03 0800 	add.w	r8, r3, r0
 8011452:	f1c4 0101 	rsb	r1, r4, #1
 8011456:	18cf      	adds	r7, r1, r3
 8011458:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801145c:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 8011460:	f02e 0c20 	bic.w	ip, lr, #32
 8011464:	2a09      	cmp	r2, #9
 8011466:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 801146a:	d914      	bls.n	8011496 <rmw_validate_node_name+0x62>
 801146c:	f1bc 0f19 	cmp.w	ip, #25
 8011470:	d911      	bls.n	8011496 <rmw_validate_node_name+0x62>
 8011472:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 8011476:	d00e      	beq.n	8011496 <rmw_validate_node_name+0x62>
 8011478:	2302      	movs	r3, #2
 801147a:	602b      	str	r3, [r5, #0]
 801147c:	b106      	cbz	r6, 8011480 <rmw_validate_node_name+0x4c>
 801147e:	6037      	str	r7, [r6, #0]
 8011480:	2000      	movs	r0, #0
 8011482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011486:	2301      	movs	r3, #1
 8011488:	602b      	str	r3, [r5, #0]
 801148a:	2e00      	cmp	r6, #0
 801148c:	d0f8      	beq.n	8011480 <rmw_validate_node_name+0x4c>
 801148e:	2000      	movs	r0, #0
 8011490:	6030      	str	r0, [r6, #0]
 8011492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011496:	4543      	cmp	r3, r8
 8011498:	d1dd      	bne.n	8011456 <rmw_validate_node_name+0x22>
 801149a:	7822      	ldrb	r2, [r4, #0]
 801149c:	4b0d      	ldr	r3, [pc, #52]	; (80114d4 <rmw_validate_node_name+0xa0>)
 801149e:	5cd3      	ldrb	r3, [r2, r3]
 80114a0:	f013 0304 	ands.w	r3, r3, #4
 80114a4:	d110      	bne.n	80114c8 <rmw_validate_node_name+0x94>
 80114a6:	28ff      	cmp	r0, #255	; 0xff
 80114a8:	d806      	bhi.n	80114b8 <rmw_validate_node_name+0x84>
 80114aa:	602b      	str	r3, [r5, #0]
 80114ac:	4618      	mov	r0, r3
 80114ae:	e7e8      	b.n	8011482 <rmw_validate_node_name+0x4e>
 80114b0:	200b      	movs	r0, #11
 80114b2:	4770      	bx	lr
 80114b4:	200b      	movs	r0, #11
 80114b6:	e7e4      	b.n	8011482 <rmw_validate_node_name+0x4e>
 80114b8:	2204      	movs	r2, #4
 80114ba:	602a      	str	r2, [r5, #0]
 80114bc:	2e00      	cmp	r6, #0
 80114be:	d0df      	beq.n	8011480 <rmw_validate_node_name+0x4c>
 80114c0:	22fe      	movs	r2, #254	; 0xfe
 80114c2:	6032      	str	r2, [r6, #0]
 80114c4:	4618      	mov	r0, r3
 80114c6:	e7dc      	b.n	8011482 <rmw_validate_node_name+0x4e>
 80114c8:	2303      	movs	r3, #3
 80114ca:	602b      	str	r3, [r5, #0]
 80114cc:	2e00      	cmp	r6, #0
 80114ce:	d1de      	bne.n	801148e <rmw_validate_node_name+0x5a>
 80114d0:	e7d6      	b.n	8011480 <rmw_validate_node_name+0x4c>
 80114d2:	bf00      	nop
 80114d4:	08017034 	.word	0x08017034

080114d8 <rmw_node_name_validation_result_string>:
 80114d8:	2804      	cmp	r0, #4
 80114da:	bf9a      	itte	ls
 80114dc:	4b02      	ldrls	r3, [pc, #8]	; (80114e8 <rmw_node_name_validation_result_string+0x10>)
 80114de:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80114e2:	4802      	ldrhi	r0, [pc, #8]	; (80114ec <rmw_node_name_validation_result_string+0x14>)
 80114e4:	4770      	bx	lr
 80114e6:	bf00      	nop
 80114e8:	08016d60 	.word	0x08016d60
 80114ec:	08016c74 	.word	0x08016c74

080114f0 <get_memory>:
 80114f0:	4603      	mov	r3, r0
 80114f2:	6840      	ldr	r0, [r0, #4]
 80114f4:	b158      	cbz	r0, 801150e <get_memory+0x1e>
 80114f6:	6842      	ldr	r2, [r0, #4]
 80114f8:	605a      	str	r2, [r3, #4]
 80114fa:	b10a      	cbz	r2, 8011500 <get_memory+0x10>
 80114fc:	2100      	movs	r1, #0
 80114fe:	6011      	str	r1, [r2, #0]
 8011500:	681a      	ldr	r2, [r3, #0]
 8011502:	6042      	str	r2, [r0, #4]
 8011504:	b102      	cbz	r2, 8011508 <get_memory+0x18>
 8011506:	6010      	str	r0, [r2, #0]
 8011508:	2200      	movs	r2, #0
 801150a:	6002      	str	r2, [r0, #0]
 801150c:	6018      	str	r0, [r3, #0]
 801150e:	4770      	bx	lr

08011510 <put_memory>:
 8011510:	680b      	ldr	r3, [r1, #0]
 8011512:	b10b      	cbz	r3, 8011518 <put_memory+0x8>
 8011514:	684a      	ldr	r2, [r1, #4]
 8011516:	605a      	str	r2, [r3, #4]
 8011518:	684a      	ldr	r2, [r1, #4]
 801151a:	b102      	cbz	r2, 801151e <put_memory+0xe>
 801151c:	6013      	str	r3, [r2, #0]
 801151e:	6803      	ldr	r3, [r0, #0]
 8011520:	428b      	cmp	r3, r1
 8011522:	6843      	ldr	r3, [r0, #4]
 8011524:	bf08      	it	eq
 8011526:	6002      	streq	r2, [r0, #0]
 8011528:	604b      	str	r3, [r1, #4]
 801152a:	b103      	cbz	r3, 801152e <put_memory+0x1e>
 801152c:	6019      	str	r1, [r3, #0]
 801152e:	2300      	movs	r3, #0
 8011530:	600b      	str	r3, [r1, #0]
 8011532:	6041      	str	r1, [r0, #4]
 8011534:	4770      	bx	lr
 8011536:	bf00      	nop

08011538 <rmw_destroy_client>:
 8011538:	b570      	push	{r4, r5, r6, lr}
 801153a:	b128      	cbz	r0, 8011548 <rmw_destroy_client+0x10>
 801153c:	4604      	mov	r4, r0
 801153e:	6800      	ldr	r0, [r0, #0]
 8011540:	460d      	mov	r5, r1
 8011542:	f7f9 fd73 	bl	800b02c <is_uxrce_rmw_identifier_valid>
 8011546:	b910      	cbnz	r0, 801154e <rmw_destroy_client+0x16>
 8011548:	2401      	movs	r4, #1
 801154a:	4620      	mov	r0, r4
 801154c:	bd70      	pop	{r4, r5, r6, pc}
 801154e:	6863      	ldr	r3, [r4, #4]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d0f9      	beq.n	8011548 <rmw_destroy_client+0x10>
 8011554:	2d00      	cmp	r5, #0
 8011556:	d0f7      	beq.n	8011548 <rmw_destroy_client+0x10>
 8011558:	6828      	ldr	r0, [r5, #0]
 801155a:	f7f9 fd67 	bl	800b02c <is_uxrce_rmw_identifier_valid>
 801155e:	2800      	cmp	r0, #0
 8011560:	d0f2      	beq.n	8011548 <rmw_destroy_client+0x10>
 8011562:	686e      	ldr	r6, [r5, #4]
 8011564:	2e00      	cmp	r6, #0
 8011566:	d0ef      	beq.n	8011548 <rmw_destroy_client+0x10>
 8011568:	6864      	ldr	r4, [r4, #4]
 801156a:	6932      	ldr	r2, [r6, #16]
 801156c:	6920      	ldr	r0, [r4, #16]
 801156e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8011572:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011576:	6819      	ldr	r1, [r3, #0]
 8011578:	f002 f924 	bl	80137c4 <uxr_buffer_cancel_data>
 801157c:	4602      	mov	r2, r0
 801157e:	6920      	ldr	r0, [r4, #16]
 8011580:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8011584:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8011588:	f7f9 fcd0 	bl	800af2c <run_xrce_session>
 801158c:	6920      	ldr	r0, [r4, #16]
 801158e:	6932      	ldr	r2, [r6, #16]
 8011590:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8011594:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011598:	6819      	ldr	r1, [r3, #0]
 801159a:	f7f9 fe1d 	bl	800b1d8 <uxr_buffer_delete_entity>
 801159e:	4602      	mov	r2, r0
 80115a0:	6920      	ldr	r0, [r4, #16]
 80115a2:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80115a6:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80115aa:	f7f9 fcbf 	bl	800af2c <run_xrce_session>
 80115ae:	2800      	cmp	r0, #0
 80115b0:	4628      	mov	r0, r5
 80115b2:	bf14      	ite	ne
 80115b4:	2400      	movne	r4, #0
 80115b6:	2402      	moveq	r4, #2
 80115b8:	f7f9 fba0 	bl	800acfc <rmw_uxrce_fini_client_memory>
 80115bc:	e7c5      	b.n	801154a <rmw_destroy_client+0x12>
 80115be:	bf00      	nop

080115c0 <rmw_get_implementation_identifier>:
 80115c0:	4b01      	ldr	r3, [pc, #4]	; (80115c8 <rmw_get_implementation_identifier+0x8>)
 80115c2:	6818      	ldr	r0, [r3, #0]
 80115c4:	4770      	bx	lr
 80115c6:	bf00      	nop
 80115c8:	08016d8c 	.word	0x08016d8c

080115cc <rmw_create_guard_condition>:
 80115cc:	b538      	push	{r3, r4, r5, lr}
 80115ce:	4605      	mov	r5, r0
 80115d0:	4807      	ldr	r0, [pc, #28]	; (80115f0 <rmw_create_guard_condition+0x24>)
 80115d2:	f7ff ff8d 	bl	80114f0 <get_memory>
 80115d6:	b148      	cbz	r0, 80115ec <rmw_create_guard_condition+0x20>
 80115d8:	6884      	ldr	r4, [r0, #8]
 80115da:	2300      	movs	r3, #0
 80115dc:	7423      	strb	r3, [r4, #16]
 80115de:	61e5      	str	r5, [r4, #28]
 80115e0:	f7ff ffee 	bl	80115c0 <rmw_get_implementation_identifier>
 80115e4:	e9c4 0405 	strd	r0, r4, [r4, #20]
 80115e8:	f104 0014 	add.w	r0, r4, #20
 80115ec:	bd38      	pop	{r3, r4, r5, pc}
 80115ee:	bf00      	nop
 80115f0:	2000dbac 	.word	0x2000dbac

080115f4 <rmw_destroy_guard_condition>:
 80115f4:	b508      	push	{r3, lr}
 80115f6:	4b08      	ldr	r3, [pc, #32]	; (8011618 <rmw_destroy_guard_condition+0x24>)
 80115f8:	6819      	ldr	r1, [r3, #0]
 80115fa:	b911      	cbnz	r1, 8011602 <rmw_destroy_guard_condition+0xe>
 80115fc:	e00a      	b.n	8011614 <rmw_destroy_guard_condition+0x20>
 80115fe:	6849      	ldr	r1, [r1, #4]
 8011600:	b141      	cbz	r1, 8011614 <rmw_destroy_guard_condition+0x20>
 8011602:	688b      	ldr	r3, [r1, #8]
 8011604:	3314      	adds	r3, #20
 8011606:	4298      	cmp	r0, r3
 8011608:	d1f9      	bne.n	80115fe <rmw_destroy_guard_condition+0xa>
 801160a:	4803      	ldr	r0, [pc, #12]	; (8011618 <rmw_destroy_guard_condition+0x24>)
 801160c:	f7ff ff80 	bl	8011510 <put_memory>
 8011610:	2000      	movs	r0, #0
 8011612:	bd08      	pop	{r3, pc}
 8011614:	2001      	movs	r0, #1
 8011616:	bd08      	pop	{r3, pc}
 8011618:	2000dbac 	.word	0x2000dbac

0801161c <rmw_init_options_init>:
 801161c:	b084      	sub	sp, #16
 801161e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011620:	b083      	sub	sp, #12
 8011622:	ad09      	add	r5, sp, #36	; 0x24
 8011624:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8011628:	b130      	cbz	r0, 8011638 <rmw_init_options_init+0x1c>
 801162a:	4604      	mov	r4, r0
 801162c:	4628      	mov	r0, r5
 801162e:	f7f8 feb3 	bl	800a398 <rcutils_allocator_is_valid>
 8011632:	b108      	cbz	r0, 8011638 <rmw_init_options_init+0x1c>
 8011634:	68a6      	ldr	r6, [r4, #8]
 8011636:	b12e      	cbz	r6, 8011644 <rmw_init_options_init+0x28>
 8011638:	200b      	movs	r0, #11
 801163a:	b003      	add	sp, #12
 801163c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011640:	b004      	add	sp, #16
 8011642:	4770      	bx	lr
 8011644:	2200      	movs	r2, #0
 8011646:	2300      	movs	r3, #0
 8011648:	e9c4 2300 	strd	r2, r3, [r4]
 801164c:	4b22      	ldr	r3, [pc, #136]	; (80116d8 <rmw_init_options_init+0xbc>)
 801164e:	f8df e098 	ldr.w	lr, [pc, #152]	; 80116e8 <rmw_init_options_init+0xcc>
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	60a3      	str	r3, [r4, #8]
 8011656:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011658:	f104 0c20 	add.w	ip, r4, #32
 801165c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011660:	466f      	mov	r7, sp
 8011662:	682b      	ldr	r3, [r5, #0]
 8011664:	f8cc 3000 	str.w	r3, [ip]
 8011668:	4638      	mov	r0, r7
 801166a:	f8c4 e01c 	str.w	lr, [r4, #28]
 801166e:	60e6      	str	r6, [r4, #12]
 8011670:	f7ff fd4e 	bl	8011110 <rmw_get_default_security_options>
 8011674:	e897 0003 	ldmia.w	r7, {r0, r1}
 8011678:	f104 0310 	add.w	r3, r4, #16
 801167c:	e883 0003 	stmia.w	r3, {r0, r1}
 8011680:	2203      	movs	r2, #3
 8011682:	4816      	ldr	r0, [pc, #88]	; (80116dc <rmw_init_options_init+0xc0>)
 8011684:	4916      	ldr	r1, [pc, #88]	; (80116e0 <rmw_init_options_init+0xc4>)
 8011686:	7626      	strb	r6, [r4, #24]
 8011688:	f7f9 fa78 	bl	800ab7c <rmw_uxrce_init_init_options_impl_memory>
 801168c:	4813      	ldr	r0, [pc, #76]	; (80116dc <rmw_init_options_init+0xc0>)
 801168e:	f7ff ff2f 	bl	80114f0 <get_memory>
 8011692:	b1f0      	cbz	r0, 80116d2 <rmw_init_options_init+0xb6>
 8011694:	4a13      	ldr	r2, [pc, #76]	; (80116e4 <rmw_init_options_init+0xc8>)
 8011696:	6883      	ldr	r3, [r0, #8]
 8011698:	6851      	ldr	r1, [r2, #4]
 801169a:	7810      	ldrb	r0, [r2, #0]
 801169c:	6363      	str	r3, [r4, #52]	; 0x34
 801169e:	7418      	strb	r0, [r3, #16]
 80116a0:	6159      	str	r1, [r3, #20]
 80116a2:	68d1      	ldr	r1, [r2, #12]
 80116a4:	61d9      	str	r1, [r3, #28]
 80116a6:	6911      	ldr	r1, [r2, #16]
 80116a8:	6219      	str	r1, [r3, #32]
 80116aa:	6951      	ldr	r1, [r2, #20]
 80116ac:	6892      	ldr	r2, [r2, #8]
 80116ae:	619a      	str	r2, [r3, #24]
 80116b0:	6259      	str	r1, [r3, #36]	; 0x24
 80116b2:	f7fb f9ed 	bl	800ca90 <uxr_nanos>
 80116b6:	f003 fac9 	bl	8014c4c <srand>
 80116ba:	f003 faf5 	bl	8014ca8 <rand>
 80116be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80116c0:	6298      	str	r0, [r3, #40]	; 0x28
 80116c2:	2800      	cmp	r0, #0
 80116c4:	d0f9      	beq.n	80116ba <rmw_init_options_init+0x9e>
 80116c6:	2000      	movs	r0, #0
 80116c8:	b003      	add	sp, #12
 80116ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80116ce:	b004      	add	sp, #16
 80116d0:	4770      	bx	lr
 80116d2:	2001      	movs	r0, #1
 80116d4:	e7b1      	b.n	801163a <rmw_init_options_init+0x1e>
 80116d6:	bf00      	nop
 80116d8:	08016d8c 	.word	0x08016d8c
 80116dc:	2000dbbc 	.word	0x2000dbbc
 80116e0:	20009458 	.word	0x20009458
 80116e4:	200092e4 	.word	0x200092e4
 80116e8:	080167f4 	.word	0x080167f4

080116ec <rmw_init_options_copy>:
 80116ec:	b570      	push	{r4, r5, r6, lr}
 80116ee:	b158      	cbz	r0, 8011708 <rmw_init_options_copy+0x1c>
 80116f0:	460d      	mov	r5, r1
 80116f2:	b149      	cbz	r1, 8011708 <rmw_init_options_copy+0x1c>
 80116f4:	4604      	mov	r4, r0
 80116f6:	6880      	ldr	r0, [r0, #8]
 80116f8:	b120      	cbz	r0, 8011704 <rmw_init_options_copy+0x18>
 80116fa:	4b1e      	ldr	r3, [pc, #120]	; (8011774 <rmw_init_options_copy+0x88>)
 80116fc:	6819      	ldr	r1, [r3, #0]
 80116fe:	f7ee fd6f 	bl	80001e0 <strcmp>
 8011702:	bb90      	cbnz	r0, 801176a <rmw_init_options_copy+0x7e>
 8011704:	68ab      	ldr	r3, [r5, #8]
 8011706:	b113      	cbz	r3, 801170e <rmw_init_options_copy+0x22>
 8011708:	250b      	movs	r5, #11
 801170a:	4628      	mov	r0, r5
 801170c:	bd70      	pop	{r4, r5, r6, pc}
 801170e:	4623      	mov	r3, r4
 8011710:	462a      	mov	r2, r5
 8011712:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8011716:	f8d3 c000 	ldr.w	ip, [r3]
 801171a:	6858      	ldr	r0, [r3, #4]
 801171c:	6899      	ldr	r1, [r3, #8]
 801171e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8011722:	f8c2 e00c 	str.w	lr, [r2, #12]
 8011726:	3310      	adds	r3, #16
 8011728:	42b3      	cmp	r3, r6
 801172a:	f8c2 c000 	str.w	ip, [r2]
 801172e:	6050      	str	r0, [r2, #4]
 8011730:	6091      	str	r1, [r2, #8]
 8011732:	f102 0210 	add.w	r2, r2, #16
 8011736:	d1ee      	bne.n	8011716 <rmw_init_options_copy+0x2a>
 8011738:	6819      	ldr	r1, [r3, #0]
 801173a:	685b      	ldr	r3, [r3, #4]
 801173c:	480e      	ldr	r0, [pc, #56]	; (8011778 <rmw_init_options_copy+0x8c>)
 801173e:	6053      	str	r3, [r2, #4]
 8011740:	6011      	str	r1, [r2, #0]
 8011742:	f7ff fed5 	bl	80114f0 <get_memory>
 8011746:	b198      	cbz	r0, 8011770 <rmw_init_options_copy+0x84>
 8011748:	6883      	ldr	r3, [r0, #8]
 801174a:	636b      	str	r3, [r5, #52]	; 0x34
 801174c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801174e:	f102 0c10 	add.w	ip, r2, #16
 8011752:	f103 0410 	add.w	r4, r3, #16
 8011756:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801175a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801175c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8011760:	2500      	movs	r5, #0
 8011762:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011766:	4628      	mov	r0, r5
 8011768:	bd70      	pop	{r4, r5, r6, pc}
 801176a:	250c      	movs	r5, #12
 801176c:	4628      	mov	r0, r5
 801176e:	bd70      	pop	{r4, r5, r6, pc}
 8011770:	2501      	movs	r5, #1
 8011772:	e7ca      	b.n	801170a <rmw_init_options_copy+0x1e>
 8011774:	08016d8c 	.word	0x08016d8c
 8011778:	2000dbbc 	.word	0x2000dbbc

0801177c <rmw_init_options_fini>:
 801177c:	2800      	cmp	r0, #0
 801177e:	d03d      	beq.n	80117fc <rmw_init_options_fini+0x80>
 8011780:	b510      	push	{r4, lr}
 8011782:	4604      	mov	r4, r0
 8011784:	b08e      	sub	sp, #56	; 0x38
 8011786:	3020      	adds	r0, #32
 8011788:	f7f8 fe06 	bl	800a398 <rcutils_allocator_is_valid>
 801178c:	b360      	cbz	r0, 80117e8 <rmw_init_options_fini+0x6c>
 801178e:	68a0      	ldr	r0, [r4, #8]
 8011790:	b120      	cbz	r0, 801179c <rmw_init_options_fini+0x20>
 8011792:	4b1c      	ldr	r3, [pc, #112]	; (8011804 <rmw_init_options_fini+0x88>)
 8011794:	6819      	ldr	r1, [r3, #0]
 8011796:	f7ee fd23 	bl	80001e0 <strcmp>
 801179a:	bb68      	cbnz	r0, 80117f8 <rmw_init_options_fini+0x7c>
 801179c:	4b1a      	ldr	r3, [pc, #104]	; (8011808 <rmw_init_options_fini+0x8c>)
 801179e:	6819      	ldr	r1, [r3, #0]
 80117a0:	b331      	cbz	r1, 80117f0 <rmw_init_options_fini+0x74>
 80117a2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80117a4:	e001      	b.n	80117aa <rmw_init_options_fini+0x2e>
 80117a6:	6849      	ldr	r1, [r1, #4]
 80117a8:	b311      	cbz	r1, 80117f0 <rmw_init_options_fini+0x74>
 80117aa:	688b      	ldr	r3, [r1, #8]
 80117ac:	429a      	cmp	r2, r3
 80117ae:	d1fa      	bne.n	80117a6 <rmw_init_options_fini+0x2a>
 80117b0:	4815      	ldr	r0, [pc, #84]	; (8011808 <rmw_init_options_fini+0x8c>)
 80117b2:	f7ff fead 	bl	8011510 <put_memory>
 80117b6:	4668      	mov	r0, sp
 80117b8:	f7ff fc9a 	bl	80110f0 <rmw_get_zero_initialized_init_options>
 80117bc:	46ee      	mov	lr, sp
 80117be:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80117c2:	46a4      	mov	ip, r4
 80117c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80117c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80117cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80117d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80117d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80117d8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80117dc:	e88c 0003 	stmia.w	ip, {r0, r1}
 80117e0:	2300      	movs	r3, #0
 80117e2:	4618      	mov	r0, r3
 80117e4:	b00e      	add	sp, #56	; 0x38
 80117e6:	bd10      	pop	{r4, pc}
 80117e8:	230b      	movs	r3, #11
 80117ea:	4618      	mov	r0, r3
 80117ec:	b00e      	add	sp, #56	; 0x38
 80117ee:	bd10      	pop	{r4, pc}
 80117f0:	2301      	movs	r3, #1
 80117f2:	4618      	mov	r0, r3
 80117f4:	b00e      	add	sp, #56	; 0x38
 80117f6:	bd10      	pop	{r4, pc}
 80117f8:	230c      	movs	r3, #12
 80117fa:	e7f2      	b.n	80117e2 <rmw_init_options_fini+0x66>
 80117fc:	230b      	movs	r3, #11
 80117fe:	4618      	mov	r0, r3
 8011800:	4770      	bx	lr
 8011802:	bf00      	nop
 8011804:	08016d8c 	.word	0x08016d8c
 8011808:	2000dbbc 	.word	0x2000dbbc

0801180c <rmw_init>:
 801180c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011810:	b083      	sub	sp, #12
 8011812:	2800      	cmp	r0, #0
 8011814:	f000 80d3 	beq.w	80119be <rmw_init+0x1b2>
 8011818:	460e      	mov	r6, r1
 801181a:	2900      	cmp	r1, #0
 801181c:	f000 80cf 	beq.w	80119be <rmw_init+0x1b2>
 8011820:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011822:	4605      	mov	r5, r0
 8011824:	2b00      	cmp	r3, #0
 8011826:	f000 80ca 	beq.w	80119be <rmw_init+0x1b2>
 801182a:	4b78      	ldr	r3, [pc, #480]	; (8011a0c <rmw_init+0x200>)
 801182c:	6880      	ldr	r0, [r0, #8]
 801182e:	681f      	ldr	r7, [r3, #0]
 8011830:	b128      	cbz	r0, 801183e <rmw_init+0x32>
 8011832:	4639      	mov	r1, r7
 8011834:	f7ee fcd4 	bl	80001e0 <strcmp>
 8011838:	2800      	cmp	r0, #0
 801183a:	f040 80ca 	bne.w	80119d2 <rmw_init+0x1c6>
 801183e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011842:	4c73      	ldr	r4, [pc, #460]	; (8011a10 <rmw_init+0x204>)
 8011844:	4973      	ldr	r1, [pc, #460]	; (8011a14 <rmw_init+0x208>)
 8011846:	4874      	ldr	r0, [pc, #464]	; (8011a18 <rmw_init+0x20c>)
 8011848:	60b7      	str	r7, [r6, #8]
 801184a:	e9c6 2300 	strd	r2, r3, [r6]
 801184e:	68eb      	ldr	r3, [r5, #12]
 8011850:	64b3      	str	r3, [r6, #72]	; 0x48
 8011852:	2201      	movs	r2, #1
 8011854:	f7f9 f932 	bl	800aabc <rmw_uxrce_init_session_memory>
 8011858:	4620      	mov	r0, r4
 801185a:	4970      	ldr	r1, [pc, #448]	; (8011a1c <rmw_init+0x210>)
 801185c:	2204      	movs	r2, #4
 801185e:	f7f9 f96d 	bl	800ab3c <rmw_uxrce_init_static_input_buffer_memory>
 8011862:	f04f 0800 	mov.w	r8, #0
 8011866:	486c      	ldr	r0, [pc, #432]	; (8011a18 <rmw_init+0x20c>)
 8011868:	f884 800d 	strb.w	r8, [r4, #13]
 801186c:	f7ff fe40 	bl	80114f0 <get_memory>
 8011870:	2800      	cmp	r0, #0
 8011872:	f000 80a9 	beq.w	80119c8 <rmw_init+0x1bc>
 8011876:	6884      	ldr	r4, [r0, #8]
 8011878:	6b68      	ldr	r0, [r5, #52]	; 0x34
 801187a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 801187c:	f890 c010 	ldrb.w	ip, [r0, #16]
 8011880:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8011884:	9101      	str	r1, [sp, #4]
 8011886:	6a00      	ldr	r0, [r0, #32]
 8011888:	9000      	str	r0, [sp, #0]
 801188a:	f104 0910 	add.w	r9, r4, #16
 801188e:	4661      	mov	r1, ip
 8011890:	4648      	mov	r0, r9
 8011892:	f001 f9cf 	bl	8012c34 <uxr_set_custom_transport_callbacks>
 8011896:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 801189a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801189e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 80118a2:	f504 725e 	add.w	r2, r4, #888	; 0x378
 80118a6:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 80118aa:	495d      	ldr	r1, [pc, #372]	; (8011a20 <rmw_init+0x214>)
 80118ac:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 80118b0:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 80118b4:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 80118b8:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 80118bc:	4859      	ldr	r0, [pc, #356]	; (8011a24 <rmw_init+0x218>)
 80118be:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 80118c2:	2201      	movs	r2, #1
 80118c4:	64f4      	str	r4, [r6, #76]	; 0x4c
 80118c6:	f7f9 f8d9 	bl	800aa7c <rmw_uxrce_init_node_memory>
 80118ca:	4957      	ldr	r1, [pc, #348]	; (8011a28 <rmw_init+0x21c>)
 80118cc:	4857      	ldr	r0, [pc, #348]	; (8011a2c <rmw_init+0x220>)
 80118ce:	2205      	movs	r2, #5
 80118d0:	f7f9 f8b4 	bl	800aa3c <rmw_uxrce_init_subscription_memory>
 80118d4:	4956      	ldr	r1, [pc, #344]	; (8011a30 <rmw_init+0x224>)
 80118d6:	4857      	ldr	r0, [pc, #348]	; (8011a34 <rmw_init+0x228>)
 80118d8:	220a      	movs	r2, #10
 80118da:	f7f9 f88f 	bl	800a9fc <rmw_uxrce_init_publisher_memory>
 80118de:	4956      	ldr	r1, [pc, #344]	; (8011a38 <rmw_init+0x22c>)
 80118e0:	4856      	ldr	r0, [pc, #344]	; (8011a3c <rmw_init+0x230>)
 80118e2:	2201      	movs	r2, #1
 80118e4:	f7f9 f84a 	bl	800a97c <rmw_uxrce_init_service_memory>
 80118e8:	4955      	ldr	r1, [pc, #340]	; (8011a40 <rmw_init+0x234>)
 80118ea:	4856      	ldr	r0, [pc, #344]	; (8011a44 <rmw_init+0x238>)
 80118ec:	2201      	movs	r2, #1
 80118ee:	f7f9 f865 	bl	800a9bc <rmw_uxrce_init_client_memory>
 80118f2:	4955      	ldr	r1, [pc, #340]	; (8011a48 <rmw_init+0x23c>)
 80118f4:	4855      	ldr	r0, [pc, #340]	; (8011a4c <rmw_init+0x240>)
 80118f6:	220f      	movs	r2, #15
 80118f8:	f7f9 f900 	bl	800aafc <rmw_uxrce_init_topic_memory>
 80118fc:	4954      	ldr	r1, [pc, #336]	; (8011a50 <rmw_init+0x244>)
 80118fe:	4855      	ldr	r0, [pc, #340]	; (8011a54 <rmw_init+0x248>)
 8011900:	2203      	movs	r2, #3
 8011902:	f7f9 f93b 	bl	800ab7c <rmw_uxrce_init_init_options_impl_memory>
 8011906:	4954      	ldr	r1, [pc, #336]	; (8011a58 <rmw_init+0x24c>)
 8011908:	4854      	ldr	r0, [pc, #336]	; (8011a5c <rmw_init+0x250>)
 801190a:	2204      	movs	r2, #4
 801190c:	f7f9 f956 	bl	800abbc <rmw_uxrce_init_wait_set_memory>
 8011910:	4953      	ldr	r1, [pc, #332]	; (8011a60 <rmw_init+0x254>)
 8011912:	4854      	ldr	r0, [pc, #336]	; (8011a64 <rmw_init+0x258>)
 8011914:	2204      	movs	r2, #4
 8011916:	f7f9 f971 	bl	800abfc <rmw_uxrce_init_guard_condition_memory>
 801191a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 801191c:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 801191e:	4642      	mov	r2, r8
 8011920:	f000 fdae 	bl	8012480 <rmw_uxrce_transport_init>
 8011924:	4607      	mov	r7, r0
 8011926:	2800      	cmp	r0, #0
 8011928:	d158      	bne.n	80119dc <rmw_init+0x1d0>
 801192a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801192c:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8011930:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011932:	f504 7122 	add.w	r1, r4, #648	; 0x288
 8011936:	4628      	mov	r0, r5
 8011938:	f7f9 ff0e 	bl	800b758 <uxr_init_session>
 801193c:	494a      	ldr	r1, [pc, #296]	; (8011a68 <rmw_init+0x25c>)
 801193e:	4622      	mov	r2, r4
 8011940:	4628      	mov	r0, r5
 8011942:	f7f9 ff2d 	bl	800b7a0 <uxr_set_topic_callback>
 8011946:	4949      	ldr	r1, [pc, #292]	; (8011a6c <rmw_init+0x260>)
 8011948:	463a      	mov	r2, r7
 801194a:	4628      	mov	r0, r5
 801194c:	f7f9 ff24 	bl	800b798 <uxr_set_status_callback>
 8011950:	4947      	ldr	r1, [pc, #284]	; (8011a70 <rmw_init+0x264>)
 8011952:	463a      	mov	r2, r7
 8011954:	4628      	mov	r0, r5
 8011956:	f7f9 ff27 	bl	800b7a8 <uxr_set_request_callback>
 801195a:	4946      	ldr	r1, [pc, #280]	; (8011a74 <rmw_init+0x268>)
 801195c:	463a      	mov	r2, r7
 801195e:	4628      	mov	r0, r5
 8011960:	f7f9 ff26 	bl	800b7b0 <uxr_set_reply_callback>
 8011964:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8011968:	2304      	movs	r3, #4
 801196a:	0092      	lsls	r2, r2, #2
 801196c:	f504 7165 	add.w	r1, r4, #916	; 0x394
 8011970:	4628      	mov	r0, r5
 8011972:	f7f9 ff5b 	bl	800b82c <uxr_create_input_reliable_stream>
 8011976:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 801197a:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 801197e:	0092      	lsls	r2, r2, #2
 8011980:	2304      	movs	r3, #4
 8011982:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8011986:	4628      	mov	r0, r5
 8011988:	f7f9 ff28 	bl	800b7dc <uxr_create_output_reliable_stream>
 801198c:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8011990:	4628      	mov	r0, r5
 8011992:	f7f9 ff45 	bl	800b820 <uxr_create_input_best_effort_stream>
 8011996:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 801199a:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 801199e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 80119a2:	3114      	adds	r1, #20
 80119a4:	4628      	mov	r0, r5
 80119a6:	f7f9 ff07 	bl	800b7b8 <uxr_create_output_best_effort_stream>
 80119aa:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 80119ae:	4628      	mov	r0, r5
 80119b0:	f7fa fc92 	bl	800c2d8 <uxr_create_session>
 80119b4:	b1f8      	cbz	r0, 80119f6 <rmw_init+0x1ea>
 80119b6:	4638      	mov	r0, r7
 80119b8:	b003      	add	sp, #12
 80119ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80119be:	270b      	movs	r7, #11
 80119c0:	4638      	mov	r0, r7
 80119c2:	b003      	add	sp, #12
 80119c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80119c8:	2701      	movs	r7, #1
 80119ca:	4638      	mov	r0, r7
 80119cc:	b003      	add	sp, #12
 80119ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80119d2:	270c      	movs	r7, #12
 80119d4:	4638      	mov	r0, r7
 80119d6:	b003      	add	sp, #12
 80119d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80119dc:	4648      	mov	r0, r9
 80119de:	f001 f96b 	bl	8012cb8 <uxr_close_custom_transport>
 80119e2:	480d      	ldr	r0, [pc, #52]	; (8011a18 <rmw_init+0x20c>)
 80119e4:	4621      	mov	r1, r4
 80119e6:	f7ff fd93 	bl	8011510 <put_memory>
 80119ea:	4638      	mov	r0, r7
 80119ec:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 80119f0:	b003      	add	sp, #12
 80119f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80119f6:	4648      	mov	r0, r9
 80119f8:	f001 f95e 	bl	8012cb8 <uxr_close_custom_transport>
 80119fc:	4806      	ldr	r0, [pc, #24]	; (8011a18 <rmw_init+0x20c>)
 80119fe:	4621      	mov	r1, r4
 8011a00:	f7ff fd86 	bl	8011510 <put_memory>
 8011a04:	64f7      	str	r7, [r6, #76]	; 0x4c
 8011a06:	2701      	movs	r7, #1
 8011a08:	e7d5      	b.n	80119b6 <rmw_init+0x1aa>
 8011a0a:	bf00      	nop
 8011a0c:	08016d8c 	.word	0x08016d8c
 8011a10:	2000dc0c 	.word	0x2000dc0c
 8011a14:	20009eb8 	.word	0x20009eb8
 8011a18:	2000dbfc 	.word	0x2000dbfc
 8011a1c:	2000b460 	.word	0x2000b460
 8011a20:	200094dc 	.word	0x200094dc
 8011a24:	2000dbcc 	.word	0x2000dbcc
 8011a28:	2000d560 	.word	0x2000d560
 8011a2c:	2000dc1c 	.word	0x2000dc1c
 8011a30:	20009580 	.word	0x20009580
 8011a34:	2000dbdc 	.word	0x2000dbdc
 8011a38:	20009df0 	.word	0x20009df0
 8011a3c:	2000dbec 	.word	0x2000dbec
 8011a40:	20009310 	.word	0x20009310
 8011a44:	20009300 	.word	0x20009300
 8011a48:	2000d998 	.word	0x2000d998
 8011a4c:	2000dc2c 	.word	0x2000dc2c
 8011a50:	20009458 	.word	0x20009458
 8011a54:	2000dbbc 	.word	0x2000dbbc
 8011a58:	2000db3c 	.word	0x2000db3c
 8011a5c:	2000dc3c 	.word	0x2000dc3c
 8011a60:	200093d8 	.word	0x200093d8
 8011a64:	2000dbac 	.word	0x2000dbac
 8011a68:	08014841 	.word	0x08014841
 8011a6c:	08014839 	.word	0x08014839
 8011a70:	080148d9 	.word	0x080148d9
 8011a74:	08014975 	.word	0x08014975

08011a78 <rmw_context_fini>:
 8011a78:	4b17      	ldr	r3, [pc, #92]	; (8011ad8 <rmw_context_fini+0x60>)
 8011a7a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8011a7c:	b570      	push	{r4, r5, r6, lr}
 8011a7e:	681c      	ldr	r4, [r3, #0]
 8011a80:	4605      	mov	r5, r0
 8011a82:	b334      	cbz	r4, 8011ad2 <rmw_context_fini+0x5a>
 8011a84:	2600      	movs	r6, #0
 8011a86:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8011a8a:	6902      	ldr	r2, [r0, #16]
 8011a8c:	428a      	cmp	r2, r1
 8011a8e:	d018      	beq.n	8011ac2 <rmw_context_fini+0x4a>
 8011a90:	2c00      	cmp	r4, #0
 8011a92:	d1f8      	bne.n	8011a86 <rmw_context_fini+0xe>
 8011a94:	b189      	cbz	r1, 8011aba <rmw_context_fini+0x42>
 8011a96:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 8011a9a:	789b      	ldrb	r3, [r3, #2]
 8011a9c:	2b01      	cmp	r3, #1
 8011a9e:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 8011aa2:	bf14      	ite	ne
 8011aa4:	210a      	movne	r1, #10
 8011aa6:	2100      	moveq	r1, #0
 8011aa8:	f7fa fbee 	bl	800c288 <uxr_delete_session_retries>
 8011aac:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8011aae:	f7f9 f8c5 	bl	800ac3c <rmw_uxrce_fini_session_memory>
 8011ab2:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8011ab4:	3010      	adds	r0, #16
 8011ab6:	f001 f8ff 	bl	8012cb8 <uxr_close_custom_transport>
 8011aba:	2300      	movs	r3, #0
 8011abc:	64eb      	str	r3, [r5, #76]	; 0x4c
 8011abe:	4630      	mov	r0, r6
 8011ac0:	bd70      	pop	{r4, r5, r6, pc}
 8011ac2:	3018      	adds	r0, #24
 8011ac4:	f000 f90e 	bl	8011ce4 <rmw_destroy_node>
 8011ac8:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8011aca:	4606      	mov	r6, r0
 8011acc:	2c00      	cmp	r4, #0
 8011ace:	d1da      	bne.n	8011a86 <rmw_context_fini+0xe>
 8011ad0:	e7e0      	b.n	8011a94 <rmw_context_fini+0x1c>
 8011ad2:	4626      	mov	r6, r4
 8011ad4:	e7de      	b.n	8011a94 <rmw_context_fini+0x1c>
 8011ad6:	bf00      	nop
 8011ad8:	2000dbcc 	.word	0x2000dbcc

08011adc <create_topic>:
 8011adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ae0:	4605      	mov	r5, r0
 8011ae2:	b084      	sub	sp, #16
 8011ae4:	4822      	ldr	r0, [pc, #136]	; (8011b70 <create_topic+0x94>)
 8011ae6:	460f      	mov	r7, r1
 8011ae8:	4616      	mov	r6, r2
 8011aea:	f7ff fd01 	bl	80114f0 <get_memory>
 8011aee:	4604      	mov	r4, r0
 8011af0:	2800      	cmp	r0, #0
 8011af2:	d039      	beq.n	8011b68 <create_topic+0x8c>
 8011af4:	692b      	ldr	r3, [r5, #16]
 8011af6:	6884      	ldr	r4, [r0, #8]
 8011af8:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8011b78 <create_topic+0x9c>
 8011afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011b00:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8011b04:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 8011b08:	1c42      	adds	r2, r0, #1
 8011b0a:	2102      	movs	r1, #2
 8011b0c:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 8011b10:	f7f9 fd64 	bl	800b5dc <uxr_object_id>
 8011b14:	223c      	movs	r2, #60	; 0x3c
 8011b16:	6120      	str	r0, [r4, #16]
 8011b18:	4641      	mov	r1, r8
 8011b1a:	4638      	mov	r0, r7
 8011b1c:	f7f9 fa6c 	bl	800aff8 <generate_topic_name>
 8011b20:	b1f0      	cbz	r0, 8011b60 <create_topic+0x84>
 8011b22:	4f14      	ldr	r7, [pc, #80]	; (8011b74 <create_topic+0x98>)
 8011b24:	4630      	mov	r0, r6
 8011b26:	2264      	movs	r2, #100	; 0x64
 8011b28:	4639      	mov	r1, r7
 8011b2a:	f7f9 fa35 	bl	800af98 <generate_type_name>
 8011b2e:	b1b8      	cbz	r0, 8011b60 <create_topic+0x84>
 8011b30:	6928      	ldr	r0, [r5, #16]
 8011b32:	2306      	movs	r3, #6
 8011b34:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8011b38:	f8cd 8000 	str.w	r8, [sp]
 8011b3c:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8011b40:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011b44:	6811      	ldr	r1, [r2, #0]
 8011b46:	696b      	ldr	r3, [r5, #20]
 8011b48:	6922      	ldr	r2, [r4, #16]
 8011b4a:	f7f9 fbc3 	bl	800b2d4 <uxr_buffer_create_topic_bin>
 8011b4e:	4602      	mov	r2, r0
 8011b50:	6928      	ldr	r0, [r5, #16]
 8011b52:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8011b56:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8011b5a:	f7f9 f9e7 	bl	800af2c <run_xrce_session>
 8011b5e:	b918      	cbnz	r0, 8011b68 <create_topic+0x8c>
 8011b60:	4620      	mov	r0, r4
 8011b62:	f7f9 f8e1 	bl	800ad28 <rmw_uxrce_fini_topic_memory>
 8011b66:	2400      	movs	r4, #0
 8011b68:	4620      	mov	r0, r4
 8011b6a:	b004      	add	sp, #16
 8011b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b70:	2000dc2c 	.word	0x2000dc2c
 8011b74:	2000dd18 	.word	0x2000dd18
 8011b78:	2000dcdc 	.word	0x2000dcdc

08011b7c <destroy_topic>:
 8011b7c:	b538      	push	{r3, r4, r5, lr}
 8011b7e:	6985      	ldr	r5, [r0, #24]
 8011b80:	b1d5      	cbz	r5, 8011bb8 <destroy_topic+0x3c>
 8011b82:	4604      	mov	r4, r0
 8011b84:	6928      	ldr	r0, [r5, #16]
 8011b86:	6922      	ldr	r2, [r4, #16]
 8011b88:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8011b8c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011b90:	6819      	ldr	r1, [r3, #0]
 8011b92:	f7f9 fb21 	bl	800b1d8 <uxr_buffer_delete_entity>
 8011b96:	4602      	mov	r2, r0
 8011b98:	6928      	ldr	r0, [r5, #16]
 8011b9a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8011b9e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8011ba2:	f7f9 f9c3 	bl	800af2c <run_xrce_session>
 8011ba6:	2800      	cmp	r0, #0
 8011ba8:	4620      	mov	r0, r4
 8011baa:	bf14      	ite	ne
 8011bac:	2400      	movne	r4, #0
 8011bae:	2402      	moveq	r4, #2
 8011bb0:	f7f9 f8ba 	bl	800ad28 <rmw_uxrce_fini_topic_memory>
 8011bb4:	4620      	mov	r0, r4
 8011bb6:	bd38      	pop	{r3, r4, r5, pc}
 8011bb8:	2401      	movs	r4, #1
 8011bba:	4620      	mov	r0, r4
 8011bbc:	bd38      	pop	{r3, r4, r5, pc}
 8011bbe:	bf00      	nop

08011bc0 <create_node>:
 8011bc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011bc4:	b083      	sub	sp, #12
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d05f      	beq.n	8011c8a <create_node+0xca>
 8011bca:	4606      	mov	r6, r0
 8011bcc:	4835      	ldr	r0, [pc, #212]	; (8011ca4 <create_node+0xe4>)
 8011bce:	460f      	mov	r7, r1
 8011bd0:	4690      	mov	r8, r2
 8011bd2:	461d      	mov	r5, r3
 8011bd4:	f7ff fc8c 	bl	80114f0 <get_memory>
 8011bd8:	2800      	cmp	r0, #0
 8011bda:	d056      	beq.n	8011c8a <create_node+0xca>
 8011bdc:	6884      	ldr	r4, [r0, #8]
 8011bde:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8011be0:	6123      	str	r3, [r4, #16]
 8011be2:	f7ff fced 	bl	80115c0 <rmw_get_implementation_identifier>
 8011be6:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8011bea:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8011bee:	f8c4 9020 	str.w	r9, [r4, #32]
 8011bf2:	4630      	mov	r0, r6
 8011bf4:	f7ee fafe 	bl	80001f4 <strlen>
 8011bf8:	1c42      	adds	r2, r0, #1
 8011bfa:	2a3c      	cmp	r2, #60	; 0x3c
 8011bfc:	f104 0518 	add.w	r5, r4, #24
 8011c00:	d840      	bhi.n	8011c84 <create_node+0xc4>
 8011c02:	4648      	mov	r0, r9
 8011c04:	4631      	mov	r1, r6
 8011c06:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8011c0a:	f003 fc0c 	bl	8015426 <memcpy>
 8011c0e:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8011c12:	4638      	mov	r0, r7
 8011c14:	f7ee faee 	bl	80001f4 <strlen>
 8011c18:	1c42      	adds	r2, r0, #1
 8011c1a:	2a3c      	cmp	r2, #60	; 0x3c
 8011c1c:	d832      	bhi.n	8011c84 <create_node+0xc4>
 8011c1e:	4639      	mov	r1, r7
 8011c20:	4648      	mov	r0, r9
 8011c22:	f003 fc00 	bl	8015426 <memcpy>
 8011c26:	6923      	ldr	r3, [r4, #16]
 8011c28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011c2c:	2101      	movs	r1, #1
 8011c2e:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 8011c32:	1842      	adds	r2, r0, r1
 8011c34:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 8011c38:	f7f9 fcd0 	bl	800b5dc <uxr_object_id>
 8011c3c:	6160      	str	r0, [r4, #20]
 8011c3e:	783b      	ldrb	r3, [r7, #0]
 8011c40:	2b2f      	cmp	r3, #47	; 0x2f
 8011c42:	d127      	bne.n	8011c94 <create_node+0xd4>
 8011c44:	787b      	ldrb	r3, [r7, #1]
 8011c46:	bb2b      	cbnz	r3, 8011c94 <create_node+0xd4>
 8011c48:	4a17      	ldr	r2, [pc, #92]	; (8011ca8 <create_node+0xe8>)
 8011c4a:	4818      	ldr	r0, [pc, #96]	; (8011cac <create_node+0xec>)
 8011c4c:	4633      	mov	r3, r6
 8011c4e:	213c      	movs	r1, #60	; 0x3c
 8011c50:	f003 f9f0 	bl	8015034 <sniprintf>
 8011c54:	6920      	ldr	r0, [r4, #16]
 8011c56:	4915      	ldr	r1, [pc, #84]	; (8011cac <create_node+0xec>)
 8011c58:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8011c5c:	9100      	str	r1, [sp, #0]
 8011c5e:	2106      	movs	r1, #6
 8011c60:	9101      	str	r1, [sp, #4]
 8011c62:	6811      	ldr	r1, [r2, #0]
 8011c64:	6962      	ldr	r2, [r4, #20]
 8011c66:	fa1f f388 	uxth.w	r3, r8
 8011c6a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011c6e:	f7f9 faff 	bl	800b270 <uxr_buffer_create_participant_bin>
 8011c72:	4602      	mov	r2, r0
 8011c74:	6920      	ldr	r0, [r4, #16]
 8011c76:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8011c7a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8011c7e:	f7f9 f955 	bl	800af2c <run_xrce_session>
 8011c82:	b918      	cbnz	r0, 8011c8c <create_node+0xcc>
 8011c84:	4628      	mov	r0, r5
 8011c86:	f7f8 ffdf 	bl	800ac48 <rmw_uxrce_fini_node_memory>
 8011c8a:	2500      	movs	r5, #0
 8011c8c:	4628      	mov	r0, r5
 8011c8e:	b003      	add	sp, #12
 8011c90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c94:	4a06      	ldr	r2, [pc, #24]	; (8011cb0 <create_node+0xf0>)
 8011c96:	9600      	str	r6, [sp, #0]
 8011c98:	463b      	mov	r3, r7
 8011c9a:	213c      	movs	r1, #60	; 0x3c
 8011c9c:	4803      	ldr	r0, [pc, #12]	; (8011cac <create_node+0xec>)
 8011c9e:	f003 f9c9 	bl	8015034 <sniprintf>
 8011ca2:	e7d7      	b.n	8011c54 <create_node+0x94>
 8011ca4:	2000dbcc 	.word	0x2000dbcc
 8011ca8:	08016670 	.word	0x08016670
 8011cac:	2000dd7c 	.word	0x2000dd7c
 8011cb0:	080167fc 	.word	0x080167fc

08011cb4 <rmw_create_node>:
 8011cb4:	b199      	cbz	r1, 8011cde <rmw_create_node+0x2a>
 8011cb6:	780b      	ldrb	r3, [r1, #0]
 8011cb8:	468c      	mov	ip, r1
 8011cba:	b183      	cbz	r3, 8011cde <rmw_create_node+0x2a>
 8011cbc:	b410      	push	{r4}
 8011cbe:	4614      	mov	r4, r2
 8011cc0:	b14a      	cbz	r2, 8011cd6 <rmw_create_node+0x22>
 8011cc2:	7813      	ldrb	r3, [r2, #0]
 8011cc4:	b13b      	cbz	r3, 8011cd6 <rmw_create_node+0x22>
 8011cc6:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8011cc8:	4603      	mov	r3, r0
 8011cca:	4621      	mov	r1, r4
 8011ccc:	4660      	mov	r0, ip
 8011cce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011cd2:	f7ff bf75 	b.w	8011bc0 <create_node>
 8011cd6:	2000      	movs	r0, #0
 8011cd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011cdc:	4770      	bx	lr
 8011cde:	2000      	movs	r0, #0
 8011ce0:	4770      	bx	lr
 8011ce2:	bf00      	nop

08011ce4 <rmw_destroy_node>:
 8011ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ce6:	b328      	cbz	r0, 8011d34 <rmw_destroy_node+0x50>
 8011ce8:	4607      	mov	r7, r0
 8011cea:	6800      	ldr	r0, [r0, #0]
 8011cec:	b120      	cbz	r0, 8011cf8 <rmw_destroy_node+0x14>
 8011cee:	4b36      	ldr	r3, [pc, #216]	; (8011dc8 <rmw_destroy_node+0xe4>)
 8011cf0:	6819      	ldr	r1, [r3, #0]
 8011cf2:	f7ee fa75 	bl	80001e0 <strcmp>
 8011cf6:	b9e8      	cbnz	r0, 8011d34 <rmw_destroy_node+0x50>
 8011cf8:	687d      	ldr	r5, [r7, #4]
 8011cfa:	b1dd      	cbz	r5, 8011d34 <rmw_destroy_node+0x50>
 8011cfc:	4b33      	ldr	r3, [pc, #204]	; (8011dcc <rmw_destroy_node+0xe8>)
 8011cfe:	681c      	ldr	r4, [r3, #0]
 8011d00:	2c00      	cmp	r4, #0
 8011d02:	d05f      	beq.n	8011dc4 <rmw_destroy_node+0xe0>
 8011d04:	2600      	movs	r6, #0
 8011d06:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8011d0a:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8011d0e:	429d      	cmp	r5, r3
 8011d10:	d013      	beq.n	8011d3a <rmw_destroy_node+0x56>
 8011d12:	2c00      	cmp	r4, #0
 8011d14:	d1f7      	bne.n	8011d06 <rmw_destroy_node+0x22>
 8011d16:	4b2e      	ldr	r3, [pc, #184]	; (8011dd0 <rmw_destroy_node+0xec>)
 8011d18:	681c      	ldr	r4, [r3, #0]
 8011d1a:	b1c4      	cbz	r4, 8011d4e <rmw_destroy_node+0x6a>
 8011d1c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8011d20:	6a0b      	ldr	r3, [r1, #32]
 8011d22:	429d      	cmp	r5, r3
 8011d24:	d1f9      	bne.n	8011d1a <rmw_destroy_node+0x36>
 8011d26:	317c      	adds	r1, #124	; 0x7c
 8011d28:	4638      	mov	r0, r7
 8011d2a:	f000 fae5 	bl	80122f8 <rmw_destroy_subscription>
 8011d2e:	2801      	cmp	r0, #1
 8011d30:	4606      	mov	r6, r0
 8011d32:	d1f2      	bne.n	8011d1a <rmw_destroy_node+0x36>
 8011d34:	2601      	movs	r6, #1
 8011d36:	4630      	mov	r0, r6
 8011d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d3a:	3184      	adds	r1, #132	; 0x84
 8011d3c:	4638      	mov	r0, r7
 8011d3e:	f7f8 fdcb 	bl	800a8d8 <rmw_destroy_publisher>
 8011d42:	2801      	cmp	r0, #1
 8011d44:	4606      	mov	r6, r0
 8011d46:	d0f5      	beq.n	8011d34 <rmw_destroy_node+0x50>
 8011d48:	2c00      	cmp	r4, #0
 8011d4a:	d1dc      	bne.n	8011d06 <rmw_destroy_node+0x22>
 8011d4c:	e7e3      	b.n	8011d16 <rmw_destroy_node+0x32>
 8011d4e:	4b21      	ldr	r3, [pc, #132]	; (8011dd4 <rmw_destroy_node+0xf0>)
 8011d50:	681c      	ldr	r4, [r3, #0]
 8011d52:	b16c      	cbz	r4, 8011d70 <rmw_destroy_node+0x8c>
 8011d54:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8011d58:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8011d5a:	429d      	cmp	r5, r3
 8011d5c:	d1f9      	bne.n	8011d52 <rmw_destroy_node+0x6e>
 8011d5e:	317c      	adds	r1, #124	; 0x7c
 8011d60:	4638      	mov	r0, r7
 8011d62:	f000 f993 	bl	801208c <rmw_destroy_service>
 8011d66:	2801      	cmp	r0, #1
 8011d68:	4606      	mov	r6, r0
 8011d6a:	d0e3      	beq.n	8011d34 <rmw_destroy_node+0x50>
 8011d6c:	2c00      	cmp	r4, #0
 8011d6e:	d1f1      	bne.n	8011d54 <rmw_destroy_node+0x70>
 8011d70:	4b19      	ldr	r3, [pc, #100]	; (8011dd8 <rmw_destroy_node+0xf4>)
 8011d72:	681c      	ldr	r4, [r3, #0]
 8011d74:	b16c      	cbz	r4, 8011d92 <rmw_destroy_node+0xae>
 8011d76:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8011d7a:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8011d7c:	429d      	cmp	r5, r3
 8011d7e:	d1f9      	bne.n	8011d74 <rmw_destroy_node+0x90>
 8011d80:	317c      	adds	r1, #124	; 0x7c
 8011d82:	4638      	mov	r0, r7
 8011d84:	f7ff fbd8 	bl	8011538 <rmw_destroy_client>
 8011d88:	2801      	cmp	r0, #1
 8011d8a:	4606      	mov	r6, r0
 8011d8c:	d0d2      	beq.n	8011d34 <rmw_destroy_node+0x50>
 8011d8e:	2c00      	cmp	r4, #0
 8011d90:	d1f1      	bne.n	8011d76 <rmw_destroy_node+0x92>
 8011d92:	6928      	ldr	r0, [r5, #16]
 8011d94:	696a      	ldr	r2, [r5, #20]
 8011d96:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8011d9a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011d9e:	6819      	ldr	r1, [r3, #0]
 8011da0:	f7f9 fa1a 	bl	800b1d8 <uxr_buffer_delete_entity>
 8011da4:	4602      	mov	r2, r0
 8011da6:	6928      	ldr	r0, [r5, #16]
 8011da8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8011dac:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8011db0:	f7f9 f8bc 	bl	800af2c <run_xrce_session>
 8011db4:	2800      	cmp	r0, #0
 8011db6:	bf08      	it	eq
 8011db8:	2602      	moveq	r6, #2
 8011dba:	4638      	mov	r0, r7
 8011dbc:	f7f8 ff44 	bl	800ac48 <rmw_uxrce_fini_node_memory>
 8011dc0:	4630      	mov	r0, r6
 8011dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011dc4:	4626      	mov	r6, r4
 8011dc6:	e7a6      	b.n	8011d16 <rmw_destroy_node+0x32>
 8011dc8:	08016d8c 	.word	0x08016d8c
 8011dcc:	2000dbdc 	.word	0x2000dbdc
 8011dd0:	2000dc1c 	.word	0x2000dc1c
 8011dd4:	2000dbec 	.word	0x2000dbec
 8011dd8:	20009300 	.word	0x20009300

08011ddc <rmw_node_get_graph_guard_condition>:
 8011ddc:	6843      	ldr	r3, [r0, #4]
 8011dde:	6918      	ldr	r0, [r3, #16]
 8011de0:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8011de4:	4770      	bx	lr
 8011de6:	bf00      	nop

08011de8 <rmw_send_request>:
 8011de8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011dec:	4604      	mov	r4, r0
 8011dee:	6800      	ldr	r0, [r0, #0]
 8011df0:	b08b      	sub	sp, #44	; 0x2c
 8011df2:	460e      	mov	r6, r1
 8011df4:	4615      	mov	r5, r2
 8011df6:	b128      	cbz	r0, 8011e04 <rmw_send_request+0x1c>
 8011df8:	4b21      	ldr	r3, [pc, #132]	; (8011e80 <rmw_send_request+0x98>)
 8011dfa:	6819      	ldr	r1, [r3, #0]
 8011dfc:	f7ee f9f0 	bl	80001e0 <strcmp>
 8011e00:	2800      	cmp	r0, #0
 8011e02:	d139      	bne.n	8011e78 <rmw_send_request+0x90>
 8011e04:	6864      	ldr	r4, [r4, #4]
 8011e06:	6963      	ldr	r3, [r4, #20]
 8011e08:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
 8011e0c:	689b      	ldr	r3, [r3, #8]
 8011e0e:	4798      	blx	r3
 8011e10:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8011e14:	4630      	mov	r0, r6
 8011e16:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011e1a:	4798      	blx	r3
 8011e1c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011e20:	9000      	str	r0, [sp, #0]
 8011e22:	6922      	ldr	r2, [r4, #16]
 8011e24:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8011e26:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8011e2a:	ab02      	add	r3, sp, #8
 8011e2c:	f7fa fed0 	bl	800cbd0 <uxr_prepare_output_stream>
 8011e30:	2700      	movs	r7, #0
 8011e32:	6028      	str	r0, [r5, #0]
 8011e34:	606f      	str	r7, [r5, #4]
 8011e36:	b198      	cbz	r0, 8011e60 <rmw_send_request+0x78>
 8011e38:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8011e3c:	a902      	add	r1, sp, #8
 8011e3e:	4630      	mov	r0, r6
 8011e40:	4798      	blx	r3
 8011e42:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 8011e46:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8011e4a:	2b01      	cmp	r3, #1
 8011e4c:	d00c      	beq.n	8011e68 <rmw_send_request+0x80>
 8011e4e:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8011e50:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011e54:	f7fa f8d0 	bl	800bff8 <uxr_run_session_until_confirm_delivery>
 8011e58:	4638      	mov	r0, r7
 8011e5a:	b00b      	add	sp, #44	; 0x2c
 8011e5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e60:	2001      	movs	r0, #1
 8011e62:	b00b      	add	sp, #44	; 0x2c
 8011e64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e68:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011e6c:	f7f9 fd04 	bl	800b878 <uxr_flash_output_streams>
 8011e70:	4638      	mov	r0, r7
 8011e72:	b00b      	add	sp, #44	; 0x2c
 8011e74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e78:	200c      	movs	r0, #12
 8011e7a:	b00b      	add	sp, #44	; 0x2c
 8011e7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e80:	08016d8c 	.word	0x08016d8c

08011e84 <rmw_take_request>:
 8011e84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011e88:	4605      	mov	r5, r0
 8011e8a:	6800      	ldr	r0, [r0, #0]
 8011e8c:	b089      	sub	sp, #36	; 0x24
 8011e8e:	460c      	mov	r4, r1
 8011e90:	4690      	mov	r8, r2
 8011e92:	461e      	mov	r6, r3
 8011e94:	b128      	cbz	r0, 8011ea2 <rmw_take_request+0x1e>
 8011e96:	4b28      	ldr	r3, [pc, #160]	; (8011f38 <rmw_take_request+0xb4>)
 8011e98:	6819      	ldr	r1, [r3, #0]
 8011e9a:	f7ee f9a1 	bl	80001e0 <strcmp>
 8011e9e:	2800      	cmp	r0, #0
 8011ea0:	d146      	bne.n	8011f30 <rmw_take_request+0xac>
 8011ea2:	b10e      	cbz	r6, 8011ea8 <rmw_take_request+0x24>
 8011ea4:	2300      	movs	r3, #0
 8011ea6:	7033      	strb	r3, [r6, #0]
 8011ea8:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8011eac:	f7f8 ffc0 	bl	800ae30 <rmw_uxrce_clean_expired_static_input_buffer>
 8011eb0:	4648      	mov	r0, r9
 8011eb2:	f7f8 ff95 	bl	800ade0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8011eb6:	4607      	mov	r7, r0
 8011eb8:	b3b0      	cbz	r0, 8011f28 <rmw_take_request+0xa4>
 8011eba:	6885      	ldr	r5, [r0, #8]
 8011ebc:	f8d5 3838 	ldr.w	r3, [r5, #2104]	; 0x838
 8011ec0:	f8d5 283c 	ldr.w	r2, [r5, #2108]	; 0x83c
 8011ec4:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8011ec8:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 8011ecc:	7423      	strb	r3, [r4, #16]
 8011ece:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	; 0x834
 8011ed2:	f895 2836 	ldrb.w	r2, [r5, #2102]	; 0x836
 8011ed6:	74e2      	strb	r2, [r4, #19]
 8011ed8:	f8a4 3011 	strh.w	r3, [r4, #17]
 8011edc:	f8d5 2828 	ldr.w	r2, [r5, #2088]	; 0x828
 8011ee0:	f8d5 382c 	ldr.w	r3, [r5, #2092]	; 0x82c
 8011ee4:	f8d5 1830 	ldr.w	r1, [r5, #2096]	; 0x830
 8011ee8:	61e1      	str	r1, [r4, #28]
 8011eea:	6162      	str	r2, [r4, #20]
 8011eec:	61a3      	str	r3, [r4, #24]
 8011eee:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8011ef2:	689b      	ldr	r3, [r3, #8]
 8011ef4:	4798      	blx	r3
 8011ef6:	6844      	ldr	r4, [r0, #4]
 8011ef8:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8011efc:	f105 0110 	add.w	r1, r5, #16
 8011f00:	4668      	mov	r0, sp
 8011f02:	f7f6 febf 	bl	8008c84 <ucdr_init_buffer>
 8011f06:	68e3      	ldr	r3, [r4, #12]
 8011f08:	4641      	mov	r1, r8
 8011f0a:	4668      	mov	r0, sp
 8011f0c:	4798      	blx	r3
 8011f0e:	4639      	mov	r1, r7
 8011f10:	4604      	mov	r4, r0
 8011f12:	480a      	ldr	r0, [pc, #40]	; (8011f3c <rmw_take_request+0xb8>)
 8011f14:	f7ff fafc 	bl	8011510 <put_memory>
 8011f18:	b106      	cbz	r6, 8011f1c <rmw_take_request+0x98>
 8011f1a:	7034      	strb	r4, [r6, #0]
 8011f1c:	f084 0001 	eor.w	r0, r4, #1
 8011f20:	b2c0      	uxtb	r0, r0
 8011f22:	b009      	add	sp, #36	; 0x24
 8011f24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011f28:	2001      	movs	r0, #1
 8011f2a:	b009      	add	sp, #36	; 0x24
 8011f2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011f30:	200c      	movs	r0, #12
 8011f32:	b009      	add	sp, #36	; 0x24
 8011f34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011f38:	08016d8c 	.word	0x08016d8c
 8011f3c:	2000dc0c 	.word	0x2000dc0c

08011f40 <rmw_send_response>:
 8011f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f42:	4605      	mov	r5, r0
 8011f44:	6800      	ldr	r0, [r0, #0]
 8011f46:	b091      	sub	sp, #68	; 0x44
 8011f48:	460c      	mov	r4, r1
 8011f4a:	4616      	mov	r6, r2
 8011f4c:	b128      	cbz	r0, 8011f5a <rmw_send_response+0x1a>
 8011f4e:	4b29      	ldr	r3, [pc, #164]	; (8011ff4 <rmw_send_response+0xb4>)
 8011f50:	6819      	ldr	r1, [r3, #0]
 8011f52:	f7ee f945 	bl	80001e0 <strcmp>
 8011f56:	2800      	cmp	r0, #0
 8011f58:	d141      	bne.n	8011fde <rmw_send_response+0x9e>
 8011f5a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8011f5e:	9306      	str	r3, [sp, #24]
 8011f60:	4623      	mov	r3, r4
 8011f62:	9207      	str	r2, [sp, #28]
 8011f64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f68:	686d      	ldr	r5, [r5, #4]
 8011f6a:	789b      	ldrb	r3, [r3, #2]
 8011f6c:	68a1      	ldr	r1, [r4, #8]
 8011f6e:	f88d 2017 	strb.w	r2, [sp, #23]
 8011f72:	f88d 3016 	strb.w	r3, [sp, #22]
 8011f76:	68e2      	ldr	r2, [r4, #12]
 8011f78:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8011f7c:	6860      	ldr	r0, [r4, #4]
 8011f7e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011f82:	ab02      	add	r3, sp, #8
 8011f84:	c307      	stmia	r3!, {r0, r1, r2}
 8011f86:	696b      	ldr	r3, [r5, #20]
 8011f88:	6faf      	ldr	r7, [r5, #120]	; 0x78
 8011f8a:	68db      	ldr	r3, [r3, #12]
 8011f8c:	4798      	blx	r3
 8011f8e:	6844      	ldr	r4, [r0, #4]
 8011f90:	4630      	mov	r0, r6
 8011f92:	6923      	ldr	r3, [r4, #16]
 8011f94:	4798      	blx	r3
 8011f96:	f100 0318 	add.w	r3, r0, #24
 8011f9a:	6938      	ldr	r0, [r7, #16]
 8011f9c:	9300      	str	r3, [sp, #0]
 8011f9e:	692a      	ldr	r2, [r5, #16]
 8011fa0:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8011fa2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011fa6:	ab08      	add	r3, sp, #32
 8011fa8:	f7fa fe12 	bl	800cbd0 <uxr_prepare_output_stream>
 8011fac:	b910      	cbnz	r0, 8011fb4 <rmw_send_response+0x74>
 8011fae:	2001      	movs	r0, #1
 8011fb0:	b011      	add	sp, #68	; 0x44
 8011fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fb4:	a902      	add	r1, sp, #8
 8011fb6:	a808      	add	r0, sp, #32
 8011fb8:	f7fb ff42 	bl	800de40 <uxr_serialize_SampleIdentity>
 8011fbc:	68a3      	ldr	r3, [r4, #8]
 8011fbe:	a908      	add	r1, sp, #32
 8011fc0:	4630      	mov	r0, r6
 8011fc2:	4798      	blx	r3
 8011fc4:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 8011fc8:	6938      	ldr	r0, [r7, #16]
 8011fca:	2b01      	cmp	r3, #1
 8011fcc:	d00a      	beq.n	8011fe4 <rmw_send_response+0xa4>
 8011fce:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8011fd0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011fd4:	f7fa f810 	bl	800bff8 <uxr_run_session_until_confirm_delivery>
 8011fd8:	2000      	movs	r0, #0
 8011fda:	b011      	add	sp, #68	; 0x44
 8011fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fde:	200c      	movs	r0, #12
 8011fe0:	b011      	add	sp, #68	; 0x44
 8011fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fe4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011fe8:	f7f9 fc46 	bl	800b878 <uxr_flash_output_streams>
 8011fec:	2000      	movs	r0, #0
 8011fee:	b011      	add	sp, #68	; 0x44
 8011ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ff2:	bf00      	nop
 8011ff4:	08016d8c 	.word	0x08016d8c

08011ff8 <rmw_take_response>:
 8011ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ffc:	4604      	mov	r4, r0
 8011ffe:	6800      	ldr	r0, [r0, #0]
 8012000:	b088      	sub	sp, #32
 8012002:	4688      	mov	r8, r1
 8012004:	4617      	mov	r7, r2
 8012006:	461d      	mov	r5, r3
 8012008:	b120      	cbz	r0, 8012014 <rmw_take_response+0x1c>
 801200a:	4b1e      	ldr	r3, [pc, #120]	; (8012084 <rmw_take_response+0x8c>)
 801200c:	6819      	ldr	r1, [r3, #0]
 801200e:	f7ee f8e7 	bl	80001e0 <strcmp>
 8012012:	bb78      	cbnz	r0, 8012074 <rmw_take_response+0x7c>
 8012014:	b10d      	cbz	r5, 801201a <rmw_take_response+0x22>
 8012016:	2300      	movs	r3, #0
 8012018:	702b      	strb	r3, [r5, #0]
 801201a:	6864      	ldr	r4, [r4, #4]
 801201c:	f7f8 ff08 	bl	800ae30 <rmw_uxrce_clean_expired_static_input_buffer>
 8012020:	4620      	mov	r0, r4
 8012022:	f7f8 fedd 	bl	800ade0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8012026:	4606      	mov	r6, r0
 8012028:	b340      	cbz	r0, 801207c <rmw_take_response+0x84>
 801202a:	6963      	ldr	r3, [r4, #20]
 801202c:	6884      	ldr	r4, [r0, #8]
 801202e:	68db      	ldr	r3, [r3, #12]
 8012030:	f504 6203 	add.w	r2, r4, #2096	; 0x830
 8012034:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8012038:	e9c8 0108 	strd	r0, r1, [r8, #32]
 801203c:	4798      	blx	r3
 801203e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8012042:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 8012046:	f104 0110 	add.w	r1, r4, #16
 801204a:	4668      	mov	r0, sp
 801204c:	f7f6 fe1a 	bl	8008c84 <ucdr_init_buffer>
 8012050:	4639      	mov	r1, r7
 8012052:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012056:	4668      	mov	r0, sp
 8012058:	4798      	blx	r3
 801205a:	4631      	mov	r1, r6
 801205c:	4604      	mov	r4, r0
 801205e:	480a      	ldr	r0, [pc, #40]	; (8012088 <rmw_take_response+0x90>)
 8012060:	f7ff fa56 	bl	8011510 <put_memory>
 8012064:	b105      	cbz	r5, 8012068 <rmw_take_response+0x70>
 8012066:	702c      	strb	r4, [r5, #0]
 8012068:	f084 0001 	eor.w	r0, r4, #1
 801206c:	b2c0      	uxtb	r0, r0
 801206e:	b008      	add	sp, #32
 8012070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012074:	200c      	movs	r0, #12
 8012076:	b008      	add	sp, #32
 8012078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801207c:	2001      	movs	r0, #1
 801207e:	b008      	add	sp, #32
 8012080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012084:	08016d8c 	.word	0x08016d8c
 8012088:	2000dc0c 	.word	0x2000dc0c

0801208c <rmw_destroy_service>:
 801208c:	b570      	push	{r4, r5, r6, lr}
 801208e:	b128      	cbz	r0, 801209c <rmw_destroy_service+0x10>
 8012090:	4604      	mov	r4, r0
 8012092:	6800      	ldr	r0, [r0, #0]
 8012094:	460d      	mov	r5, r1
 8012096:	f7f8 ffc9 	bl	800b02c <is_uxrce_rmw_identifier_valid>
 801209a:	b910      	cbnz	r0, 80120a2 <rmw_destroy_service+0x16>
 801209c:	2401      	movs	r4, #1
 801209e:	4620      	mov	r0, r4
 80120a0:	bd70      	pop	{r4, r5, r6, pc}
 80120a2:	6863      	ldr	r3, [r4, #4]
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d0f9      	beq.n	801209c <rmw_destroy_service+0x10>
 80120a8:	2d00      	cmp	r5, #0
 80120aa:	d0f7      	beq.n	801209c <rmw_destroy_service+0x10>
 80120ac:	6828      	ldr	r0, [r5, #0]
 80120ae:	f7f8 ffbd 	bl	800b02c <is_uxrce_rmw_identifier_valid>
 80120b2:	2800      	cmp	r0, #0
 80120b4:	d0f2      	beq.n	801209c <rmw_destroy_service+0x10>
 80120b6:	686e      	ldr	r6, [r5, #4]
 80120b8:	2e00      	cmp	r6, #0
 80120ba:	d0ef      	beq.n	801209c <rmw_destroy_service+0x10>
 80120bc:	6864      	ldr	r4, [r4, #4]
 80120be:	6932      	ldr	r2, [r6, #16]
 80120c0:	6920      	ldr	r0, [r4, #16]
 80120c2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80120c6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80120ca:	6819      	ldr	r1, [r3, #0]
 80120cc:	f001 fb7a 	bl	80137c4 <uxr_buffer_cancel_data>
 80120d0:	4602      	mov	r2, r0
 80120d2:	6920      	ldr	r0, [r4, #16]
 80120d4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80120d8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80120dc:	f7f8 ff26 	bl	800af2c <run_xrce_session>
 80120e0:	6920      	ldr	r0, [r4, #16]
 80120e2:	6932      	ldr	r2, [r6, #16]
 80120e4:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80120e8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80120ec:	6819      	ldr	r1, [r3, #0]
 80120ee:	f7f9 f873 	bl	800b1d8 <uxr_buffer_delete_entity>
 80120f2:	4602      	mov	r2, r0
 80120f4:	6920      	ldr	r0, [r4, #16]
 80120f6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80120fa:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80120fe:	f7f8 ff15 	bl	800af2c <run_xrce_session>
 8012102:	2800      	cmp	r0, #0
 8012104:	4628      	mov	r0, r5
 8012106:	bf14      	ite	ne
 8012108:	2400      	movne	r4, #0
 801210a:	2402      	moveq	r4, #2
 801210c:	f7f8 fde0 	bl	800acd0 <rmw_uxrce_fini_service_memory>
 8012110:	e7c5      	b.n	801209e <rmw_destroy_service+0x12>
 8012112:	bf00      	nop

08012114 <rmw_create_subscription>:
 8012114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012118:	b08d      	sub	sp, #52	; 0x34
 801211a:	2800      	cmp	r0, #0
 801211c:	f000 80d1 	beq.w	80122c2 <rmw_create_subscription+0x1ae>
 8012120:	460e      	mov	r6, r1
 8012122:	2900      	cmp	r1, #0
 8012124:	f000 80cd 	beq.w	80122c2 <rmw_create_subscription+0x1ae>
 8012128:	4604      	mov	r4, r0
 801212a:	6800      	ldr	r0, [r0, #0]
 801212c:	4615      	mov	r5, r2
 801212e:	4698      	mov	r8, r3
 8012130:	f7f8 ff7c 	bl	800b02c <is_uxrce_rmw_identifier_valid>
 8012134:	2800      	cmp	r0, #0
 8012136:	f000 80c4 	beq.w	80122c2 <rmw_create_subscription+0x1ae>
 801213a:	2d00      	cmp	r5, #0
 801213c:	f000 80c1 	beq.w	80122c2 <rmw_create_subscription+0x1ae>
 8012140:	782b      	ldrb	r3, [r5, #0]
 8012142:	2b00      	cmp	r3, #0
 8012144:	f000 80bd 	beq.w	80122c2 <rmw_create_subscription+0x1ae>
 8012148:	f1b8 0f00 	cmp.w	r8, #0
 801214c:	f000 80b9 	beq.w	80122c2 <rmw_create_subscription+0x1ae>
 8012150:	485e      	ldr	r0, [pc, #376]	; (80122cc <rmw_create_subscription+0x1b8>)
 8012152:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8012156:	f7ff f9cb 	bl	80114f0 <get_memory>
 801215a:	4604      	mov	r4, r0
 801215c:	2800      	cmp	r0, #0
 801215e:	f000 80b1 	beq.w	80122c4 <rmw_create_subscription+0x1b0>
 8012162:	6887      	ldr	r7, [r0, #8]
 8012164:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 8012168:	f7ff fa2a 	bl	80115c0 <rmw_get_implementation_identifier>
 801216c:	f107 0a98 	add.w	sl, r7, #152	; 0x98
 8012170:	67f8      	str	r0, [r7, #124]	; 0x7c
 8012172:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 8012176:	4628      	mov	r0, r5
 8012178:	f7ee f83c 	bl	80001f4 <strlen>
 801217c:	3001      	adds	r0, #1
 801217e:	283c      	cmp	r0, #60	; 0x3c
 8012180:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8012184:	f200 8096 	bhi.w	80122b4 <rmw_create_subscription+0x1a0>
 8012188:	4a51      	ldr	r2, [pc, #324]	; (80122d0 <rmw_create_subscription+0x1bc>)
 801218a:	462b      	mov	r3, r5
 801218c:	213c      	movs	r1, #60	; 0x3c
 801218e:	4650      	mov	r0, sl
 8012190:	f002 ff50 	bl	8015034 <sniprintf>
 8012194:	4641      	mov	r1, r8
 8012196:	f8c7 9020 	str.w	r9, [r7, #32]
 801219a:	2250      	movs	r2, #80	; 0x50
 801219c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80121a0:	f003 f941 	bl	8015426 <memcpy>
 80121a4:	494b      	ldr	r1, [pc, #300]	; (80122d4 <rmw_create_subscription+0x1c0>)
 80121a6:	4630      	mov	r0, r6
 80121a8:	f7f8 ff4e 	bl	800b048 <get_message_typesupport_handle>
 80121ac:	2800      	cmp	r0, #0
 80121ae:	f000 8081 	beq.w	80122b4 <rmw_create_subscription+0x1a0>
 80121b2:	6842      	ldr	r2, [r0, #4]
 80121b4:	61ba      	str	r2, [r7, #24]
 80121b6:	2a00      	cmp	r2, #0
 80121b8:	d07c      	beq.n	80122b4 <rmw_create_subscription+0x1a0>
 80121ba:	4629      	mov	r1, r5
 80121bc:	4643      	mov	r3, r8
 80121be:	4648      	mov	r0, r9
 80121c0:	f7ff fc8c 	bl	8011adc <create_topic>
 80121c4:	61f8      	str	r0, [r7, #28]
 80121c6:	2800      	cmp	r0, #0
 80121c8:	d078      	beq.n	80122bc <rmw_create_subscription+0x1a8>
 80121ca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80121ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80121d2:	2104      	movs	r1, #4
 80121d4:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	; 0x59c
 80121d8:	1c42      	adds	r2, r0, #1
 80121da:	f8a3 259c 	strh.w	r2, [r3, #1436]	; 0x59c
 80121de:	f7f9 f9fd 	bl	800b5dc <uxr_object_id>
 80121e2:	6138      	str	r0, [r7, #16]
 80121e4:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80121e8:	2506      	movs	r5, #6
 80121ea:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 80121ee:	9500      	str	r5, [sp, #0]
 80121f0:	6819      	ldr	r1, [r3, #0]
 80121f2:	693a      	ldr	r2, [r7, #16]
 80121f4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80121f8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80121fc:	f7f9 f8d0 	bl	800b3a0 <uxr_buffer_create_subscriber_bin>
 8012200:	4602      	mov	r2, r0
 8012202:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8012206:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801220a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801220e:	f7f8 fe8d 	bl	800af2c <run_xrce_session>
 8012212:	2800      	cmp	r0, #0
 8012214:	d04e      	beq.n	80122b4 <rmw_create_subscription+0x1a0>
 8012216:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801221a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801221e:	4629      	mov	r1, r5
 8012220:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	; 0x59e
 8012224:	1c42      	adds	r2, r0, #1
 8012226:	f8a3 259e 	strh.w	r2, [r3, #1438]	; 0x59e
 801222a:	f7f9 f9d7 	bl	800b5dc <uxr_object_id>
 801222e:	ae08      	add	r6, sp, #32
 8012230:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012234:	69fb      	ldr	r3, [r7, #28]
 8012236:	6178      	str	r0, [r7, #20]
 8012238:	4641      	mov	r1, r8
 801223a:	4630      	mov	r0, r6
 801223c:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 8012240:	9305      	str	r3, [sp, #20]
 8012242:	f7f8 fe8f 	bl	800af64 <convert_qos_profile>
 8012246:	9503      	str	r5, [sp, #12]
 8012248:	e896 0003 	ldmia.w	r6, {r0, r1}
 801224c:	9b05      	ldr	r3, [sp, #20]
 801224e:	9001      	str	r0, [sp, #4]
 8012250:	f8ad 1008 	strh.w	r1, [sp, #8]
 8012254:	691b      	ldr	r3, [r3, #16]
 8012256:	9300      	str	r3, [sp, #0]
 8012258:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 801225c:	f8db 1000 	ldr.w	r1, [fp]
 8012260:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 8012264:	f7f9 f942 	bl	800b4ec <uxr_buffer_create_datareader_bin>
 8012268:	4602      	mov	r2, r0
 801226a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801226e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8012272:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8012276:	f7f8 fe59 	bl	800af2c <run_xrce_session>
 801227a:	b1d8      	cbz	r0, 80122b4 <rmw_create_subscription+0x1a0>
 801227c:	f898 3008 	ldrb.w	r3, [r8, #8]
 8012280:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8012284:	2b02      	cmp	r3, #2
 8012286:	bf0c      	ite	eq
 8012288:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 801228c:	f8d0 3374 	ldrne.w	r3, [r0, #884]	; 0x374
 8012290:	9307      	str	r3, [sp, #28]
 8012292:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012296:	2200      	movs	r2, #0
 8012298:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 801229c:	ab0a      	add	r3, sp, #40	; 0x28
 801229e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80122a2:	9300      	str	r3, [sp, #0]
 80122a4:	697a      	ldr	r2, [r7, #20]
 80122a6:	9b07      	ldr	r3, [sp, #28]
 80122a8:	6809      	ldr	r1, [r1, #0]
 80122aa:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80122ae:	f001 fa4f 	bl	8013750 <uxr_buffer_request_data>
 80122b2:	e007      	b.n	80122c4 <rmw_create_subscription+0x1b0>
 80122b4:	69f8      	ldr	r0, [r7, #28]
 80122b6:	b108      	cbz	r0, 80122bc <rmw_create_subscription+0x1a8>
 80122b8:	f7f8 fd36 	bl	800ad28 <rmw_uxrce_fini_topic_memory>
 80122bc:	4620      	mov	r0, r4
 80122be:	f7f8 fcf1 	bl	800aca4 <rmw_uxrce_fini_subscription_memory>
 80122c2:	2400      	movs	r4, #0
 80122c4:	4620      	mov	r0, r4
 80122c6:	b00d      	add	sp, #52	; 0x34
 80122c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122cc:	2000dc1c 	.word	0x2000dc1c
 80122d0:	08016670 	.word	0x08016670
 80122d4:	080163f8 	.word	0x080163f8

080122d8 <rmw_subscription_get_actual_qos>:
 80122d8:	b150      	cbz	r0, 80122f0 <rmw_subscription_get_actual_qos+0x18>
 80122da:	b508      	push	{r3, lr}
 80122dc:	460b      	mov	r3, r1
 80122de:	b149      	cbz	r1, 80122f4 <rmw_subscription_get_actual_qos+0x1c>
 80122e0:	6841      	ldr	r1, [r0, #4]
 80122e2:	2250      	movs	r2, #80	; 0x50
 80122e4:	3128      	adds	r1, #40	; 0x28
 80122e6:	4618      	mov	r0, r3
 80122e8:	f003 f89d 	bl	8015426 <memcpy>
 80122ec:	2000      	movs	r0, #0
 80122ee:	bd08      	pop	{r3, pc}
 80122f0:	200b      	movs	r0, #11
 80122f2:	4770      	bx	lr
 80122f4:	200b      	movs	r0, #11
 80122f6:	bd08      	pop	{r3, pc}

080122f8 <rmw_destroy_subscription>:
 80122f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122fa:	b128      	cbz	r0, 8012308 <rmw_destroy_subscription+0x10>
 80122fc:	4604      	mov	r4, r0
 80122fe:	6800      	ldr	r0, [r0, #0]
 8012300:	460d      	mov	r5, r1
 8012302:	f7f8 fe93 	bl	800b02c <is_uxrce_rmw_identifier_valid>
 8012306:	b910      	cbnz	r0, 801230e <rmw_destroy_subscription+0x16>
 8012308:	2401      	movs	r4, #1
 801230a:	4620      	mov	r0, r4
 801230c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801230e:	6863      	ldr	r3, [r4, #4]
 8012310:	2b00      	cmp	r3, #0
 8012312:	d0f9      	beq.n	8012308 <rmw_destroy_subscription+0x10>
 8012314:	2d00      	cmp	r5, #0
 8012316:	d0f7      	beq.n	8012308 <rmw_destroy_subscription+0x10>
 8012318:	6828      	ldr	r0, [r5, #0]
 801231a:	f7f8 fe87 	bl	800b02c <is_uxrce_rmw_identifier_valid>
 801231e:	2800      	cmp	r0, #0
 8012320:	d0f2      	beq.n	8012308 <rmw_destroy_subscription+0x10>
 8012322:	686c      	ldr	r4, [r5, #4]
 8012324:	2c00      	cmp	r4, #0
 8012326:	d0ef      	beq.n	8012308 <rmw_destroy_subscription+0x10>
 8012328:	6a26      	ldr	r6, [r4, #32]
 801232a:	6962      	ldr	r2, [r4, #20]
 801232c:	6930      	ldr	r0, [r6, #16]
 801232e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012332:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012336:	6819      	ldr	r1, [r3, #0]
 8012338:	f001 fa44 	bl	80137c4 <uxr_buffer_cancel_data>
 801233c:	4602      	mov	r2, r0
 801233e:	6930      	ldr	r0, [r6, #16]
 8012340:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012344:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8012348:	f7f8 fdf0 	bl	800af2c <run_xrce_session>
 801234c:	69e0      	ldr	r0, [r4, #28]
 801234e:	f7ff fc15 	bl	8011b7c <destroy_topic>
 8012352:	6a23      	ldr	r3, [r4, #32]
 8012354:	6962      	ldr	r2, [r4, #20]
 8012356:	6918      	ldr	r0, [r3, #16]
 8012358:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801235c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012360:	6819      	ldr	r1, [r3, #0]
 8012362:	f7f8 ff39 	bl	800b1d8 <uxr_buffer_delete_entity>
 8012366:	6a23      	ldr	r3, [r4, #32]
 8012368:	6922      	ldr	r2, [r4, #16]
 801236a:	691b      	ldr	r3, [r3, #16]
 801236c:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 8012370:	4604      	mov	r4, r0
 8012372:	6809      	ldr	r1, [r1, #0]
 8012374:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8012378:	f7f8 ff2e 	bl	800b1d8 <uxr_buffer_delete_entity>
 801237c:	6937      	ldr	r7, [r6, #16]
 801237e:	4622      	mov	r2, r4
 8012380:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8012384:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8012388:	4604      	mov	r4, r0
 801238a:	4638      	mov	r0, r7
 801238c:	f7f8 fdce 	bl	800af2c <run_xrce_session>
 8012390:	6936      	ldr	r6, [r6, #16]
 8012392:	4622      	mov	r2, r4
 8012394:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 8012398:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 801239c:	4604      	mov	r4, r0
 801239e:	4630      	mov	r0, r6
 80123a0:	f7f8 fdc4 	bl	800af2c <run_xrce_session>
 80123a4:	b12c      	cbz	r4, 80123b2 <rmw_destroy_subscription+0xba>
 80123a6:	b120      	cbz	r0, 80123b2 <rmw_destroy_subscription+0xba>
 80123a8:	2400      	movs	r4, #0
 80123aa:	4628      	mov	r0, r5
 80123ac:	f7f8 fc7a 	bl	800aca4 <rmw_uxrce_fini_subscription_memory>
 80123b0:	e7ab      	b.n	801230a <rmw_destroy_subscription+0x12>
 80123b2:	2402      	movs	r4, #2
 80123b4:	e7f9      	b.n	80123aa <rmw_destroy_subscription+0xb2>
 80123b6:	bf00      	nop

080123b8 <rmw_take_with_info>:
 80123b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123ba:	4604      	mov	r4, r0
 80123bc:	6800      	ldr	r0, [r0, #0]
 80123be:	b089      	sub	sp, #36	; 0x24
 80123c0:	460f      	mov	r7, r1
 80123c2:	4615      	mov	r5, r2
 80123c4:	b128      	cbz	r0, 80123d2 <rmw_take_with_info+0x1a>
 80123c6:	4b24      	ldr	r3, [pc, #144]	; (8012458 <rmw_take_with_info+0xa0>)
 80123c8:	6819      	ldr	r1, [r3, #0]
 80123ca:	f7ed ff09 	bl	80001e0 <strcmp>
 80123ce:	2800      	cmp	r0, #0
 80123d0:	d13e      	bne.n	8012450 <rmw_take_with_info+0x98>
 80123d2:	b305      	cbz	r5, 8012416 <rmw_take_with_info+0x5e>
 80123d4:	6864      	ldr	r4, [r4, #4]
 80123d6:	2300      	movs	r3, #0
 80123d8:	702b      	strb	r3, [r5, #0]
 80123da:	f7f8 fd29 	bl	800ae30 <rmw_uxrce_clean_expired_static_input_buffer>
 80123de:	4620      	mov	r0, r4
 80123e0:	f7f8 fcfe 	bl	800ade0 <rmw_uxrce_find_static_input_buffer_by_owner>
 80123e4:	4606      	mov	r6, r0
 80123e6:	b1f0      	cbz	r0, 8012426 <rmw_take_with_info+0x6e>
 80123e8:	6881      	ldr	r1, [r0, #8]
 80123ea:	4668      	mov	r0, sp
 80123ec:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 80123f0:	3110      	adds	r1, #16
 80123f2:	f7f6 fc47 	bl	8008c84 <ucdr_init_buffer>
 80123f6:	69a3      	ldr	r3, [r4, #24]
 80123f8:	4639      	mov	r1, r7
 80123fa:	68db      	ldr	r3, [r3, #12]
 80123fc:	4668      	mov	r0, sp
 80123fe:	4798      	blx	r3
 8012400:	4631      	mov	r1, r6
 8012402:	4604      	mov	r4, r0
 8012404:	4815      	ldr	r0, [pc, #84]	; (801245c <rmw_take_with_info+0xa4>)
 8012406:	f7ff f883 	bl	8011510 <put_memory>
 801240a:	702c      	strb	r4, [r5, #0]
 801240c:	f084 0001 	eor.w	r0, r4, #1
 8012410:	b2c0      	uxtb	r0, r0
 8012412:	b009      	add	sp, #36	; 0x24
 8012414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012416:	6864      	ldr	r4, [r4, #4]
 8012418:	f7f8 fd0a 	bl	800ae30 <rmw_uxrce_clean_expired_static_input_buffer>
 801241c:	4620      	mov	r0, r4
 801241e:	f7f8 fcdf 	bl	800ade0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8012422:	4605      	mov	r5, r0
 8012424:	b910      	cbnz	r0, 801242c <rmw_take_with_info+0x74>
 8012426:	2001      	movs	r0, #1
 8012428:	b009      	add	sp, #36	; 0x24
 801242a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801242c:	68a9      	ldr	r1, [r5, #8]
 801242e:	4668      	mov	r0, sp
 8012430:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8012434:	3110      	adds	r1, #16
 8012436:	f7f6 fc25 	bl	8008c84 <ucdr_init_buffer>
 801243a:	69a3      	ldr	r3, [r4, #24]
 801243c:	4639      	mov	r1, r7
 801243e:	68db      	ldr	r3, [r3, #12]
 8012440:	4668      	mov	r0, sp
 8012442:	4798      	blx	r3
 8012444:	4629      	mov	r1, r5
 8012446:	4604      	mov	r4, r0
 8012448:	4804      	ldr	r0, [pc, #16]	; (801245c <rmw_take_with_info+0xa4>)
 801244a:	f7ff f861 	bl	8011510 <put_memory>
 801244e:	e7dd      	b.n	801240c <rmw_take_with_info+0x54>
 8012450:	200c      	movs	r0, #12
 8012452:	b009      	add	sp, #36	; 0x24
 8012454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012456:	bf00      	nop
 8012458:	08016d8c 	.word	0x08016d8c
 801245c:	2000dc0c 	.word	0x2000dc0c

08012460 <rmw_trigger_guard_condition>:
 8012460:	b160      	cbz	r0, 801247c <rmw_trigger_guard_condition+0x1c>
 8012462:	b510      	push	{r4, lr}
 8012464:	4604      	mov	r4, r0
 8012466:	6800      	ldr	r0, [r0, #0]
 8012468:	f7f8 fde0 	bl	800b02c <is_uxrce_rmw_identifier_valid>
 801246c:	b908      	cbnz	r0, 8012472 <rmw_trigger_guard_condition+0x12>
 801246e:	2001      	movs	r0, #1
 8012470:	bd10      	pop	{r4, pc}
 8012472:	6863      	ldr	r3, [r4, #4]
 8012474:	2201      	movs	r2, #1
 8012476:	741a      	strb	r2, [r3, #16]
 8012478:	2000      	movs	r0, #0
 801247a:	bd10      	pop	{r4, pc}
 801247c:	2001      	movs	r0, #1
 801247e:	4770      	bx	lr

08012480 <rmw_uxrce_transport_init>:
 8012480:	b508      	push	{r3, lr}
 8012482:	b108      	cbz	r0, 8012488 <rmw_uxrce_transport_init+0x8>
 8012484:	f100 0210 	add.w	r2, r0, #16
 8012488:	b139      	cbz	r1, 801249a <rmw_uxrce_transport_init+0x1a>
 801248a:	6949      	ldr	r1, [r1, #20]
 801248c:	4610      	mov	r0, r2
 801248e:	f000 fbdf 	bl	8012c50 <uxr_init_custom_transport>
 8012492:	f080 0001 	eor.w	r0, r0, #1
 8012496:	b2c0      	uxtb	r0, r0
 8012498:	bd08      	pop	{r3, pc}
 801249a:	4b04      	ldr	r3, [pc, #16]	; (80124ac <rmw_uxrce_transport_init+0x2c>)
 801249c:	4610      	mov	r0, r2
 801249e:	6859      	ldr	r1, [r3, #4]
 80124a0:	f000 fbd6 	bl	8012c50 <uxr_init_custom_transport>
 80124a4:	f080 0001 	eor.w	r0, r0, #1
 80124a8:	b2c0      	uxtb	r0, r0
 80124aa:	bd08      	pop	{r3, pc}
 80124ac:	200092e4 	.word	0x200092e4

080124b0 <rmw_wait>:
 80124b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80124b4:	b089      	sub	sp, #36	; 0x24
 80124b6:	4605      	mov	r5, r0
 80124b8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80124ba:	460e      	mov	r6, r1
 80124bc:	4698      	mov	r8, r3
 80124be:	4691      	mov	r9, r2
 80124c0:	2a00      	cmp	r2, #0
 80124c2:	f000 810a 	beq.w	80126da <rmw_wait+0x22a>
 80124c6:	b16c      	cbz	r4, 80124e4 <rmw_wait+0x34>
 80124c8:	4bae      	ldr	r3, [pc, #696]	; (8012784 <rmw_wait+0x2d4>)
 80124ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80124cc:	af04      	add	r7, sp, #16
 80124ce:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80124d2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80124d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80124da:	f7fe fe3d 	bl	8011158 <rmw_time_equal>
 80124de:	2800      	cmp	r0, #0
 80124e0:	f000 8127 	beq.w	8012732 <rmw_wait+0x282>
 80124e4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80124e8:	f7f8 fca2 	bl	800ae30 <rmw_uxrce_clean_expired_static_input_buffer>
 80124ec:	4ba6      	ldr	r3, [pc, #664]	; (8012788 <rmw_wait+0x2d8>)
 80124ee:	681c      	ldr	r4, [r3, #0]
 80124f0:	b14c      	cbz	r4, 8012506 <rmw_wait+0x56>
 80124f2:	4623      	mov	r3, r4
 80124f4:	2100      	movs	r1, #0
 80124f6:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 80124fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80124fe:	f882 15a4 	strb.w	r1, [r2, #1444]	; 0x5a4
 8012502:	2b00      	cmp	r3, #0
 8012504:	d1f7      	bne.n	80124f6 <rmw_wait+0x46>
 8012506:	f1b9 0f00 	cmp.w	r9, #0
 801250a:	d011      	beq.n	8012530 <rmw_wait+0x80>
 801250c:	f8d9 1000 	ldr.w	r1, [r9]
 8012510:	b171      	cbz	r1, 8012530 <rmw_wait+0x80>
 8012512:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8012516:	2300      	movs	r3, #0
 8012518:	2001      	movs	r0, #1
 801251a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801251e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8012520:	6912      	ldr	r2, [r2, #16]
 8012522:	3301      	adds	r3, #1
 8012524:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8012528:	4299      	cmp	r1, r3
 801252a:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801252e:	d1f4      	bne.n	801251a <rmw_wait+0x6a>
 8012530:	f1b8 0f00 	cmp.w	r8, #0
 8012534:	d011      	beq.n	801255a <rmw_wait+0xaa>
 8012536:	f8d8 1000 	ldr.w	r1, [r8]
 801253a:	b171      	cbz	r1, 801255a <rmw_wait+0xaa>
 801253c:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8012540:	2300      	movs	r3, #0
 8012542:	2001      	movs	r0, #1
 8012544:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8012548:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801254a:	6912      	ldr	r2, [r2, #16]
 801254c:	3301      	adds	r3, #1
 801254e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8012552:	4299      	cmp	r1, r3
 8012554:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 8012558:	d1f4      	bne.n	8012544 <rmw_wait+0x94>
 801255a:	b185      	cbz	r5, 801257e <rmw_wait+0xce>
 801255c:	6829      	ldr	r1, [r5, #0]
 801255e:	b171      	cbz	r1, 801257e <rmw_wait+0xce>
 8012560:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8012564:	2300      	movs	r3, #0
 8012566:	2001      	movs	r0, #1
 8012568:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801256c:	6a12      	ldr	r2, [r2, #32]
 801256e:	6912      	ldr	r2, [r2, #16]
 8012570:	3301      	adds	r3, #1
 8012572:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8012576:	4299      	cmp	r1, r3
 8012578:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801257c:	d1f4      	bne.n	8012568 <rmw_wait+0xb8>
 801257e:	b34c      	cbz	r4, 80125d4 <rmw_wait+0x124>
 8012580:	4622      	mov	r2, r4
 8012582:	2300      	movs	r3, #0
 8012584:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8012588:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 801258c:	f891 15a4 	ldrb.w	r1, [r1, #1444]	; 0x5a4
 8012590:	440b      	add	r3, r1
 8012592:	b2db      	uxtb	r3, r3
 8012594:	2a00      	cmp	r2, #0
 8012596:	d1f5      	bne.n	8012584 <rmw_wait+0xd4>
 8012598:	2b00      	cmp	r3, #0
 801259a:	f000 8084 	beq.w	80126a6 <rmw_wait+0x1f6>
 801259e:	1c7a      	adds	r2, r7, #1
 80125a0:	d00d      	beq.n	80125be <rmw_wait+0x10e>
 80125a2:	ee07 7a90 	vmov	s15, r7
 80125a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80125aa:	ee07 3a90 	vmov	s15, r3
 80125ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80125b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80125b6:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80125ba:	ee17 7a90 	vmov	r7, s15
 80125be:	68a0      	ldr	r0, [r4, #8]
 80125c0:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 80125c4:	f893 35a4 	ldrb.w	r3, [r3, #1444]	; 0x5a4
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	f040 8090 	bne.w	80126ee <rmw_wait+0x23e>
 80125ce:	6864      	ldr	r4, [r4, #4]
 80125d0:	2c00      	cmp	r4, #0
 80125d2:	d1f4      	bne.n	80125be <rmw_wait+0x10e>
 80125d4:	f1b9 0f00 	cmp.w	r9, #0
 80125d8:	f000 80bc 	beq.w	8012754 <rmw_wait+0x2a4>
 80125dc:	f8d9 7000 	ldr.w	r7, [r9]
 80125e0:	2f00      	cmp	r7, #0
 80125e2:	f000 808e 	beq.w	8012702 <rmw_wait+0x252>
 80125e6:	2400      	movs	r4, #0
 80125e8:	4627      	mov	r7, r4
 80125ea:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80125ee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80125f2:	f7f8 fbf5 	bl	800ade0 <rmw_uxrce_find_static_input_buffer_by_owner>
 80125f6:	2800      	cmp	r0, #0
 80125f8:	d05f      	beq.n	80126ba <rmw_wait+0x20a>
 80125fa:	f8d9 3000 	ldr.w	r3, [r9]
 80125fe:	3401      	adds	r4, #1
 8012600:	42a3      	cmp	r3, r4
 8012602:	f04f 0701 	mov.w	r7, #1
 8012606:	d8f0      	bhi.n	80125ea <rmw_wait+0x13a>
 8012608:	f1b8 0f00 	cmp.w	r8, #0
 801260c:	d012      	beq.n	8012634 <rmw_wait+0x184>
 801260e:	f8d8 3000 	ldr.w	r3, [r8]
 8012612:	b17b      	cbz	r3, 8012634 <rmw_wait+0x184>
 8012614:	2400      	movs	r4, #0
 8012616:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801261a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801261e:	f7f8 fbdf 	bl	800ade0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8012622:	2800      	cmp	r0, #0
 8012624:	d051      	beq.n	80126ca <rmw_wait+0x21a>
 8012626:	f8d8 3000 	ldr.w	r3, [r8]
 801262a:	3401      	adds	r4, #1
 801262c:	42a3      	cmp	r3, r4
 801262e:	f04f 0701 	mov.w	r7, #1
 8012632:	d8f0      	bhi.n	8012616 <rmw_wait+0x166>
 8012634:	b1dd      	cbz	r5, 801266e <rmw_wait+0x1be>
 8012636:	682b      	ldr	r3, [r5, #0]
 8012638:	b1cb      	cbz	r3, 801266e <rmw_wait+0x1be>
 801263a:	2400      	movs	r4, #0
 801263c:	686b      	ldr	r3, [r5, #4]
 801263e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012642:	f7f8 fbcd 	bl	800ade0 <rmw_uxrce_find_static_input_buffer_by_owner>
 8012646:	b158      	cbz	r0, 8012660 <rmw_wait+0x1b0>
 8012648:	682b      	ldr	r3, [r5, #0]
 801264a:	3401      	adds	r4, #1
 801264c:	42a3      	cmp	r3, r4
 801264e:	d969      	bls.n	8012724 <rmw_wait+0x274>
 8012650:	686b      	ldr	r3, [r5, #4]
 8012652:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012656:	2701      	movs	r7, #1
 8012658:	f7f8 fbc2 	bl	800ade0 <rmw_uxrce_find_static_input_buffer_by_owner>
 801265c:	2800      	cmp	r0, #0
 801265e:	d1f3      	bne.n	8012648 <rmw_wait+0x198>
 8012660:	e9d5 3200 	ldrd	r3, r2, [r5]
 8012664:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8012668:	3401      	adds	r4, #1
 801266a:	42a3      	cmp	r3, r4
 801266c:	d8e6      	bhi.n	801263c <rmw_wait+0x18c>
 801266e:	b1a6      	cbz	r6, 801269a <rmw_wait+0x1ea>
 8012670:	6834      	ldr	r4, [r6, #0]
 8012672:	b194      	cbz	r4, 801269a <rmw_wait+0x1ea>
 8012674:	2300      	movs	r3, #0
 8012676:	461d      	mov	r5, r3
 8012678:	e004      	b.n	8012684 <rmw_wait+0x1d4>
 801267a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801267e:	3301      	adds	r3, #1
 8012680:	42a3      	cmp	r3, r4
 8012682:	d00a      	beq.n	801269a <rmw_wait+0x1ea>
 8012684:	6870      	ldr	r0, [r6, #4]
 8012686:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801268a:	7c0a      	ldrb	r2, [r1, #16]
 801268c:	2a00      	cmp	r2, #0
 801268e:	d0f4      	beq.n	801267a <rmw_wait+0x1ca>
 8012690:	3301      	adds	r3, #1
 8012692:	42a3      	cmp	r3, r4
 8012694:	740d      	strb	r5, [r1, #16]
 8012696:	4617      	mov	r7, r2
 8012698:	d1f4      	bne.n	8012684 <rmw_wait+0x1d4>
 801269a:	2f00      	cmp	r7, #0
 801269c:	d03e      	beq.n	801271c <rmw_wait+0x26c>
 801269e:	2000      	movs	r0, #0
 80126a0:	b009      	add	sp, #36	; 0x24
 80126a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80126a6:	68a0      	ldr	r0, [r4, #8]
 80126a8:	2100      	movs	r1, #0
 80126aa:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80126ae:	f7f9 fc69 	bl	800bf84 <uxr_run_session_timeout>
 80126b2:	6864      	ldr	r4, [r4, #4]
 80126b4:	2c00      	cmp	r4, #0
 80126b6:	d1f6      	bne.n	80126a6 <rmw_wait+0x1f6>
 80126b8:	e78c      	b.n	80125d4 <rmw_wait+0x124>
 80126ba:	e9d9 3200 	ldrd	r3, r2, [r9]
 80126be:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80126c2:	3401      	adds	r4, #1
 80126c4:	42a3      	cmp	r3, r4
 80126c6:	d890      	bhi.n	80125ea <rmw_wait+0x13a>
 80126c8:	e79e      	b.n	8012608 <rmw_wait+0x158>
 80126ca:	e9d8 3200 	ldrd	r3, r2, [r8]
 80126ce:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80126d2:	3401      	adds	r4, #1
 80126d4:	429c      	cmp	r4, r3
 80126d6:	d39e      	bcc.n	8012616 <rmw_wait+0x166>
 80126d8:	e7ac      	b.n	8012634 <rmw_wait+0x184>
 80126da:	2b00      	cmp	r3, #0
 80126dc:	f47f aef3 	bne.w	80124c6 <rmw_wait+0x16>
 80126e0:	2800      	cmp	r0, #0
 80126e2:	f47f aef0 	bne.w	80124c6 <rmw_wait+0x16>
 80126e6:	2900      	cmp	r1, #0
 80126e8:	f47f aeed 	bne.w	80124c6 <rmw_wait+0x16>
 80126ec:	e7d7      	b.n	801269e <rmw_wait+0x1ee>
 80126ee:	4639      	mov	r1, r7
 80126f0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80126f4:	f7f9 fc60 	bl	800bfb8 <uxr_run_session_until_data>
 80126f8:	6864      	ldr	r4, [r4, #4]
 80126fa:	2c00      	cmp	r4, #0
 80126fc:	f47f af5f 	bne.w	80125be <rmw_wait+0x10e>
 8012700:	e768      	b.n	80125d4 <rmw_wait+0x124>
 8012702:	f1b8 0f00 	cmp.w	r8, #0
 8012706:	d032      	beq.n	801276e <rmw_wait+0x2be>
 8012708:	f8d8 3000 	ldr.w	r3, [r8]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d181      	bne.n	8012614 <rmw_wait+0x164>
 8012710:	461f      	mov	r7, r3
 8012712:	2d00      	cmp	r5, #0
 8012714:	d18f      	bne.n	8012636 <rmw_wait+0x186>
 8012716:	462f      	mov	r7, r5
 8012718:	2e00      	cmp	r6, #0
 801271a:	d1a9      	bne.n	8012670 <rmw_wait+0x1c0>
 801271c:	2002      	movs	r0, #2
 801271e:	b009      	add	sp, #36	; 0x24
 8012720:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012724:	2e00      	cmp	r6, #0
 8012726:	d0ba      	beq.n	801269e <rmw_wait+0x1ee>
 8012728:	6834      	ldr	r4, [r6, #0]
 801272a:	2701      	movs	r7, #1
 801272c:	2c00      	cmp	r4, #0
 801272e:	d1a1      	bne.n	8012674 <rmw_wait+0x1c4>
 8012730:	e7b5      	b.n	801269e <rmw_wait+0x1ee>
 8012732:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8012736:	f7fe fd63 	bl	8011200 <rmw_time_total_nsec>
 801273a:	2300      	movs	r3, #0
 801273c:	4a13      	ldr	r2, [pc, #76]	; (801278c <rmw_wait+0x2dc>)
 801273e:	f7ed fe07 	bl	8000350 <__aeabi_uldivmod>
 8012742:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8012746:	f171 0300 	sbcs.w	r3, r1, #0
 801274a:	4607      	mov	r7, r0
 801274c:	bfa8      	it	ge
 801274e:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 8012752:	e6c9      	b.n	80124e8 <rmw_wait+0x38>
 8012754:	f1b8 0f00 	cmp.w	r8, #0
 8012758:	d009      	beq.n	801276e <rmw_wait+0x2be>
 801275a:	f8d8 3000 	ldr.w	r3, [r8]
 801275e:	464f      	mov	r7, r9
 8012760:	2b00      	cmp	r3, #0
 8012762:	f47f af57 	bne.w	8012614 <rmw_wait+0x164>
 8012766:	2d00      	cmp	r5, #0
 8012768:	f47f af65 	bne.w	8012636 <rmw_wait+0x186>
 801276c:	e7d3      	b.n	8012716 <rmw_wait+0x266>
 801276e:	b17d      	cbz	r5, 8012790 <rmw_wait+0x2e0>
 8012770:	682b      	ldr	r3, [r5, #0]
 8012772:	4647      	mov	r7, r8
 8012774:	2b00      	cmp	r3, #0
 8012776:	f47f af60 	bne.w	801263a <rmw_wait+0x18a>
 801277a:	2e00      	cmp	r6, #0
 801277c:	f47f af78 	bne.w	8012670 <rmw_wait+0x1c0>
 8012780:	e7cc      	b.n	801271c <rmw_wait+0x26c>
 8012782:	bf00      	nop
 8012784:	080162b0 	.word	0x080162b0
 8012788:	2000dbfc 	.word	0x2000dbfc
 801278c:	000f4240 	.word	0x000f4240
 8012790:	2e00      	cmp	r6, #0
 8012792:	d0c3      	beq.n	801271c <rmw_wait+0x26c>
 8012794:	6834      	ldr	r4, [r6, #0]
 8012796:	462f      	mov	r7, r5
 8012798:	2c00      	cmp	r4, #0
 801279a:	f47f af6b 	bne.w	8012674 <rmw_wait+0x1c4>
 801279e:	e7bd      	b.n	801271c <rmw_wait+0x26c>

080127a0 <rmw_create_wait_set>:
 80127a0:	b508      	push	{r3, lr}
 80127a2:	4803      	ldr	r0, [pc, #12]	; (80127b0 <rmw_create_wait_set+0x10>)
 80127a4:	f7fe fea4 	bl	80114f0 <get_memory>
 80127a8:	b108      	cbz	r0, 80127ae <rmw_create_wait_set+0xe>
 80127aa:	6880      	ldr	r0, [r0, #8]
 80127ac:	3010      	adds	r0, #16
 80127ae:	bd08      	pop	{r3, pc}
 80127b0:	2000dc3c 	.word	0x2000dc3c

080127b4 <rmw_destroy_wait_set>:
 80127b4:	b508      	push	{r3, lr}
 80127b6:	4b08      	ldr	r3, [pc, #32]	; (80127d8 <rmw_destroy_wait_set+0x24>)
 80127b8:	6819      	ldr	r1, [r3, #0]
 80127ba:	b911      	cbnz	r1, 80127c2 <rmw_destroy_wait_set+0xe>
 80127bc:	e00a      	b.n	80127d4 <rmw_destroy_wait_set+0x20>
 80127be:	6849      	ldr	r1, [r1, #4]
 80127c0:	b141      	cbz	r1, 80127d4 <rmw_destroy_wait_set+0x20>
 80127c2:	688b      	ldr	r3, [r1, #8]
 80127c4:	3310      	adds	r3, #16
 80127c6:	4298      	cmp	r0, r3
 80127c8:	d1f9      	bne.n	80127be <rmw_destroy_wait_set+0xa>
 80127ca:	4803      	ldr	r0, [pc, #12]	; (80127d8 <rmw_destroy_wait_set+0x24>)
 80127cc:	f7fe fea0 	bl	8011510 <put_memory>
 80127d0:	2000      	movs	r0, #0
 80127d2:	bd08      	pop	{r3, pc}
 80127d4:	2001      	movs	r0, #1
 80127d6:	bd08      	pop	{r3, pc}
 80127d8:	2000dc3c 	.word	0x2000dc3c

080127dc <rmw_uros_epoch_nanos>:
 80127dc:	4b05      	ldr	r3, [pc, #20]	; (80127f4 <rmw_uros_epoch_nanos+0x18>)
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	b123      	cbz	r3, 80127ec <rmw_uros_epoch_nanos+0x10>
 80127e2:	6898      	ldr	r0, [r3, #8]
 80127e4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80127e8:	f7f9 b83c 	b.w	800b864 <uxr_epoch_nanos>
 80127ec:	2000      	movs	r0, #0
 80127ee:	2100      	movs	r1, #0
 80127f0:	4770      	bx	lr
 80127f2:	bf00      	nop
 80127f4:	2000dbfc 	.word	0x2000dbfc

080127f8 <std_msgs__msg__Int32__init>:
 80127f8:	3800      	subs	r0, #0
 80127fa:	bf18      	it	ne
 80127fc:	2001      	movne	r0, #1
 80127fe:	4770      	bx	lr

08012800 <std_msgs__msg__Int32__fini>:
 8012800:	4770      	bx	lr
 8012802:	bf00      	nop

08012804 <ucdr_serialize_endian_array_char>:
 8012804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012808:	4619      	mov	r1, r3
 801280a:	461f      	mov	r7, r3
 801280c:	4605      	mov	r5, r0
 801280e:	4690      	mov	r8, r2
 8012810:	f7f6 f9e4 	bl	8008bdc <ucdr_check_buffer_available_for>
 8012814:	b9e0      	cbnz	r0, 8012850 <ucdr_serialize_endian_array_char+0x4c>
 8012816:	463e      	mov	r6, r7
 8012818:	e009      	b.n	801282e <ucdr_serialize_endian_array_char+0x2a>
 801281a:	68a8      	ldr	r0, [r5, #8]
 801281c:	f002 fe03 	bl	8015426 <memcpy>
 8012820:	68ab      	ldr	r3, [r5, #8]
 8012822:	6928      	ldr	r0, [r5, #16]
 8012824:	4423      	add	r3, r4
 8012826:	4420      	add	r0, r4
 8012828:	1b36      	subs	r6, r6, r4
 801282a:	60ab      	str	r3, [r5, #8]
 801282c:	6128      	str	r0, [r5, #16]
 801282e:	4631      	mov	r1, r6
 8012830:	2201      	movs	r2, #1
 8012832:	4628      	mov	r0, r5
 8012834:	f7f6 fa5a 	bl	8008cec <ucdr_check_final_buffer_behavior_array>
 8012838:	1bb9      	subs	r1, r7, r6
 801283a:	4441      	add	r1, r8
 801283c:	4604      	mov	r4, r0
 801283e:	4602      	mov	r2, r0
 8012840:	2800      	cmp	r0, #0
 8012842:	d1ea      	bne.n	801281a <ucdr_serialize_endian_array_char+0x16>
 8012844:	2301      	movs	r3, #1
 8012846:	7da8      	ldrb	r0, [r5, #22]
 8012848:	756b      	strb	r3, [r5, #21]
 801284a:	4058      	eors	r0, r3
 801284c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012850:	463a      	mov	r2, r7
 8012852:	68a8      	ldr	r0, [r5, #8]
 8012854:	4641      	mov	r1, r8
 8012856:	f002 fde6 	bl	8015426 <memcpy>
 801285a:	68aa      	ldr	r2, [r5, #8]
 801285c:	692b      	ldr	r3, [r5, #16]
 801285e:	443a      	add	r2, r7
 8012860:	443b      	add	r3, r7
 8012862:	60aa      	str	r2, [r5, #8]
 8012864:	612b      	str	r3, [r5, #16]
 8012866:	e7ed      	b.n	8012844 <ucdr_serialize_endian_array_char+0x40>

08012868 <ucdr_deserialize_endian_array_char>:
 8012868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801286c:	4619      	mov	r1, r3
 801286e:	461f      	mov	r7, r3
 8012870:	4605      	mov	r5, r0
 8012872:	4690      	mov	r8, r2
 8012874:	f7f6 f9b2 	bl	8008bdc <ucdr_check_buffer_available_for>
 8012878:	b9e0      	cbnz	r0, 80128b4 <ucdr_deserialize_endian_array_char+0x4c>
 801287a:	463e      	mov	r6, r7
 801287c:	e009      	b.n	8012892 <ucdr_deserialize_endian_array_char+0x2a>
 801287e:	68a9      	ldr	r1, [r5, #8]
 8012880:	f002 fdd1 	bl	8015426 <memcpy>
 8012884:	68ab      	ldr	r3, [r5, #8]
 8012886:	6928      	ldr	r0, [r5, #16]
 8012888:	4423      	add	r3, r4
 801288a:	4420      	add	r0, r4
 801288c:	1b36      	subs	r6, r6, r4
 801288e:	60ab      	str	r3, [r5, #8]
 8012890:	6128      	str	r0, [r5, #16]
 8012892:	2201      	movs	r2, #1
 8012894:	4631      	mov	r1, r6
 8012896:	4628      	mov	r0, r5
 8012898:	f7f6 fa28 	bl	8008cec <ucdr_check_final_buffer_behavior_array>
 801289c:	4604      	mov	r4, r0
 801289e:	1bb8      	subs	r0, r7, r6
 80128a0:	4440      	add	r0, r8
 80128a2:	4622      	mov	r2, r4
 80128a4:	2c00      	cmp	r4, #0
 80128a6:	d1ea      	bne.n	801287e <ucdr_deserialize_endian_array_char+0x16>
 80128a8:	2301      	movs	r3, #1
 80128aa:	7da8      	ldrb	r0, [r5, #22]
 80128ac:	756b      	strb	r3, [r5, #21]
 80128ae:	4058      	eors	r0, r3
 80128b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128b4:	463a      	mov	r2, r7
 80128b6:	68a9      	ldr	r1, [r5, #8]
 80128b8:	4640      	mov	r0, r8
 80128ba:	f002 fdb4 	bl	8015426 <memcpy>
 80128be:	68aa      	ldr	r2, [r5, #8]
 80128c0:	692b      	ldr	r3, [r5, #16]
 80128c2:	443a      	add	r2, r7
 80128c4:	443b      	add	r3, r7
 80128c6:	60aa      	str	r2, [r5, #8]
 80128c8:	612b      	str	r3, [r5, #16]
 80128ca:	e7ed      	b.n	80128a8 <ucdr_deserialize_endian_array_char+0x40>

080128cc <ucdr_serialize_array_uint8_t>:
 80128cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128d0:	4688      	mov	r8, r1
 80128d2:	4611      	mov	r1, r2
 80128d4:	4617      	mov	r7, r2
 80128d6:	4605      	mov	r5, r0
 80128d8:	f7f6 f980 	bl	8008bdc <ucdr_check_buffer_available_for>
 80128dc:	b9e0      	cbnz	r0, 8012918 <ucdr_serialize_array_uint8_t+0x4c>
 80128de:	463e      	mov	r6, r7
 80128e0:	e009      	b.n	80128f6 <ucdr_serialize_array_uint8_t+0x2a>
 80128e2:	68a8      	ldr	r0, [r5, #8]
 80128e4:	f002 fd9f 	bl	8015426 <memcpy>
 80128e8:	68aa      	ldr	r2, [r5, #8]
 80128ea:	692b      	ldr	r3, [r5, #16]
 80128ec:	4422      	add	r2, r4
 80128ee:	4423      	add	r3, r4
 80128f0:	1b36      	subs	r6, r6, r4
 80128f2:	60aa      	str	r2, [r5, #8]
 80128f4:	612b      	str	r3, [r5, #16]
 80128f6:	4631      	mov	r1, r6
 80128f8:	2201      	movs	r2, #1
 80128fa:	4628      	mov	r0, r5
 80128fc:	f7f6 f9f6 	bl	8008cec <ucdr_check_final_buffer_behavior_array>
 8012900:	1bb9      	subs	r1, r7, r6
 8012902:	4441      	add	r1, r8
 8012904:	4604      	mov	r4, r0
 8012906:	4602      	mov	r2, r0
 8012908:	2800      	cmp	r0, #0
 801290a:	d1ea      	bne.n	80128e2 <ucdr_serialize_array_uint8_t+0x16>
 801290c:	2301      	movs	r3, #1
 801290e:	7da8      	ldrb	r0, [r5, #22]
 8012910:	756b      	strb	r3, [r5, #21]
 8012912:	4058      	eors	r0, r3
 8012914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012918:	463a      	mov	r2, r7
 801291a:	68a8      	ldr	r0, [r5, #8]
 801291c:	4641      	mov	r1, r8
 801291e:	f002 fd82 	bl	8015426 <memcpy>
 8012922:	68aa      	ldr	r2, [r5, #8]
 8012924:	692b      	ldr	r3, [r5, #16]
 8012926:	443a      	add	r2, r7
 8012928:	443b      	add	r3, r7
 801292a:	60aa      	str	r2, [r5, #8]
 801292c:	612b      	str	r3, [r5, #16]
 801292e:	e7ed      	b.n	801290c <ucdr_serialize_array_uint8_t+0x40>

08012930 <ucdr_serialize_endian_array_uint8_t>:
 8012930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012934:	4619      	mov	r1, r3
 8012936:	461f      	mov	r7, r3
 8012938:	4605      	mov	r5, r0
 801293a:	4690      	mov	r8, r2
 801293c:	f7f6 f94e 	bl	8008bdc <ucdr_check_buffer_available_for>
 8012940:	b9e0      	cbnz	r0, 801297c <ucdr_serialize_endian_array_uint8_t+0x4c>
 8012942:	463e      	mov	r6, r7
 8012944:	e009      	b.n	801295a <ucdr_serialize_endian_array_uint8_t+0x2a>
 8012946:	68a8      	ldr	r0, [r5, #8]
 8012948:	f002 fd6d 	bl	8015426 <memcpy>
 801294c:	68ab      	ldr	r3, [r5, #8]
 801294e:	6928      	ldr	r0, [r5, #16]
 8012950:	4423      	add	r3, r4
 8012952:	4420      	add	r0, r4
 8012954:	1b36      	subs	r6, r6, r4
 8012956:	60ab      	str	r3, [r5, #8]
 8012958:	6128      	str	r0, [r5, #16]
 801295a:	4631      	mov	r1, r6
 801295c:	2201      	movs	r2, #1
 801295e:	4628      	mov	r0, r5
 8012960:	f7f6 f9c4 	bl	8008cec <ucdr_check_final_buffer_behavior_array>
 8012964:	1bb9      	subs	r1, r7, r6
 8012966:	4441      	add	r1, r8
 8012968:	4604      	mov	r4, r0
 801296a:	4602      	mov	r2, r0
 801296c:	2800      	cmp	r0, #0
 801296e:	d1ea      	bne.n	8012946 <ucdr_serialize_endian_array_uint8_t+0x16>
 8012970:	2301      	movs	r3, #1
 8012972:	7da8      	ldrb	r0, [r5, #22]
 8012974:	756b      	strb	r3, [r5, #21]
 8012976:	4058      	eors	r0, r3
 8012978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801297c:	463a      	mov	r2, r7
 801297e:	68a8      	ldr	r0, [r5, #8]
 8012980:	4641      	mov	r1, r8
 8012982:	f002 fd50 	bl	8015426 <memcpy>
 8012986:	68aa      	ldr	r2, [r5, #8]
 8012988:	692b      	ldr	r3, [r5, #16]
 801298a:	443a      	add	r2, r7
 801298c:	443b      	add	r3, r7
 801298e:	60aa      	str	r2, [r5, #8]
 8012990:	612b      	str	r3, [r5, #16]
 8012992:	e7ed      	b.n	8012970 <ucdr_serialize_endian_array_uint8_t+0x40>

08012994 <ucdr_deserialize_array_uint8_t>:
 8012994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012998:	4688      	mov	r8, r1
 801299a:	4611      	mov	r1, r2
 801299c:	4617      	mov	r7, r2
 801299e:	4605      	mov	r5, r0
 80129a0:	f7f6 f91c 	bl	8008bdc <ucdr_check_buffer_available_for>
 80129a4:	b9e0      	cbnz	r0, 80129e0 <ucdr_deserialize_array_uint8_t+0x4c>
 80129a6:	463e      	mov	r6, r7
 80129a8:	e009      	b.n	80129be <ucdr_deserialize_array_uint8_t+0x2a>
 80129aa:	68a9      	ldr	r1, [r5, #8]
 80129ac:	f002 fd3b 	bl	8015426 <memcpy>
 80129b0:	68aa      	ldr	r2, [r5, #8]
 80129b2:	692b      	ldr	r3, [r5, #16]
 80129b4:	4422      	add	r2, r4
 80129b6:	4423      	add	r3, r4
 80129b8:	1b36      	subs	r6, r6, r4
 80129ba:	60aa      	str	r2, [r5, #8]
 80129bc:	612b      	str	r3, [r5, #16]
 80129be:	2201      	movs	r2, #1
 80129c0:	4631      	mov	r1, r6
 80129c2:	4628      	mov	r0, r5
 80129c4:	f7f6 f992 	bl	8008cec <ucdr_check_final_buffer_behavior_array>
 80129c8:	4604      	mov	r4, r0
 80129ca:	1bb8      	subs	r0, r7, r6
 80129cc:	4440      	add	r0, r8
 80129ce:	4622      	mov	r2, r4
 80129d0:	2c00      	cmp	r4, #0
 80129d2:	d1ea      	bne.n	80129aa <ucdr_deserialize_array_uint8_t+0x16>
 80129d4:	2301      	movs	r3, #1
 80129d6:	7da8      	ldrb	r0, [r5, #22]
 80129d8:	756b      	strb	r3, [r5, #21]
 80129da:	4058      	eors	r0, r3
 80129dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129e0:	463a      	mov	r2, r7
 80129e2:	68a9      	ldr	r1, [r5, #8]
 80129e4:	4640      	mov	r0, r8
 80129e6:	f002 fd1e 	bl	8015426 <memcpy>
 80129ea:	68aa      	ldr	r2, [r5, #8]
 80129ec:	692b      	ldr	r3, [r5, #16]
 80129ee:	443a      	add	r2, r7
 80129f0:	443b      	add	r3, r7
 80129f2:	60aa      	str	r2, [r5, #8]
 80129f4:	612b      	str	r3, [r5, #16]
 80129f6:	e7ed      	b.n	80129d4 <ucdr_deserialize_array_uint8_t+0x40>

080129f8 <ucdr_deserialize_endian_array_uint8_t>:
 80129f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129fc:	4619      	mov	r1, r3
 80129fe:	461f      	mov	r7, r3
 8012a00:	4605      	mov	r5, r0
 8012a02:	4690      	mov	r8, r2
 8012a04:	f7f6 f8ea 	bl	8008bdc <ucdr_check_buffer_available_for>
 8012a08:	b9e0      	cbnz	r0, 8012a44 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8012a0a:	463e      	mov	r6, r7
 8012a0c:	e009      	b.n	8012a22 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8012a0e:	68a9      	ldr	r1, [r5, #8]
 8012a10:	f002 fd09 	bl	8015426 <memcpy>
 8012a14:	68ab      	ldr	r3, [r5, #8]
 8012a16:	6928      	ldr	r0, [r5, #16]
 8012a18:	4423      	add	r3, r4
 8012a1a:	4420      	add	r0, r4
 8012a1c:	1b36      	subs	r6, r6, r4
 8012a1e:	60ab      	str	r3, [r5, #8]
 8012a20:	6128      	str	r0, [r5, #16]
 8012a22:	2201      	movs	r2, #1
 8012a24:	4631      	mov	r1, r6
 8012a26:	4628      	mov	r0, r5
 8012a28:	f7f6 f960 	bl	8008cec <ucdr_check_final_buffer_behavior_array>
 8012a2c:	4604      	mov	r4, r0
 8012a2e:	1bb8      	subs	r0, r7, r6
 8012a30:	4440      	add	r0, r8
 8012a32:	4622      	mov	r2, r4
 8012a34:	2c00      	cmp	r4, #0
 8012a36:	d1ea      	bne.n	8012a0e <ucdr_deserialize_endian_array_uint8_t+0x16>
 8012a38:	2301      	movs	r3, #1
 8012a3a:	7da8      	ldrb	r0, [r5, #22]
 8012a3c:	756b      	strb	r3, [r5, #21]
 8012a3e:	4058      	eors	r0, r3
 8012a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a44:	463a      	mov	r2, r7
 8012a46:	68a9      	ldr	r1, [r5, #8]
 8012a48:	4640      	mov	r0, r8
 8012a4a:	f002 fcec 	bl	8015426 <memcpy>
 8012a4e:	68aa      	ldr	r2, [r5, #8]
 8012a50:	692b      	ldr	r3, [r5, #16]
 8012a52:	443a      	add	r2, r7
 8012a54:	443b      	add	r3, r7
 8012a56:	60aa      	str	r2, [r5, #8]
 8012a58:	612b      	str	r3, [r5, #16]
 8012a5a:	e7ed      	b.n	8012a38 <ucdr_deserialize_endian_array_uint8_t+0x40>

08012a5c <ucdr_serialize_sequence_char>:
 8012a5c:	b570      	push	{r4, r5, r6, lr}
 8012a5e:	4615      	mov	r5, r2
 8012a60:	460e      	mov	r6, r1
 8012a62:	7d01      	ldrb	r1, [r0, #20]
 8012a64:	4604      	mov	r4, r0
 8012a66:	f7f5 fa79 	bl	8007f5c <ucdr_serialize_endian_uint32_t>
 8012a6a:	b90d      	cbnz	r5, 8012a70 <ucdr_serialize_sequence_char+0x14>
 8012a6c:	2001      	movs	r0, #1
 8012a6e:	bd70      	pop	{r4, r5, r6, pc}
 8012a70:	7d21      	ldrb	r1, [r4, #20]
 8012a72:	462b      	mov	r3, r5
 8012a74:	4632      	mov	r2, r6
 8012a76:	4620      	mov	r0, r4
 8012a78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012a7c:	f7ff bec2 	b.w	8012804 <ucdr_serialize_endian_array_char>

08012a80 <ucdr_deserialize_sequence_char>:
 8012a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a84:	461d      	mov	r5, r3
 8012a86:	4616      	mov	r6, r2
 8012a88:	460f      	mov	r7, r1
 8012a8a:	461a      	mov	r2, r3
 8012a8c:	7d01      	ldrb	r1, [r0, #20]
 8012a8e:	4604      	mov	r4, r0
 8012a90:	f7f5 fb8c 	bl	80081ac <ucdr_deserialize_endian_uint32_t>
 8012a94:	682b      	ldr	r3, [r5, #0]
 8012a96:	429e      	cmp	r6, r3
 8012a98:	bf3c      	itt	cc
 8012a9a:	2201      	movcc	r2, #1
 8012a9c:	75a2      	strbcc	r2, [r4, #22]
 8012a9e:	b913      	cbnz	r3, 8012aa6 <ucdr_deserialize_sequence_char+0x26>
 8012aa0:	2001      	movs	r0, #1
 8012aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012aa6:	7d21      	ldrb	r1, [r4, #20]
 8012aa8:	463a      	mov	r2, r7
 8012aaa:	4620      	mov	r0, r4
 8012aac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012ab0:	f7ff beda 	b.w	8012868 <ucdr_deserialize_endian_array_char>

08012ab4 <ucdr_serialize_sequence_uint8_t>:
 8012ab4:	b570      	push	{r4, r5, r6, lr}
 8012ab6:	4615      	mov	r5, r2
 8012ab8:	460e      	mov	r6, r1
 8012aba:	7d01      	ldrb	r1, [r0, #20]
 8012abc:	4604      	mov	r4, r0
 8012abe:	f7f5 fa4d 	bl	8007f5c <ucdr_serialize_endian_uint32_t>
 8012ac2:	b90d      	cbnz	r5, 8012ac8 <ucdr_serialize_sequence_uint8_t+0x14>
 8012ac4:	2001      	movs	r0, #1
 8012ac6:	bd70      	pop	{r4, r5, r6, pc}
 8012ac8:	7d21      	ldrb	r1, [r4, #20]
 8012aca:	462b      	mov	r3, r5
 8012acc:	4632      	mov	r2, r6
 8012ace:	4620      	mov	r0, r4
 8012ad0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012ad4:	f7ff bf2c 	b.w	8012930 <ucdr_serialize_endian_array_uint8_t>

08012ad8 <ucdr_deserialize_sequence_uint8_t>:
 8012ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012adc:	461d      	mov	r5, r3
 8012ade:	4616      	mov	r6, r2
 8012ae0:	460f      	mov	r7, r1
 8012ae2:	461a      	mov	r2, r3
 8012ae4:	7d01      	ldrb	r1, [r0, #20]
 8012ae6:	4604      	mov	r4, r0
 8012ae8:	f7f5 fb60 	bl	80081ac <ucdr_deserialize_endian_uint32_t>
 8012aec:	682b      	ldr	r3, [r5, #0]
 8012aee:	429e      	cmp	r6, r3
 8012af0:	bf3c      	itt	cc
 8012af2:	2201      	movcc	r2, #1
 8012af4:	75a2      	strbcc	r2, [r4, #22]
 8012af6:	b913      	cbnz	r3, 8012afe <ucdr_deserialize_sequence_uint8_t+0x26>
 8012af8:	2001      	movs	r0, #1
 8012afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012afe:	7d21      	ldrb	r1, [r4, #20]
 8012b00:	463a      	mov	r2, r7
 8012b02:	4620      	mov	r0, r4
 8012b04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012b08:	f7ff bf76 	b.w	80129f8 <ucdr_deserialize_endian_array_uint8_t>

08012b0c <ucdr_serialize_string>:
 8012b0c:	b510      	push	{r4, lr}
 8012b0e:	b082      	sub	sp, #8
 8012b10:	4604      	mov	r4, r0
 8012b12:	4608      	mov	r0, r1
 8012b14:	9101      	str	r1, [sp, #4]
 8012b16:	f7ed fb6d 	bl	80001f4 <strlen>
 8012b1a:	9901      	ldr	r1, [sp, #4]
 8012b1c:	1c42      	adds	r2, r0, #1
 8012b1e:	4620      	mov	r0, r4
 8012b20:	b002      	add	sp, #8
 8012b22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b26:	f7ff bf99 	b.w	8012a5c <ucdr_serialize_sequence_char>
 8012b2a:	bf00      	nop

08012b2c <ucdr_deserialize_string>:
 8012b2c:	b500      	push	{lr}
 8012b2e:	b083      	sub	sp, #12
 8012b30:	ab01      	add	r3, sp, #4
 8012b32:	f7ff ffa5 	bl	8012a80 <ucdr_deserialize_sequence_char>
 8012b36:	b003      	add	sp, #12
 8012b38:	f85d fb04 	ldr.w	pc, [sp], #4

08012b3c <get_custom_error>:
 8012b3c:	4b01      	ldr	r3, [pc, #4]	; (8012b44 <get_custom_error+0x8>)
 8012b3e:	7818      	ldrb	r0, [r3, #0]
 8012b40:	4770      	bx	lr
 8012b42:	bf00      	nop
 8012b44:	2000ddb8 	.word	0x2000ddb8

08012b48 <recv_custom_msg>:
 8012b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b4c:	4693      	mov	fp, r2
 8012b4e:	b089      	sub	sp, #36	; 0x24
 8012b50:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 8012b54:	9305      	str	r3, [sp, #20]
 8012b56:	468a      	mov	sl, r1
 8012b58:	2100      	movs	r1, #0
 8012b5a:	4604      	mov	r4, r0
 8012b5c:	f88d 101e 	strb.w	r1, [sp, #30]
 8012b60:	b322      	cbz	r2, 8012bac <recv_custom_msg+0x64>
 8012b62:	f200 2902 	addw	r9, r0, #514	; 0x202
 8012b66:	f10d 081f 	add.w	r8, sp, #31
 8012b6a:	af05      	add	r7, sp, #20
 8012b6c:	f10d 061e 	add.w	r6, sp, #30
 8012b70:	f44f 7500 	mov.w	r5, #512	; 0x200
 8012b74:	e002      	b.n	8012b7c <recv_custom_msg+0x34>
 8012b76:	9b05      	ldr	r3, [sp, #20]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	dd0f      	ble.n	8012b9c <recv_custom_msg+0x54>
 8012b7c:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8012b80:	4623      	mov	r3, r4
 8012b82:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8012b86:	e9cd 5600 	strd	r5, r6, [sp]
 8012b8a:	4622      	mov	r2, r4
 8012b8c:	4648      	mov	r0, r9
 8012b8e:	f001 f92d 	bl	8013dec <uxr_read_framed_msg>
 8012b92:	2800      	cmp	r0, #0
 8012b94:	d0ef      	beq.n	8012b76 <recv_custom_msg+0x2e>
 8012b96:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8012b9a:	b1b3      	cbz	r3, 8012bca <recv_custom_msg+0x82>
 8012b9c:	4b0f      	ldr	r3, [pc, #60]	; (8012bdc <recv_custom_msg+0x94>)
 8012b9e:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8012ba2:	701a      	strb	r2, [r3, #0]
 8012ba4:	2000      	movs	r0, #0
 8012ba6:	b009      	add	sp, #36	; 0x24
 8012ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bac:	f10d 021f 	add.w	r2, sp, #31
 8012bb0:	9200      	str	r2, [sp, #0]
 8012bb2:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8012bb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012bba:	4601      	mov	r1, r0
 8012bbc:	47a8      	blx	r5
 8012bbe:	2800      	cmp	r0, #0
 8012bc0:	d0ec      	beq.n	8012b9c <recv_custom_msg+0x54>
 8012bc2:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d1e8      	bne.n	8012b9c <recv_custom_msg+0x54>
 8012bca:	f8cb 0000 	str.w	r0, [fp]
 8012bce:	2001      	movs	r0, #1
 8012bd0:	f8ca 4000 	str.w	r4, [sl]
 8012bd4:	b009      	add	sp, #36	; 0x24
 8012bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bda:	bf00      	nop
 8012bdc:	2000ddb8 	.word	0x2000ddb8

08012be0 <send_custom_msg>:
 8012be0:	b530      	push	{r4, r5, lr}
 8012be2:	f890 4200 	ldrb.w	r4, [r0, #512]	; 0x200
 8012be6:	b087      	sub	sp, #28
 8012be8:	4615      	mov	r5, r2
 8012bea:	b974      	cbnz	r4, 8012c0a <send_custom_msg+0x2a>
 8012bec:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 8012bf0:	f10d 0317 	add.w	r3, sp, #23
 8012bf4:	47a0      	blx	r4
 8012bf6:	b108      	cbz	r0, 8012bfc <send_custom_msg+0x1c>
 8012bf8:	42a8      	cmp	r0, r5
 8012bfa:	d015      	beq.n	8012c28 <send_custom_msg+0x48>
 8012bfc:	4b0c      	ldr	r3, [pc, #48]	; (8012c30 <send_custom_msg+0x50>)
 8012bfe:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8012c02:	701a      	strb	r2, [r3, #0]
 8012c04:	2000      	movs	r0, #0
 8012c06:	b007      	add	sp, #28
 8012c08:	bd30      	pop	{r4, r5, pc}
 8012c0a:	460b      	mov	r3, r1
 8012c0c:	2200      	movs	r2, #0
 8012c0e:	f10d 0117 	add.w	r1, sp, #23
 8012c12:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8012c16:	4602      	mov	r2, r0
 8012c18:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8012c1c:	9500      	str	r5, [sp, #0]
 8012c1e:	f200 2002 	addw	r0, r0, #514	; 0x202
 8012c22:	f000 feeb 	bl	80139fc <uxr_write_framed_msg>
 8012c26:	e7e6      	b.n	8012bf6 <send_custom_msg+0x16>
 8012c28:	2001      	movs	r0, #1
 8012c2a:	b007      	add	sp, #28
 8012c2c:	bd30      	pop	{r4, r5, pc}
 8012c2e:	bf00      	nop
 8012c30:	2000ddb8 	.word	0x2000ddb8

08012c34 <uxr_set_custom_transport_callbacks>:
 8012c34:	b410      	push	{r4}
 8012c36:	9c01      	ldr	r4, [sp, #4]
 8012c38:	f8c0 4270 	str.w	r4, [r0, #624]	; 0x270
 8012c3c:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8012c40:	9b02      	ldr	r3, [sp, #8]
 8012c42:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8012c46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c4a:	f8c0 3274 	str.w	r3, [r0, #628]	; 0x274
 8012c4e:	4770      	bx	lr

08012c50 <uxr_init_custom_transport>:
 8012c50:	b538      	push	{r3, r4, r5, lr}
 8012c52:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 8012c56:	b303      	cbz	r3, 8012c9a <uxr_init_custom_transport+0x4a>
 8012c58:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8012c5c:	4604      	mov	r4, r0
 8012c5e:	b1e2      	cbz	r2, 8012c9a <uxr_init_custom_transport+0x4a>
 8012c60:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8012c64:	b1ca      	cbz	r2, 8012c9a <uxr_init_custom_transport+0x4a>
 8012c66:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 8012c6a:	b1b2      	cbz	r2, 8012c9a <uxr_init_custom_transport+0x4a>
 8012c6c:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8012c70:	4798      	blx	r3
 8012c72:	4605      	mov	r5, r0
 8012c74:	b188      	cbz	r0, 8012c9a <uxr_init_custom_transport+0x4a>
 8012c76:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8012c7a:	b98b      	cbnz	r3, 8012ca0 <uxr_init_custom_transport+0x50>
 8012c7c:	490b      	ldr	r1, [pc, #44]	; (8012cac <uxr_init_custom_transport+0x5c>)
 8012c7e:	4b0c      	ldr	r3, [pc, #48]	; (8012cb0 <uxr_init_custom_transport+0x60>)
 8012c80:	4a0c      	ldr	r2, [pc, #48]	; (8012cb4 <uxr_init_custom_transport+0x64>)
 8012c82:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 8012c86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012c8a:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 8012c8e:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 8012c92:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 8012c96:	4628      	mov	r0, r5
 8012c98:	bd38      	pop	{r3, r4, r5, pc}
 8012c9a:	2500      	movs	r5, #0
 8012c9c:	4628      	mov	r0, r5
 8012c9e:	bd38      	pop	{r3, r4, r5, pc}
 8012ca0:	2100      	movs	r1, #0
 8012ca2:	f204 2002 	addw	r0, r4, #514	; 0x202
 8012ca6:	f000 fea3 	bl	80139f0 <uxr_init_framing_io>
 8012caa:	e7e7      	b.n	8012c7c <uxr_init_custom_transport+0x2c>
 8012cac:	08012be1 	.word	0x08012be1
 8012cb0:	08012b49 	.word	0x08012b49
 8012cb4:	08012b3d 	.word	0x08012b3d

08012cb8 <uxr_close_custom_transport>:
 8012cb8:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8012cbc:	4718      	bx	r3
 8012cbe:	bf00      	nop

08012cc0 <uxr_init_input_best_effort_stream>:
 8012cc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012cc4:	8003      	strh	r3, [r0, #0]
 8012cc6:	4770      	bx	lr

08012cc8 <uxr_reset_input_best_effort_stream>:
 8012cc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012ccc:	8003      	strh	r3, [r0, #0]
 8012cce:	4770      	bx	lr

08012cd0 <uxr_receive_best_effort_message>:
 8012cd0:	b538      	push	{r3, r4, r5, lr}
 8012cd2:	4604      	mov	r4, r0
 8012cd4:	8800      	ldrh	r0, [r0, #0]
 8012cd6:	460d      	mov	r5, r1
 8012cd8:	f000 fe72 	bl	80139c0 <uxr_seq_num_cmp>
 8012cdc:	4603      	mov	r3, r0
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8012ce4:	bfb8      	it	lt
 8012ce6:	8025      	strhlt	r5, [r4, #0]
 8012ce8:	bd38      	pop	{r3, r4, r5, pc}
 8012cea:	bf00      	nop

08012cec <on_full_input_buffer>:
 8012cec:	b570      	push	{r4, r5, r6, lr}
 8012cee:	4605      	mov	r5, r0
 8012cf0:	460c      	mov	r4, r1
 8012cf2:	682b      	ldr	r3, [r5, #0]
 8012cf4:	6809      	ldr	r1, [r1, #0]
 8012cf6:	8920      	ldrh	r0, [r4, #8]
 8012cf8:	6862      	ldr	r2, [r4, #4]
 8012cfa:	fbb2 f2f0 	udiv	r2, r2, r0
 8012cfe:	eba3 0c01 	sub.w	ip, r3, r1
 8012d02:	fbbc fcf2 	udiv	ip, ip, r2
 8012d06:	f10c 0c01 	add.w	ip, ip, #1
 8012d0a:	fa1f f38c 	uxth.w	r3, ip
 8012d0e:	fbb3 f6f0 	udiv	r6, r3, r0
 8012d12:	fb00 3316 	mls	r3, r0, r6, r3
 8012d16:	b29b      	uxth	r3, r3
 8012d18:	fb02 f303 	mul.w	r3, r2, r3
 8012d1c:	1d18      	adds	r0, r3, #4
 8012d1e:	4408      	add	r0, r1
 8012d20:	7d26      	ldrb	r6, [r4, #20]
 8012d22:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8012d26:	b116      	cbz	r6, 8012d2e <on_full_input_buffer+0x42>
 8012d28:	2600      	movs	r6, #0
 8012d2a:	f840 6c04 	str.w	r6, [r0, #-4]
 8012d2e:	2a03      	cmp	r2, #3
 8012d30:	d801      	bhi.n	8012d36 <on_full_input_buffer+0x4a>
 8012d32:	2001      	movs	r0, #1
 8012d34:	bd70      	pop	{r4, r5, r6, pc}
 8012d36:	3308      	adds	r3, #8
 8012d38:	4419      	add	r1, r3
 8012d3a:	4628      	mov	r0, r5
 8012d3c:	692b      	ldr	r3, [r5, #16]
 8012d3e:	3a04      	subs	r2, #4
 8012d40:	f7f5 ff98 	bl	8008c74 <ucdr_init_buffer_origin>
 8012d44:	4628      	mov	r0, r5
 8012d46:	4903      	ldr	r1, [pc, #12]	; (8012d54 <on_full_input_buffer+0x68>)
 8012d48:	4622      	mov	r2, r4
 8012d4a:	f7f5 ff6f 	bl	8008c2c <ucdr_set_on_full_buffer_callback>
 8012d4e:	2000      	movs	r0, #0
 8012d50:	bd70      	pop	{r4, r5, r6, pc}
 8012d52:	bf00      	nop
 8012d54:	08012ced 	.word	0x08012ced

08012d58 <uxr_init_input_reliable_stream>:
 8012d58:	b500      	push	{lr}
 8012d5a:	e9c0 1200 	strd	r1, r2, [r0]
 8012d5e:	f04f 0e00 	mov.w	lr, #0
 8012d62:	9a01      	ldr	r2, [sp, #4]
 8012d64:	8103      	strh	r3, [r0, #8]
 8012d66:	6102      	str	r2, [r0, #16]
 8012d68:	f880 e014 	strb.w	lr, [r0, #20]
 8012d6c:	b1d3      	cbz	r3, 8012da4 <uxr_init_input_reliable_stream+0x4c>
 8012d6e:	f8c1 e000 	str.w	lr, [r1]
 8012d72:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8012d76:	f1bc 0f01 	cmp.w	ip, #1
 8012d7a:	d913      	bls.n	8012da4 <uxr_init_input_reliable_stream+0x4c>
 8012d7c:	2301      	movs	r3, #1
 8012d7e:	fbb3 f1fc 	udiv	r1, r3, ip
 8012d82:	fb0c 3111 	mls	r1, ip, r1, r3
 8012d86:	b289      	uxth	r1, r1
 8012d88:	6842      	ldr	r2, [r0, #4]
 8012d8a:	fbb2 f2fc 	udiv	r2, r2, ip
 8012d8e:	fb01 f202 	mul.w	r2, r1, r2
 8012d92:	6801      	ldr	r1, [r0, #0]
 8012d94:	f841 e002 	str.w	lr, [r1, r2]
 8012d98:	3301      	adds	r3, #1
 8012d9a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8012d9e:	b29b      	uxth	r3, r3
 8012da0:	459c      	cmp	ip, r3
 8012da2:	d8ec      	bhi.n	8012d7e <uxr_init_input_reliable_stream+0x26>
 8012da4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012da8:	60c3      	str	r3, [r0, #12]
 8012daa:	f85d fb04 	ldr.w	pc, [sp], #4
 8012dae:	bf00      	nop

08012db0 <uxr_reset_input_reliable_stream>:
 8012db0:	8901      	ldrh	r1, [r0, #8]
 8012db2:	b1e9      	cbz	r1, 8012df0 <uxr_reset_input_reliable_stream+0x40>
 8012db4:	f04f 0c00 	mov.w	ip, #0
 8012db8:	b500      	push	{lr}
 8012dba:	4663      	mov	r3, ip
 8012dbc:	46e6      	mov	lr, ip
 8012dbe:	fbb3 f2f1 	udiv	r2, r3, r1
 8012dc2:	fb01 3312 	mls	r3, r1, r2, r3
 8012dc6:	b29b      	uxth	r3, r3
 8012dc8:	6842      	ldr	r2, [r0, #4]
 8012dca:	fbb2 f2f1 	udiv	r2, r2, r1
 8012dce:	fb02 f303 	mul.w	r3, r2, r3
 8012dd2:	6802      	ldr	r2, [r0, #0]
 8012dd4:	f842 e003 	str.w	lr, [r2, r3]
 8012dd8:	f10c 0c01 	add.w	ip, ip, #1
 8012ddc:	8901      	ldrh	r1, [r0, #8]
 8012dde:	fa1f f38c 	uxth.w	r3, ip
 8012de2:	4299      	cmp	r1, r3
 8012de4:	d8eb      	bhi.n	8012dbe <uxr_reset_input_reliable_stream+0xe>
 8012de6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012dea:	60c3      	str	r3, [r0, #12]
 8012dec:	f85d fb04 	ldr.w	pc, [sp], #4
 8012df0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012df4:	60c3      	str	r3, [r0, #12]
 8012df6:	4770      	bx	lr

08012df8 <uxr_receive_reliable_message>:
 8012df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012dfc:	4604      	mov	r4, r0
 8012dfe:	460d      	mov	r5, r1
 8012e00:	8901      	ldrh	r1, [r0, #8]
 8012e02:	8980      	ldrh	r0, [r0, #12]
 8012e04:	4690      	mov	r8, r2
 8012e06:	461f      	mov	r7, r3
 8012e08:	f000 fdd2 	bl	80139b0 <uxr_seq_num_add>
 8012e0c:	4629      	mov	r1, r5
 8012e0e:	4606      	mov	r6, r0
 8012e10:	89a0      	ldrh	r0, [r4, #12]
 8012e12:	f000 fdd5 	bl	80139c0 <uxr_seq_num_cmp>
 8012e16:	2800      	cmp	r0, #0
 8012e18:	db0a      	blt.n	8012e30 <uxr_receive_reliable_message+0x38>
 8012e1a:	2600      	movs	r6, #0
 8012e1c:	89e0      	ldrh	r0, [r4, #14]
 8012e1e:	4629      	mov	r1, r5
 8012e20:	f000 fdce 	bl	80139c0 <uxr_seq_num_cmp>
 8012e24:	2800      	cmp	r0, #0
 8012e26:	da00      	bge.n	8012e2a <uxr_receive_reliable_message+0x32>
 8012e28:	81e5      	strh	r5, [r4, #14]
 8012e2a:	4630      	mov	r0, r6
 8012e2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e30:	4630      	mov	r0, r6
 8012e32:	4629      	mov	r1, r5
 8012e34:	f000 fdc4 	bl	80139c0 <uxr_seq_num_cmp>
 8012e38:	2800      	cmp	r0, #0
 8012e3a:	dbee      	blt.n	8012e1a <uxr_receive_reliable_message+0x22>
 8012e3c:	6923      	ldr	r3, [r4, #16]
 8012e3e:	4640      	mov	r0, r8
 8012e40:	4798      	blx	r3
 8012e42:	2101      	movs	r1, #1
 8012e44:	4681      	mov	r9, r0
 8012e46:	89a0      	ldrh	r0, [r4, #12]
 8012e48:	f000 fdb2 	bl	80139b0 <uxr_seq_num_add>
 8012e4c:	f1b9 0f00 	cmp.w	r9, #0
 8012e50:	d101      	bne.n	8012e56 <uxr_receive_reliable_message+0x5e>
 8012e52:	4285      	cmp	r5, r0
 8012e54:	d047      	beq.n	8012ee6 <uxr_receive_reliable_message+0xee>
 8012e56:	8922      	ldrh	r2, [r4, #8]
 8012e58:	fbb5 f0f2 	udiv	r0, r5, r2
 8012e5c:	fb02 5010 	mls	r0, r2, r0, r5
 8012e60:	b280      	uxth	r0, r0
 8012e62:	6863      	ldr	r3, [r4, #4]
 8012e64:	fbb3 f3f2 	udiv	r3, r3, r2
 8012e68:	fb00 f303 	mul.w	r3, r0, r3
 8012e6c:	6820      	ldr	r0, [r4, #0]
 8012e6e:	3304      	adds	r3, #4
 8012e70:	4418      	add	r0, r3
 8012e72:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d1cf      	bne.n	8012e1a <uxr_receive_reliable_message+0x22>
 8012e7a:	4641      	mov	r1, r8
 8012e7c:	463a      	mov	r2, r7
 8012e7e:	f002 fad2 	bl	8015426 <memcpy>
 8012e82:	8921      	ldrh	r1, [r4, #8]
 8012e84:	fbb5 f2f1 	udiv	r2, r5, r1
 8012e88:	fb01 5212 	mls	r2, r1, r2, r5
 8012e8c:	b292      	uxth	r2, r2
 8012e8e:	6863      	ldr	r3, [r4, #4]
 8012e90:	fbb3 f3f1 	udiv	r3, r3, r1
 8012e94:	fb02 f303 	mul.w	r3, r2, r3
 8012e98:	6822      	ldr	r2, [r4, #0]
 8012e9a:	50d7      	str	r7, [r2, r3]
 8012e9c:	9a08      	ldr	r2, [sp, #32]
 8012e9e:	2301      	movs	r3, #1
 8012ea0:	7013      	strb	r3, [r2, #0]
 8012ea2:	f1b9 0f00 	cmp.w	r9, #0
 8012ea6:	d0b8      	beq.n	8012e1a <uxr_receive_reliable_message+0x22>
 8012ea8:	89a6      	ldrh	r6, [r4, #12]
 8012eaa:	4630      	mov	r0, r6
 8012eac:	2101      	movs	r1, #1
 8012eae:	f000 fd7f 	bl	80139b0 <uxr_seq_num_add>
 8012eb2:	8922      	ldrh	r2, [r4, #8]
 8012eb4:	6863      	ldr	r3, [r4, #4]
 8012eb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8012eba:	4606      	mov	r6, r0
 8012ebc:	fbb0 f0f2 	udiv	r0, r0, r2
 8012ec0:	fb02 6010 	mls	r0, r2, r0, r6
 8012ec4:	b280      	uxth	r0, r0
 8012ec6:	fb00 f303 	mul.w	r3, r0, r3
 8012eca:	6820      	ldr	r0, [r4, #0]
 8012ecc:	3304      	adds	r3, #4
 8012ece:	4418      	add	r0, r3
 8012ed0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d0a0      	beq.n	8012e1a <uxr_receive_reliable_message+0x22>
 8012ed8:	6923      	ldr	r3, [r4, #16]
 8012eda:	4798      	blx	r3
 8012edc:	2802      	cmp	r0, #2
 8012ede:	d008      	beq.n	8012ef2 <uxr_receive_reliable_message+0xfa>
 8012ee0:	2801      	cmp	r0, #1
 8012ee2:	d0e2      	beq.n	8012eaa <uxr_receive_reliable_message+0xb2>
 8012ee4:	e799      	b.n	8012e1a <uxr_receive_reliable_message+0x22>
 8012ee6:	9b08      	ldr	r3, [sp, #32]
 8012ee8:	81a5      	strh	r5, [r4, #12]
 8012eea:	2601      	movs	r6, #1
 8012eec:	f883 9000 	strb.w	r9, [r3]
 8012ef0:	e794      	b.n	8012e1c <uxr_receive_reliable_message+0x24>
 8012ef2:	2601      	movs	r6, #1
 8012ef4:	e792      	b.n	8012e1c <uxr_receive_reliable_message+0x24>
 8012ef6:	bf00      	nop

08012ef8 <uxr_next_input_reliable_buffer_available>:
 8012ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012efc:	4604      	mov	r4, r0
 8012efe:	460f      	mov	r7, r1
 8012f00:	8980      	ldrh	r0, [r0, #12]
 8012f02:	2101      	movs	r1, #1
 8012f04:	4690      	mov	r8, r2
 8012f06:	f000 fd53 	bl	80139b0 <uxr_seq_num_add>
 8012f0a:	8922      	ldrh	r2, [r4, #8]
 8012f0c:	fbb0 f6f2 	udiv	r6, r0, r2
 8012f10:	fb02 0616 	mls	r6, r2, r6, r0
 8012f14:	b2b6      	uxth	r6, r6
 8012f16:	6863      	ldr	r3, [r4, #4]
 8012f18:	fbb3 f3f2 	udiv	r3, r3, r2
 8012f1c:	fb06 f303 	mul.w	r3, r6, r3
 8012f20:	6826      	ldr	r6, [r4, #0]
 8012f22:	3304      	adds	r3, #4
 8012f24:	441e      	add	r6, r3
 8012f26:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8012f2a:	f1b9 0f00 	cmp.w	r9, #0
 8012f2e:	d023      	beq.n	8012f78 <uxr_next_input_reliable_buffer_available+0x80>
 8012f30:	6923      	ldr	r3, [r4, #16]
 8012f32:	4605      	mov	r5, r0
 8012f34:	4630      	mov	r0, r6
 8012f36:	4798      	blx	r3
 8012f38:	4682      	mov	sl, r0
 8012f3a:	b300      	cbz	r0, 8012f7e <uxr_next_input_reliable_buffer_available+0x86>
 8012f3c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8012f40:	2101      	movs	r1, #1
 8012f42:	4650      	mov	r0, sl
 8012f44:	f000 fd34 	bl	80139b0 <uxr_seq_num_add>
 8012f48:	8921      	ldrh	r1, [r4, #8]
 8012f4a:	fbb0 f2f1 	udiv	r2, r0, r1
 8012f4e:	4682      	mov	sl, r0
 8012f50:	fb01 0212 	mls	r2, r1, r2, r0
 8012f54:	e9d4 0300 	ldrd	r0, r3, [r4]
 8012f58:	b292      	uxth	r2, r2
 8012f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8012f5e:	fb02 f303 	mul.w	r3, r2, r3
 8012f62:	3304      	adds	r3, #4
 8012f64:	4418      	add	r0, r3
 8012f66:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8012f6a:	b12b      	cbz	r3, 8012f78 <uxr_next_input_reliable_buffer_available+0x80>
 8012f6c:	6923      	ldr	r3, [r4, #16]
 8012f6e:	4798      	blx	r3
 8012f70:	2802      	cmp	r0, #2
 8012f72:	d01b      	beq.n	8012fac <uxr_next_input_reliable_buffer_available+0xb4>
 8012f74:	2801      	cmp	r0, #1
 8012f76:	d0e3      	beq.n	8012f40 <uxr_next_input_reliable_buffer_available+0x48>
 8012f78:	2000      	movs	r0, #0
 8012f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f7e:	464a      	mov	r2, r9
 8012f80:	4631      	mov	r1, r6
 8012f82:	4638      	mov	r0, r7
 8012f84:	f7f5 fe7e 	bl	8008c84 <ucdr_init_buffer>
 8012f88:	8921      	ldrh	r1, [r4, #8]
 8012f8a:	fbb5 f2f1 	udiv	r2, r5, r1
 8012f8e:	fb01 5212 	mls	r2, r1, r2, r5
 8012f92:	b292      	uxth	r2, r2
 8012f94:	6863      	ldr	r3, [r4, #4]
 8012f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8012f9a:	fb02 f303 	mul.w	r3, r2, r3
 8012f9e:	6822      	ldr	r2, [r4, #0]
 8012fa0:	f842 a003 	str.w	sl, [r2, r3]
 8012fa4:	2001      	movs	r0, #1
 8012fa6:	81a5      	strh	r5, [r4, #12]
 8012fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fac:	8920      	ldrh	r0, [r4, #8]
 8012fae:	fbb5 f3f0 	udiv	r3, r5, r0
 8012fb2:	fb00 5513 	mls	r5, r0, r3, r5
 8012fb6:	b2ad      	uxth	r5, r5
 8012fb8:	6863      	ldr	r3, [r4, #4]
 8012fba:	fbb3 f3f0 	udiv	r3, r3, r0
 8012fbe:	fb03 f505 	mul.w	r5, r3, r5
 8012fc2:	6823      	ldr	r3, [r4, #0]
 8012fc4:	2000      	movs	r0, #0
 8012fc6:	5158      	str	r0, [r3, r5]
 8012fc8:	eb06 0108 	add.w	r1, r6, r8
 8012fcc:	eba9 0208 	sub.w	r2, r9, r8
 8012fd0:	4638      	mov	r0, r7
 8012fd2:	f7f5 fe57 	bl	8008c84 <ucdr_init_buffer>
 8012fd6:	4638      	mov	r0, r7
 8012fd8:	4903      	ldr	r1, [pc, #12]	; (8012fe8 <uxr_next_input_reliable_buffer_available+0xf0>)
 8012fda:	4622      	mov	r2, r4
 8012fdc:	f7f5 fe26 	bl	8008c2c <ucdr_set_on_full_buffer_callback>
 8012fe0:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8012fe4:	2001      	movs	r0, #1
 8012fe6:	e7c8      	b.n	8012f7a <uxr_next_input_reliable_buffer_available+0x82>
 8012fe8:	08012ced 	.word	0x08012ced

08012fec <uxr_process_heartbeat>:
 8012fec:	b538      	push	{r3, r4, r5, lr}
 8012fee:	4611      	mov	r1, r2
 8012ff0:	4604      	mov	r4, r0
 8012ff2:	89c0      	ldrh	r0, [r0, #14]
 8012ff4:	4615      	mov	r5, r2
 8012ff6:	f000 fce3 	bl	80139c0 <uxr_seq_num_cmp>
 8012ffa:	2800      	cmp	r0, #0
 8012ffc:	bfb8      	it	lt
 8012ffe:	81e5      	strhlt	r5, [r4, #14]
 8013000:	bd38      	pop	{r3, r4, r5, pc}
 8013002:	bf00      	nop

08013004 <uxr_compute_acknack>:
 8013004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013008:	8903      	ldrh	r3, [r0, #8]
 801300a:	8985      	ldrh	r5, [r0, #12]
 801300c:	4604      	mov	r4, r0
 801300e:	460e      	mov	r6, r1
 8013010:	b1d3      	cbz	r3, 8013048 <uxr_compute_acknack+0x44>
 8013012:	4628      	mov	r0, r5
 8013014:	2701      	movs	r7, #1
 8013016:	e003      	b.n	8013020 <uxr_compute_acknack+0x1c>
 8013018:	4567      	cmp	r7, ip
 801301a:	d215      	bcs.n	8013048 <uxr_compute_acknack+0x44>
 801301c:	89a0      	ldrh	r0, [r4, #12]
 801301e:	3701      	adds	r7, #1
 8013020:	b2b9      	uxth	r1, r7
 8013022:	f000 fcc5 	bl	80139b0 <uxr_seq_num_add>
 8013026:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801302a:	fbb0 f3fc 	udiv	r3, r0, ip
 801302e:	fb0c 0313 	mls	r3, ip, r3, r0
 8013032:	b29a      	uxth	r2, r3
 8013034:	e9d4 1300 	ldrd	r1, r3, [r4]
 8013038:	fbb3 f3fc 	udiv	r3, r3, ip
 801303c:	fb02 f303 	mul.w	r3, r2, r3
 8013040:	58cb      	ldr	r3, [r1, r3]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d1e8      	bne.n	8013018 <uxr_compute_acknack+0x14>
 8013046:	4605      	mov	r5, r0
 8013048:	8035      	strh	r5, [r6, #0]
 801304a:	2101      	movs	r1, #1
 801304c:	4628      	mov	r0, r5
 801304e:	89e7      	ldrh	r7, [r4, #14]
 8013050:	f000 fcb2 	bl	80139b8 <uxr_seq_num_sub>
 8013054:	4601      	mov	r1, r0
 8013056:	4638      	mov	r0, r7
 8013058:	f000 fcae 	bl	80139b8 <uxr_seq_num_sub>
 801305c:	4605      	mov	r5, r0
 801305e:	b318      	cbz	r0, 80130a8 <uxr_compute_acknack+0xa4>
 8013060:	f04f 0900 	mov.w	r9, #0
 8013064:	464f      	mov	r7, r9
 8013066:	f04f 0801 	mov.w	r8, #1
 801306a:	fa1f f189 	uxth.w	r1, r9
 801306e:	8830      	ldrh	r0, [r6, #0]
 8013070:	f000 fc9e 	bl	80139b0 <uxr_seq_num_add>
 8013074:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8013078:	fbb0 f3fc 	udiv	r3, r0, ip
 801307c:	e9d4 1200 	ldrd	r1, r2, [r4]
 8013080:	fb03 001c 	mls	r0, r3, ip, r0
 8013084:	b283      	uxth	r3, r0
 8013086:	fbb2 f2fc 	udiv	r2, r2, ip
 801308a:	fb02 f303 	mul.w	r3, r2, r3
 801308e:	fa08 f209 	lsl.w	r2, r8, r9
 8013092:	58cb      	ldr	r3, [r1, r3]
 8013094:	f109 0901 	add.w	r9, r9, #1
 8013098:	b90b      	cbnz	r3, 801309e <uxr_compute_acknack+0x9a>
 801309a:	4317      	orrs	r7, r2
 801309c:	b2bf      	uxth	r7, r7
 801309e:	454d      	cmp	r5, r9
 80130a0:	d1e3      	bne.n	801306a <uxr_compute_acknack+0x66>
 80130a2:	4638      	mov	r0, r7
 80130a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130a8:	4607      	mov	r7, r0
 80130aa:	4638      	mov	r0, r7
 80130ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080130b0 <uxr_init_output_best_effort_stream>:
 80130b0:	f64f 7cff 	movw	ip, #65535	; 0xffff
 80130b4:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80130b8:	6001      	str	r1, [r0, #0]
 80130ba:	7303      	strb	r3, [r0, #12]
 80130bc:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80130c0:	4770      	bx	lr
 80130c2:	bf00      	nop

080130c4 <uxr_reset_output_best_effort_stream>:
 80130c4:	7b02      	ldrb	r2, [r0, #12]
 80130c6:	6042      	str	r2, [r0, #4]
 80130c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80130cc:	81c3      	strh	r3, [r0, #14]
 80130ce:	4770      	bx	lr

080130d0 <uxr_prepare_best_effort_buffer_to_write>:
 80130d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80130d2:	4604      	mov	r4, r0
 80130d4:	b083      	sub	sp, #12
 80130d6:	6840      	ldr	r0, [r0, #4]
 80130d8:	460d      	mov	r5, r1
 80130da:	4616      	mov	r6, r2
 80130dc:	f7f9 fcb8 	bl	800ca50 <uxr_submessage_padding>
 80130e0:	6863      	ldr	r3, [r4, #4]
 80130e2:	4418      	add	r0, r3
 80130e4:	68a3      	ldr	r3, [r4, #8]
 80130e6:	1942      	adds	r2, r0, r5
 80130e8:	4293      	cmp	r3, r2
 80130ea:	bf2c      	ite	cs
 80130ec:	2701      	movcs	r7, #1
 80130ee:	2700      	movcc	r7, #0
 80130f0:	d202      	bcs.n	80130f8 <uxr_prepare_best_effort_buffer_to_write+0x28>
 80130f2:	4638      	mov	r0, r7
 80130f4:	b003      	add	sp, #12
 80130f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80130f8:	9000      	str	r0, [sp, #0]
 80130fa:	6821      	ldr	r1, [r4, #0]
 80130fc:	4630      	mov	r0, r6
 80130fe:	2300      	movs	r3, #0
 8013100:	f7f5 fdae 	bl	8008c60 <ucdr_init_buffer_origin_offset>
 8013104:	6861      	ldr	r1, [r4, #4]
 8013106:	4638      	mov	r0, r7
 8013108:	4429      	add	r1, r5
 801310a:	6061      	str	r1, [r4, #4]
 801310c:	b003      	add	sp, #12
 801310e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013110 <uxr_prepare_best_effort_buffer_to_send>:
 8013110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013114:	4604      	mov	r4, r0
 8013116:	461d      	mov	r5, r3
 8013118:	6840      	ldr	r0, [r0, #4]
 801311a:	7b23      	ldrb	r3, [r4, #12]
 801311c:	4298      	cmp	r0, r3
 801311e:	bf8c      	ite	hi
 8013120:	2601      	movhi	r6, #1
 8013122:	2600      	movls	r6, #0
 8013124:	d802      	bhi.n	801312c <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8013126:	4630      	mov	r0, r6
 8013128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801312c:	4688      	mov	r8, r1
 801312e:	89e0      	ldrh	r0, [r4, #14]
 8013130:	2101      	movs	r1, #1
 8013132:	4617      	mov	r7, r2
 8013134:	f000 fc3c 	bl	80139b0 <uxr_seq_num_add>
 8013138:	6823      	ldr	r3, [r4, #0]
 801313a:	81e0      	strh	r0, [r4, #14]
 801313c:	8028      	strh	r0, [r5, #0]
 801313e:	f8c8 3000 	str.w	r3, [r8]
 8013142:	6863      	ldr	r3, [r4, #4]
 8013144:	603b      	str	r3, [r7, #0]
 8013146:	7b23      	ldrb	r3, [r4, #12]
 8013148:	6063      	str	r3, [r4, #4]
 801314a:	4630      	mov	r0, r6
 801314c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013150 <on_full_output_buffer>:
 8013150:	b538      	push	{r3, r4, r5, lr}
 8013152:	6802      	ldr	r2, [r0, #0]
 8013154:	460c      	mov	r4, r1
 8013156:	6809      	ldr	r1, [r1, #0]
 8013158:	8923      	ldrh	r3, [r4, #8]
 801315a:	eba2 0c01 	sub.w	ip, r2, r1
 801315e:	6862      	ldr	r2, [r4, #4]
 8013160:	fbb2 f2f3 	udiv	r2, r2, r3
 8013164:	fbbc fcf2 	udiv	ip, ip, r2
 8013168:	f10c 0c01 	add.w	ip, ip, #1
 801316c:	fa1f fc8c 	uxth.w	ip, ip
 8013170:	fbbc fef3 	udiv	lr, ip, r3
 8013174:	fb03 c31e 	mls	r3, r3, lr, ip
 8013178:	b29b      	uxth	r3, r3
 801317a:	fb02 f303 	mul.w	r3, r2, r3
 801317e:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8013182:	58ca      	ldr	r2, [r1, r3]
 8013184:	4463      	add	r3, ip
 8013186:	eba2 020c 	sub.w	r2, r2, ip
 801318a:	3308      	adds	r3, #8
 801318c:	4605      	mov	r5, r0
 801318e:	4419      	add	r1, r3
 8013190:	3a04      	subs	r2, #4
 8013192:	6903      	ldr	r3, [r0, #16]
 8013194:	f7f5 fd6e 	bl	8008c74 <ucdr_init_buffer_origin>
 8013198:	4628      	mov	r0, r5
 801319a:	4903      	ldr	r1, [pc, #12]	; (80131a8 <on_full_output_buffer+0x58>)
 801319c:	4622      	mov	r2, r4
 801319e:	f7f5 fd45 	bl	8008c2c <ucdr_set_on_full_buffer_callback>
 80131a2:	2000      	movs	r0, #0
 80131a4:	bd38      	pop	{r3, r4, r5, pc}
 80131a6:	bf00      	nop
 80131a8:	08013151 	.word	0x08013151

080131ac <uxr_init_output_reliable_stream>:
 80131ac:	b410      	push	{r4}
 80131ae:	f89d c004 	ldrb.w	ip, [sp, #4]
 80131b2:	8103      	strh	r3, [r0, #8]
 80131b4:	e9c0 1200 	strd	r1, r2, [r0]
 80131b8:	f880 c00c 	strb.w	ip, [r0, #12]
 80131bc:	b1d3      	cbz	r3, 80131f4 <uxr_init_output_reliable_stream+0x48>
 80131be:	f8c1 c000 	str.w	ip, [r1]
 80131c2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80131c6:	f1bc 0f01 	cmp.w	ip, #1
 80131ca:	d913      	bls.n	80131f4 <uxr_init_output_reliable_stream+0x48>
 80131cc:	2301      	movs	r3, #1
 80131ce:	fbb3 f1fc 	udiv	r1, r3, ip
 80131d2:	fb0c 3111 	mls	r1, ip, r1, r3
 80131d6:	b289      	uxth	r1, r1
 80131d8:	6842      	ldr	r2, [r0, #4]
 80131da:	6804      	ldr	r4, [r0, #0]
 80131dc:	fbb2 f2fc 	udiv	r2, r2, ip
 80131e0:	fb01 f202 	mul.w	r2, r1, r2
 80131e4:	7b01      	ldrb	r1, [r0, #12]
 80131e6:	50a1      	str	r1, [r4, r2]
 80131e8:	3301      	adds	r3, #1
 80131ea:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80131ee:	b29b      	uxth	r3, r3
 80131f0:	459c      	cmp	ip, r3
 80131f2:	d8ec      	bhi.n	80131ce <uxr_init_output_reliable_stream+0x22>
 80131f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80131f8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80131fc:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8013200:	4905      	ldr	r1, [pc, #20]	; (8013218 <uxr_init_output_reliable_stream+0x6c>)
 8013202:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013206:	f8c0 100e 	str.w	r1, [r0, #14]
 801320a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801320e:	2300      	movs	r3, #0
 8013210:	8242      	strh	r2, [r0, #18]
 8013212:	8403      	strh	r3, [r0, #32]
 8013214:	4770      	bx	lr
 8013216:	bf00      	nop
 8013218:	ffff0000 	.word	0xffff0000

0801321c <uxr_reset_output_reliable_stream>:
 801321c:	8901      	ldrh	r1, [r0, #8]
 801321e:	b1b1      	cbz	r1, 801324e <uxr_reset_output_reliable_stream+0x32>
 8013220:	f04f 0c00 	mov.w	ip, #0
 8013224:	4663      	mov	r3, ip
 8013226:	fbb3 f2f1 	udiv	r2, r3, r1
 801322a:	fb01 3312 	mls	r3, r1, r2, r3
 801322e:	b29b      	uxth	r3, r3
 8013230:	6842      	ldr	r2, [r0, #4]
 8013232:	fbb2 f2f1 	udiv	r2, r2, r1
 8013236:	6801      	ldr	r1, [r0, #0]
 8013238:	fb02 f303 	mul.w	r3, r2, r3
 801323c:	7b02      	ldrb	r2, [r0, #12]
 801323e:	50ca      	str	r2, [r1, r3]
 8013240:	f10c 0c01 	add.w	ip, ip, #1
 8013244:	8901      	ldrh	r1, [r0, #8]
 8013246:	fa1f f38c 	uxth.w	r3, ip
 801324a:	4299      	cmp	r1, r3
 801324c:	d8eb      	bhi.n	8013226 <uxr_reset_output_reliable_stream+0xa>
 801324e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013252:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013256:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801325a:	4904      	ldr	r1, [pc, #16]	; (801326c <uxr_reset_output_reliable_stream+0x50>)
 801325c:	f8c0 100e 	str.w	r1, [r0, #14]
 8013260:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013264:	2300      	movs	r3, #0
 8013266:	8242      	strh	r2, [r0, #18]
 8013268:	8403      	strh	r3, [r0, #32]
 801326a:	4770      	bx	lr
 801326c:	ffff0000 	.word	0xffff0000

08013270 <uxr_prepare_reliable_buffer_to_write>:
 8013270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013274:	4604      	mov	r4, r0
 8013276:	b091      	sub	sp, #68	; 0x44
 8013278:	8900      	ldrh	r0, [r0, #8]
 801327a:	89e6      	ldrh	r6, [r4, #14]
 801327c:	6823      	ldr	r3, [r4, #0]
 801327e:	9204      	str	r2, [sp, #16]
 8013280:	fbb6 f2f0 	udiv	r2, r6, r0
 8013284:	fb00 6212 	mls	r2, r0, r2, r6
 8013288:	b292      	uxth	r2, r2
 801328a:	6865      	ldr	r5, [r4, #4]
 801328c:	fbb5 f5f0 	udiv	r5, r5, r0
 8013290:	fb05 3202 	mla	r2, r5, r2, r3
 8013294:	3204      	adds	r2, #4
 8013296:	f852 8c04 	ldr.w	r8, [r2, #-4]
 801329a:	f894 900c 	ldrb.w	r9, [r4, #12]
 801329e:	9203      	str	r2, [sp, #12]
 80132a0:	468b      	mov	fp, r1
 80132a2:	1f2f      	subs	r7, r5, #4
 80132a4:	2800      	cmp	r0, #0
 80132a6:	f000 814c 	beq.w	8013542 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 80132aa:	f04f 0c00 	mov.w	ip, #0
 80132ae:	46e2      	mov	sl, ip
 80132b0:	4661      	mov	r1, ip
 80132b2:	fbb1 f2f0 	udiv	r2, r1, r0
 80132b6:	fb00 1212 	mls	r2, r0, r2, r1
 80132ba:	b292      	uxth	r2, r2
 80132bc:	fb05 f202 	mul.w	r2, r5, r2
 80132c0:	f10c 0c01 	add.w	ip, ip, #1
 80132c4:	589a      	ldr	r2, [r3, r2]
 80132c6:	454a      	cmp	r2, r9
 80132c8:	bf08      	it	eq
 80132ca:	f10a 0a01 	addeq.w	sl, sl, #1
 80132ce:	fa1f f18c 	uxth.w	r1, ip
 80132d2:	bf08      	it	eq
 80132d4:	fa1f fa8a 	uxtheq.w	sl, sl
 80132d8:	4281      	cmp	r1, r0
 80132da:	d3ea      	bcc.n	80132b2 <uxr_prepare_reliable_buffer_to_write+0x42>
 80132dc:	4640      	mov	r0, r8
 80132de:	2104      	movs	r1, #4
 80132e0:	f8cd a014 	str.w	sl, [sp, #20]
 80132e4:	f7f5 fcd2 	bl	8008c8c <ucdr_alignment>
 80132e8:	4480      	add	r8, r0
 80132ea:	eb08 020b 	add.w	r2, r8, fp
 80132ee:	42ba      	cmp	r2, r7
 80132f0:	f240 80cd 	bls.w	801348e <uxr_prepare_reliable_buffer_to_write+0x21e>
 80132f4:	7b22      	ldrb	r2, [r4, #12]
 80132f6:	445a      	add	r2, fp
 80132f8:	42ba      	cmp	r2, r7
 80132fa:	f240 80b5 	bls.w	8013468 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 80132fe:	f5c9 437f 	rsb	r3, r9, #65280	; 0xff00
 8013302:	33fc      	adds	r3, #252	; 0xfc
 8013304:	b2ba      	uxth	r2, r7
 8013306:	4413      	add	r3, r2
 8013308:	b29b      	uxth	r3, r3
 801330a:	fb0a f903 	mul.w	r9, sl, r3
 801330e:	45d9      	cmp	r9, fp
 8013310:	9305      	str	r3, [sp, #20]
 8013312:	9306      	str	r3, [sp, #24]
 8013314:	f0c0 80b7 	bcc.w	8013486 <uxr_prepare_reliable_buffer_to_write+0x216>
 8013318:	f108 0304 	add.w	r3, r8, #4
 801331c:	42bb      	cmp	r3, r7
 801331e:	f080 80db 	bcs.w	80134d8 <uxr_prepare_reliable_buffer_to_write+0x268>
 8013322:	f1a2 0904 	sub.w	r9, r2, #4
 8013326:	eba9 0908 	sub.w	r9, r9, r8
 801332a:	9b05      	ldr	r3, [sp, #20]
 801332c:	fa1f f989 	uxth.w	r9, r9
 8013330:	ebab 0b09 	sub.w	fp, fp, r9
 8013334:	fbbb f2f3 	udiv	r2, fp, r3
 8013338:	fb03 b312 	mls	r3, r3, r2, fp
 801333c:	2b00      	cmp	r3, #0
 801333e:	f000 80c8 	beq.w	80134d2 <uxr_prepare_reliable_buffer_to_write+0x262>
 8013342:	3201      	adds	r2, #1
 8013344:	b292      	uxth	r2, r2
 8013346:	9306      	str	r3, [sp, #24]
 8013348:	4552      	cmp	r2, sl
 801334a:	f200 809c 	bhi.w	8013486 <uxr_prepare_reliable_buffer_to_write+0x216>
 801334e:	f10d 0b20 	add.w	fp, sp, #32
 8013352:	2a00      	cmp	r2, #0
 8013354:	d042      	beq.n	80133dc <uxr_prepare_reliable_buffer_to_write+0x16c>
 8013356:	f8cd 801c 	str.w	r8, [sp, #28]
 801335a:	f04f 0a00 	mov.w	sl, #0
 801335e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8013362:	9505      	str	r5, [sp, #20]
 8013364:	f10d 0b20 	add.w	fp, sp, #32
 8013368:	4615      	mov	r5, r2
 801336a:	e000      	b.n	801336e <uxr_prepare_reliable_buffer_to_write+0xfe>
 801336c:	46c1      	mov	r9, r8
 801336e:	8920      	ldrh	r0, [r4, #8]
 8013370:	fbb6 f2f0 	udiv	r2, r6, r0
 8013374:	fb00 6112 	mls	r1, r0, r2, r6
 8013378:	b28a      	uxth	r2, r1
 801337a:	6863      	ldr	r3, [r4, #4]
 801337c:	fbb3 f1f0 	udiv	r1, r3, r0
 8013380:	6823      	ldr	r3, [r4, #0]
 8013382:	fb02 f101 	mul.w	r1, r2, r1
 8013386:	3104      	adds	r1, #4
 8013388:	4419      	add	r1, r3
 801338a:	4658      	mov	r0, fp
 801338c:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8013390:	9200      	str	r2, [sp, #0]
 8013392:	2300      	movs	r3, #0
 8013394:	463a      	mov	r2, r7
 8013396:	f7f5 fc63 	bl	8008c60 <ucdr_init_buffer_origin_offset>
 801339a:	464a      	mov	r2, r9
 801339c:	2300      	movs	r3, #0
 801339e:	210d      	movs	r1, #13
 80133a0:	4658      	mov	r0, fp
 80133a2:	f7f9 fb15 	bl	800c9d0 <uxr_buffer_submessage_header>
 80133a6:	8921      	ldrh	r1, [r4, #8]
 80133a8:	fbb6 f2f1 	udiv	r2, r6, r1
 80133ac:	fb01 6212 	mls	r2, r1, r2, r6
 80133b0:	b292      	uxth	r2, r2
 80133b2:	6863      	ldr	r3, [r4, #4]
 80133b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80133b8:	fb02 f303 	mul.w	r3, r2, r3
 80133bc:	6822      	ldr	r2, [r4, #0]
 80133be:	4630      	mov	r0, r6
 80133c0:	50d7      	str	r7, [r2, r3]
 80133c2:	2101      	movs	r1, #1
 80133c4:	f000 faf4 	bl	80139b0 <uxr_seq_num_add>
 80133c8:	f10a 0a01 	add.w	sl, sl, #1
 80133cc:	fa1f f38a 	uxth.w	r3, sl
 80133d0:	429d      	cmp	r5, r3
 80133d2:	4606      	mov	r6, r0
 80133d4:	d8ca      	bhi.n	801336c <uxr_prepare_reliable_buffer_to_write+0xfc>
 80133d6:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80133da:	9d05      	ldr	r5, [sp, #20]
 80133dc:	8920      	ldrh	r0, [r4, #8]
 80133de:	fbb6 f3f0 	udiv	r3, r6, r0
 80133e2:	fb00 6313 	mls	r3, r0, r3, r6
 80133e6:	b299      	uxth	r1, r3
 80133e8:	6863      	ldr	r3, [r4, #4]
 80133ea:	fbb3 f3f0 	udiv	r3, r3, r0
 80133ee:	fb01 f303 	mul.w	r3, r1, r3
 80133f2:	6821      	ldr	r1, [r4, #0]
 80133f4:	3304      	adds	r3, #4
 80133f6:	4419      	add	r1, r3
 80133f8:	463a      	mov	r2, r7
 80133fa:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80133fe:	9000      	str	r0, [sp, #0]
 8013400:	2300      	movs	r3, #0
 8013402:	4658      	mov	r0, fp
 8013404:	f7f5 fc2c 	bl	8008c60 <ucdr_init_buffer_origin_offset>
 8013408:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801340c:	4658      	mov	r0, fp
 801340e:	fa1f f289 	uxth.w	r2, r9
 8013412:	2302      	movs	r3, #2
 8013414:	210d      	movs	r1, #13
 8013416:	f7f9 fadb 	bl	800c9d0 <uxr_buffer_submessage_header>
 801341a:	9b03      	ldr	r3, [sp, #12]
 801341c:	8927      	ldrh	r7, [r4, #8]
 801341e:	7b20      	ldrb	r0, [r4, #12]
 8013420:	f108 0104 	add.w	r1, r8, #4
 8013424:	440b      	add	r3, r1
 8013426:	4619      	mov	r1, r3
 8013428:	fbb6 f3f7 	udiv	r3, r6, r7
 801342c:	fb07 6313 	mls	r3, r7, r3, r6
 8013430:	f1a5 0208 	sub.w	r2, r5, #8
 8013434:	b29d      	uxth	r5, r3
 8013436:	3004      	adds	r0, #4
 8013438:	6863      	ldr	r3, [r4, #4]
 801343a:	fbb3 f3f7 	udiv	r3, r3, r7
 801343e:	fb05 f303 	mul.w	r3, r5, r3
 8013442:	6825      	ldr	r5, [r4, #0]
 8013444:	4448      	add	r0, r9
 8013446:	50e8      	str	r0, [r5, r3]
 8013448:	9d04      	ldr	r5, [sp, #16]
 801344a:	eba2 0208 	sub.w	r2, r2, r8
 801344e:	4628      	mov	r0, r5
 8013450:	f7f5 fc18 	bl	8008c84 <ucdr_init_buffer>
 8013454:	4628      	mov	r0, r5
 8013456:	493c      	ldr	r1, [pc, #240]	; (8013548 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8013458:	4622      	mov	r2, r4
 801345a:	f7f5 fbe7 	bl	8008c2c <ucdr_set_on_full_buffer_callback>
 801345e:	2001      	movs	r0, #1
 8013460:	81e6      	strh	r6, [r4, #14]
 8013462:	b011      	add	sp, #68	; 0x44
 8013464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013468:	2101      	movs	r1, #1
 801346a:	89e0      	ldrh	r0, [r4, #14]
 801346c:	f000 faa0 	bl	80139b0 <uxr_seq_num_add>
 8013470:	8921      	ldrh	r1, [r4, #8]
 8013472:	4605      	mov	r5, r0
 8013474:	8a60      	ldrh	r0, [r4, #18]
 8013476:	f000 fa9b 	bl	80139b0 <uxr_seq_num_add>
 801347a:	4601      	mov	r1, r0
 801347c:	4628      	mov	r0, r5
 801347e:	f000 fa9f 	bl	80139c0 <uxr_seq_num_cmp>
 8013482:	2800      	cmp	r0, #0
 8013484:	dd42      	ble.n	801350c <uxr_prepare_reliable_buffer_to_write+0x29c>
 8013486:	2000      	movs	r0, #0
 8013488:	b011      	add	sp, #68	; 0x44
 801348a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801348e:	8921      	ldrh	r1, [r4, #8]
 8013490:	8a60      	ldrh	r0, [r4, #18]
 8013492:	9205      	str	r2, [sp, #20]
 8013494:	f000 fa8c 	bl	80139b0 <uxr_seq_num_add>
 8013498:	4601      	mov	r1, r0
 801349a:	4630      	mov	r0, r6
 801349c:	f000 fa90 	bl	80139c0 <uxr_seq_num_cmp>
 80134a0:	2800      	cmp	r0, #0
 80134a2:	9a05      	ldr	r2, [sp, #20]
 80134a4:	dcef      	bgt.n	8013486 <uxr_prepare_reliable_buffer_to_write+0x216>
 80134a6:	8927      	ldrh	r7, [r4, #8]
 80134a8:	fbb6 f3f7 	udiv	r3, r6, r7
 80134ac:	fb07 6313 	mls	r3, r7, r3, r6
 80134b0:	b29d      	uxth	r5, r3
 80134b2:	6863      	ldr	r3, [r4, #4]
 80134b4:	6824      	ldr	r4, [r4, #0]
 80134b6:	fbb3 f3f7 	udiv	r3, r3, r7
 80134ba:	fb05 f303 	mul.w	r3, r5, r3
 80134be:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80134c2:	50e2      	str	r2, [r4, r3]
 80134c4:	2300      	movs	r3, #0
 80134c6:	f8cd 8000 	str.w	r8, [sp]
 80134ca:	f7f5 fbc9 	bl	8008c60 <ucdr_init_buffer_origin_offset>
 80134ce:	2001      	movs	r0, #1
 80134d0:	e7da      	b.n	8013488 <uxr_prepare_reliable_buffer_to_write+0x218>
 80134d2:	b293      	uxth	r3, r2
 80134d4:	461a      	mov	r2, r3
 80134d6:	e737      	b.n	8013348 <uxr_prepare_reliable_buffer_to_write+0xd8>
 80134d8:	4630      	mov	r0, r6
 80134da:	2101      	movs	r1, #1
 80134dc:	9207      	str	r2, [sp, #28]
 80134de:	f000 fa67 	bl	80139b0 <uxr_seq_num_add>
 80134e2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80134e6:	fbb0 f1fc 	udiv	r1, r0, ip
 80134ea:	fb0c 0111 	mls	r1, ip, r1, r0
 80134ee:	4606      	mov	r6, r0
 80134f0:	b288      	uxth	r0, r1
 80134f2:	6863      	ldr	r3, [r4, #4]
 80134f4:	fbb3 f1fc 	udiv	r1, r3, ip
 80134f8:	6823      	ldr	r3, [r4, #0]
 80134fa:	9a07      	ldr	r2, [sp, #28]
 80134fc:	fb00 f101 	mul.w	r1, r0, r1
 8013500:	3104      	adds	r1, #4
 8013502:	440b      	add	r3, r1
 8013504:	9303      	str	r3, [sp, #12]
 8013506:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801350a:	e70a      	b.n	8013322 <uxr_prepare_reliable_buffer_to_write+0xb2>
 801350c:	8921      	ldrh	r1, [r4, #8]
 801350e:	fbb5 f3f1 	udiv	r3, r5, r1
 8013512:	fb01 5313 	mls	r3, r1, r3, r5
 8013516:	b29a      	uxth	r2, r3
 8013518:	6863      	ldr	r3, [r4, #4]
 801351a:	fbb3 f3f1 	udiv	r3, r3, r1
 801351e:	6821      	ldr	r1, [r4, #0]
 8013520:	9804      	ldr	r0, [sp, #16]
 8013522:	fb02 f303 	mul.w	r3, r2, r3
 8013526:	3304      	adds	r3, #4
 8013528:	7b22      	ldrb	r2, [r4, #12]
 801352a:	4419      	add	r1, r3
 801352c:	445a      	add	r2, fp
 801352e:	f841 2c04 	str.w	r2, [r1, #-4]
 8013532:	7b23      	ldrb	r3, [r4, #12]
 8013534:	9300      	str	r3, [sp, #0]
 8013536:	2300      	movs	r3, #0
 8013538:	f7f5 fb92 	bl	8008c60 <ucdr_init_buffer_origin_offset>
 801353c:	81e5      	strh	r5, [r4, #14]
 801353e:	2001      	movs	r0, #1
 8013540:	e7a2      	b.n	8013488 <uxr_prepare_reliable_buffer_to_write+0x218>
 8013542:	4682      	mov	sl, r0
 8013544:	e6ca      	b.n	80132dc <uxr_prepare_reliable_buffer_to_write+0x6c>
 8013546:	bf00      	nop
 8013548:	08013151 	.word	0x08013151

0801354c <uxr_prepare_next_reliable_buffer_to_send>:
 801354c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801354e:	4604      	mov	r4, r0
 8013550:	460f      	mov	r7, r1
 8013552:	8a00      	ldrh	r0, [r0, #16]
 8013554:	2101      	movs	r1, #1
 8013556:	4616      	mov	r6, r2
 8013558:	461d      	mov	r5, r3
 801355a:	f000 fa29 	bl	80139b0 <uxr_seq_num_add>
 801355e:	8028      	strh	r0, [r5, #0]
 8013560:	8922      	ldrh	r2, [r4, #8]
 8013562:	fbb0 f3f2 	udiv	r3, r0, r2
 8013566:	fb02 0c13 	mls	ip, r2, r3, r0
 801356a:	fa1f fc8c 	uxth.w	ip, ip
 801356e:	6863      	ldr	r3, [r4, #4]
 8013570:	fbb3 f3f2 	udiv	r3, r3, r2
 8013574:	fb0c fc03 	mul.w	ip, ip, r3
 8013578:	6823      	ldr	r3, [r4, #0]
 801357a:	89e1      	ldrh	r1, [r4, #14]
 801357c:	f10c 0c04 	add.w	ip, ip, #4
 8013580:	4463      	add	r3, ip
 8013582:	603b      	str	r3, [r7, #0]
 8013584:	6823      	ldr	r3, [r4, #0]
 8013586:	449c      	add	ip, r3
 8013588:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801358c:	6033      	str	r3, [r6, #0]
 801358e:	f000 fa17 	bl	80139c0 <uxr_seq_num_cmp>
 8013592:	2800      	cmp	r0, #0
 8013594:	dd01      	ble.n	801359a <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8013596:	2000      	movs	r0, #0
 8013598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801359a:	7b23      	ldrb	r3, [r4, #12]
 801359c:	6832      	ldr	r2, [r6, #0]
 801359e:	429a      	cmp	r2, r3
 80135a0:	d9f9      	bls.n	8013596 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80135a2:	8a61      	ldrh	r1, [r4, #18]
 80135a4:	8a20      	ldrh	r0, [r4, #16]
 80135a6:	f000 fa07 	bl	80139b8 <uxr_seq_num_sub>
 80135aa:	8923      	ldrh	r3, [r4, #8]
 80135ac:	4283      	cmp	r3, r0
 80135ae:	d0f2      	beq.n	8013596 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80135b0:	8828      	ldrh	r0, [r5, #0]
 80135b2:	89e3      	ldrh	r3, [r4, #14]
 80135b4:	8220      	strh	r0, [r4, #16]
 80135b6:	4298      	cmp	r0, r3
 80135b8:	d001      	beq.n	80135be <uxr_prepare_next_reliable_buffer_to_send+0x72>
 80135ba:	2001      	movs	r0, #1
 80135bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80135be:	2101      	movs	r1, #1
 80135c0:	f000 f9f6 	bl	80139b0 <uxr_seq_num_add>
 80135c4:	81e0      	strh	r0, [r4, #14]
 80135c6:	2001      	movs	r0, #1
 80135c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80135ca:	bf00      	nop

080135cc <uxr_update_output_stream_heartbeat_timestamp>:
 80135cc:	b570      	push	{r4, r5, r6, lr}
 80135ce:	8a01      	ldrh	r1, [r0, #16]
 80135d0:	4604      	mov	r4, r0
 80135d2:	8a40      	ldrh	r0, [r0, #18]
 80135d4:	4615      	mov	r5, r2
 80135d6:	461e      	mov	r6, r3
 80135d8:	f000 f9f2 	bl	80139c0 <uxr_seq_num_cmp>
 80135dc:	2800      	cmp	r0, #0
 80135de:	db07      	blt.n	80135f0 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80135e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80135e4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80135e8:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80135ec:	2000      	movs	r0, #0
 80135ee:	bd70      	pop	{r4, r5, r6, pc}
 80135f0:	f894 0020 	ldrb.w	r0, [r4, #32]
 80135f4:	b940      	cbnz	r0, 8013608 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 80135f6:	2301      	movs	r3, #1
 80135f8:	f884 3020 	strb.w	r3, [r4, #32]
 80135fc:	3564      	adds	r5, #100	; 0x64
 80135fe:	f146 0600 	adc.w	r6, r6, #0
 8013602:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8013606:	bd70      	pop	{r4, r5, r6, pc}
 8013608:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801360c:	4295      	cmp	r5, r2
 801360e:	eb76 0303 	sbcs.w	r3, r6, r3
 8013612:	bfa5      	ittet	ge
 8013614:	3001      	addge	r0, #1
 8013616:	f884 0020 	strbge.w	r0, [r4, #32]
 801361a:	2000      	movlt	r0, #0
 801361c:	2001      	movge	r0, #1
 801361e:	e7ed      	b.n	80135fc <uxr_update_output_stream_heartbeat_timestamp+0x30>

08013620 <uxr_begin_output_nack_buffer_it>:
 8013620:	8a40      	ldrh	r0, [r0, #18]
 8013622:	4770      	bx	lr

08013624 <uxr_next_reliable_nack_buffer_to_send>:
 8013624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013628:	f890 8021 	ldrb.w	r8, [r0, #33]	; 0x21
 801362c:	b082      	sub	sp, #8
 801362e:	f1b8 0f00 	cmp.w	r8, #0
 8013632:	d011      	beq.n	8013658 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8013634:	4604      	mov	r4, r0
 8013636:	8818      	ldrh	r0, [r3, #0]
 8013638:	460e      	mov	r6, r1
 801363a:	4617      	mov	r7, r2
 801363c:	461d      	mov	r5, r3
 801363e:	2101      	movs	r1, #1
 8013640:	f000 f9b6 	bl	80139b0 <uxr_seq_num_add>
 8013644:	8028      	strh	r0, [r5, #0]
 8013646:	8a21      	ldrh	r1, [r4, #16]
 8013648:	f000 f9ba 	bl	80139c0 <uxr_seq_num_cmp>
 801364c:	2800      	cmp	r0, #0
 801364e:	dd07      	ble.n	8013660 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8013650:	f04f 0800 	mov.w	r8, #0
 8013654:	f884 8021 	strb.w	r8, [r4, #33]	; 0x21
 8013658:	4640      	mov	r0, r8
 801365a:	b002      	add	sp, #8
 801365c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013660:	8921      	ldrh	r1, [r4, #8]
 8013662:	8828      	ldrh	r0, [r5, #0]
 8013664:	6823      	ldr	r3, [r4, #0]
 8013666:	fbb0 f2f1 	udiv	r2, r0, r1
 801366a:	fb01 0c12 	mls	ip, r1, r2, r0
 801366e:	fa1f f28c 	uxth.w	r2, ip
 8013672:	9301      	str	r3, [sp, #4]
 8013674:	6863      	ldr	r3, [r4, #4]
 8013676:	fbb3 fcf1 	udiv	ip, r3, r1
 801367a:	9b01      	ldr	r3, [sp, #4]
 801367c:	fb02 fc0c 	mul.w	ip, r2, ip
 8013680:	f10c 0c04 	add.w	ip, ip, #4
 8013684:	4463      	add	r3, ip
 8013686:	6033      	str	r3, [r6, #0]
 8013688:	6823      	ldr	r3, [r4, #0]
 801368a:	4463      	add	r3, ip
 801368c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8013690:	603b      	str	r3, [r7, #0]
 8013692:	7b22      	ldrb	r2, [r4, #12]
 8013694:	429a      	cmp	r2, r3
 8013696:	d0d2      	beq.n	801363e <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8013698:	4640      	mov	r0, r8
 801369a:	b002      	add	sp, #8
 801369c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080136a0 <uxr_process_acknack>:
 80136a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136a2:	4604      	mov	r4, r0
 80136a4:	460e      	mov	r6, r1
 80136a6:	4610      	mov	r0, r2
 80136a8:	2101      	movs	r1, #1
 80136aa:	f000 f985 	bl	80139b8 <uxr_seq_num_sub>
 80136ae:	8a61      	ldrh	r1, [r4, #18]
 80136b0:	f000 f982 	bl	80139b8 <uxr_seq_num_sub>
 80136b4:	b1c0      	cbz	r0, 80136e8 <uxr_process_acknack+0x48>
 80136b6:	4605      	mov	r5, r0
 80136b8:	2700      	movs	r7, #0
 80136ba:	2101      	movs	r1, #1
 80136bc:	8a60      	ldrh	r0, [r4, #18]
 80136be:	f000 f977 	bl	80139b0 <uxr_seq_num_add>
 80136c2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80136c6:	fbb0 f1fc 	udiv	r1, r0, ip
 80136ca:	e9d4 2300 	ldrd	r2, r3, [r4]
 80136ce:	fb0c 0111 	mls	r1, ip, r1, r0
 80136d2:	b289      	uxth	r1, r1
 80136d4:	3701      	adds	r7, #1
 80136d6:	fbb3 f3fc 	udiv	r3, r3, ip
 80136da:	fb01 f303 	mul.w	r3, r1, r3
 80136de:	42bd      	cmp	r5, r7
 80136e0:	7b21      	ldrb	r1, [r4, #12]
 80136e2:	8260      	strh	r0, [r4, #18]
 80136e4:	50d1      	str	r1, [r2, r3]
 80136e6:	d1e8      	bne.n	80136ba <uxr_process_acknack+0x1a>
 80136e8:	3e00      	subs	r6, #0
 80136ea:	f04f 0300 	mov.w	r3, #0
 80136ee:	bf18      	it	ne
 80136f0:	2601      	movne	r6, #1
 80136f2:	f884 3020 	strb.w	r3, [r4, #32]
 80136f6:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 80136fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080136fc <uxr_is_output_up_to_date>:
 80136fc:	8a01      	ldrh	r1, [r0, #16]
 80136fe:	8a40      	ldrh	r0, [r0, #18]
 8013700:	b508      	push	{r3, lr}
 8013702:	f000 f95d 	bl	80139c0 <uxr_seq_num_cmp>
 8013706:	fab0 f080 	clz	r0, r0
 801370a:	0940      	lsrs	r0, r0, #5
 801370c:	bd08      	pop	{r3, pc}
 801370e:	bf00      	nop

08013710 <get_available_free_slots>:
 8013710:	8902      	ldrh	r2, [r0, #8]
 8013712:	b1da      	cbz	r2, 801374c <get_available_free_slots+0x3c>
 8013714:	b530      	push	{r4, r5, lr}
 8013716:	2100      	movs	r1, #0
 8013718:	6843      	ldr	r3, [r0, #4]
 801371a:	6805      	ldr	r5, [r0, #0]
 801371c:	7b04      	ldrb	r4, [r0, #12]
 801371e:	fbb3 fef2 	udiv	lr, r3, r2
 8013722:	4608      	mov	r0, r1
 8013724:	460b      	mov	r3, r1
 8013726:	fbb3 fcf2 	udiv	ip, r3, r2
 801372a:	fb02 331c 	mls	r3, r2, ip, r3
 801372e:	b29b      	uxth	r3, r3
 8013730:	fb0e f303 	mul.w	r3, lr, r3
 8013734:	3101      	adds	r1, #1
 8013736:	f855 c003 	ldr.w	ip, [r5, r3]
 801373a:	4564      	cmp	r4, ip
 801373c:	bf08      	it	eq
 801373e:	3001      	addeq	r0, #1
 8013740:	b28b      	uxth	r3, r1
 8013742:	bf08      	it	eq
 8013744:	b280      	uxtheq	r0, r0
 8013746:	4293      	cmp	r3, r2
 8013748:	d3ed      	bcc.n	8013726 <get_available_free_slots+0x16>
 801374a:	bd30      	pop	{r4, r5, pc}
 801374c:	4610      	mov	r0, r2
 801374e:	4770      	bx	lr

08013750 <uxr_buffer_request_data>:
 8013750:	b530      	push	{r4, r5, lr}
 8013752:	b095      	sub	sp, #84	; 0x54
 8013754:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8013758:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801375a:	9303      	str	r3, [sp, #12]
 801375c:	2200      	movs	r2, #0
 801375e:	2d00      	cmp	r5, #0
 8013760:	bf14      	ite	ne
 8013762:	2101      	movne	r1, #1
 8013764:	4611      	moveq	r1, r2
 8013766:	4604      	mov	r4, r0
 8013768:	f88d 301c 	strb.w	r3, [sp, #28]
 801376c:	f88d 201d 	strb.w	r2, [sp, #29]
 8013770:	f88d 201e 	strb.w	r2, [sp, #30]
 8013774:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8013778:	d021      	beq.n	80137be <uxr_buffer_request_data+0x6e>
 801377a:	682a      	ldr	r2, [r5, #0]
 801377c:	686b      	ldr	r3, [r5, #4]
 801377e:	f8cd 2026 	str.w	r2, [sp, #38]	; 0x26
 8013782:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 8013786:	2210      	movs	r2, #16
 8013788:	2308      	movs	r3, #8
 801378a:	2100      	movs	r1, #0
 801378c:	e9cd 3100 	strd	r3, r1, [sp]
 8013790:	4620      	mov	r0, r4
 8013792:	9905      	ldr	r1, [sp, #20]
 8013794:	ab0c      	add	r3, sp, #48	; 0x30
 8013796:	f7f8 fe7d 	bl	800c494 <uxr_prepare_stream_to_write_submessage>
 801379a:	b918      	cbnz	r0, 80137a4 <uxr_buffer_request_data+0x54>
 801379c:	4604      	mov	r4, r0
 801379e:	4620      	mov	r0, r4
 80137a0:	b015      	add	sp, #84	; 0x54
 80137a2:	bd30      	pop	{r4, r5, pc}
 80137a4:	9904      	ldr	r1, [sp, #16]
 80137a6:	aa06      	add	r2, sp, #24
 80137a8:	4620      	mov	r0, r4
 80137aa:	f7f8 ffa9 	bl	800c700 <uxr_init_base_object_request>
 80137ae:	a906      	add	r1, sp, #24
 80137b0:	4604      	mov	r4, r0
 80137b2:	a80c      	add	r0, sp, #48	; 0x30
 80137b4:	f7fa faa4 	bl	800dd00 <uxr_serialize_READ_DATA_Payload>
 80137b8:	4620      	mov	r0, r4
 80137ba:	b015      	add	sp, #84	; 0x54
 80137bc:	bd30      	pop	{r4, r5, pc}
 80137be:	2208      	movs	r2, #8
 80137c0:	e7e2      	b.n	8013788 <uxr_buffer_request_data+0x38>
 80137c2:	bf00      	nop

080137c4 <uxr_buffer_cancel_data>:
 80137c4:	b510      	push	{r4, lr}
 80137c6:	b094      	sub	sp, #80	; 0x50
 80137c8:	2300      	movs	r3, #0
 80137ca:	9202      	str	r2, [sp, #8]
 80137cc:	9205      	str	r2, [sp, #20]
 80137ce:	9301      	str	r3, [sp, #4]
 80137d0:	2201      	movs	r2, #1
 80137d2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80137d6:	f88d 301e 	strb.w	r3, [sp, #30]
 80137da:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 80137de:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 80137e2:	2308      	movs	r3, #8
 80137e4:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 80137e8:	9300      	str	r3, [sp, #0]
 80137ea:	2210      	movs	r2, #16
 80137ec:	ab0c      	add	r3, sp, #48	; 0x30
 80137ee:	4604      	mov	r4, r0
 80137f0:	9103      	str	r1, [sp, #12]
 80137f2:	f7f8 fe4f 	bl	800c494 <uxr_prepare_stream_to_write_submessage>
 80137f6:	b918      	cbnz	r0, 8013800 <uxr_buffer_cancel_data+0x3c>
 80137f8:	4604      	mov	r4, r0
 80137fa:	4620      	mov	r0, r4
 80137fc:	b014      	add	sp, #80	; 0x50
 80137fe:	bd10      	pop	{r4, pc}
 8013800:	9905      	ldr	r1, [sp, #20]
 8013802:	aa06      	add	r2, sp, #24
 8013804:	4620      	mov	r0, r4
 8013806:	f7f8 ff7b 	bl	800c700 <uxr_init_base_object_request>
 801380a:	a906      	add	r1, sp, #24
 801380c:	4604      	mov	r4, r0
 801380e:	a80c      	add	r0, sp, #48	; 0x30
 8013810:	f7fa fa76 	bl	800dd00 <uxr_serialize_READ_DATA_Payload>
 8013814:	4620      	mov	r0, r4
 8013816:	b014      	add	sp, #80	; 0x50
 8013818:	bd10      	pop	{r4, pc}
 801381a:	bf00      	nop

0801381c <read_submessage_format>:
 801381c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013820:	b095      	sub	sp, #84	; 0x54
 8013822:	f8bd 6078 	ldrh.w	r6, [sp, #120]	; 0x78
 8013826:	b113      	cbz	r3, 801382e <read_submessage_format+0x12>
 8013828:	b015      	add	sp, #84	; 0x54
 801382a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801382e:	460c      	mov	r4, r1
 8013830:	4615      	mov	r5, r2
 8013832:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8013836:	4607      	mov	r7, r0
 8013838:	981c      	ldr	r0, [sp, #112]	; 0x70
 801383a:	9004      	str	r0, [sp, #16]
 801383c:	981d      	ldr	r0, [sp, #116]	; 0x74
 801383e:	9005      	str	r0, [sp, #20]
 8013840:	1a52      	subs	r2, r2, r1
 8013842:	a80c      	add	r0, sp, #48	; 0x30
 8013844:	4699      	mov	r9, r3
 8013846:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 801384a:	f7f5 fa1b 	bl	8008c84 <ucdr_init_buffer>
 801384e:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8013852:	a80c      	add	r0, sp, #48	; 0x30
 8013854:	f7f5 f9ea 	bl	8008c2c <ucdr_set_on_full_buffer_callback>
 8013858:	69e2      	ldr	r2, [r4, #28]
 801385a:	b19a      	cbz	r2, 8013884 <read_submessage_format+0x68>
 801385c:	f1b8 0f07 	cmp.w	r8, #7
 8013860:	f882 9014 	strb.w	r9, [r2, #20]
 8013864:	d040      	beq.n	80138e8 <read_submessage_format+0xcc>
 8013866:	f1b8 0f08 	cmp.w	r8, #8
 801386a:	d02e      	beq.n	80138ca <read_submessage_format+0xae>
 801386c:	f1b8 0f06 	cmp.w	r8, #6
 8013870:	d011      	beq.n	8013896 <read_submessage_format+0x7a>
 8013872:	2301      	movs	r3, #1
 8013874:	7513      	strb	r3, [r2, #20]
 8013876:	4629      	mov	r1, r5
 8013878:	4620      	mov	r0, r4
 801387a:	f7f5 fa53 	bl	8008d24 <ucdr_advance_buffer>
 801387e:	b015      	add	sp, #84	; 0x54
 8013880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013884:	f1b8 0f07 	cmp.w	r8, #7
 8013888:	d02e      	beq.n	80138e8 <read_submessage_format+0xcc>
 801388a:	f1b8 0f08 	cmp.w	r8, #8
 801388e:	d01c      	beq.n	80138ca <read_submessage_format+0xae>
 8013890:	f1b8 0f06 	cmp.w	r8, #6
 8013894:	d1ef      	bne.n	8013876 <read_submessage_format+0x5a>
 8013896:	f8d7 8088 	ldr.w	r8, [r7, #136]	; 0x88
 801389a:	f1b8 0f00 	cmp.w	r8, #0
 801389e:	d011      	beq.n	80138c4 <read_submessage_format+0xa8>
 80138a0:	ab0c      	add	r3, sp, #48	; 0x30
 80138a2:	e9cd 3500 	strd	r3, r5, [sp]
 80138a6:	2306      	movs	r3, #6
 80138a8:	f88d 3016 	strb.w	r3, [sp, #22]
 80138ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80138b0:	9302      	str	r3, [sp, #8]
 80138b2:	4632      	mov	r2, r6
 80138b4:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80138b8:	4638      	mov	r0, r7
 80138ba:	47c0      	blx	r8
 80138bc:	2301      	movs	r3, #1
 80138be:	69e2      	ldr	r2, [r4, #28]
 80138c0:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80138c4:	2a00      	cmp	r2, #0
 80138c6:	d1d4      	bne.n	8013872 <read_submessage_format+0x56>
 80138c8:	e7d5      	b.n	8013876 <read_submessage_format+0x5a>
 80138ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d0f8      	beq.n	80138c4 <read_submessage_format+0xa8>
 80138d2:	a906      	add	r1, sp, #24
 80138d4:	a80c      	add	r0, sp, #48	; 0x30
 80138d6:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80138da:	f7fa fad7 	bl	800de8c <uxr_deserialize_SampleIdentity>
 80138de:	b9a0      	cbnz	r0, 801390a <read_submessage_format+0xee>
 80138e0:	69e2      	ldr	r2, [r4, #28]
 80138e2:	2a00      	cmp	r2, #0
 80138e4:	d1c5      	bne.n	8013872 <read_submessage_format+0x56>
 80138e6:	e7c6      	b.n	8013876 <read_submessage_format+0x5a>
 80138e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80138ec:	b13b      	cbz	r3, 80138fe <read_submessage_format+0xe2>
 80138ee:	a906      	add	r1, sp, #24
 80138f0:	a80c      	add	r0, sp, #48	; 0x30
 80138f2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80138f6:	f7f9 ff9d 	bl	800d834 <uxr_deserialize_BaseObjectRequest>
 80138fa:	bb60      	cbnz	r0, 8013956 <read_submessage_format+0x13a>
 80138fc:	69e2      	ldr	r2, [r4, #28]
 80138fe:	68a3      	ldr	r3, [r4, #8]
 8013900:	442b      	add	r3, r5
 8013902:	60a3      	str	r3, [r4, #8]
 8013904:	2a00      	cmp	r2, #0
 8013906:	d1b4      	bne.n	8013872 <read_submessage_format+0x56>
 8013908:	e7b5      	b.n	8013876 <read_submessage_format+0x5a>
 801390a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801390e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013910:	1a52      	subs	r2, r2, r1
 8013912:	eba8 0803 	sub.w	r8, r8, r3
 8013916:	a80c      	add	r0, sp, #48	; 0x30
 8013918:	f7f5 f9b4 	bl	8008c84 <ucdr_init_buffer>
 801391c:	44a8      	add	r8, r5
 801391e:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8013922:	a80c      	add	r0, sp, #48	; 0x30
 8013924:	f7f5 f982 	bl	8008c2c <ucdr_set_on_full_buffer_callback>
 8013928:	fa1f f888 	uxth.w	r8, r8
 801392c:	ab0c      	add	r3, sp, #48	; 0x30
 801392e:	9300      	str	r3, [sp, #0]
 8013930:	f8cd 8004 	str.w	r8, [sp, #4]
 8013934:	2108      	movs	r1, #8
 8013936:	f88d 1016 	strb.w	r1, [sp, #22]
 801393a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 801393e:	9102      	str	r1, [sp, #8]
 8013940:	ab06      	add	r3, sp, #24
 8013942:	4632      	mov	r2, r6
 8013944:	9905      	ldr	r1, [sp, #20]
 8013946:	f8d7 60a4 	ldr.w	r6, [r7, #164]	; 0xa4
 801394a:	4638      	mov	r0, r7
 801394c:	47b0      	blx	r6
 801394e:	2301      	movs	r3, #1
 8013950:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8013954:	e7c4      	b.n	80138e0 <read_submessage_format+0xc4>
 8013956:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801395a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801395c:	1a52      	subs	r2, r2, r1
 801395e:	a80c      	add	r0, sp, #48	; 0x30
 8013960:	eba8 0803 	sub.w	r8, r8, r3
 8013964:	f7f5 f98e 	bl	8008c84 <ucdr_init_buffer>
 8013968:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801396c:	a80c      	add	r0, sp, #48	; 0x30
 801396e:	f7f5 f95d 	bl	8008c2c <ucdr_set_on_full_buffer_callback>
 8013972:	ab0c      	add	r3, sp, #48	; 0x30
 8013974:	9300      	str	r3, [sp, #0]
 8013976:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801397a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801397e:	44a8      	add	r8, r5
 8013980:	fa1f f888 	uxth.w	r8, r8
 8013984:	f8cd 8004 	str.w	r8, [sp, #4]
 8013988:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801398c:	2107      	movs	r1, #7
 801398e:	f88d 1016 	strb.w	r1, [sp, #22]
 8013992:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8013996:	9102      	str	r1, [sp, #8]
 8013998:	4632      	mov	r2, r6
 801399a:	b29b      	uxth	r3, r3
 801399c:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
 80139a0:	9905      	ldr	r1, [sp, #20]
 80139a2:	4638      	mov	r0, r7
 80139a4:	47b0      	blx	r6
 80139a6:	2301      	movs	r3, #1
 80139a8:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80139ac:	e7a6      	b.n	80138fc <read_submessage_format+0xe0>
 80139ae:	bf00      	nop

080139b0 <uxr_seq_num_add>:
 80139b0:	4408      	add	r0, r1
 80139b2:	b280      	uxth	r0, r0
 80139b4:	4770      	bx	lr
 80139b6:	bf00      	nop

080139b8 <uxr_seq_num_sub>:
 80139b8:	1a40      	subs	r0, r0, r1
 80139ba:	b280      	uxth	r0, r0
 80139bc:	4770      	bx	lr
 80139be:	bf00      	nop

080139c0 <uxr_seq_num_cmp>:
 80139c0:	4288      	cmp	r0, r1
 80139c2:	d011      	beq.n	80139e8 <uxr_seq_num_cmp+0x28>
 80139c4:	d309      	bcc.n	80139da <uxr_seq_num_cmp+0x1a>
 80139c6:	4288      	cmp	r0, r1
 80139c8:	d910      	bls.n	80139ec <uxr_seq_num_cmp+0x2c>
 80139ca:	1a40      	subs	r0, r0, r1
 80139cc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80139d0:	bfd4      	ite	le
 80139d2:	2001      	movle	r0, #1
 80139d4:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 80139d8:	4770      	bx	lr
 80139da:	1a0b      	subs	r3, r1, r0
 80139dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80139e0:	daf1      	bge.n	80139c6 <uxr_seq_num_cmp+0x6>
 80139e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80139e6:	4770      	bx	lr
 80139e8:	2000      	movs	r0, #0
 80139ea:	4770      	bx	lr
 80139ec:	2001      	movs	r0, #1
 80139ee:	4770      	bx	lr

080139f0 <uxr_init_framing_io>:
 80139f0:	2300      	movs	r3, #0
 80139f2:	7041      	strb	r1, [r0, #1]
 80139f4:	7003      	strb	r3, [r0, #0]
 80139f6:	8583      	strh	r3, [r0, #44]	; 0x2c
 80139f8:	4770      	bx	lr
 80139fa:	bf00      	nop

080139fc <uxr_write_framed_msg>:
 80139fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a00:	4617      	mov	r7, r2
 8013a02:	7842      	ldrb	r2, [r0, #1]
 8013a04:	b083      	sub	sp, #12
 8013a06:	460e      	mov	r6, r1
 8013a08:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 8013a0c:	469a      	mov	sl, r3
 8013a0e:	2901      	cmp	r1, #1
 8013a10:	f04f 037e 	mov.w	r3, #126	; 0x7e
 8013a14:	4604      	mov	r4, r0
 8013a16:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8013a1a:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8013a1e:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 8013a22:	f240 8137 	bls.w	8013c94 <uxr_write_framed_msg+0x298>
 8013a26:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8013a2a:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 8013a2e:	2901      	cmp	r1, #1
 8013a30:	f04f 0202 	mov.w	r2, #2
 8013a34:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013a38:	f240 808f 	bls.w	8013b5a <uxr_write_framed_msg+0x15e>
 8013a3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013a3e:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8013a42:	b2dd      	uxtb	r5, r3
 8013a44:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8013a48:	2203      	movs	r2, #3
 8013a4a:	2901      	cmp	r1, #1
 8013a4c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013a50:	f240 809a 	bls.w	8013b88 <uxr_write_framed_msg+0x18c>
 8013a54:	18a1      	adds	r1, r4, r2
 8013a56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013a58:	f881 5038 	strb.w	r5, [r1, #56]	; 0x38
 8013a5c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8013a60:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 8013a64:	3201      	adds	r2, #1
 8013a66:	2801      	cmp	r0, #1
 8013a68:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013a6c:	f240 80a0 	bls.w	8013bb0 <uxr_write_framed_msg+0x1b4>
 8013a70:	18a0      	adds	r0, r4, r2
 8013a72:	3201      	adds	r2, #1
 8013a74:	b2d2      	uxtb	r2, r2
 8013a76:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8013a7a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	f000 80a9 	beq.w	8013bd6 <uxr_write_framed_msg+0x1da>
 8013a84:	f04f 0900 	mov.w	r9, #0
 8013a88:	46c8      	mov	r8, r9
 8013a8a:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8013a8e:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8013a92:	2901      	cmp	r1, #1
 8013a94:	f240 80c3 	bls.w	8013c1e <uxr_write_framed_msg+0x222>
 8013a98:	2a29      	cmp	r2, #41	; 0x29
 8013a9a:	f200 809f 	bhi.w	8013bdc <uxr_write_framed_msg+0x1e0>
 8013a9e:	18a1      	adds	r1, r4, r2
 8013aa0:	3201      	adds	r2, #1
 8013aa2:	b2d2      	uxtb	r2, r2
 8013aa4:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8013aa8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013aac:	ea89 0303 	eor.w	r3, r9, r3
 8013ab0:	498c      	ldr	r1, [pc, #560]	; (8013ce4 <uxr_write_framed_msg+0x2e8>)
 8013ab2:	b2db      	uxtb	r3, r3
 8013ab4:	f108 0801 	add.w	r8, r8, #1
 8013ab8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013abc:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8013ac0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013ac2:	4543      	cmp	r3, r8
 8013ac4:	d8e1      	bhi.n	8013a8a <uxr_write_framed_msg+0x8e>
 8013ac6:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8013aca:	fa5f f889 	uxtb.w	r8, r9
 8013ace:	9301      	str	r3, [sp, #4]
 8013ad0:	f04f 0900 	mov.w	r9, #0
 8013ad4:	f1a8 0a7d 	sub.w	sl, r8, #125	; 0x7d
 8013ad8:	fa5f f18a 	uxtb.w	r1, sl
 8013adc:	2901      	cmp	r1, #1
 8013ade:	d921      	bls.n	8013b24 <uxr_write_framed_msg+0x128>
 8013ae0:	2a29      	cmp	r2, #41	; 0x29
 8013ae2:	f240 80af 	bls.w	8013c44 <uxr_write_framed_msg+0x248>
 8013ae6:	2500      	movs	r5, #0
 8013ae8:	e000      	b.n	8013aec <uxr_write_framed_msg+0xf0>
 8013aea:	b160      	cbz	r0, 8013b06 <uxr_write_framed_msg+0x10a>
 8013aec:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8013af0:	1b52      	subs	r2, r2, r5
 8013af2:	465b      	mov	r3, fp
 8013af4:	4421      	add	r1, r4
 8013af6:	4638      	mov	r0, r7
 8013af8:	47b0      	blx	r6
 8013afa:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8013afe:	4405      	add	r5, r0
 8013b00:	4295      	cmp	r5, r2
 8013b02:	d3f2      	bcc.n	8013aea <uxr_write_framed_msg+0xee>
 8013b04:	d003      	beq.n	8013b0e <uxr_write_framed_msg+0x112>
 8013b06:	2000      	movs	r0, #0
 8013b08:	b003      	add	sp, #12
 8013b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b0e:	fa5f f18a 	uxtb.w	r1, sl
 8013b12:	f04f 0300 	mov.w	r3, #0
 8013b16:	2901      	cmp	r1, #1
 8013b18:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8013b1c:	f04f 0200 	mov.w	r2, #0
 8013b20:	f200 8090 	bhi.w	8013c44 <uxr_write_framed_msg+0x248>
 8013b24:	1c51      	adds	r1, r2, #1
 8013b26:	b2c9      	uxtb	r1, r1
 8013b28:	2929      	cmp	r1, #41	; 0x29
 8013b2a:	d8dc      	bhi.n	8013ae6 <uxr_write_framed_msg+0xea>
 8013b2c:	18a5      	adds	r5, r4, r2
 8013b2e:	4421      	add	r1, r4
 8013b30:	3202      	adds	r2, #2
 8013b32:	f088 0820 	eor.w	r8, r8, #32
 8013b36:	4648      	mov	r0, r9
 8013b38:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8013b3c:	b2d2      	uxtb	r2, r2
 8013b3e:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 8013b42:	f04f 0901 	mov.w	r9, #1
 8013b46:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 8013b4a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013b4e:	2800      	cmp	r0, #0
 8013b50:	f040 8085 	bne.w	8013c5e <uxr_write_framed_msg+0x262>
 8013b54:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013b58:	e7bc      	b.n	8013ad4 <uxr_write_framed_msg+0xd8>
 8013b5a:	4611      	mov	r1, r2
 8013b5c:	f04f 0c03 	mov.w	ip, #3
 8013b60:	2204      	movs	r2, #4
 8013b62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013b64:	4421      	add	r1, r4
 8013b66:	b2dd      	uxtb	r5, r3
 8013b68:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 8013b6c:	f881 e038 	strb.w	lr, [r1, #56]	; 0x38
 8013b70:	44a4      	add	ip, r4
 8013b72:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8013b76:	f080 0020 	eor.w	r0, r0, #32
 8013b7a:	2901      	cmp	r1, #1
 8013b7c:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 8013b80:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013b84:	f63f af66 	bhi.w	8013a54 <uxr_write_framed_msg+0x58>
 8013b88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013b8a:	18a0      	adds	r0, r4, r2
 8013b8c:	f085 0520 	eor.w	r5, r5, #32
 8013b90:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8013b94:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8013b98:	f880 c038 	strb.w	ip, [r0, #56]	; 0x38
 8013b9c:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 8013ba0:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 8013ba4:	3202      	adds	r2, #2
 8013ba6:	2801      	cmp	r0, #1
 8013ba8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013bac:	f63f af60 	bhi.w	8013a70 <uxr_write_framed_msg+0x74>
 8013bb0:	1c50      	adds	r0, r2, #1
 8013bb2:	18a5      	adds	r5, r4, r2
 8013bb4:	fa54 f080 	uxtab	r0, r4, r0
 8013bb8:	3202      	adds	r2, #2
 8013bba:	f081 0120 	eor.w	r1, r1, #32
 8013bbe:	b2d2      	uxtb	r2, r2
 8013bc0:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8013bc4:	f885 c038 	strb.w	ip, [r5, #56]	; 0x38
 8013bc8:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8013bcc:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	f47f af57 	bne.w	8013a84 <uxr_write_framed_msg+0x88>
 8013bd6:	9301      	str	r3, [sp, #4]
 8013bd8:	4698      	mov	r8, r3
 8013bda:	e779      	b.n	8013ad0 <uxr_write_framed_msg+0xd4>
 8013bdc:	2500      	movs	r5, #0
 8013bde:	e001      	b.n	8013be4 <uxr_write_framed_msg+0x1e8>
 8013be0:	2800      	cmp	r0, #0
 8013be2:	d090      	beq.n	8013b06 <uxr_write_framed_msg+0x10a>
 8013be4:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8013be8:	1b52      	subs	r2, r2, r5
 8013bea:	465b      	mov	r3, fp
 8013bec:	4421      	add	r1, r4
 8013bee:	4638      	mov	r0, r7
 8013bf0:	47b0      	blx	r6
 8013bf2:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8013bf6:	4405      	add	r5, r0
 8013bf8:	4295      	cmp	r5, r2
 8013bfa:	d3f1      	bcc.n	8013be0 <uxr_write_framed_msg+0x1e4>
 8013bfc:	d183      	bne.n	8013b06 <uxr_write_framed_msg+0x10a>
 8013bfe:	f04f 0300 	mov.w	r3, #0
 8013c02:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8013c06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c08:	4543      	cmp	r3, r8
 8013c0a:	d964      	bls.n	8013cd6 <uxr_write_framed_msg+0x2da>
 8013c0c:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8013c10:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8013c14:	2901      	cmp	r1, #1
 8013c16:	f04f 0200 	mov.w	r2, #0
 8013c1a:	f63f af3d 	bhi.w	8013a98 <uxr_write_framed_msg+0x9c>
 8013c1e:	1c51      	adds	r1, r2, #1
 8013c20:	b2c9      	uxtb	r1, r1
 8013c22:	2929      	cmp	r1, #41	; 0x29
 8013c24:	d8da      	bhi.n	8013bdc <uxr_write_framed_msg+0x1e0>
 8013c26:	18a0      	adds	r0, r4, r2
 8013c28:	4421      	add	r1, r4
 8013c2a:	f04f 057d 	mov.w	r5, #125	; 0x7d
 8013c2e:	3202      	adds	r2, #2
 8013c30:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 8013c34:	b2d2      	uxtb	r2, r2
 8013c36:	f083 0020 	eor.w	r0, r3, #32
 8013c3a:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 8013c3e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013c42:	e733      	b.n	8013aac <uxr_write_framed_msg+0xb0>
 8013c44:	18a1      	adds	r1, r4, r2
 8013c46:	3201      	adds	r2, #1
 8013c48:	4648      	mov	r0, r9
 8013c4a:	b2d2      	uxtb	r2, r2
 8013c4c:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 8013c50:	f04f 0901 	mov.w	r9, #1
 8013c54:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013c58:	2800      	cmp	r0, #0
 8013c5a:	f43f af7b 	beq.w	8013b54 <uxr_write_framed_msg+0x158>
 8013c5e:	2500      	movs	r5, #0
 8013c60:	e002      	b.n	8013c68 <uxr_write_framed_msg+0x26c>
 8013c62:	2800      	cmp	r0, #0
 8013c64:	f43f af4f 	beq.w	8013b06 <uxr_write_framed_msg+0x10a>
 8013c68:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8013c6c:	1b52      	subs	r2, r2, r5
 8013c6e:	465b      	mov	r3, fp
 8013c70:	4421      	add	r1, r4
 8013c72:	4638      	mov	r0, r7
 8013c74:	47b0      	blx	r6
 8013c76:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8013c7a:	4405      	add	r5, r0
 8013c7c:	4295      	cmp	r5, r2
 8013c7e:	d3f0      	bcc.n	8013c62 <uxr_write_framed_msg+0x266>
 8013c80:	f47f af41 	bne.w	8013b06 <uxr_write_framed_msg+0x10a>
 8013c84:	2300      	movs	r3, #0
 8013c86:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8013c8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c8c:	b298      	uxth	r0, r3
 8013c8e:	b003      	add	sp, #12
 8013c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c94:	217d      	movs	r1, #125	; 0x7d
 8013c96:	f082 0220 	eor.w	r2, r2, #32
 8013c9a:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 8013c9e:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8013ca2:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 8013ca6:	2901      	cmp	r1, #1
 8013ca8:	f04f 0203 	mov.w	r2, #3
 8013cac:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013cb0:	d804      	bhi.n	8013cbc <uxr_write_framed_msg+0x2c0>
 8013cb2:	4611      	mov	r1, r2
 8013cb4:	f04f 0c04 	mov.w	ip, #4
 8013cb8:	2205      	movs	r2, #5
 8013cba:	e752      	b.n	8013b62 <uxr_write_framed_msg+0x166>
 8013cbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013cbe:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 8013cc2:	b2dd      	uxtb	r5, r3
 8013cc4:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8013cc8:	2204      	movs	r2, #4
 8013cca:	2901      	cmp	r1, #1
 8013ccc:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8013cd0:	f63f aec0 	bhi.w	8013a54 <uxr_write_framed_msg+0x58>
 8013cd4:	e758      	b.n	8013b88 <uxr_write_framed_msg+0x18c>
 8013cd6:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8013cda:	fa5f f889 	uxtb.w	r8, r9
 8013cde:	9301      	str	r3, [sp, #4]
 8013ce0:	2200      	movs	r2, #0
 8013ce2:	e6f5      	b.n	8013ad0 <uxr_write_framed_msg+0xd4>
 8013ce4:	08016d90 	.word	0x08016d90

08013ce8 <uxr_framing_read_transport>:
 8013ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cec:	4604      	mov	r4, r0
 8013cee:	b083      	sub	sp, #12
 8013cf0:	461f      	mov	r7, r3
 8013cf2:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8013cf6:	4689      	mov	r9, r1
 8013cf8:	4692      	mov	sl, r2
 8013cfa:	f7f8 feaf 	bl	800ca5c <uxr_millis>
 8013cfe:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8013d02:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 8013d06:	42b3      	cmp	r3, r6
 8013d08:	4680      	mov	r8, r0
 8013d0a:	d061      	beq.n	8013dd0 <uxr_framing_read_transport+0xe8>
 8013d0c:	d81c      	bhi.n	8013d48 <uxr_framing_read_transport+0x60>
 8013d0e:	1e75      	subs	r5, r6, #1
 8013d10:	1aed      	subs	r5, r5, r3
 8013d12:	b2ed      	uxtb	r5, r5
 8013d14:	2600      	movs	r6, #0
 8013d16:	455d      	cmp	r5, fp
 8013d18:	d81f      	bhi.n	8013d5a <uxr_framing_read_transport+0x72>
 8013d1a:	19ab      	adds	r3, r5, r6
 8013d1c:	455b      	cmp	r3, fp
 8013d1e:	bf84      	itt	hi
 8013d20:	ebab 0605 	subhi.w	r6, fp, r5
 8013d24:	b2f6      	uxtbhi	r6, r6
 8013d26:	b9ed      	cbnz	r5, 8013d64 <uxr_framing_read_transport+0x7c>
 8013d28:	f04f 0b00 	mov.w	fp, #0
 8013d2c:	f7f8 fe96 	bl	800ca5c <uxr_millis>
 8013d30:	683b      	ldr	r3, [r7, #0]
 8013d32:	eba0 0808 	sub.w	r8, r0, r8
 8013d36:	eba3 0308 	sub.w	r3, r3, r8
 8013d3a:	4658      	mov	r0, fp
 8013d3c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013d40:	603b      	str	r3, [r7, #0]
 8013d42:	b003      	add	sp, #12
 8013d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d48:	2e00      	cmp	r6, #0
 8013d4a:	d049      	beq.n	8013de0 <uxr_framing_read_transport+0xf8>
 8013d4c:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 8013d50:	b2ed      	uxtb	r5, r5
 8013d52:	3e01      	subs	r6, #1
 8013d54:	455d      	cmp	r5, fp
 8013d56:	b2f6      	uxtb	r6, r6
 8013d58:	d9df      	bls.n	8013d1a <uxr_framing_read_transport+0x32>
 8013d5a:	fa5f f58b 	uxtb.w	r5, fp
 8013d5e:	2600      	movs	r6, #0
 8013d60:	2d00      	cmp	r5, #0
 8013d62:	d0e1      	beq.n	8013d28 <uxr_framing_read_transport+0x40>
 8013d64:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8013d68:	3102      	adds	r1, #2
 8013d6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d6c:	9300      	str	r3, [sp, #0]
 8013d6e:	683b      	ldr	r3, [r7, #0]
 8013d70:	4421      	add	r1, r4
 8013d72:	462a      	mov	r2, r5
 8013d74:	4650      	mov	r0, sl
 8013d76:	47c8      	blx	r9
 8013d78:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8013d7c:	4a1a      	ldr	r2, [pc, #104]	; (8013de8 <uxr_framing_read_transport+0x100>)
 8013d7e:	4403      	add	r3, r0
 8013d80:	0859      	lsrs	r1, r3, #1
 8013d82:	fba2 2101 	umull	r2, r1, r2, r1
 8013d86:	0889      	lsrs	r1, r1, #2
 8013d88:	222a      	movs	r2, #42	; 0x2a
 8013d8a:	fb02 3111 	mls	r1, r2, r1, r3
 8013d8e:	4683      	mov	fp, r0
 8013d90:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8013d94:	2800      	cmp	r0, #0
 8013d96:	d0c7      	beq.n	8013d28 <uxr_framing_read_transport+0x40>
 8013d98:	42a8      	cmp	r0, r5
 8013d9a:	d1c7      	bne.n	8013d2c <uxr_framing_read_transport+0x44>
 8013d9c:	2e00      	cmp	r6, #0
 8013d9e:	d0c5      	beq.n	8013d2c <uxr_framing_read_transport+0x44>
 8013da0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013da2:	9300      	str	r3, [sp, #0]
 8013da4:	3102      	adds	r1, #2
 8013da6:	4632      	mov	r2, r6
 8013da8:	4421      	add	r1, r4
 8013daa:	2300      	movs	r3, #0
 8013dac:	4650      	mov	r0, sl
 8013dae:	47c8      	blx	r9
 8013db0:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8013db4:	4a0c      	ldr	r2, [pc, #48]	; (8013de8 <uxr_framing_read_transport+0x100>)
 8013db6:	180b      	adds	r3, r1, r0
 8013db8:	0859      	lsrs	r1, r3, #1
 8013dba:	fba2 1201 	umull	r1, r2, r2, r1
 8013dbe:	0892      	lsrs	r2, r2, #2
 8013dc0:	212a      	movs	r1, #42	; 0x2a
 8013dc2:	fb01 3312 	mls	r3, r1, r2, r3
 8013dc6:	eb00 0b05 	add.w	fp, r0, r5
 8013dca:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8013dce:	e7ad      	b.n	8013d2c <uxr_framing_read_transport+0x44>
 8013dd0:	2600      	movs	r6, #0
 8013dd2:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 8013dd6:	85a6      	strh	r6, [r4, #44]	; 0x2c
 8013dd8:	d9bf      	bls.n	8013d5a <uxr_framing_read_transport+0x72>
 8013dda:	2102      	movs	r1, #2
 8013ddc:	2529      	movs	r5, #41	; 0x29
 8013dde:	e7c4      	b.n	8013d6a <uxr_framing_read_transport+0x82>
 8013de0:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 8013de4:	b2ed      	uxtb	r5, r5
 8013de6:	e796      	b.n	8013d16 <uxr_framing_read_transport+0x2e>
 8013de8:	30c30c31 	.word	0x30c30c31

08013dec <uxr_read_framed_msg>:
 8013dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013df0:	461e      	mov	r6, r3
 8013df2:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8013df6:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8013dfa:	429d      	cmp	r5, r3
 8013dfc:	b083      	sub	sp, #12
 8013dfe:	4604      	mov	r4, r0
 8013e00:	4688      	mov	r8, r1
 8013e02:	4691      	mov	r9, r2
 8013e04:	f000 8188 	beq.w	8014118 <uxr_read_framed_msg+0x32c>
 8013e08:	7823      	ldrb	r3, [r4, #0]
 8013e0a:	4dc1      	ldr	r5, [pc, #772]	; (8014110 <uxr_read_framed_msg+0x324>)
 8013e0c:	4fc1      	ldr	r7, [pc, #772]	; (8014114 <uxr_read_framed_msg+0x328>)
 8013e0e:	2b07      	cmp	r3, #7
 8013e10:	d8fd      	bhi.n	8013e0e <uxr_read_framed_msg+0x22>
 8013e12:	e8df f013 	tbh	[pc, r3, lsl #1]
 8013e16:	0115      	.short	0x0115
 8013e18:	00d600f6 	.word	0x00d600f6
 8013e1c:	009000b9 	.word	0x009000b9
 8013e20:	0030004d 	.word	0x0030004d
 8013e24:	0008      	.short	0x0008
 8013e26:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8013e2a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8013e2e:	4299      	cmp	r1, r3
 8013e30:	f000 814a 	beq.w	80140c8 <uxr_read_framed_msg+0x2dc>
 8013e34:	18e2      	adds	r2, r4, r3
 8013e36:	7892      	ldrb	r2, [r2, #2]
 8013e38:	2a7d      	cmp	r2, #125	; 0x7d
 8013e3a:	f000 8199 	beq.w	8014170 <uxr_read_framed_msg+0x384>
 8013e3e:	3301      	adds	r3, #1
 8013e40:	0858      	lsrs	r0, r3, #1
 8013e42:	fba5 1000 	umull	r1, r0, r5, r0
 8013e46:	0880      	lsrs	r0, r0, #2
 8013e48:	212a      	movs	r1, #42	; 0x2a
 8013e4a:	fb01 3310 	mls	r3, r1, r0, r3
 8013e4e:	2a7e      	cmp	r2, #126	; 0x7e
 8013e50:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8013e54:	f000 8252 	beq.w	80142fc <uxr_read_framed_msg+0x510>
 8013e58:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8013e5a:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8013e5c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8013e60:	b29b      	uxth	r3, r3
 8013e62:	2200      	movs	r2, #0
 8013e64:	4299      	cmp	r1, r3
 8013e66:	86a3      	strh	r3, [r4, #52]	; 0x34
 8013e68:	7022      	strb	r2, [r4, #0]
 8013e6a:	f000 8179 	beq.w	8014160 <uxr_read_framed_msg+0x374>
 8013e6e:	2000      	movs	r0, #0
 8013e70:	b003      	add	sp, #12
 8013e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e76:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8013e7a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8013e7e:	4299      	cmp	r1, r3
 8013e80:	f000 8131 	beq.w	80140e6 <uxr_read_framed_msg+0x2fa>
 8013e84:	18e2      	adds	r2, r4, r3
 8013e86:	7890      	ldrb	r0, [r2, #2]
 8013e88:	287d      	cmp	r0, #125	; 0x7d
 8013e8a:	f000 8190 	beq.w	80141ae <uxr_read_framed_msg+0x3c2>
 8013e8e:	3301      	adds	r3, #1
 8013e90:	085a      	lsrs	r2, r3, #1
 8013e92:	fba5 1202 	umull	r1, r2, r5, r2
 8013e96:	0892      	lsrs	r2, r2, #2
 8013e98:	212a      	movs	r1, #42	; 0x2a
 8013e9a:	fb01 3312 	mls	r3, r1, r2, r3
 8013e9e:	287e      	cmp	r0, #126	; 0x7e
 8013ea0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8013ea4:	f000 821a 	beq.w	80142dc <uxr_read_framed_msg+0x4f0>
 8013ea8:	2307      	movs	r3, #7
 8013eaa:	86a0      	strh	r0, [r4, #52]	; 0x34
 8013eac:	7023      	strb	r3, [r4, #0]
 8013eae:	e7ae      	b.n	8013e0e <uxr_read_framed_msg+0x22>
 8013eb0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8013eb2:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8013eb6:	459e      	cmp	lr, r3
 8013eb8:	d938      	bls.n	8013f2c <uxr_read_framed_msg+0x140>
 8013eba:	ee07 8a90 	vmov	s15, r8
 8013ebe:	212a      	movs	r1, #42	; 0x2a
 8013ec0:	e020      	b.n	8013f04 <uxr_read_framed_msg+0x118>
 8013ec2:	f89b c002 	ldrb.w	ip, [fp, #2]
 8013ec6:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 8013eca:	f000 80d4 	beq.w	8014076 <uxr_read_framed_msg+0x28a>
 8013ece:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8013ed2:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8013ed6:	f000 8219 	beq.w	801430c <uxr_read_framed_msg+0x520>
 8013eda:	f806 c003 	strb.w	ip, [r6, r3]
 8013ede:	f8b4 a036 	ldrh.w	sl, [r4, #54]	; 0x36
 8013ee2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8013ee4:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8013ee8:	ea8a 000c 	eor.w	r0, sl, ip
 8013eec:	b2c0      	uxtb	r0, r0
 8013eee:	3301      	adds	r3, #1
 8013ef0:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8013ef4:	b29b      	uxth	r3, r3
 8013ef6:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8013efa:	4573      	cmp	r3, lr
 8013efc:	8663      	strh	r3, [r4, #50]	; 0x32
 8013efe:	86e2      	strh	r2, [r4, #54]	; 0x36
 8013f00:	f080 8120 	bcs.w	8014144 <uxr_read_framed_msg+0x358>
 8013f04:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 8013f08:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8013f0c:	f100 0c01 	add.w	ip, r0, #1
 8013f10:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8013f14:	fba5 8202 	umull	r8, r2, r5, r2
 8013f18:	0892      	lsrs	r2, r2, #2
 8013f1a:	4582      	cmp	sl, r0
 8013f1c:	eb04 0b00 	add.w	fp, r4, r0
 8013f20:	fb01 c212 	mls	r2, r1, r2, ip
 8013f24:	d1cd      	bne.n	8013ec2 <uxr_read_framed_msg+0xd6>
 8013f26:	ee17 8a90 	vmov	r8, s15
 8013f2a:	459e      	cmp	lr, r3
 8013f2c:	f040 8111 	bne.w	8014152 <uxr_read_framed_msg+0x366>
 8013f30:	2306      	movs	r3, #6
 8013f32:	7023      	strb	r3, [r4, #0]
 8013f34:	e76b      	b.n	8013e0e <uxr_read_framed_msg+0x22>
 8013f36:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8013f3a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8013f3e:	4298      	cmp	r0, r3
 8013f40:	f000 80c2 	beq.w	80140c8 <uxr_read_framed_msg+0x2dc>
 8013f44:	18e2      	adds	r2, r4, r3
 8013f46:	7891      	ldrb	r1, [r2, #2]
 8013f48:	297d      	cmp	r1, #125	; 0x7d
 8013f4a:	f000 814c 	beq.w	80141e6 <uxr_read_framed_msg+0x3fa>
 8013f4e:	3301      	adds	r3, #1
 8013f50:	085a      	lsrs	r2, r3, #1
 8013f52:	fba5 0202 	umull	r0, r2, r5, r2
 8013f56:	0892      	lsrs	r2, r2, #2
 8013f58:	202a      	movs	r0, #42	; 0x2a
 8013f5a:	fb00 3312 	mls	r3, r0, r2, r3
 8013f5e:	297e      	cmp	r1, #126	; 0x7e
 8013f60:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8013f64:	f000 81ca 	beq.w	80142fc <uxr_read_framed_msg+0x510>
 8013f68:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8013f6a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8013f6e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013f70:	b29b      	uxth	r3, r3
 8013f72:	2000      	movs	r0, #0
 8013f74:	428b      	cmp	r3, r1
 8013f76:	8623      	strh	r3, [r4, #48]	; 0x30
 8013f78:	8660      	strh	r0, [r4, #50]	; 0x32
 8013f7a:	86e0      	strh	r0, [r4, #54]	; 0x36
 8013f7c:	f240 80df 	bls.w	801413e <uxr_read_framed_msg+0x352>
 8013f80:	7020      	strb	r0, [r4, #0]
 8013f82:	b003      	add	sp, #12
 8013f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f88:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8013f8c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8013f90:	4299      	cmp	r1, r3
 8013f92:	f000 80a8 	beq.w	80140e6 <uxr_read_framed_msg+0x2fa>
 8013f96:	18e2      	adds	r2, r4, r3
 8013f98:	7890      	ldrb	r0, [r2, #2]
 8013f9a:	287d      	cmp	r0, #125	; 0x7d
 8013f9c:	f000 8164 	beq.w	8014268 <uxr_read_framed_msg+0x47c>
 8013fa0:	3301      	adds	r3, #1
 8013fa2:	085a      	lsrs	r2, r3, #1
 8013fa4:	fba5 1202 	umull	r1, r2, r5, r2
 8013fa8:	0892      	lsrs	r2, r2, #2
 8013faa:	212a      	movs	r1, #42	; 0x2a
 8013fac:	fb01 3312 	mls	r3, r1, r2, r3
 8013fb0:	287e      	cmp	r0, #126	; 0x7e
 8013fb2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8013fb6:	f000 8191 	beq.w	80142dc <uxr_read_framed_msg+0x4f0>
 8013fba:	2304      	movs	r3, #4
 8013fbc:	8620      	strh	r0, [r4, #48]	; 0x30
 8013fbe:	7023      	strb	r3, [r4, #0]
 8013fc0:	e725      	b.n	8013e0e <uxr_read_framed_msg+0x22>
 8013fc2:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8013fc6:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8013fca:	4290      	cmp	r0, r2
 8013fcc:	f000 80b3 	beq.w	8014136 <uxr_read_framed_msg+0x34a>
 8013fd0:	18a3      	adds	r3, r4, r2
 8013fd2:	7899      	ldrb	r1, [r3, #2]
 8013fd4:	297d      	cmp	r1, #125	; 0x7d
 8013fd6:	f000 8164 	beq.w	80142a2 <uxr_read_framed_msg+0x4b6>
 8013fda:	3201      	adds	r2, #1
 8013fdc:	0850      	lsrs	r0, r2, #1
 8013fde:	fba5 3000 	umull	r3, r0, r5, r0
 8013fe2:	0880      	lsrs	r0, r0, #2
 8013fe4:	232a      	movs	r3, #42	; 0x2a
 8013fe6:	fb03 2210 	mls	r2, r3, r0, r2
 8013fea:	297e      	cmp	r1, #126	; 0x7e
 8013fec:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8013ff0:	f000 8188 	beq.w	8014304 <uxr_read_framed_msg+0x518>
 8013ff4:	7863      	ldrb	r3, [r4, #1]
 8013ff6:	428b      	cmp	r3, r1
 8013ff8:	bf0c      	ite	eq
 8013ffa:	2303      	moveq	r3, #3
 8013ffc:	2300      	movne	r3, #0
 8013ffe:	7023      	strb	r3, [r4, #0]
 8014000:	e705      	b.n	8013e0e <uxr_read_framed_msg+0x22>
 8014002:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8014006:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801400a:	2200      	movs	r2, #0
 801400c:	4299      	cmp	r1, r3
 801400e:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8014012:	d06c      	beq.n	80140ee <uxr_read_framed_msg+0x302>
 8014014:	18e2      	adds	r2, r4, r3
 8014016:	7890      	ldrb	r0, [r2, #2]
 8014018:	287d      	cmp	r0, #125	; 0x7d
 801401a:	f000 8101 	beq.w	8014220 <uxr_read_framed_msg+0x434>
 801401e:	3301      	adds	r3, #1
 8014020:	085a      	lsrs	r2, r3, #1
 8014022:	fba5 1202 	umull	r1, r2, r5, r2
 8014026:	0892      	lsrs	r2, r2, #2
 8014028:	212a      	movs	r1, #42	; 0x2a
 801402a:	fb01 3312 	mls	r3, r1, r2, r3
 801402e:	287e      	cmp	r0, #126	; 0x7e
 8014030:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 8014034:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8014038:	d059      	beq.n	80140ee <uxr_read_framed_msg+0x302>
 801403a:	2302      	movs	r3, #2
 801403c:	7023      	strb	r3, [r4, #0]
 801403e:	e6e6      	b.n	8013e0e <uxr_read_framed_msg+0x22>
 8014040:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8014044:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8014048:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 801404c:	1c51      	adds	r1, r2, #1
 801404e:	084b      	lsrs	r3, r1, #1
 8014050:	fba5 c303 	umull	ip, r3, r5, r3
 8014054:	089b      	lsrs	r3, r3, #2
 8014056:	fb0e 1313 	mls	r3, lr, r3, r1
 801405a:	4592      	cmp	sl, r2
 801405c:	eb04 0002 	add.w	r0, r4, r2
 8014060:	b2da      	uxtb	r2, r3
 8014062:	f43f af04 	beq.w	8013e6e <uxr_read_framed_msg+0x82>
 8014066:	7883      	ldrb	r3, [r0, #2]
 8014068:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801406c:	2b7e      	cmp	r3, #126	; 0x7e
 801406e:	d1ed      	bne.n	801404c <uxr_read_framed_msg+0x260>
 8014070:	2301      	movs	r3, #1
 8014072:	7023      	strb	r3, [r4, #0]
 8014074:	e6cb      	b.n	8013e0e <uxr_read_framed_msg+0x22>
 8014076:	f100 0c01 	add.w	ip, r0, #1
 801407a:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801407e:	fba5 8202 	umull	r8, r2, r5, r2
 8014082:	0892      	lsrs	r2, r2, #2
 8014084:	fb01 c212 	mls	r2, r1, r2, ip
 8014088:	eb04 0c02 	add.w	ip, r4, r2
 801408c:	b2d2      	uxtb	r2, r2
 801408e:	4592      	cmp	sl, r2
 8014090:	f100 0002 	add.w	r0, r0, #2
 8014094:	f43f af47 	beq.w	8013f26 <uxr_read_framed_msg+0x13a>
 8014098:	0842      	lsrs	r2, r0, #1
 801409a:	f89c a002 	ldrb.w	sl, [ip, #2]
 801409e:	fba5 8202 	umull	r8, r2, r5, r2
 80140a2:	0892      	lsrs	r2, r2, #2
 80140a4:	fb01 0012 	mls	r0, r1, r2, r0
 80140a8:	f1ba 0f7e 	cmp.w	sl, #126	; 0x7e
 80140ac:	f08a 0c20 	eor.w	ip, sl, #32
 80140b0:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
 80140b4:	f47f af11 	bne.w	8013eda <uxr_read_framed_msg+0xee>
 80140b8:	459e      	cmp	lr, r3
 80140ba:	ee17 8a90 	vmov	r8, s15
 80140be:	f43f af37 	beq.w	8013f30 <uxr_read_framed_msg+0x144>
 80140c2:	2301      	movs	r3, #1
 80140c4:	7023      	strb	r3, [r4, #0]
 80140c6:	e6a2      	b.n	8013e0e <uxr_read_framed_msg+0x22>
 80140c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80140ca:	9300      	str	r3, [sp, #0]
 80140cc:	2301      	movs	r3, #1
 80140ce:	9301      	str	r3, [sp, #4]
 80140d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80140d2:	464a      	mov	r2, r9
 80140d4:	4641      	mov	r1, r8
 80140d6:	4620      	mov	r0, r4
 80140d8:	f7ff fe06 	bl	8013ce8 <uxr_framing_read_transport>
 80140dc:	2800      	cmp	r0, #0
 80140de:	f43f aec6 	beq.w	8013e6e <uxr_read_framed_msg+0x82>
 80140e2:	7823      	ldrb	r3, [r4, #0]
 80140e4:	e693      	b.n	8013e0e <uxr_read_framed_msg+0x22>
 80140e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80140e8:	9300      	str	r3, [sp, #0]
 80140ea:	2302      	movs	r3, #2
 80140ec:	e7ef      	b.n	80140ce <uxr_read_framed_msg+0x2e2>
 80140ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80140f0:	9300      	str	r3, [sp, #0]
 80140f2:	2304      	movs	r3, #4
 80140f4:	9301      	str	r3, [sp, #4]
 80140f6:	464a      	mov	r2, r9
 80140f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80140fa:	4641      	mov	r1, r8
 80140fc:	4620      	mov	r0, r4
 80140fe:	f7ff fdf3 	bl	8013ce8 <uxr_framing_read_transport>
 8014102:	2800      	cmp	r0, #0
 8014104:	d1ed      	bne.n	80140e2 <uxr_read_framed_msg+0x2f6>
 8014106:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801410a:	2b7e      	cmp	r3, #126	; 0x7e
 801410c:	d0e9      	beq.n	80140e2 <uxr_read_framed_msg+0x2f6>
 801410e:	e6ae      	b.n	8013e6e <uxr_read_framed_msg+0x82>
 8014110:	30c30c31 	.word	0x30c30c31
 8014114:	08016d90 	.word	0x08016d90
 8014118:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801411a:	9300      	str	r3, [sp, #0]
 801411c:	2305      	movs	r3, #5
 801411e:	9301      	str	r3, [sp, #4]
 8014120:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014122:	f7ff fde1 	bl	8013ce8 <uxr_framing_read_transport>
 8014126:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801412a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801412e:	429a      	cmp	r2, r3
 8014130:	f43f ae9d 	beq.w	8013e6e <uxr_read_framed_msg+0x82>
 8014134:	e668      	b.n	8013e08 <uxr_read_framed_msg+0x1c>
 8014136:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014138:	9300      	str	r3, [sp, #0]
 801413a:	2303      	movs	r3, #3
 801413c:	e7c7      	b.n	80140ce <uxr_read_framed_msg+0x2e2>
 801413e:	2305      	movs	r3, #5
 8014140:	7023      	strb	r3, [r4, #0]
 8014142:	e664      	b.n	8013e0e <uxr_read_framed_msg+0x22>
 8014144:	ee17 8a90 	vmov	r8, s15
 8014148:	f43f aef2 	beq.w	8013f30 <uxr_read_framed_msg+0x144>
 801414c:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8014150:	d08e      	beq.n	8014070 <uxr_read_framed_msg+0x284>
 8014152:	ebae 0303 	sub.w	r3, lr, r3
 8014156:	3302      	adds	r3, #2
 8014158:	9301      	str	r3, [sp, #4]
 801415a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801415c:	9300      	str	r3, [sp, #0]
 801415e:	e7b7      	b.n	80140d0 <uxr_read_framed_msg+0x2e4>
 8014160:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014162:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8014166:	7013      	strb	r3, [r2, #0]
 8014168:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 801416a:	b003      	add	sp, #12
 801416c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014170:	f103 0c01 	add.w	ip, r3, #1
 8014174:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8014178:	fba5 0202 	umull	r0, r2, r5, r2
 801417c:	0892      	lsrs	r2, r2, #2
 801417e:	202a      	movs	r0, #42	; 0x2a
 8014180:	fb00 c212 	mls	r2, r0, r2, ip
 8014184:	fa5f fc82 	uxtb.w	ip, r2
 8014188:	4561      	cmp	r1, ip
 801418a:	d09d      	beq.n	80140c8 <uxr_read_framed_msg+0x2dc>
 801418c:	3302      	adds	r3, #2
 801418e:	4422      	add	r2, r4
 8014190:	0859      	lsrs	r1, r3, #1
 8014192:	7892      	ldrb	r2, [r2, #2]
 8014194:	fba5 c101 	umull	ip, r1, r5, r1
 8014198:	0889      	lsrs	r1, r1, #2
 801419a:	fb00 3311 	mls	r3, r0, r1, r3
 801419e:	2a7e      	cmp	r2, #126	; 0x7e
 80141a0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80141a4:	f000 80aa 	beq.w	80142fc <uxr_read_framed_msg+0x510>
 80141a8:	f082 0220 	eor.w	r2, r2, #32
 80141ac:	e654      	b.n	8013e58 <uxr_read_framed_msg+0x6c>
 80141ae:	1c58      	adds	r0, r3, #1
 80141b0:	0842      	lsrs	r2, r0, #1
 80141b2:	fba5 c202 	umull	ip, r2, r5, r2
 80141b6:	0892      	lsrs	r2, r2, #2
 80141b8:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80141bc:	fb0c 0212 	mls	r2, ip, r2, r0
 80141c0:	b2d0      	uxtb	r0, r2
 80141c2:	4281      	cmp	r1, r0
 80141c4:	d08f      	beq.n	80140e6 <uxr_read_framed_msg+0x2fa>
 80141c6:	4422      	add	r2, r4
 80141c8:	3302      	adds	r3, #2
 80141ca:	7890      	ldrb	r0, [r2, #2]
 80141cc:	085a      	lsrs	r2, r3, #1
 80141ce:	fba5 1202 	umull	r1, r2, r5, r2
 80141d2:	0892      	lsrs	r2, r2, #2
 80141d4:	fb0c 3312 	mls	r3, ip, r2, r3
 80141d8:	287e      	cmp	r0, #126	; 0x7e
 80141da:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80141de:	d07d      	beq.n	80142dc <uxr_read_framed_msg+0x4f0>
 80141e0:	f080 0020 	eor.w	r0, r0, #32
 80141e4:	e660      	b.n	8013ea8 <uxr_read_framed_msg+0xbc>
 80141e6:	1c59      	adds	r1, r3, #1
 80141e8:	084a      	lsrs	r2, r1, #1
 80141ea:	fba5 c202 	umull	ip, r2, r5, r2
 80141ee:	0892      	lsrs	r2, r2, #2
 80141f0:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80141f4:	fb0c 1212 	mls	r2, ip, r2, r1
 80141f8:	b2d1      	uxtb	r1, r2
 80141fa:	4288      	cmp	r0, r1
 80141fc:	f43f af64 	beq.w	80140c8 <uxr_read_framed_msg+0x2dc>
 8014200:	4422      	add	r2, r4
 8014202:	3302      	adds	r3, #2
 8014204:	7891      	ldrb	r1, [r2, #2]
 8014206:	085a      	lsrs	r2, r3, #1
 8014208:	fba5 0202 	umull	r0, r2, r5, r2
 801420c:	0892      	lsrs	r2, r2, #2
 801420e:	fb0c 3312 	mls	r3, ip, r2, r3
 8014212:	297e      	cmp	r1, #126	; 0x7e
 8014214:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8014218:	d070      	beq.n	80142fc <uxr_read_framed_msg+0x510>
 801421a:	f081 0120 	eor.w	r1, r1, #32
 801421e:	e6a3      	b.n	8013f68 <uxr_read_framed_msg+0x17c>
 8014220:	f103 0c01 	add.w	ip, r3, #1
 8014224:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8014228:	fba5 0202 	umull	r0, r2, r5, r2
 801422c:	0892      	lsrs	r2, r2, #2
 801422e:	202a      	movs	r0, #42	; 0x2a
 8014230:	fb00 c212 	mls	r2, r0, r2, ip
 8014234:	fa5f fc82 	uxtb.w	ip, r2
 8014238:	4561      	cmp	r1, ip
 801423a:	f43f af58 	beq.w	80140ee <uxr_read_framed_msg+0x302>
 801423e:	4422      	add	r2, r4
 8014240:	3302      	adds	r3, #2
 8014242:	7891      	ldrb	r1, [r2, #2]
 8014244:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8014248:	085a      	lsrs	r2, r3, #1
 801424a:	fba5 c202 	umull	ip, r2, r5, r2
 801424e:	0892      	lsrs	r2, r2, #2
 8014250:	fb00 3312 	mls	r3, r0, r2, r3
 8014254:	297e      	cmp	r1, #126	; 0x7e
 8014256:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801425a:	f43f af48 	beq.w	80140ee <uxr_read_framed_msg+0x302>
 801425e:	f081 0120 	eor.w	r1, r1, #32
 8014262:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8014266:	e6e8      	b.n	801403a <uxr_read_framed_msg+0x24e>
 8014268:	1c58      	adds	r0, r3, #1
 801426a:	0842      	lsrs	r2, r0, #1
 801426c:	fba5 c202 	umull	ip, r2, r5, r2
 8014270:	0892      	lsrs	r2, r2, #2
 8014272:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8014276:	fb0c 0212 	mls	r2, ip, r2, r0
 801427a:	b2d0      	uxtb	r0, r2
 801427c:	4281      	cmp	r1, r0
 801427e:	f43f af32 	beq.w	80140e6 <uxr_read_framed_msg+0x2fa>
 8014282:	4422      	add	r2, r4
 8014284:	3302      	adds	r3, #2
 8014286:	7890      	ldrb	r0, [r2, #2]
 8014288:	085a      	lsrs	r2, r3, #1
 801428a:	fba5 1202 	umull	r1, r2, r5, r2
 801428e:	0892      	lsrs	r2, r2, #2
 8014290:	fb0c 3312 	mls	r3, ip, r2, r3
 8014294:	287e      	cmp	r0, #126	; 0x7e
 8014296:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801429a:	d01f      	beq.n	80142dc <uxr_read_framed_msg+0x4f0>
 801429c:	f080 0020 	eor.w	r0, r0, #32
 80142a0:	e68b      	b.n	8013fba <uxr_read_framed_msg+0x1ce>
 80142a2:	1c51      	adds	r1, r2, #1
 80142a4:	084b      	lsrs	r3, r1, #1
 80142a6:	fba5 c303 	umull	ip, r3, r5, r3
 80142aa:	089b      	lsrs	r3, r3, #2
 80142ac:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80142b0:	fb0c 1313 	mls	r3, ip, r3, r1
 80142b4:	b2d9      	uxtb	r1, r3
 80142b6:	4288      	cmp	r0, r1
 80142b8:	f43f af3d 	beq.w	8014136 <uxr_read_framed_msg+0x34a>
 80142bc:	3202      	adds	r2, #2
 80142be:	4423      	add	r3, r4
 80142c0:	0850      	lsrs	r0, r2, #1
 80142c2:	789b      	ldrb	r3, [r3, #2]
 80142c4:	fba5 1000 	umull	r1, r0, r5, r0
 80142c8:	0880      	lsrs	r0, r0, #2
 80142ca:	fb0c 2210 	mls	r2, ip, r0, r2
 80142ce:	2b7e      	cmp	r3, #126	; 0x7e
 80142d0:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80142d4:	d016      	beq.n	8014304 <uxr_read_framed_msg+0x518>
 80142d6:	f083 0120 	eor.w	r1, r3, #32
 80142da:	e68b      	b.n	8013ff4 <uxr_read_framed_msg+0x208>
 80142dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80142de:	9300      	str	r3, [sp, #0]
 80142e0:	2302      	movs	r3, #2
 80142e2:	9301      	str	r3, [sp, #4]
 80142e4:	464a      	mov	r2, r9
 80142e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80142e8:	4641      	mov	r1, r8
 80142ea:	4620      	mov	r0, r4
 80142ec:	f7ff fcfc 	bl	8013ce8 <uxr_framing_read_transport>
 80142f0:	2800      	cmp	r0, #0
 80142f2:	f47f aef6 	bne.w	80140e2 <uxr_read_framed_msg+0x2f6>
 80142f6:	2301      	movs	r3, #1
 80142f8:	7023      	strb	r3, [r4, #0]
 80142fa:	e588      	b.n	8013e0e <uxr_read_framed_msg+0x22>
 80142fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80142fe:	9300      	str	r3, [sp, #0]
 8014300:	2301      	movs	r3, #1
 8014302:	e7ee      	b.n	80142e2 <uxr_read_framed_msg+0x4f6>
 8014304:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014306:	9300      	str	r3, [sp, #0]
 8014308:	2303      	movs	r3, #3
 801430a:	e7ea      	b.n	80142e2 <uxr_read_framed_msg+0x4f6>
 801430c:	ee17 8a90 	vmov	r8, s15
 8014310:	e6ae      	b.n	8014070 <uxr_read_framed_msg+0x284>
 8014312:	bf00      	nop

08014314 <rcl_get_default_domain_id>:
 8014314:	b530      	push	{r4, r5, lr}
 8014316:	b083      	sub	sp, #12
 8014318:	2300      	movs	r3, #0
 801431a:	9300      	str	r3, [sp, #0]
 801431c:	b1d0      	cbz	r0, 8014354 <rcl_get_default_domain_id+0x40>
 801431e:	4604      	mov	r4, r0
 8014320:	4669      	mov	r1, sp
 8014322:	4815      	ldr	r0, [pc, #84]	; (8014378 <rcl_get_default_domain_id+0x64>)
 8014324:	f7fc fc28 	bl	8010b78 <rcutils_get_env>
 8014328:	4602      	mov	r2, r0
 801432a:	b110      	cbz	r0, 8014332 <rcl_get_default_domain_id+0x1e>
 801432c:	2001      	movs	r0, #1
 801432e:	b003      	add	sp, #12
 8014330:	bd30      	pop	{r4, r5, pc}
 8014332:	9b00      	ldr	r3, [sp, #0]
 8014334:	b18b      	cbz	r3, 801435a <rcl_get_default_domain_id+0x46>
 8014336:	7818      	ldrb	r0, [r3, #0]
 8014338:	2800      	cmp	r0, #0
 801433a:	d0f8      	beq.n	801432e <rcl_get_default_domain_id+0x1a>
 801433c:	a901      	add	r1, sp, #4
 801433e:	4618      	mov	r0, r3
 8014340:	9201      	str	r2, [sp, #4]
 8014342:	f000 fd99 	bl	8014e78 <strtoul>
 8014346:	4605      	mov	r5, r0
 8014348:	b150      	cbz	r0, 8014360 <rcl_get_default_domain_id+0x4c>
 801434a:	1c43      	adds	r3, r0, #1
 801434c:	d00d      	beq.n	801436a <rcl_get_default_domain_id+0x56>
 801434e:	6025      	str	r5, [r4, #0]
 8014350:	2000      	movs	r0, #0
 8014352:	e7ec      	b.n	801432e <rcl_get_default_domain_id+0x1a>
 8014354:	200b      	movs	r0, #11
 8014356:	b003      	add	sp, #12
 8014358:	bd30      	pop	{r4, r5, pc}
 801435a:	4618      	mov	r0, r3
 801435c:	b003      	add	sp, #12
 801435e:	bd30      	pop	{r4, r5, pc}
 8014360:	9b01      	ldr	r3, [sp, #4]
 8014362:	781b      	ldrb	r3, [r3, #0]
 8014364:	2b00      	cmp	r3, #0
 8014366:	d0f2      	beq.n	801434e <rcl_get_default_domain_id+0x3a>
 8014368:	e7e0      	b.n	801432c <rcl_get_default_domain_id+0x18>
 801436a:	f001 f827 	bl	80153bc <__errno>
 801436e:	6803      	ldr	r3, [r0, #0]
 8014370:	2b22      	cmp	r3, #34	; 0x22
 8014372:	d1ec      	bne.n	801434e <rcl_get_default_domain_id+0x3a>
 8014374:	e7da      	b.n	801432c <rcl_get_default_domain_id+0x18>
 8014376:	bf00      	nop
 8014378:	08016f90 	.word	0x08016f90

0801437c <rcl_expand_topic_name>:
 801437c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014380:	b08b      	sub	sp, #44	; 0x2c
 8014382:	9306      	str	r3, [sp, #24]
 8014384:	2800      	cmp	r0, #0
 8014386:	f000 80ad 	beq.w	80144e4 <rcl_expand_topic_name+0x168>
 801438a:	460e      	mov	r6, r1
 801438c:	2900      	cmp	r1, #0
 801438e:	f000 80a9 	beq.w	80144e4 <rcl_expand_topic_name+0x168>
 8014392:	4617      	mov	r7, r2
 8014394:	2a00      	cmp	r2, #0
 8014396:	f000 80a5 	beq.w	80144e4 <rcl_expand_topic_name+0x168>
 801439a:	2b00      	cmp	r3, #0
 801439c:	f000 80a2 	beq.w	80144e4 <rcl_expand_topic_name+0x168>
 80143a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	f000 809e 	beq.w	80144e4 <rcl_expand_topic_name+0x168>
 80143a8:	2200      	movs	r2, #0
 80143aa:	a909      	add	r1, sp, #36	; 0x24
 80143ac:	4680      	mov	r8, r0
 80143ae:	f000 f949 	bl	8014644 <rcl_validate_topic_name>
 80143b2:	4604      	mov	r4, r0
 80143b4:	2800      	cmp	r0, #0
 80143b6:	f040 8096 	bne.w	80144e6 <rcl_expand_topic_name+0x16a>
 80143ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80143bc:	2b00      	cmp	r3, #0
 80143be:	f040 809a 	bne.w	80144f6 <rcl_expand_topic_name+0x17a>
 80143c2:	4602      	mov	r2, r0
 80143c4:	a909      	add	r1, sp, #36	; 0x24
 80143c6:	4630      	mov	r0, r6
 80143c8:	f7fd f834 	bl	8011434 <rmw_validate_node_name>
 80143cc:	2800      	cmp	r0, #0
 80143ce:	f040 808e 	bne.w	80144ee <rcl_expand_topic_name+0x172>
 80143d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80143d4:	2a00      	cmp	r2, #0
 80143d6:	f040 8093 	bne.w	8014500 <rcl_expand_topic_name+0x184>
 80143da:	a909      	add	r1, sp, #36	; 0x24
 80143dc:	4638      	mov	r0, r7
 80143de:	f7fd f80b 	bl	80113f8 <rmw_validate_namespace>
 80143e2:	2800      	cmp	r0, #0
 80143e4:	f040 8083 	bne.w	80144ee <rcl_expand_topic_name+0x172>
 80143e8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80143ea:	2c00      	cmp	r4, #0
 80143ec:	f040 80ed 	bne.w	80145ca <rcl_expand_topic_name+0x24e>
 80143f0:	217b      	movs	r1, #123	; 0x7b
 80143f2:	4640      	mov	r0, r8
 80143f4:	f000 ff00 	bl	80151f8 <strchr>
 80143f8:	f898 3000 	ldrb.w	r3, [r8]
 80143fc:	2b2f      	cmp	r3, #47	; 0x2f
 80143fe:	4605      	mov	r5, r0
 8014400:	f000 809e 	beq.w	8014540 <rcl_expand_topic_name+0x1c4>
 8014404:	2b7e      	cmp	r3, #126	; 0x7e
 8014406:	f040 80a2 	bne.w	801454e <rcl_expand_topic_name+0x1d2>
 801440a:	4638      	mov	r0, r7
 801440c:	f7eb fef2 	bl	80001f4 <strlen>
 8014410:	4a82      	ldr	r2, [pc, #520]	; (801461c <rcl_expand_topic_name+0x2a0>)
 8014412:	4b83      	ldr	r3, [pc, #524]	; (8014620 <rcl_expand_topic_name+0x2a4>)
 8014414:	2801      	cmp	r0, #1
 8014416:	bf18      	it	ne
 8014418:	4613      	movne	r3, r2
 801441a:	9302      	str	r3, [sp, #8]
 801441c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801441e:	9300      	str	r3, [sp, #0]
 8014420:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8014424:	f108 0301 	add.w	r3, r8, #1
 8014428:	9305      	str	r3, [sp, #20]
 801442a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801442e:	9301      	str	r3, [sp, #4]
 8014430:	ab14      	add	r3, sp, #80	; 0x50
 8014432:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014434:	f7fc fbc8 	bl	8010bc8 <rcutils_format_string_limit>
 8014438:	4682      	mov	sl, r0
 801443a:	2800      	cmp	r0, #0
 801443c:	f000 80c7 	beq.w	80145ce <rcl_expand_topic_name+0x252>
 8014440:	2d00      	cmp	r5, #0
 8014442:	f000 80a2 	beq.w	801458a <rcl_expand_topic_name+0x20e>
 8014446:	217b      	movs	r1, #123	; 0x7b
 8014448:	f000 fed6 	bl	80151f8 <strchr>
 801444c:	46d1      	mov	r9, sl
 801444e:	4605      	mov	r5, r0
 8014450:	9407      	str	r4, [sp, #28]
 8014452:	46d3      	mov	fp, sl
 8014454:	464c      	mov	r4, r9
 8014456:	2d00      	cmp	r5, #0
 8014458:	f000 80be 	beq.w	80145d8 <rcl_expand_topic_name+0x25c>
 801445c:	217d      	movs	r1, #125	; 0x7d
 801445e:	4620      	mov	r0, r4
 8014460:	f000 feca 	bl	80151f8 <strchr>
 8014464:	eba0 0905 	sub.w	r9, r0, r5
 8014468:	f109 0a01 	add.w	sl, r9, #1
 801446c:	486d      	ldr	r0, [pc, #436]	; (8014624 <rcl_expand_topic_name+0x2a8>)
 801446e:	4652      	mov	r2, sl
 8014470:	4629      	mov	r1, r5
 8014472:	f000 fece 	bl	8015212 <strncmp>
 8014476:	2800      	cmp	r0, #0
 8014478:	d067      	beq.n	801454a <rcl_expand_topic_name+0x1ce>
 801447a:	486b      	ldr	r0, [pc, #428]	; (8014628 <rcl_expand_topic_name+0x2ac>)
 801447c:	4652      	mov	r2, sl
 801447e:	4629      	mov	r1, r5
 8014480:	f000 fec7 	bl	8015212 <strncmp>
 8014484:	b130      	cbz	r0, 8014494 <rcl_expand_topic_name+0x118>
 8014486:	4869      	ldr	r0, [pc, #420]	; (801462c <rcl_expand_topic_name+0x2b0>)
 8014488:	4652      	mov	r2, sl
 801448a:	4629      	mov	r1, r5
 801448c:	f000 fec1 	bl	8015212 <strncmp>
 8014490:	2800      	cmp	r0, #0
 8014492:	d137      	bne.n	8014504 <rcl_expand_topic_name+0x188>
 8014494:	46b9      	mov	r9, r7
 8014496:	ab16      	add	r3, sp, #88	; 0x58
 8014498:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801449c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80144a0:	ab14      	add	r3, sp, #80	; 0x50
 80144a2:	4628      	mov	r0, r5
 80144a4:	cb0c      	ldmia	r3, {r2, r3}
 80144a6:	4651      	mov	r1, sl
 80144a8:	f7fc fcca 	bl	8010e40 <rcutils_strndup>
 80144ac:	4605      	mov	r5, r0
 80144ae:	2800      	cmp	r0, #0
 80144b0:	f000 809c 	beq.w	80145ec <rcl_expand_topic_name+0x270>
 80144b4:	464a      	mov	r2, r9
 80144b6:	4620      	mov	r0, r4
 80144b8:	ab14      	add	r3, sp, #80	; 0x50
 80144ba:	4629      	mov	r1, r5
 80144bc:	f7fc fbbe 	bl	8010c3c <rcutils_repl_str>
 80144c0:	9918      	ldr	r1, [sp, #96]	; 0x60
 80144c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80144c4:	4604      	mov	r4, r0
 80144c6:	4628      	mov	r0, r5
 80144c8:	4798      	blx	r3
 80144ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80144cc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80144ce:	4658      	mov	r0, fp
 80144d0:	4798      	blx	r3
 80144d2:	2c00      	cmp	r4, #0
 80144d4:	d07b      	beq.n	80145ce <rcl_expand_topic_name+0x252>
 80144d6:	217b      	movs	r1, #123	; 0x7b
 80144d8:	4620      	mov	r0, r4
 80144da:	f000 fe8d 	bl	80151f8 <strchr>
 80144de:	46a3      	mov	fp, r4
 80144e0:	4605      	mov	r5, r0
 80144e2:	e7b8      	b.n	8014456 <rcl_expand_topic_name+0xda>
 80144e4:	240b      	movs	r4, #11
 80144e6:	4620      	mov	r0, r4
 80144e8:	b00b      	add	sp, #44	; 0x2c
 80144ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144ee:	f7f9 fd85 	bl	800dffc <rcl_convert_rmw_ret_to_rcl_ret>
 80144f2:	4604      	mov	r4, r0
 80144f4:	e7f7      	b.n	80144e6 <rcl_expand_topic_name+0x16a>
 80144f6:	2467      	movs	r4, #103	; 0x67
 80144f8:	4620      	mov	r0, r4
 80144fa:	b00b      	add	sp, #44	; 0x2c
 80144fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014500:	24c9      	movs	r4, #201	; 0xc9
 8014502:	e7f0      	b.n	80144e6 <rcl_expand_topic_name+0x16a>
 8014504:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8014508:	9806      	ldr	r0, [sp, #24]
 801450a:	1c69      	adds	r1, r5, #1
 801450c:	f7fc fdb2 	bl	8011074 <rcutils_string_map_getn>
 8014510:	4681      	mov	r9, r0
 8014512:	2800      	cmp	r0, #0
 8014514:	d1bf      	bne.n	8014496 <rcl_expand_topic_name+0x11a>
 8014516:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014518:	aa16      	add	r2, sp, #88	; 0x58
 801451a:	6018      	str	r0, [r3, #0]
 801451c:	ca07      	ldmia	r2, {r0, r1, r2}
 801451e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014522:	ab14      	add	r3, sp, #80	; 0x50
 8014524:	cb0c      	ldmia	r3, {r2, r3}
 8014526:	4651      	mov	r1, sl
 8014528:	4628      	mov	r0, r5
 801452a:	f7fc fc89 	bl	8010e40 <rcutils_strndup>
 801452e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014530:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014532:	4798      	blx	r3
 8014534:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014536:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014538:	4658      	mov	r0, fp
 801453a:	2469      	movs	r4, #105	; 0x69
 801453c:	4798      	blx	r3
 801453e:	e7d2      	b.n	80144e6 <rcl_expand_topic_name+0x16a>
 8014540:	2800      	cmp	r0, #0
 8014542:	d05b      	beq.n	80145fc <rcl_expand_topic_name+0x280>
 8014544:	46c1      	mov	r9, r8
 8014546:	46a2      	mov	sl, r4
 8014548:	e782      	b.n	8014450 <rcl_expand_topic_name+0xd4>
 801454a:	46b1      	mov	r9, r6
 801454c:	e7a3      	b.n	8014496 <rcl_expand_topic_name+0x11a>
 801454e:	2800      	cmp	r0, #0
 8014550:	d1f8      	bne.n	8014544 <rcl_expand_topic_name+0x1c8>
 8014552:	4638      	mov	r0, r7
 8014554:	f7eb fe4e 	bl	80001f4 <strlen>
 8014558:	4a35      	ldr	r2, [pc, #212]	; (8014630 <rcl_expand_topic_name+0x2b4>)
 801455a:	4b36      	ldr	r3, [pc, #216]	; (8014634 <rcl_expand_topic_name+0x2b8>)
 801455c:	f8cd 8010 	str.w	r8, [sp, #16]
 8014560:	2801      	cmp	r0, #1
 8014562:	bf18      	it	ne
 8014564:	4613      	movne	r3, r2
 8014566:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801456a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801456e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8014570:	9703      	str	r7, [sp, #12]
 8014572:	9200      	str	r2, [sp, #0]
 8014574:	ab14      	add	r3, sp, #80	; 0x50
 8014576:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014578:	f7fc fb26 	bl	8010bc8 <rcutils_format_string_limit>
 801457c:	4682      	mov	sl, r0
 801457e:	4653      	mov	r3, sl
 8014580:	b32b      	cbz	r3, 80145ce <rcl_expand_topic_name+0x252>
 8014582:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014584:	f8c3 a000 	str.w	sl, [r3]
 8014588:	e7ad      	b.n	80144e6 <rcl_expand_topic_name+0x16a>
 801458a:	f89a 3000 	ldrb.w	r3, [sl]
 801458e:	2b2f      	cmp	r3, #47	; 0x2f
 8014590:	d0f7      	beq.n	8014582 <rcl_expand_topic_name+0x206>
 8014592:	4638      	mov	r0, r7
 8014594:	f7eb fe2e 	bl	80001f4 <strlen>
 8014598:	4a25      	ldr	r2, [pc, #148]	; (8014630 <rcl_expand_topic_name+0x2b4>)
 801459a:	4b26      	ldr	r3, [pc, #152]	; (8014634 <rcl_expand_topic_name+0x2b8>)
 801459c:	f8cd a010 	str.w	sl, [sp, #16]
 80145a0:	2801      	cmp	r0, #1
 80145a2:	bf18      	it	ne
 80145a4:	4613      	movne	r3, r2
 80145a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80145aa:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80145ae:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80145b0:	9703      	str	r7, [sp, #12]
 80145b2:	9200      	str	r2, [sp, #0]
 80145b4:	ab14      	add	r3, sp, #80	; 0x50
 80145b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80145b8:	f7fc fb06 	bl	8010bc8 <rcutils_format_string_limit>
 80145bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80145be:	9918      	ldr	r1, [sp, #96]	; 0x60
 80145c0:	4605      	mov	r5, r0
 80145c2:	4650      	mov	r0, sl
 80145c4:	4798      	blx	r3
 80145c6:	46aa      	mov	sl, r5
 80145c8:	e7d9      	b.n	801457e <rcl_expand_topic_name+0x202>
 80145ca:	24ca      	movs	r4, #202	; 0xca
 80145cc:	e78b      	b.n	80144e6 <rcl_expand_topic_name+0x16a>
 80145ce:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80145d0:	2300      	movs	r3, #0
 80145d2:	6013      	str	r3, [r2, #0]
 80145d4:	240a      	movs	r4, #10
 80145d6:	e786      	b.n	80144e6 <rcl_expand_topic_name+0x16a>
 80145d8:	465b      	mov	r3, fp
 80145da:	9c07      	ldr	r4, [sp, #28]
 80145dc:	46da      	mov	sl, fp
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d1d3      	bne.n	801458a <rcl_expand_topic_name+0x20e>
 80145e2:	f898 3000 	ldrb.w	r3, [r8]
 80145e6:	2b2f      	cmp	r3, #47	; 0x2f
 80145e8:	d0cb      	beq.n	8014582 <rcl_expand_topic_name+0x206>
 80145ea:	e7b2      	b.n	8014552 <rcl_expand_topic_name+0x1d6>
 80145ec:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	; 0x60
 80145f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80145f2:	6015      	str	r5, [r2, #0]
 80145f4:	4658      	mov	r0, fp
 80145f6:	4798      	blx	r3
 80145f8:	240a      	movs	r4, #10
 80145fa:	e774      	b.n	80144e6 <rcl_expand_topic_name+0x16a>
 80145fc:	ab17      	add	r3, sp, #92	; 0x5c
 80145fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014602:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014606:	ab14      	add	r3, sp, #80	; 0x50
 8014608:	cb0e      	ldmia	r3, {r1, r2, r3}
 801460a:	4640      	mov	r0, r8
 801460c:	f7fc fbf6 	bl	8010dfc <rcutils_strdup>
 8014610:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014612:	2800      	cmp	r0, #0
 8014614:	6018      	str	r0, [r3, #0]
 8014616:	bf08      	it	eq
 8014618:	240a      	moveq	r4, #10
 801461a:	e764      	b.n	80144e6 <rcl_expand_topic_name+0x16a>
 801461c:	08016fa0 	.word	0x08016fa0
 8014620:	0801666c 	.word	0x0801666c
 8014624:	08016fa8 	.word	0x08016fa8
 8014628:	08016fb0 	.word	0x08016fb0
 801462c:	08016fb8 	.word	0x08016fb8
 8014630:	080167fc 	.word	0x080167fc
 8014634:	0801667c 	.word	0x0801667c

08014638 <rcl_get_default_topic_name_substitutions>:
 8014638:	2800      	cmp	r0, #0
 801463a:	bf0c      	ite	eq
 801463c:	200b      	moveq	r0, #11
 801463e:	2000      	movne	r0, #0
 8014640:	4770      	bx	lr
 8014642:	bf00      	nop

08014644 <rcl_validate_topic_name>:
 8014644:	2800      	cmp	r0, #0
 8014646:	d07a      	beq.n	801473e <rcl_validate_topic_name+0xfa>
 8014648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801464c:	460e      	mov	r6, r1
 801464e:	2900      	cmp	r1, #0
 8014650:	d07c      	beq.n	801474c <rcl_validate_topic_name+0x108>
 8014652:	4617      	mov	r7, r2
 8014654:	4605      	mov	r5, r0
 8014656:	f7eb fdcd 	bl	80001f4 <strlen>
 801465a:	b1b0      	cbz	r0, 801468a <rcl_validate_topic_name+0x46>
 801465c:	f895 9000 	ldrb.w	r9, [r5]
 8014660:	f8df c180 	ldr.w	ip, [pc, #384]	; 80147e4 <rcl_validate_topic_name+0x1a0>
 8014664:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8014668:	f013 0304 	ands.w	r3, r3, #4
 801466c:	d169      	bne.n	8014742 <rcl_validate_topic_name+0xfe>
 801466e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8014672:	f815 2008 	ldrb.w	r2, [r5, r8]
 8014676:	2a2f      	cmp	r2, #47	; 0x2f
 8014678:	d10e      	bne.n	8014698 <rcl_validate_topic_name+0x54>
 801467a:	2202      	movs	r2, #2
 801467c:	6032      	str	r2, [r6, #0]
 801467e:	b36f      	cbz	r7, 80146dc <rcl_validate_topic_name+0x98>
 8014680:	f8c7 8000 	str.w	r8, [r7]
 8014684:	4618      	mov	r0, r3
 8014686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801468a:	2301      	movs	r3, #1
 801468c:	6033      	str	r3, [r6, #0]
 801468e:	b32f      	cbz	r7, 80146dc <rcl_validate_topic_name+0x98>
 8014690:	2000      	movs	r0, #0
 8014692:	6038      	str	r0, [r7, #0]
 8014694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014698:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 801469c:	461c      	mov	r4, r3
 801469e:	4619      	mov	r1, r3
 80146a0:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 80146a4:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80146a8:	f1be 0f09 	cmp.w	lr, #9
 80146ac:	d919      	bls.n	80146e2 <rcl_validate_topic_name+0x9e>
 80146ae:	f022 0e20 	bic.w	lr, r2, #32
 80146b2:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 80146b6:	f1be 0f19 	cmp.w	lr, #25
 80146ba:	d912      	bls.n	80146e2 <rcl_validate_topic_name+0x9e>
 80146bc:	2a5f      	cmp	r2, #95	; 0x5f
 80146be:	d019      	beq.n	80146f4 <rcl_validate_topic_name+0xb0>
 80146c0:	2a2f      	cmp	r2, #47	; 0x2f
 80146c2:	d051      	beq.n	8014768 <rcl_validate_topic_name+0x124>
 80146c4:	2a7e      	cmp	r2, #126	; 0x7e
 80146c6:	d048      	beq.n	801475a <rcl_validate_topic_name+0x116>
 80146c8:	2a7b      	cmp	r2, #123	; 0x7b
 80146ca:	d054      	beq.n	8014776 <rcl_validate_topic_name+0x132>
 80146cc:	2a7d      	cmp	r2, #125	; 0x7d
 80146ce:	d161      	bne.n	8014794 <rcl_validate_topic_name+0x150>
 80146d0:	2c00      	cmp	r4, #0
 80146d2:	d155      	bne.n	8014780 <rcl_validate_topic_name+0x13c>
 80146d4:	2305      	movs	r3, #5
 80146d6:	6033      	str	r3, [r6, #0]
 80146d8:	b107      	cbz	r7, 80146dc <rcl_validate_topic_name+0x98>
 80146da:	6039      	str	r1, [r7, #0]
 80146dc:	2000      	movs	r0, #0
 80146de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80146e2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80146e6:	0752      	lsls	r2, r2, #29
 80146e8:	d504      	bpl.n	80146f4 <rcl_validate_topic_name+0xb0>
 80146ea:	b11c      	cbz	r4, 80146f4 <rcl_validate_topic_name+0xb0>
 80146ec:	b111      	cbz	r1, 80146f4 <rcl_validate_topic_name+0xb0>
 80146ee:	1e4a      	subs	r2, r1, #1
 80146f0:	429a      	cmp	r2, r3
 80146f2:	d02d      	beq.n	8014750 <rcl_validate_topic_name+0x10c>
 80146f4:	3101      	adds	r1, #1
 80146f6:	4288      	cmp	r0, r1
 80146f8:	d1d2      	bne.n	80146a0 <rcl_validate_topic_name+0x5c>
 80146fa:	2c00      	cmp	r4, #0
 80146fc:	d145      	bne.n	801478a <rcl_validate_topic_name+0x146>
 80146fe:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 8014702:	d04f      	beq.n	80147a4 <rcl_validate_topic_name+0x160>
 8014704:	4620      	mov	r0, r4
 8014706:	2301      	movs	r3, #1
 8014708:	e006      	b.n	8014718 <rcl_validate_topic_name+0xd4>
 801470a:	428b      	cmp	r3, r1
 801470c:	f105 0501 	add.w	r5, r5, #1
 8014710:	f103 0201 	add.w	r2, r3, #1
 8014714:	d236      	bcs.n	8014784 <rcl_validate_topic_name+0x140>
 8014716:	4613      	mov	r3, r2
 8014718:	4580      	cmp	r8, r0
 801471a:	f100 0001 	add.w	r0, r0, #1
 801471e:	d0f4      	beq.n	801470a <rcl_validate_topic_name+0xc6>
 8014720:	782a      	ldrb	r2, [r5, #0]
 8014722:	2a2f      	cmp	r2, #47	; 0x2f
 8014724:	d1f1      	bne.n	801470a <rcl_validate_topic_name+0xc6>
 8014726:	786a      	ldrb	r2, [r5, #1]
 8014728:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801472c:	0754      	lsls	r4, r2, #29
 801472e:	d5ec      	bpl.n	801470a <rcl_validate_topic_name+0xc6>
 8014730:	2204      	movs	r2, #4
 8014732:	6032      	str	r2, [r6, #0]
 8014734:	2f00      	cmp	r7, #0
 8014736:	d0d1      	beq.n	80146dc <rcl_validate_topic_name+0x98>
 8014738:	603b      	str	r3, [r7, #0]
 801473a:	2000      	movs	r0, #0
 801473c:	e7aa      	b.n	8014694 <rcl_validate_topic_name+0x50>
 801473e:	200b      	movs	r0, #11
 8014740:	4770      	bx	lr
 8014742:	2304      	movs	r3, #4
 8014744:	6033      	str	r3, [r6, #0]
 8014746:	2f00      	cmp	r7, #0
 8014748:	d1a2      	bne.n	8014690 <rcl_validate_topic_name+0x4c>
 801474a:	e7c7      	b.n	80146dc <rcl_validate_topic_name+0x98>
 801474c:	200b      	movs	r0, #11
 801474e:	e7a1      	b.n	8014694 <rcl_validate_topic_name+0x50>
 8014750:	2309      	movs	r3, #9
 8014752:	6033      	str	r3, [r6, #0]
 8014754:	2f00      	cmp	r7, #0
 8014756:	d1c0      	bne.n	80146da <rcl_validate_topic_name+0x96>
 8014758:	e7c0      	b.n	80146dc <rcl_validate_topic_name+0x98>
 801475a:	2900      	cmp	r1, #0
 801475c:	d0ca      	beq.n	80146f4 <rcl_validate_topic_name+0xb0>
 801475e:	2306      	movs	r3, #6
 8014760:	6033      	str	r3, [r6, #0]
 8014762:	2f00      	cmp	r7, #0
 8014764:	d1b9      	bne.n	80146da <rcl_validate_topic_name+0x96>
 8014766:	e7b9      	b.n	80146dc <rcl_validate_topic_name+0x98>
 8014768:	2c00      	cmp	r4, #0
 801476a:	d0c3      	beq.n	80146f4 <rcl_validate_topic_name+0xb0>
 801476c:	2308      	movs	r3, #8
 801476e:	6033      	str	r3, [r6, #0]
 8014770:	2f00      	cmp	r7, #0
 8014772:	d1b2      	bne.n	80146da <rcl_validate_topic_name+0x96>
 8014774:	e7b2      	b.n	80146dc <rcl_validate_topic_name+0x98>
 8014776:	2c00      	cmp	r4, #0
 8014778:	d1f8      	bne.n	801476c <rcl_validate_topic_name+0x128>
 801477a:	460b      	mov	r3, r1
 801477c:	2401      	movs	r4, #1
 801477e:	e7b9      	b.n	80146f4 <rcl_validate_topic_name+0xb0>
 8014780:	2400      	movs	r4, #0
 8014782:	e7b7      	b.n	80146f4 <rcl_validate_topic_name+0xb0>
 8014784:	2000      	movs	r0, #0
 8014786:	6030      	str	r0, [r6, #0]
 8014788:	e784      	b.n	8014694 <rcl_validate_topic_name+0x50>
 801478a:	2205      	movs	r2, #5
 801478c:	6032      	str	r2, [r6, #0]
 801478e:	2f00      	cmp	r7, #0
 8014790:	d1d2      	bne.n	8014738 <rcl_validate_topic_name+0xf4>
 8014792:	e7a3      	b.n	80146dc <rcl_validate_topic_name+0x98>
 8014794:	2c00      	cmp	r4, #0
 8014796:	bf14      	ite	ne
 8014798:	2308      	movne	r3, #8
 801479a:	2303      	moveq	r3, #3
 801479c:	6033      	str	r3, [r6, #0]
 801479e:	2f00      	cmp	r7, #0
 80147a0:	d19b      	bne.n	80146da <rcl_validate_topic_name+0x96>
 80147a2:	e79b      	b.n	80146dc <rcl_validate_topic_name+0x98>
 80147a4:	2301      	movs	r3, #1
 80147a6:	e00a      	b.n	80147be <rcl_validate_topic_name+0x17a>
 80147a8:	2c01      	cmp	r4, #1
 80147aa:	d013      	beq.n	80147d4 <rcl_validate_topic_name+0x190>
 80147ac:	4299      	cmp	r1, r3
 80147ae:	f104 0401 	add.w	r4, r4, #1
 80147b2:	f105 0501 	add.w	r5, r5, #1
 80147b6:	f103 0201 	add.w	r2, r3, #1
 80147ba:	d9e3      	bls.n	8014784 <rcl_validate_topic_name+0x140>
 80147bc:	4613      	mov	r3, r2
 80147be:	45a0      	cmp	r8, r4
 80147c0:	d0f4      	beq.n	80147ac <rcl_validate_topic_name+0x168>
 80147c2:	782a      	ldrb	r2, [r5, #0]
 80147c4:	2a2f      	cmp	r2, #47	; 0x2f
 80147c6:	d1ef      	bne.n	80147a8 <rcl_validate_topic_name+0x164>
 80147c8:	786a      	ldrb	r2, [r5, #1]
 80147ca:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80147ce:	0752      	lsls	r2, r2, #29
 80147d0:	d5ec      	bpl.n	80147ac <rcl_validate_topic_name+0x168>
 80147d2:	e7ad      	b.n	8014730 <rcl_validate_topic_name+0xec>
 80147d4:	2307      	movs	r3, #7
 80147d6:	6033      	str	r3, [r6, #0]
 80147d8:	2f00      	cmp	r7, #0
 80147da:	f43f af7f 	beq.w	80146dc <rcl_validate_topic_name+0x98>
 80147de:	603c      	str	r4, [r7, #0]
 80147e0:	2000      	movs	r0, #0
 80147e2:	e757      	b.n	8014694 <rcl_validate_topic_name+0x50>
 80147e4:	08017034 	.word	0x08017034

080147e8 <rcutils_string_array_fini>:
 80147e8:	b320      	cbz	r0, 8014834 <rcutils_string_array_fini+0x4c>
 80147ea:	b570      	push	{r4, r5, r6, lr}
 80147ec:	4604      	mov	r4, r0
 80147ee:	6840      	ldr	r0, [r0, #4]
 80147f0:	b1d8      	cbz	r0, 801482a <rcutils_string_array_fini+0x42>
 80147f2:	f104 0008 	add.w	r0, r4, #8
 80147f6:	f7f5 fdcf 	bl	800a398 <rcutils_allocator_is_valid>
 80147fa:	b1b8      	cbz	r0, 801482c <rcutils_string_array_fini+0x44>
 80147fc:	6823      	ldr	r3, [r4, #0]
 80147fe:	b1bb      	cbz	r3, 8014830 <rcutils_string_array_fini+0x48>
 8014800:	2500      	movs	r5, #0
 8014802:	6860      	ldr	r0, [r4, #4]
 8014804:	462e      	mov	r6, r5
 8014806:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801480a:	68e3      	ldr	r3, [r4, #12]
 801480c:	69a1      	ldr	r1, [r4, #24]
 801480e:	4798      	blx	r3
 8014810:	e9d4 3000 	ldrd	r3, r0, [r4]
 8014814:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8014818:	3501      	adds	r5, #1
 801481a:	429d      	cmp	r5, r3
 801481c:	d3f3      	bcc.n	8014806 <rcutils_string_array_fini+0x1e>
 801481e:	68e3      	ldr	r3, [r4, #12]
 8014820:	69a1      	ldr	r1, [r4, #24]
 8014822:	4798      	blx	r3
 8014824:	2000      	movs	r0, #0
 8014826:	e9c4 0000 	strd	r0, r0, [r4]
 801482a:	bd70      	pop	{r4, r5, r6, pc}
 801482c:	200b      	movs	r0, #11
 801482e:	bd70      	pop	{r4, r5, r6, pc}
 8014830:	6860      	ldr	r0, [r4, #4]
 8014832:	e7f4      	b.n	801481e <rcutils_string_array_fini+0x36>
 8014834:	200b      	movs	r0, #11
 8014836:	4770      	bx	lr

08014838 <on_status>:
 8014838:	b082      	sub	sp, #8
 801483a:	b002      	add	sp, #8
 801483c:	4770      	bx	lr
 801483e:	bf00      	nop

08014840 <on_topic>:
 8014840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014844:	4a22      	ldr	r2, [pc, #136]	; (80148d0 <on_topic+0x90>)
 8014846:	b094      	sub	sp, #80	; 0x50
 8014848:	6812      	ldr	r2, [r2, #0]
 801484a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801484c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8014850:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
 8014854:	b3c2      	cbz	r2, 80148c8 <on_topic+0x88>
 8014856:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 801485a:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 801485e:	e001      	b.n	8014864 <on_topic+0x24>
 8014860:	6852      	ldr	r2, [r2, #4]
 8014862:	b38a      	cbz	r2, 80148c8 <on_topic+0x88>
 8014864:	6894      	ldr	r4, [r2, #8]
 8014866:	8aa3      	ldrh	r3, [r4, #20]
 8014868:	428b      	cmp	r3, r1
 801486a:	d1f9      	bne.n	8014860 <on_topic+0x20>
 801486c:	7da3      	ldrb	r3, [r4, #22]
 801486e:	4283      	cmp	r3, r0
 8014870:	d1f6      	bne.n	8014860 <on_topic+0x20>
 8014872:	2248      	movs	r2, #72	; 0x48
 8014874:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8014878:	4668      	mov	r0, sp
 801487a:	f000 fdd4 	bl	8015426 <memcpy>
 801487e:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8014882:	cb0c      	ldmia	r3, {r2, r3}
 8014884:	4620      	mov	r0, r4
 8014886:	f7f6 fa5b 	bl	800ad40 <rmw_uxrce_get_static_input_buffer_for_entity>
 801488a:	4607      	mov	r7, r0
 801488c:	b1e0      	cbz	r0, 80148c8 <on_topic+0x88>
 801488e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8014892:	4632      	mov	r2, r6
 8014894:	4628      	mov	r0, r5
 8014896:	f108 0110 	add.w	r1, r8, #16
 801489a:	f7fe f87b 	bl	8012994 <ucdr_deserialize_array_uint8_t>
 801489e:	b930      	cbnz	r0, 80148ae <on_topic+0x6e>
 80148a0:	480c      	ldr	r0, [pc, #48]	; (80148d4 <on_topic+0x94>)
 80148a2:	4639      	mov	r1, r7
 80148a4:	b014      	add	sp, #80	; 0x50
 80148a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80148aa:	f7fc be31 	b.w	8011510 <put_memory>
 80148ae:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 80148b2:	f8c8 6810 	str.w	r6, [r8, #2064]	; 0x810
 80148b6:	f7fd ff91 	bl	80127dc <rmw_uros_epoch_nanos>
 80148ba:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 80148be:	2305      	movs	r3, #5
 80148c0:	e942 0102 	strd	r0, r1, [r2, #-8]
 80148c4:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 80148c8:	b014      	add	sp, #80	; 0x50
 80148ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148ce:	bf00      	nop
 80148d0:	2000dc1c 	.word	0x2000dc1c
 80148d4:	2000dc0c 	.word	0x2000dc0c

080148d8 <on_request>:
 80148d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148dc:	4823      	ldr	r0, [pc, #140]	; (801496c <on_request+0x94>)
 80148de:	b094      	sub	sp, #80	; 0x50
 80148e0:	6800      	ldr	r0, [r0, #0]
 80148e2:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80148e4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 80148e8:	9113      	str	r1, [sp, #76]	; 0x4c
 80148ea:	2800      	cmp	r0, #0
 80148ec:	d03b      	beq.n	8014966 <on_request+0x8e>
 80148ee:	461d      	mov	r5, r3
 80148f0:	e001      	b.n	80148f6 <on_request+0x1e>
 80148f2:	6840      	ldr	r0, [r0, #4]
 80148f4:	b3b8      	cbz	r0, 8014966 <on_request+0x8e>
 80148f6:	6884      	ldr	r4, [r0, #8]
 80148f8:	8b21      	ldrh	r1, [r4, #24]
 80148fa:	4291      	cmp	r1, r2
 80148fc:	d1f9      	bne.n	80148f2 <on_request+0x1a>
 80148fe:	2248      	movs	r2, #72	; 0x48
 8014900:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8014904:	4668      	mov	r0, sp
 8014906:	f000 fd8e 	bl	8015426 <memcpy>
 801490a:	f104 0320 	add.w	r3, r4, #32
 801490e:	cb0c      	ldmia	r3, {r2, r3}
 8014910:	4620      	mov	r0, r4
 8014912:	f7f6 fa15 	bl	800ad40 <rmw_uxrce_get_static_input_buffer_for_entity>
 8014916:	4680      	mov	r8, r0
 8014918:	b328      	cbz	r0, 8014966 <on_request+0x8e>
 801491a:	4638      	mov	r0, r7
 801491c:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8014920:	4632      	mov	r2, r6
 8014922:	f107 0110 	add.w	r1, r7, #16
 8014926:	f7fe f835 	bl	8012994 <ucdr_deserialize_array_uint8_t>
 801492a:	b930      	cbnz	r0, 801493a <on_request+0x62>
 801492c:	4810      	ldr	r0, [pc, #64]	; (8014970 <on_request+0x98>)
 801492e:	4641      	mov	r1, r8
 8014930:	b014      	add	sp, #80	; 0x50
 8014932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014936:	f7fc bdeb 	b.w	8011510 <put_memory>
 801493a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801493c:	f607 0c28 	addw	ip, r7, #2088	; 0x828
 8014940:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 8014944:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 8014948:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801494c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014950:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014954:	f7fd ff42 	bl	80127dc <rmw_uros_epoch_nanos>
 8014958:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 801495c:	2303      	movs	r3, #3
 801495e:	e942 0102 	strd	r0, r1, [r2, #-8]
 8014962:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 8014966:	b014      	add	sp, #80	; 0x50
 8014968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801496c:	2000dbec 	.word	0x2000dbec
 8014970:	2000dc0c 	.word	0x2000dc0c

08014974 <on_reply>:
 8014974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014978:	4821      	ldr	r0, [pc, #132]	; (8014a00 <on_reply+0x8c>)
 801497a:	b094      	sub	sp, #80	; 0x50
 801497c:	6800      	ldr	r0, [r0, #0]
 801497e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8014980:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8014984:	9113      	str	r1, [sp, #76]	; 0x4c
 8014986:	b3b8      	cbz	r0, 80149f8 <on_reply+0x84>
 8014988:	461d      	mov	r5, r3
 801498a:	e001      	b.n	8014990 <on_reply+0x1c>
 801498c:	6840      	ldr	r0, [r0, #4]
 801498e:	b398      	cbz	r0, 80149f8 <on_reply+0x84>
 8014990:	6884      	ldr	r4, [r0, #8]
 8014992:	8b21      	ldrh	r1, [r4, #24]
 8014994:	4291      	cmp	r1, r2
 8014996:	d1f9      	bne.n	801498c <on_reply+0x18>
 8014998:	2248      	movs	r2, #72	; 0x48
 801499a:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801499e:	4668      	mov	r0, sp
 80149a0:	f000 fd41 	bl	8015426 <memcpy>
 80149a4:	f104 0320 	add.w	r3, r4, #32
 80149a8:	cb0c      	ldmia	r3, {r2, r3}
 80149aa:	4620      	mov	r0, r4
 80149ac:	f7f6 f9c8 	bl	800ad40 <rmw_uxrce_get_static_input_buffer_for_entity>
 80149b0:	4680      	mov	r8, r0
 80149b2:	b308      	cbz	r0, 80149f8 <on_reply+0x84>
 80149b4:	4638      	mov	r0, r7
 80149b6:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80149ba:	4632      	mov	r2, r6
 80149bc:	f107 0110 	add.w	r1, r7, #16
 80149c0:	f7fd ffe8 	bl	8012994 <ucdr_deserialize_array_uint8_t>
 80149c4:	b930      	cbnz	r0, 80149d4 <on_reply+0x60>
 80149c6:	480f      	ldr	r0, [pc, #60]	; (8014a04 <on_reply+0x90>)
 80149c8:	4641      	mov	r1, r8
 80149ca:	b014      	add	sp, #80	; 0x50
 80149cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80149d0:	f7fc bd9e 	b.w	8011510 <put_memory>
 80149d4:	2200      	movs	r2, #0
 80149d6:	f8c7 282c 	str.w	r2, [r7, #2092]	; 0x82c
 80149da:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 80149de:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 80149e2:	f8c7 5828 	str.w	r5, [r7, #2088]	; 0x828
 80149e6:	f7fd fef9 	bl	80127dc <rmw_uros_epoch_nanos>
 80149ea:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 80149ee:	2304      	movs	r3, #4
 80149f0:	e942 0102 	strd	r0, r1, [r2, #-8]
 80149f4:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 80149f8:	b014      	add	sp, #80	; 0x50
 80149fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149fe:	bf00      	nop
 8014a00:	20009300 	.word	0x20009300
 8014a04:	2000dc0c 	.word	0x2000dc0c

08014a08 <calloc>:
 8014a08:	4b02      	ldr	r3, [pc, #8]	; (8014a14 <calloc+0xc>)
 8014a0a:	460a      	mov	r2, r1
 8014a0c:	4601      	mov	r1, r0
 8014a0e:	6818      	ldr	r0, [r3, #0]
 8014a10:	f000 b802 	b.w	8014a18 <_calloc_r>
 8014a14:	200002b4 	.word	0x200002b4

08014a18 <_calloc_r>:
 8014a18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014a1a:	fba1 2402 	umull	r2, r4, r1, r2
 8014a1e:	b94c      	cbnz	r4, 8014a34 <_calloc_r+0x1c>
 8014a20:	4611      	mov	r1, r2
 8014a22:	9201      	str	r2, [sp, #4]
 8014a24:	f000 f886 	bl	8014b34 <_malloc_r>
 8014a28:	9a01      	ldr	r2, [sp, #4]
 8014a2a:	4605      	mov	r5, r0
 8014a2c:	b930      	cbnz	r0, 8014a3c <_calloc_r+0x24>
 8014a2e:	4628      	mov	r0, r5
 8014a30:	b003      	add	sp, #12
 8014a32:	bd30      	pop	{r4, r5, pc}
 8014a34:	220c      	movs	r2, #12
 8014a36:	6002      	str	r2, [r0, #0]
 8014a38:	2500      	movs	r5, #0
 8014a3a:	e7f8      	b.n	8014a2e <_calloc_r+0x16>
 8014a3c:	4621      	mov	r1, r4
 8014a3e:	f000 fbd3 	bl	80151e8 <memset>
 8014a42:	e7f4      	b.n	8014a2e <_calloc_r+0x16>

08014a44 <getenv>:
 8014a44:	b507      	push	{r0, r1, r2, lr}
 8014a46:	4b04      	ldr	r3, [pc, #16]	; (8014a58 <getenv+0x14>)
 8014a48:	4601      	mov	r1, r0
 8014a4a:	aa01      	add	r2, sp, #4
 8014a4c:	6818      	ldr	r0, [r3, #0]
 8014a4e:	f000 f805 	bl	8014a5c <_findenv_r>
 8014a52:	b003      	add	sp, #12
 8014a54:	f85d fb04 	ldr.w	pc, [sp], #4
 8014a58:	200002b4 	.word	0x200002b4

08014a5c <_findenv_r>:
 8014a5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a60:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8014ad0 <_findenv_r+0x74>
 8014a64:	4607      	mov	r7, r0
 8014a66:	4689      	mov	r9, r1
 8014a68:	4616      	mov	r6, r2
 8014a6a:	f000 fd09 	bl	8015480 <__env_lock>
 8014a6e:	f8da 4000 	ldr.w	r4, [sl]
 8014a72:	b134      	cbz	r4, 8014a82 <_findenv_r+0x26>
 8014a74:	464b      	mov	r3, r9
 8014a76:	4698      	mov	r8, r3
 8014a78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014a7c:	b13a      	cbz	r2, 8014a8e <_findenv_r+0x32>
 8014a7e:	2a3d      	cmp	r2, #61	; 0x3d
 8014a80:	d1f9      	bne.n	8014a76 <_findenv_r+0x1a>
 8014a82:	4638      	mov	r0, r7
 8014a84:	f000 fd02 	bl	801548c <__env_unlock>
 8014a88:	2000      	movs	r0, #0
 8014a8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a8e:	eba8 0809 	sub.w	r8, r8, r9
 8014a92:	46a3      	mov	fp, r4
 8014a94:	f854 0b04 	ldr.w	r0, [r4], #4
 8014a98:	2800      	cmp	r0, #0
 8014a9a:	d0f2      	beq.n	8014a82 <_findenv_r+0x26>
 8014a9c:	4642      	mov	r2, r8
 8014a9e:	4649      	mov	r1, r9
 8014aa0:	f000 fbb7 	bl	8015212 <strncmp>
 8014aa4:	2800      	cmp	r0, #0
 8014aa6:	d1f4      	bne.n	8014a92 <_findenv_r+0x36>
 8014aa8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014aac:	eb03 0508 	add.w	r5, r3, r8
 8014ab0:	f813 3008 	ldrb.w	r3, [r3, r8]
 8014ab4:	2b3d      	cmp	r3, #61	; 0x3d
 8014ab6:	d1ec      	bne.n	8014a92 <_findenv_r+0x36>
 8014ab8:	f8da 3000 	ldr.w	r3, [sl]
 8014abc:	ebab 0303 	sub.w	r3, fp, r3
 8014ac0:	109b      	asrs	r3, r3, #2
 8014ac2:	4638      	mov	r0, r7
 8014ac4:	6033      	str	r3, [r6, #0]
 8014ac6:	f000 fce1 	bl	801548c <__env_unlock>
 8014aca:	1c68      	adds	r0, r5, #1
 8014acc:	e7dd      	b.n	8014a8a <_findenv_r+0x2e>
 8014ace:	bf00      	nop
 8014ad0:	20000000 	.word	0x20000000

08014ad4 <malloc>:
 8014ad4:	4b02      	ldr	r3, [pc, #8]	; (8014ae0 <malloc+0xc>)
 8014ad6:	4601      	mov	r1, r0
 8014ad8:	6818      	ldr	r0, [r3, #0]
 8014ada:	f000 b82b 	b.w	8014b34 <_malloc_r>
 8014ade:	bf00      	nop
 8014ae0:	200002b4 	.word	0x200002b4

08014ae4 <free>:
 8014ae4:	4b02      	ldr	r3, [pc, #8]	; (8014af0 <free+0xc>)
 8014ae6:	4601      	mov	r1, r0
 8014ae8:	6818      	ldr	r0, [r3, #0]
 8014aea:	f000 bcd5 	b.w	8015498 <_free_r>
 8014aee:	bf00      	nop
 8014af0:	200002b4 	.word	0x200002b4

08014af4 <sbrk_aligned>:
 8014af4:	b570      	push	{r4, r5, r6, lr}
 8014af6:	4e0e      	ldr	r6, [pc, #56]	; (8014b30 <sbrk_aligned+0x3c>)
 8014af8:	460c      	mov	r4, r1
 8014afa:	6831      	ldr	r1, [r6, #0]
 8014afc:	4605      	mov	r5, r0
 8014afe:	b911      	cbnz	r1, 8014b06 <sbrk_aligned+0x12>
 8014b00:	f000 fc3a 	bl	8015378 <_sbrk_r>
 8014b04:	6030      	str	r0, [r6, #0]
 8014b06:	4621      	mov	r1, r4
 8014b08:	4628      	mov	r0, r5
 8014b0a:	f000 fc35 	bl	8015378 <_sbrk_r>
 8014b0e:	1c43      	adds	r3, r0, #1
 8014b10:	d00a      	beq.n	8014b28 <sbrk_aligned+0x34>
 8014b12:	1cc4      	adds	r4, r0, #3
 8014b14:	f024 0403 	bic.w	r4, r4, #3
 8014b18:	42a0      	cmp	r0, r4
 8014b1a:	d007      	beq.n	8014b2c <sbrk_aligned+0x38>
 8014b1c:	1a21      	subs	r1, r4, r0
 8014b1e:	4628      	mov	r0, r5
 8014b20:	f000 fc2a 	bl	8015378 <_sbrk_r>
 8014b24:	3001      	adds	r0, #1
 8014b26:	d101      	bne.n	8014b2c <sbrk_aligned+0x38>
 8014b28:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8014b2c:	4620      	mov	r0, r4
 8014b2e:	bd70      	pop	{r4, r5, r6, pc}
 8014b30:	2000ddc0 	.word	0x2000ddc0

08014b34 <_malloc_r>:
 8014b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014b38:	1ccd      	adds	r5, r1, #3
 8014b3a:	f025 0503 	bic.w	r5, r5, #3
 8014b3e:	3508      	adds	r5, #8
 8014b40:	2d0c      	cmp	r5, #12
 8014b42:	bf38      	it	cc
 8014b44:	250c      	movcc	r5, #12
 8014b46:	2d00      	cmp	r5, #0
 8014b48:	4607      	mov	r7, r0
 8014b4a:	db01      	blt.n	8014b50 <_malloc_r+0x1c>
 8014b4c:	42a9      	cmp	r1, r5
 8014b4e:	d905      	bls.n	8014b5c <_malloc_r+0x28>
 8014b50:	230c      	movs	r3, #12
 8014b52:	603b      	str	r3, [r7, #0]
 8014b54:	2600      	movs	r6, #0
 8014b56:	4630      	mov	r0, r6
 8014b58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8014c30 <_malloc_r+0xfc>
 8014b60:	f000 f868 	bl	8014c34 <__malloc_lock>
 8014b64:	f8d8 3000 	ldr.w	r3, [r8]
 8014b68:	461c      	mov	r4, r3
 8014b6a:	bb5c      	cbnz	r4, 8014bc4 <_malloc_r+0x90>
 8014b6c:	4629      	mov	r1, r5
 8014b6e:	4638      	mov	r0, r7
 8014b70:	f7ff ffc0 	bl	8014af4 <sbrk_aligned>
 8014b74:	1c43      	adds	r3, r0, #1
 8014b76:	4604      	mov	r4, r0
 8014b78:	d155      	bne.n	8014c26 <_malloc_r+0xf2>
 8014b7a:	f8d8 4000 	ldr.w	r4, [r8]
 8014b7e:	4626      	mov	r6, r4
 8014b80:	2e00      	cmp	r6, #0
 8014b82:	d145      	bne.n	8014c10 <_malloc_r+0xdc>
 8014b84:	2c00      	cmp	r4, #0
 8014b86:	d048      	beq.n	8014c1a <_malloc_r+0xe6>
 8014b88:	6823      	ldr	r3, [r4, #0]
 8014b8a:	4631      	mov	r1, r6
 8014b8c:	4638      	mov	r0, r7
 8014b8e:	eb04 0903 	add.w	r9, r4, r3
 8014b92:	f000 fbf1 	bl	8015378 <_sbrk_r>
 8014b96:	4581      	cmp	r9, r0
 8014b98:	d13f      	bne.n	8014c1a <_malloc_r+0xe6>
 8014b9a:	6821      	ldr	r1, [r4, #0]
 8014b9c:	1a6d      	subs	r5, r5, r1
 8014b9e:	4629      	mov	r1, r5
 8014ba0:	4638      	mov	r0, r7
 8014ba2:	f7ff ffa7 	bl	8014af4 <sbrk_aligned>
 8014ba6:	3001      	adds	r0, #1
 8014ba8:	d037      	beq.n	8014c1a <_malloc_r+0xe6>
 8014baa:	6823      	ldr	r3, [r4, #0]
 8014bac:	442b      	add	r3, r5
 8014bae:	6023      	str	r3, [r4, #0]
 8014bb0:	f8d8 3000 	ldr.w	r3, [r8]
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d038      	beq.n	8014c2a <_malloc_r+0xf6>
 8014bb8:	685a      	ldr	r2, [r3, #4]
 8014bba:	42a2      	cmp	r2, r4
 8014bbc:	d12b      	bne.n	8014c16 <_malloc_r+0xe2>
 8014bbe:	2200      	movs	r2, #0
 8014bc0:	605a      	str	r2, [r3, #4]
 8014bc2:	e00f      	b.n	8014be4 <_malloc_r+0xb0>
 8014bc4:	6822      	ldr	r2, [r4, #0]
 8014bc6:	1b52      	subs	r2, r2, r5
 8014bc8:	d41f      	bmi.n	8014c0a <_malloc_r+0xd6>
 8014bca:	2a0b      	cmp	r2, #11
 8014bcc:	d917      	bls.n	8014bfe <_malloc_r+0xca>
 8014bce:	1961      	adds	r1, r4, r5
 8014bd0:	42a3      	cmp	r3, r4
 8014bd2:	6025      	str	r5, [r4, #0]
 8014bd4:	bf18      	it	ne
 8014bd6:	6059      	strne	r1, [r3, #4]
 8014bd8:	6863      	ldr	r3, [r4, #4]
 8014bda:	bf08      	it	eq
 8014bdc:	f8c8 1000 	streq.w	r1, [r8]
 8014be0:	5162      	str	r2, [r4, r5]
 8014be2:	604b      	str	r3, [r1, #4]
 8014be4:	4638      	mov	r0, r7
 8014be6:	f104 060b 	add.w	r6, r4, #11
 8014bea:	f000 f829 	bl	8014c40 <__malloc_unlock>
 8014bee:	f026 0607 	bic.w	r6, r6, #7
 8014bf2:	1d23      	adds	r3, r4, #4
 8014bf4:	1af2      	subs	r2, r6, r3
 8014bf6:	d0ae      	beq.n	8014b56 <_malloc_r+0x22>
 8014bf8:	1b9b      	subs	r3, r3, r6
 8014bfa:	50a3      	str	r3, [r4, r2]
 8014bfc:	e7ab      	b.n	8014b56 <_malloc_r+0x22>
 8014bfe:	42a3      	cmp	r3, r4
 8014c00:	6862      	ldr	r2, [r4, #4]
 8014c02:	d1dd      	bne.n	8014bc0 <_malloc_r+0x8c>
 8014c04:	f8c8 2000 	str.w	r2, [r8]
 8014c08:	e7ec      	b.n	8014be4 <_malloc_r+0xb0>
 8014c0a:	4623      	mov	r3, r4
 8014c0c:	6864      	ldr	r4, [r4, #4]
 8014c0e:	e7ac      	b.n	8014b6a <_malloc_r+0x36>
 8014c10:	4634      	mov	r4, r6
 8014c12:	6876      	ldr	r6, [r6, #4]
 8014c14:	e7b4      	b.n	8014b80 <_malloc_r+0x4c>
 8014c16:	4613      	mov	r3, r2
 8014c18:	e7cc      	b.n	8014bb4 <_malloc_r+0x80>
 8014c1a:	230c      	movs	r3, #12
 8014c1c:	603b      	str	r3, [r7, #0]
 8014c1e:	4638      	mov	r0, r7
 8014c20:	f000 f80e 	bl	8014c40 <__malloc_unlock>
 8014c24:	e797      	b.n	8014b56 <_malloc_r+0x22>
 8014c26:	6025      	str	r5, [r4, #0]
 8014c28:	e7dc      	b.n	8014be4 <_malloc_r+0xb0>
 8014c2a:	605b      	str	r3, [r3, #4]
 8014c2c:	deff      	udf	#255	; 0xff
 8014c2e:	bf00      	nop
 8014c30:	2000ddbc 	.word	0x2000ddbc

08014c34 <__malloc_lock>:
 8014c34:	4801      	ldr	r0, [pc, #4]	; (8014c3c <__malloc_lock+0x8>)
 8014c36:	f000 bbec 	b.w	8015412 <__retarget_lock_acquire_recursive>
 8014c3a:	bf00      	nop
 8014c3c:	2000df05 	.word	0x2000df05

08014c40 <__malloc_unlock>:
 8014c40:	4801      	ldr	r0, [pc, #4]	; (8014c48 <__malloc_unlock+0x8>)
 8014c42:	f000 bbe7 	b.w	8015414 <__retarget_lock_release_recursive>
 8014c46:	bf00      	nop
 8014c48:	2000df05 	.word	0x2000df05

08014c4c <srand>:
 8014c4c:	b538      	push	{r3, r4, r5, lr}
 8014c4e:	4b10      	ldr	r3, [pc, #64]	; (8014c90 <srand+0x44>)
 8014c50:	681d      	ldr	r5, [r3, #0]
 8014c52:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8014c54:	4604      	mov	r4, r0
 8014c56:	b9b3      	cbnz	r3, 8014c86 <srand+0x3a>
 8014c58:	2018      	movs	r0, #24
 8014c5a:	f7ff ff3b 	bl	8014ad4 <malloc>
 8014c5e:	4602      	mov	r2, r0
 8014c60:	6328      	str	r0, [r5, #48]	; 0x30
 8014c62:	b920      	cbnz	r0, 8014c6e <srand+0x22>
 8014c64:	4b0b      	ldr	r3, [pc, #44]	; (8014c94 <srand+0x48>)
 8014c66:	480c      	ldr	r0, [pc, #48]	; (8014c98 <srand+0x4c>)
 8014c68:	2146      	movs	r1, #70	; 0x46
 8014c6a:	f000 fbeb 	bl	8015444 <__assert_func>
 8014c6e:	490b      	ldr	r1, [pc, #44]	; (8014c9c <srand+0x50>)
 8014c70:	4b0b      	ldr	r3, [pc, #44]	; (8014ca0 <srand+0x54>)
 8014c72:	e9c0 1300 	strd	r1, r3, [r0]
 8014c76:	4b0b      	ldr	r3, [pc, #44]	; (8014ca4 <srand+0x58>)
 8014c78:	6083      	str	r3, [r0, #8]
 8014c7a:	230b      	movs	r3, #11
 8014c7c:	8183      	strh	r3, [r0, #12]
 8014c7e:	2100      	movs	r1, #0
 8014c80:	2001      	movs	r0, #1
 8014c82:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8014c86:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8014c88:	2200      	movs	r2, #0
 8014c8a:	611c      	str	r4, [r3, #16]
 8014c8c:	615a      	str	r2, [r3, #20]
 8014c8e:	bd38      	pop	{r3, r4, r5, pc}
 8014c90:	200002b4 	.word	0x200002b4
 8014c94:	08016fc4 	.word	0x08016fc4
 8014c98:	08016fdb 	.word	0x08016fdb
 8014c9c:	abcd330e 	.word	0xabcd330e
 8014ca0:	e66d1234 	.word	0xe66d1234
 8014ca4:	0005deec 	.word	0x0005deec

08014ca8 <rand>:
 8014ca8:	4b16      	ldr	r3, [pc, #88]	; (8014d04 <rand+0x5c>)
 8014caa:	b510      	push	{r4, lr}
 8014cac:	681c      	ldr	r4, [r3, #0]
 8014cae:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014cb0:	b9b3      	cbnz	r3, 8014ce0 <rand+0x38>
 8014cb2:	2018      	movs	r0, #24
 8014cb4:	f7ff ff0e 	bl	8014ad4 <malloc>
 8014cb8:	4602      	mov	r2, r0
 8014cba:	6320      	str	r0, [r4, #48]	; 0x30
 8014cbc:	b920      	cbnz	r0, 8014cc8 <rand+0x20>
 8014cbe:	4b12      	ldr	r3, [pc, #72]	; (8014d08 <rand+0x60>)
 8014cc0:	4812      	ldr	r0, [pc, #72]	; (8014d0c <rand+0x64>)
 8014cc2:	2152      	movs	r1, #82	; 0x52
 8014cc4:	f000 fbbe 	bl	8015444 <__assert_func>
 8014cc8:	4911      	ldr	r1, [pc, #68]	; (8014d10 <rand+0x68>)
 8014cca:	4b12      	ldr	r3, [pc, #72]	; (8014d14 <rand+0x6c>)
 8014ccc:	e9c0 1300 	strd	r1, r3, [r0]
 8014cd0:	4b11      	ldr	r3, [pc, #68]	; (8014d18 <rand+0x70>)
 8014cd2:	6083      	str	r3, [r0, #8]
 8014cd4:	230b      	movs	r3, #11
 8014cd6:	8183      	strh	r3, [r0, #12]
 8014cd8:	2100      	movs	r1, #0
 8014cda:	2001      	movs	r0, #1
 8014cdc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8014ce0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8014ce2:	480e      	ldr	r0, [pc, #56]	; (8014d1c <rand+0x74>)
 8014ce4:	690b      	ldr	r3, [r1, #16]
 8014ce6:	694c      	ldr	r4, [r1, #20]
 8014ce8:	4a0d      	ldr	r2, [pc, #52]	; (8014d20 <rand+0x78>)
 8014cea:	4358      	muls	r0, r3
 8014cec:	fb02 0004 	mla	r0, r2, r4, r0
 8014cf0:	fba3 3202 	umull	r3, r2, r3, r2
 8014cf4:	3301      	adds	r3, #1
 8014cf6:	eb40 0002 	adc.w	r0, r0, r2
 8014cfa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8014cfe:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8014d02:	bd10      	pop	{r4, pc}
 8014d04:	200002b4 	.word	0x200002b4
 8014d08:	08016fc4 	.word	0x08016fc4
 8014d0c:	08016fdb 	.word	0x08016fdb
 8014d10:	abcd330e 	.word	0xabcd330e
 8014d14:	e66d1234 	.word	0xe66d1234
 8014d18:	0005deec 	.word	0x0005deec
 8014d1c:	5851f42d 	.word	0x5851f42d
 8014d20:	4c957f2d 	.word	0x4c957f2d

08014d24 <realloc>:
 8014d24:	4b02      	ldr	r3, [pc, #8]	; (8014d30 <realloc+0xc>)
 8014d26:	460a      	mov	r2, r1
 8014d28:	4601      	mov	r1, r0
 8014d2a:	6818      	ldr	r0, [r3, #0]
 8014d2c:	f000 b802 	b.w	8014d34 <_realloc_r>
 8014d30:	200002b4 	.word	0x200002b4

08014d34 <_realloc_r>:
 8014d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d38:	4680      	mov	r8, r0
 8014d3a:	4614      	mov	r4, r2
 8014d3c:	460e      	mov	r6, r1
 8014d3e:	b921      	cbnz	r1, 8014d4a <_realloc_r+0x16>
 8014d40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014d44:	4611      	mov	r1, r2
 8014d46:	f7ff bef5 	b.w	8014b34 <_malloc_r>
 8014d4a:	b92a      	cbnz	r2, 8014d58 <_realloc_r+0x24>
 8014d4c:	f000 fba4 	bl	8015498 <_free_r>
 8014d50:	4625      	mov	r5, r4
 8014d52:	4628      	mov	r0, r5
 8014d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d58:	f000 fbea 	bl	8015530 <_malloc_usable_size_r>
 8014d5c:	4284      	cmp	r4, r0
 8014d5e:	4607      	mov	r7, r0
 8014d60:	d802      	bhi.n	8014d68 <_realloc_r+0x34>
 8014d62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014d66:	d812      	bhi.n	8014d8e <_realloc_r+0x5a>
 8014d68:	4621      	mov	r1, r4
 8014d6a:	4640      	mov	r0, r8
 8014d6c:	f7ff fee2 	bl	8014b34 <_malloc_r>
 8014d70:	4605      	mov	r5, r0
 8014d72:	2800      	cmp	r0, #0
 8014d74:	d0ed      	beq.n	8014d52 <_realloc_r+0x1e>
 8014d76:	42bc      	cmp	r4, r7
 8014d78:	4622      	mov	r2, r4
 8014d7a:	4631      	mov	r1, r6
 8014d7c:	bf28      	it	cs
 8014d7e:	463a      	movcs	r2, r7
 8014d80:	f000 fb51 	bl	8015426 <memcpy>
 8014d84:	4631      	mov	r1, r6
 8014d86:	4640      	mov	r0, r8
 8014d88:	f000 fb86 	bl	8015498 <_free_r>
 8014d8c:	e7e1      	b.n	8014d52 <_realloc_r+0x1e>
 8014d8e:	4635      	mov	r5, r6
 8014d90:	e7df      	b.n	8014d52 <_realloc_r+0x1e>
	...

08014d94 <_strtoul_l.constprop.0>:
 8014d94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014d98:	4f36      	ldr	r7, [pc, #216]	; (8014e74 <_strtoul_l.constprop.0+0xe0>)
 8014d9a:	4686      	mov	lr, r0
 8014d9c:	460d      	mov	r5, r1
 8014d9e:	4628      	mov	r0, r5
 8014da0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014da4:	5d3e      	ldrb	r6, [r7, r4]
 8014da6:	f016 0608 	ands.w	r6, r6, #8
 8014daa:	d1f8      	bne.n	8014d9e <_strtoul_l.constprop.0+0xa>
 8014dac:	2c2d      	cmp	r4, #45	; 0x2d
 8014dae:	d130      	bne.n	8014e12 <_strtoul_l.constprop.0+0x7e>
 8014db0:	782c      	ldrb	r4, [r5, #0]
 8014db2:	2601      	movs	r6, #1
 8014db4:	1c85      	adds	r5, r0, #2
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d057      	beq.n	8014e6a <_strtoul_l.constprop.0+0xd6>
 8014dba:	2b10      	cmp	r3, #16
 8014dbc:	d109      	bne.n	8014dd2 <_strtoul_l.constprop.0+0x3e>
 8014dbe:	2c30      	cmp	r4, #48	; 0x30
 8014dc0:	d107      	bne.n	8014dd2 <_strtoul_l.constprop.0+0x3e>
 8014dc2:	7828      	ldrb	r0, [r5, #0]
 8014dc4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8014dc8:	2858      	cmp	r0, #88	; 0x58
 8014dca:	d149      	bne.n	8014e60 <_strtoul_l.constprop.0+0xcc>
 8014dcc:	786c      	ldrb	r4, [r5, #1]
 8014dce:	2310      	movs	r3, #16
 8014dd0:	3502      	adds	r5, #2
 8014dd2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8014dd6:	2700      	movs	r7, #0
 8014dd8:	fbb8 f8f3 	udiv	r8, r8, r3
 8014ddc:	fb03 f908 	mul.w	r9, r3, r8
 8014de0:	ea6f 0909 	mvn.w	r9, r9
 8014de4:	4638      	mov	r0, r7
 8014de6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8014dea:	f1bc 0f09 	cmp.w	ip, #9
 8014dee:	d815      	bhi.n	8014e1c <_strtoul_l.constprop.0+0x88>
 8014df0:	4664      	mov	r4, ip
 8014df2:	42a3      	cmp	r3, r4
 8014df4:	dd23      	ble.n	8014e3e <_strtoul_l.constprop.0+0xaa>
 8014df6:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8014dfa:	d007      	beq.n	8014e0c <_strtoul_l.constprop.0+0x78>
 8014dfc:	4580      	cmp	r8, r0
 8014dfe:	d31b      	bcc.n	8014e38 <_strtoul_l.constprop.0+0xa4>
 8014e00:	d101      	bne.n	8014e06 <_strtoul_l.constprop.0+0x72>
 8014e02:	45a1      	cmp	r9, r4
 8014e04:	db18      	blt.n	8014e38 <_strtoul_l.constprop.0+0xa4>
 8014e06:	fb00 4003 	mla	r0, r0, r3, r4
 8014e0a:	2701      	movs	r7, #1
 8014e0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014e10:	e7e9      	b.n	8014de6 <_strtoul_l.constprop.0+0x52>
 8014e12:	2c2b      	cmp	r4, #43	; 0x2b
 8014e14:	bf04      	itt	eq
 8014e16:	782c      	ldrbeq	r4, [r5, #0]
 8014e18:	1c85      	addeq	r5, r0, #2
 8014e1a:	e7cc      	b.n	8014db6 <_strtoul_l.constprop.0+0x22>
 8014e1c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8014e20:	f1bc 0f19 	cmp.w	ip, #25
 8014e24:	d801      	bhi.n	8014e2a <_strtoul_l.constprop.0+0x96>
 8014e26:	3c37      	subs	r4, #55	; 0x37
 8014e28:	e7e3      	b.n	8014df2 <_strtoul_l.constprop.0+0x5e>
 8014e2a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8014e2e:	f1bc 0f19 	cmp.w	ip, #25
 8014e32:	d804      	bhi.n	8014e3e <_strtoul_l.constprop.0+0xaa>
 8014e34:	3c57      	subs	r4, #87	; 0x57
 8014e36:	e7dc      	b.n	8014df2 <_strtoul_l.constprop.0+0x5e>
 8014e38:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014e3c:	e7e6      	b.n	8014e0c <_strtoul_l.constprop.0+0x78>
 8014e3e:	1c7b      	adds	r3, r7, #1
 8014e40:	d106      	bne.n	8014e50 <_strtoul_l.constprop.0+0xbc>
 8014e42:	2322      	movs	r3, #34	; 0x22
 8014e44:	f8ce 3000 	str.w	r3, [lr]
 8014e48:	4638      	mov	r0, r7
 8014e4a:	b932      	cbnz	r2, 8014e5a <_strtoul_l.constprop.0+0xc6>
 8014e4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e50:	b106      	cbz	r6, 8014e54 <_strtoul_l.constprop.0+0xc0>
 8014e52:	4240      	negs	r0, r0
 8014e54:	2a00      	cmp	r2, #0
 8014e56:	d0f9      	beq.n	8014e4c <_strtoul_l.constprop.0+0xb8>
 8014e58:	b107      	cbz	r7, 8014e5c <_strtoul_l.constprop.0+0xc8>
 8014e5a:	1e69      	subs	r1, r5, #1
 8014e5c:	6011      	str	r1, [r2, #0]
 8014e5e:	e7f5      	b.n	8014e4c <_strtoul_l.constprop.0+0xb8>
 8014e60:	2430      	movs	r4, #48	; 0x30
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d1b5      	bne.n	8014dd2 <_strtoul_l.constprop.0+0x3e>
 8014e66:	2308      	movs	r3, #8
 8014e68:	e7b3      	b.n	8014dd2 <_strtoul_l.constprop.0+0x3e>
 8014e6a:	2c30      	cmp	r4, #48	; 0x30
 8014e6c:	d0a9      	beq.n	8014dc2 <_strtoul_l.constprop.0+0x2e>
 8014e6e:	230a      	movs	r3, #10
 8014e70:	e7af      	b.n	8014dd2 <_strtoul_l.constprop.0+0x3e>
 8014e72:	bf00      	nop
 8014e74:	08017034 	.word	0x08017034

08014e78 <strtoul>:
 8014e78:	4613      	mov	r3, r2
 8014e7a:	460a      	mov	r2, r1
 8014e7c:	4601      	mov	r1, r0
 8014e7e:	4802      	ldr	r0, [pc, #8]	; (8014e88 <strtoul+0x10>)
 8014e80:	6800      	ldr	r0, [r0, #0]
 8014e82:	f7ff bf87 	b.w	8014d94 <_strtoul_l.constprop.0>
 8014e86:	bf00      	nop
 8014e88:	200002b4 	.word	0x200002b4

08014e8c <std>:
 8014e8c:	2300      	movs	r3, #0
 8014e8e:	b510      	push	{r4, lr}
 8014e90:	4604      	mov	r4, r0
 8014e92:	e9c0 3300 	strd	r3, r3, [r0]
 8014e96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014e9a:	6083      	str	r3, [r0, #8]
 8014e9c:	8181      	strh	r1, [r0, #12]
 8014e9e:	6643      	str	r3, [r0, #100]	; 0x64
 8014ea0:	81c2      	strh	r2, [r0, #14]
 8014ea2:	6183      	str	r3, [r0, #24]
 8014ea4:	4619      	mov	r1, r3
 8014ea6:	2208      	movs	r2, #8
 8014ea8:	305c      	adds	r0, #92	; 0x5c
 8014eaa:	f000 f99d 	bl	80151e8 <memset>
 8014eae:	4b0d      	ldr	r3, [pc, #52]	; (8014ee4 <std+0x58>)
 8014eb0:	6263      	str	r3, [r4, #36]	; 0x24
 8014eb2:	4b0d      	ldr	r3, [pc, #52]	; (8014ee8 <std+0x5c>)
 8014eb4:	62a3      	str	r3, [r4, #40]	; 0x28
 8014eb6:	4b0d      	ldr	r3, [pc, #52]	; (8014eec <std+0x60>)
 8014eb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014eba:	4b0d      	ldr	r3, [pc, #52]	; (8014ef0 <std+0x64>)
 8014ebc:	6323      	str	r3, [r4, #48]	; 0x30
 8014ebe:	4b0d      	ldr	r3, [pc, #52]	; (8014ef4 <std+0x68>)
 8014ec0:	6224      	str	r4, [r4, #32]
 8014ec2:	429c      	cmp	r4, r3
 8014ec4:	d006      	beq.n	8014ed4 <std+0x48>
 8014ec6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8014eca:	4294      	cmp	r4, r2
 8014ecc:	d002      	beq.n	8014ed4 <std+0x48>
 8014ece:	33d0      	adds	r3, #208	; 0xd0
 8014ed0:	429c      	cmp	r4, r3
 8014ed2:	d105      	bne.n	8014ee0 <std+0x54>
 8014ed4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014edc:	f000 ba98 	b.w	8015410 <__retarget_lock_init_recursive>
 8014ee0:	bd10      	pop	{r4, pc}
 8014ee2:	bf00      	nop
 8014ee4:	0801509d 	.word	0x0801509d
 8014ee8:	080150bf 	.word	0x080150bf
 8014eec:	080150f7 	.word	0x080150f7
 8014ef0:	0801511b 	.word	0x0801511b
 8014ef4:	2000ddc4 	.word	0x2000ddc4

08014ef8 <stdio_exit_handler>:
 8014ef8:	4a02      	ldr	r2, [pc, #8]	; (8014f04 <stdio_exit_handler+0xc>)
 8014efa:	4903      	ldr	r1, [pc, #12]	; (8014f08 <stdio_exit_handler+0x10>)
 8014efc:	4803      	ldr	r0, [pc, #12]	; (8014f0c <stdio_exit_handler+0x14>)
 8014efe:	f000 b869 	b.w	8014fd4 <_fwalk_sglue>
 8014f02:	bf00      	nop
 8014f04:	2000025c 	.word	0x2000025c
 8014f08:	08015ea5 	.word	0x08015ea5
 8014f0c:	20000268 	.word	0x20000268

08014f10 <cleanup_stdio>:
 8014f10:	6841      	ldr	r1, [r0, #4]
 8014f12:	4b0c      	ldr	r3, [pc, #48]	; (8014f44 <cleanup_stdio+0x34>)
 8014f14:	4299      	cmp	r1, r3
 8014f16:	b510      	push	{r4, lr}
 8014f18:	4604      	mov	r4, r0
 8014f1a:	d001      	beq.n	8014f20 <cleanup_stdio+0x10>
 8014f1c:	f000 ffc2 	bl	8015ea4 <_fflush_r>
 8014f20:	68a1      	ldr	r1, [r4, #8]
 8014f22:	4b09      	ldr	r3, [pc, #36]	; (8014f48 <cleanup_stdio+0x38>)
 8014f24:	4299      	cmp	r1, r3
 8014f26:	d002      	beq.n	8014f2e <cleanup_stdio+0x1e>
 8014f28:	4620      	mov	r0, r4
 8014f2a:	f000 ffbb 	bl	8015ea4 <_fflush_r>
 8014f2e:	68e1      	ldr	r1, [r4, #12]
 8014f30:	4b06      	ldr	r3, [pc, #24]	; (8014f4c <cleanup_stdio+0x3c>)
 8014f32:	4299      	cmp	r1, r3
 8014f34:	d004      	beq.n	8014f40 <cleanup_stdio+0x30>
 8014f36:	4620      	mov	r0, r4
 8014f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f3c:	f000 bfb2 	b.w	8015ea4 <_fflush_r>
 8014f40:	bd10      	pop	{r4, pc}
 8014f42:	bf00      	nop
 8014f44:	2000ddc4 	.word	0x2000ddc4
 8014f48:	2000de2c 	.word	0x2000de2c
 8014f4c:	2000de94 	.word	0x2000de94

08014f50 <global_stdio_init.part.0>:
 8014f50:	b510      	push	{r4, lr}
 8014f52:	4b0b      	ldr	r3, [pc, #44]	; (8014f80 <global_stdio_init.part.0+0x30>)
 8014f54:	4c0b      	ldr	r4, [pc, #44]	; (8014f84 <global_stdio_init.part.0+0x34>)
 8014f56:	4a0c      	ldr	r2, [pc, #48]	; (8014f88 <global_stdio_init.part.0+0x38>)
 8014f58:	601a      	str	r2, [r3, #0]
 8014f5a:	4620      	mov	r0, r4
 8014f5c:	2200      	movs	r2, #0
 8014f5e:	2104      	movs	r1, #4
 8014f60:	f7ff ff94 	bl	8014e8c <std>
 8014f64:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8014f68:	2201      	movs	r2, #1
 8014f6a:	2109      	movs	r1, #9
 8014f6c:	f7ff ff8e 	bl	8014e8c <std>
 8014f70:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8014f74:	2202      	movs	r2, #2
 8014f76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f7a:	2112      	movs	r1, #18
 8014f7c:	f7ff bf86 	b.w	8014e8c <std>
 8014f80:	2000defc 	.word	0x2000defc
 8014f84:	2000ddc4 	.word	0x2000ddc4
 8014f88:	08014ef9 	.word	0x08014ef9

08014f8c <__sfp_lock_acquire>:
 8014f8c:	4801      	ldr	r0, [pc, #4]	; (8014f94 <__sfp_lock_acquire+0x8>)
 8014f8e:	f000 ba40 	b.w	8015412 <__retarget_lock_acquire_recursive>
 8014f92:	bf00      	nop
 8014f94:	2000df06 	.word	0x2000df06

08014f98 <__sfp_lock_release>:
 8014f98:	4801      	ldr	r0, [pc, #4]	; (8014fa0 <__sfp_lock_release+0x8>)
 8014f9a:	f000 ba3b 	b.w	8015414 <__retarget_lock_release_recursive>
 8014f9e:	bf00      	nop
 8014fa0:	2000df06 	.word	0x2000df06

08014fa4 <__sinit>:
 8014fa4:	b510      	push	{r4, lr}
 8014fa6:	4604      	mov	r4, r0
 8014fa8:	f7ff fff0 	bl	8014f8c <__sfp_lock_acquire>
 8014fac:	6a23      	ldr	r3, [r4, #32]
 8014fae:	b11b      	cbz	r3, 8014fb8 <__sinit+0x14>
 8014fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014fb4:	f7ff bff0 	b.w	8014f98 <__sfp_lock_release>
 8014fb8:	4b04      	ldr	r3, [pc, #16]	; (8014fcc <__sinit+0x28>)
 8014fba:	6223      	str	r3, [r4, #32]
 8014fbc:	4b04      	ldr	r3, [pc, #16]	; (8014fd0 <__sinit+0x2c>)
 8014fbe:	681b      	ldr	r3, [r3, #0]
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d1f5      	bne.n	8014fb0 <__sinit+0xc>
 8014fc4:	f7ff ffc4 	bl	8014f50 <global_stdio_init.part.0>
 8014fc8:	e7f2      	b.n	8014fb0 <__sinit+0xc>
 8014fca:	bf00      	nop
 8014fcc:	08014f11 	.word	0x08014f11
 8014fd0:	2000defc 	.word	0x2000defc

08014fd4 <_fwalk_sglue>:
 8014fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014fd8:	4607      	mov	r7, r0
 8014fda:	4688      	mov	r8, r1
 8014fdc:	4614      	mov	r4, r2
 8014fde:	2600      	movs	r6, #0
 8014fe0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014fe4:	f1b9 0901 	subs.w	r9, r9, #1
 8014fe8:	d505      	bpl.n	8014ff6 <_fwalk_sglue+0x22>
 8014fea:	6824      	ldr	r4, [r4, #0]
 8014fec:	2c00      	cmp	r4, #0
 8014fee:	d1f7      	bne.n	8014fe0 <_fwalk_sglue+0xc>
 8014ff0:	4630      	mov	r0, r6
 8014ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014ff6:	89ab      	ldrh	r3, [r5, #12]
 8014ff8:	2b01      	cmp	r3, #1
 8014ffa:	d907      	bls.n	801500c <_fwalk_sglue+0x38>
 8014ffc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015000:	3301      	adds	r3, #1
 8015002:	d003      	beq.n	801500c <_fwalk_sglue+0x38>
 8015004:	4629      	mov	r1, r5
 8015006:	4638      	mov	r0, r7
 8015008:	47c0      	blx	r8
 801500a:	4306      	orrs	r6, r0
 801500c:	3568      	adds	r5, #104	; 0x68
 801500e:	e7e9      	b.n	8014fe4 <_fwalk_sglue+0x10>

08015010 <iprintf>:
 8015010:	b40f      	push	{r0, r1, r2, r3}
 8015012:	b507      	push	{r0, r1, r2, lr}
 8015014:	4906      	ldr	r1, [pc, #24]	; (8015030 <iprintf+0x20>)
 8015016:	ab04      	add	r3, sp, #16
 8015018:	6808      	ldr	r0, [r1, #0]
 801501a:	f853 2b04 	ldr.w	r2, [r3], #4
 801501e:	6881      	ldr	r1, [r0, #8]
 8015020:	9301      	str	r3, [sp, #4]
 8015022:	f000 fc0f 	bl	8015844 <_vfiprintf_r>
 8015026:	b003      	add	sp, #12
 8015028:	f85d eb04 	ldr.w	lr, [sp], #4
 801502c:	b004      	add	sp, #16
 801502e:	4770      	bx	lr
 8015030:	200002b4 	.word	0x200002b4

08015034 <sniprintf>:
 8015034:	b40c      	push	{r2, r3}
 8015036:	b530      	push	{r4, r5, lr}
 8015038:	4b17      	ldr	r3, [pc, #92]	; (8015098 <sniprintf+0x64>)
 801503a:	1e0c      	subs	r4, r1, #0
 801503c:	681d      	ldr	r5, [r3, #0]
 801503e:	b09d      	sub	sp, #116	; 0x74
 8015040:	da08      	bge.n	8015054 <sniprintf+0x20>
 8015042:	238b      	movs	r3, #139	; 0x8b
 8015044:	602b      	str	r3, [r5, #0]
 8015046:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801504a:	b01d      	add	sp, #116	; 0x74
 801504c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015050:	b002      	add	sp, #8
 8015052:	4770      	bx	lr
 8015054:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015058:	f8ad 3014 	strh.w	r3, [sp, #20]
 801505c:	bf14      	ite	ne
 801505e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8015062:	4623      	moveq	r3, r4
 8015064:	9304      	str	r3, [sp, #16]
 8015066:	9307      	str	r3, [sp, #28]
 8015068:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801506c:	9002      	str	r0, [sp, #8]
 801506e:	9006      	str	r0, [sp, #24]
 8015070:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015074:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015076:	ab21      	add	r3, sp, #132	; 0x84
 8015078:	a902      	add	r1, sp, #8
 801507a:	4628      	mov	r0, r5
 801507c:	9301      	str	r3, [sp, #4]
 801507e:	f000 fab9 	bl	80155f4 <_svfiprintf_r>
 8015082:	1c43      	adds	r3, r0, #1
 8015084:	bfbc      	itt	lt
 8015086:	238b      	movlt	r3, #139	; 0x8b
 8015088:	602b      	strlt	r3, [r5, #0]
 801508a:	2c00      	cmp	r4, #0
 801508c:	d0dd      	beq.n	801504a <sniprintf+0x16>
 801508e:	9b02      	ldr	r3, [sp, #8]
 8015090:	2200      	movs	r2, #0
 8015092:	701a      	strb	r2, [r3, #0]
 8015094:	e7d9      	b.n	801504a <sniprintf+0x16>
 8015096:	bf00      	nop
 8015098:	200002b4 	.word	0x200002b4

0801509c <__sread>:
 801509c:	b510      	push	{r4, lr}
 801509e:	460c      	mov	r4, r1
 80150a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150a4:	f000 f956 	bl	8015354 <_read_r>
 80150a8:	2800      	cmp	r0, #0
 80150aa:	bfab      	itete	ge
 80150ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80150ae:	89a3      	ldrhlt	r3, [r4, #12]
 80150b0:	181b      	addge	r3, r3, r0
 80150b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80150b6:	bfac      	ite	ge
 80150b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80150ba:	81a3      	strhlt	r3, [r4, #12]
 80150bc:	bd10      	pop	{r4, pc}

080150be <__swrite>:
 80150be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150c2:	461f      	mov	r7, r3
 80150c4:	898b      	ldrh	r3, [r1, #12]
 80150c6:	05db      	lsls	r3, r3, #23
 80150c8:	4605      	mov	r5, r0
 80150ca:	460c      	mov	r4, r1
 80150cc:	4616      	mov	r6, r2
 80150ce:	d505      	bpl.n	80150dc <__swrite+0x1e>
 80150d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150d4:	2302      	movs	r3, #2
 80150d6:	2200      	movs	r2, #0
 80150d8:	f000 f92a 	bl	8015330 <_lseek_r>
 80150dc:	89a3      	ldrh	r3, [r4, #12]
 80150de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80150e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80150e6:	81a3      	strh	r3, [r4, #12]
 80150e8:	4632      	mov	r2, r6
 80150ea:	463b      	mov	r3, r7
 80150ec:	4628      	mov	r0, r5
 80150ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80150f2:	f000 b951 	b.w	8015398 <_write_r>

080150f6 <__sseek>:
 80150f6:	b510      	push	{r4, lr}
 80150f8:	460c      	mov	r4, r1
 80150fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150fe:	f000 f917 	bl	8015330 <_lseek_r>
 8015102:	1c43      	adds	r3, r0, #1
 8015104:	89a3      	ldrh	r3, [r4, #12]
 8015106:	bf15      	itete	ne
 8015108:	6560      	strne	r0, [r4, #84]	; 0x54
 801510a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801510e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015112:	81a3      	strheq	r3, [r4, #12]
 8015114:	bf18      	it	ne
 8015116:	81a3      	strhne	r3, [r4, #12]
 8015118:	bd10      	pop	{r4, pc}

0801511a <__sclose>:
 801511a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801511e:	f000 b8a1 	b.w	8015264 <_close_r>

08015122 <_vsniprintf_r>:
 8015122:	b530      	push	{r4, r5, lr}
 8015124:	4614      	mov	r4, r2
 8015126:	2c00      	cmp	r4, #0
 8015128:	b09b      	sub	sp, #108	; 0x6c
 801512a:	4605      	mov	r5, r0
 801512c:	461a      	mov	r2, r3
 801512e:	da05      	bge.n	801513c <_vsniprintf_r+0x1a>
 8015130:	238b      	movs	r3, #139	; 0x8b
 8015132:	6003      	str	r3, [r0, #0]
 8015134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015138:	b01b      	add	sp, #108	; 0x6c
 801513a:	bd30      	pop	{r4, r5, pc}
 801513c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015140:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015144:	bf14      	ite	ne
 8015146:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801514a:	4623      	moveq	r3, r4
 801514c:	9302      	str	r3, [sp, #8]
 801514e:	9305      	str	r3, [sp, #20]
 8015150:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015154:	9100      	str	r1, [sp, #0]
 8015156:	9104      	str	r1, [sp, #16]
 8015158:	f8ad 300e 	strh.w	r3, [sp, #14]
 801515c:	4669      	mov	r1, sp
 801515e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8015160:	f000 fa48 	bl	80155f4 <_svfiprintf_r>
 8015164:	1c43      	adds	r3, r0, #1
 8015166:	bfbc      	itt	lt
 8015168:	238b      	movlt	r3, #139	; 0x8b
 801516a:	602b      	strlt	r3, [r5, #0]
 801516c:	2c00      	cmp	r4, #0
 801516e:	d0e3      	beq.n	8015138 <_vsniprintf_r+0x16>
 8015170:	9b00      	ldr	r3, [sp, #0]
 8015172:	2200      	movs	r2, #0
 8015174:	701a      	strb	r2, [r3, #0]
 8015176:	e7df      	b.n	8015138 <_vsniprintf_r+0x16>

08015178 <vsniprintf>:
 8015178:	b507      	push	{r0, r1, r2, lr}
 801517a:	9300      	str	r3, [sp, #0]
 801517c:	4613      	mov	r3, r2
 801517e:	460a      	mov	r2, r1
 8015180:	4601      	mov	r1, r0
 8015182:	4803      	ldr	r0, [pc, #12]	; (8015190 <vsniprintf+0x18>)
 8015184:	6800      	ldr	r0, [r0, #0]
 8015186:	f7ff ffcc 	bl	8015122 <_vsniprintf_r>
 801518a:	b003      	add	sp, #12
 801518c:	f85d fb04 	ldr.w	pc, [sp], #4
 8015190:	200002b4 	.word	0x200002b4

08015194 <memcmp>:
 8015194:	b510      	push	{r4, lr}
 8015196:	3901      	subs	r1, #1
 8015198:	4402      	add	r2, r0
 801519a:	4290      	cmp	r0, r2
 801519c:	d101      	bne.n	80151a2 <memcmp+0xe>
 801519e:	2000      	movs	r0, #0
 80151a0:	e005      	b.n	80151ae <memcmp+0x1a>
 80151a2:	7803      	ldrb	r3, [r0, #0]
 80151a4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80151a8:	42a3      	cmp	r3, r4
 80151aa:	d001      	beq.n	80151b0 <memcmp+0x1c>
 80151ac:	1b18      	subs	r0, r3, r4
 80151ae:	bd10      	pop	{r4, pc}
 80151b0:	3001      	adds	r0, #1
 80151b2:	e7f2      	b.n	801519a <memcmp+0x6>

080151b4 <memmove>:
 80151b4:	4288      	cmp	r0, r1
 80151b6:	b510      	push	{r4, lr}
 80151b8:	eb01 0402 	add.w	r4, r1, r2
 80151bc:	d902      	bls.n	80151c4 <memmove+0x10>
 80151be:	4284      	cmp	r4, r0
 80151c0:	4623      	mov	r3, r4
 80151c2:	d807      	bhi.n	80151d4 <memmove+0x20>
 80151c4:	1e43      	subs	r3, r0, #1
 80151c6:	42a1      	cmp	r1, r4
 80151c8:	d008      	beq.n	80151dc <memmove+0x28>
 80151ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80151ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80151d2:	e7f8      	b.n	80151c6 <memmove+0x12>
 80151d4:	4402      	add	r2, r0
 80151d6:	4601      	mov	r1, r0
 80151d8:	428a      	cmp	r2, r1
 80151da:	d100      	bne.n	80151de <memmove+0x2a>
 80151dc:	bd10      	pop	{r4, pc}
 80151de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80151e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80151e6:	e7f7      	b.n	80151d8 <memmove+0x24>

080151e8 <memset>:
 80151e8:	4402      	add	r2, r0
 80151ea:	4603      	mov	r3, r0
 80151ec:	4293      	cmp	r3, r2
 80151ee:	d100      	bne.n	80151f2 <memset+0xa>
 80151f0:	4770      	bx	lr
 80151f2:	f803 1b01 	strb.w	r1, [r3], #1
 80151f6:	e7f9      	b.n	80151ec <memset+0x4>

080151f8 <strchr>:
 80151f8:	b2c9      	uxtb	r1, r1
 80151fa:	4603      	mov	r3, r0
 80151fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015200:	b11a      	cbz	r2, 801520a <strchr+0x12>
 8015202:	428a      	cmp	r2, r1
 8015204:	d1f9      	bne.n	80151fa <strchr+0x2>
 8015206:	4618      	mov	r0, r3
 8015208:	4770      	bx	lr
 801520a:	2900      	cmp	r1, #0
 801520c:	bf18      	it	ne
 801520e:	2300      	movne	r3, #0
 8015210:	e7f9      	b.n	8015206 <strchr+0xe>

08015212 <strncmp>:
 8015212:	b510      	push	{r4, lr}
 8015214:	b16a      	cbz	r2, 8015232 <strncmp+0x20>
 8015216:	3901      	subs	r1, #1
 8015218:	1884      	adds	r4, r0, r2
 801521a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801521e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8015222:	429a      	cmp	r2, r3
 8015224:	d103      	bne.n	801522e <strncmp+0x1c>
 8015226:	42a0      	cmp	r0, r4
 8015228:	d001      	beq.n	801522e <strncmp+0x1c>
 801522a:	2a00      	cmp	r2, #0
 801522c:	d1f5      	bne.n	801521a <strncmp+0x8>
 801522e:	1ad0      	subs	r0, r2, r3
 8015230:	bd10      	pop	{r4, pc}
 8015232:	4610      	mov	r0, r2
 8015234:	e7fc      	b.n	8015230 <strncmp+0x1e>

08015236 <strstr>:
 8015236:	780a      	ldrb	r2, [r1, #0]
 8015238:	b570      	push	{r4, r5, r6, lr}
 801523a:	b96a      	cbnz	r2, 8015258 <strstr+0x22>
 801523c:	bd70      	pop	{r4, r5, r6, pc}
 801523e:	429a      	cmp	r2, r3
 8015240:	d109      	bne.n	8015256 <strstr+0x20>
 8015242:	460c      	mov	r4, r1
 8015244:	4605      	mov	r5, r0
 8015246:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801524a:	2b00      	cmp	r3, #0
 801524c:	d0f6      	beq.n	801523c <strstr+0x6>
 801524e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8015252:	429e      	cmp	r6, r3
 8015254:	d0f7      	beq.n	8015246 <strstr+0x10>
 8015256:	3001      	adds	r0, #1
 8015258:	7803      	ldrb	r3, [r0, #0]
 801525a:	2b00      	cmp	r3, #0
 801525c:	d1ef      	bne.n	801523e <strstr+0x8>
 801525e:	4618      	mov	r0, r3
 8015260:	e7ec      	b.n	801523c <strstr+0x6>
	...

08015264 <_close_r>:
 8015264:	b538      	push	{r3, r4, r5, lr}
 8015266:	4d06      	ldr	r5, [pc, #24]	; (8015280 <_close_r+0x1c>)
 8015268:	2300      	movs	r3, #0
 801526a:	4604      	mov	r4, r0
 801526c:	4608      	mov	r0, r1
 801526e:	602b      	str	r3, [r5, #0]
 8015270:	f7ec fb55 	bl	800191e <_close>
 8015274:	1c43      	adds	r3, r0, #1
 8015276:	d102      	bne.n	801527e <_close_r+0x1a>
 8015278:	682b      	ldr	r3, [r5, #0]
 801527a:	b103      	cbz	r3, 801527e <_close_r+0x1a>
 801527c:	6023      	str	r3, [r4, #0]
 801527e:	bd38      	pop	{r3, r4, r5, pc}
 8015280:	2000df00 	.word	0x2000df00

08015284 <_reclaim_reent>:
 8015284:	4b29      	ldr	r3, [pc, #164]	; (801532c <_reclaim_reent+0xa8>)
 8015286:	681b      	ldr	r3, [r3, #0]
 8015288:	4283      	cmp	r3, r0
 801528a:	b570      	push	{r4, r5, r6, lr}
 801528c:	4604      	mov	r4, r0
 801528e:	d04b      	beq.n	8015328 <_reclaim_reent+0xa4>
 8015290:	69c3      	ldr	r3, [r0, #28]
 8015292:	b143      	cbz	r3, 80152a6 <_reclaim_reent+0x22>
 8015294:	68db      	ldr	r3, [r3, #12]
 8015296:	2b00      	cmp	r3, #0
 8015298:	d144      	bne.n	8015324 <_reclaim_reent+0xa0>
 801529a:	69e3      	ldr	r3, [r4, #28]
 801529c:	6819      	ldr	r1, [r3, #0]
 801529e:	b111      	cbz	r1, 80152a6 <_reclaim_reent+0x22>
 80152a0:	4620      	mov	r0, r4
 80152a2:	f000 f8f9 	bl	8015498 <_free_r>
 80152a6:	6961      	ldr	r1, [r4, #20]
 80152a8:	b111      	cbz	r1, 80152b0 <_reclaim_reent+0x2c>
 80152aa:	4620      	mov	r0, r4
 80152ac:	f000 f8f4 	bl	8015498 <_free_r>
 80152b0:	69e1      	ldr	r1, [r4, #28]
 80152b2:	b111      	cbz	r1, 80152ba <_reclaim_reent+0x36>
 80152b4:	4620      	mov	r0, r4
 80152b6:	f000 f8ef 	bl	8015498 <_free_r>
 80152ba:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80152bc:	b111      	cbz	r1, 80152c4 <_reclaim_reent+0x40>
 80152be:	4620      	mov	r0, r4
 80152c0:	f000 f8ea 	bl	8015498 <_free_r>
 80152c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80152c6:	b111      	cbz	r1, 80152ce <_reclaim_reent+0x4a>
 80152c8:	4620      	mov	r0, r4
 80152ca:	f000 f8e5 	bl	8015498 <_free_r>
 80152ce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80152d0:	b111      	cbz	r1, 80152d8 <_reclaim_reent+0x54>
 80152d2:	4620      	mov	r0, r4
 80152d4:	f000 f8e0 	bl	8015498 <_free_r>
 80152d8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80152da:	b111      	cbz	r1, 80152e2 <_reclaim_reent+0x5e>
 80152dc:	4620      	mov	r0, r4
 80152de:	f000 f8db 	bl	8015498 <_free_r>
 80152e2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80152e4:	b111      	cbz	r1, 80152ec <_reclaim_reent+0x68>
 80152e6:	4620      	mov	r0, r4
 80152e8:	f000 f8d6 	bl	8015498 <_free_r>
 80152ec:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80152ee:	b111      	cbz	r1, 80152f6 <_reclaim_reent+0x72>
 80152f0:	4620      	mov	r0, r4
 80152f2:	f000 f8d1 	bl	8015498 <_free_r>
 80152f6:	6a23      	ldr	r3, [r4, #32]
 80152f8:	b1b3      	cbz	r3, 8015328 <_reclaim_reent+0xa4>
 80152fa:	4620      	mov	r0, r4
 80152fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015300:	4718      	bx	r3
 8015302:	5949      	ldr	r1, [r1, r5]
 8015304:	b941      	cbnz	r1, 8015318 <_reclaim_reent+0x94>
 8015306:	3504      	adds	r5, #4
 8015308:	69e3      	ldr	r3, [r4, #28]
 801530a:	2d80      	cmp	r5, #128	; 0x80
 801530c:	68d9      	ldr	r1, [r3, #12]
 801530e:	d1f8      	bne.n	8015302 <_reclaim_reent+0x7e>
 8015310:	4620      	mov	r0, r4
 8015312:	f000 f8c1 	bl	8015498 <_free_r>
 8015316:	e7c0      	b.n	801529a <_reclaim_reent+0x16>
 8015318:	680e      	ldr	r6, [r1, #0]
 801531a:	4620      	mov	r0, r4
 801531c:	f000 f8bc 	bl	8015498 <_free_r>
 8015320:	4631      	mov	r1, r6
 8015322:	e7ef      	b.n	8015304 <_reclaim_reent+0x80>
 8015324:	2500      	movs	r5, #0
 8015326:	e7ef      	b.n	8015308 <_reclaim_reent+0x84>
 8015328:	bd70      	pop	{r4, r5, r6, pc}
 801532a:	bf00      	nop
 801532c:	200002b4 	.word	0x200002b4

08015330 <_lseek_r>:
 8015330:	b538      	push	{r3, r4, r5, lr}
 8015332:	4d07      	ldr	r5, [pc, #28]	; (8015350 <_lseek_r+0x20>)
 8015334:	4604      	mov	r4, r0
 8015336:	4608      	mov	r0, r1
 8015338:	4611      	mov	r1, r2
 801533a:	2200      	movs	r2, #0
 801533c:	602a      	str	r2, [r5, #0]
 801533e:	461a      	mov	r2, r3
 8015340:	f7ec fb14 	bl	800196c <_lseek>
 8015344:	1c43      	adds	r3, r0, #1
 8015346:	d102      	bne.n	801534e <_lseek_r+0x1e>
 8015348:	682b      	ldr	r3, [r5, #0]
 801534a:	b103      	cbz	r3, 801534e <_lseek_r+0x1e>
 801534c:	6023      	str	r3, [r4, #0]
 801534e:	bd38      	pop	{r3, r4, r5, pc}
 8015350:	2000df00 	.word	0x2000df00

08015354 <_read_r>:
 8015354:	b538      	push	{r3, r4, r5, lr}
 8015356:	4d07      	ldr	r5, [pc, #28]	; (8015374 <_read_r+0x20>)
 8015358:	4604      	mov	r4, r0
 801535a:	4608      	mov	r0, r1
 801535c:	4611      	mov	r1, r2
 801535e:	2200      	movs	r2, #0
 8015360:	602a      	str	r2, [r5, #0]
 8015362:	461a      	mov	r2, r3
 8015364:	f7ec faa2 	bl	80018ac <_read>
 8015368:	1c43      	adds	r3, r0, #1
 801536a:	d102      	bne.n	8015372 <_read_r+0x1e>
 801536c:	682b      	ldr	r3, [r5, #0]
 801536e:	b103      	cbz	r3, 8015372 <_read_r+0x1e>
 8015370:	6023      	str	r3, [r4, #0]
 8015372:	bd38      	pop	{r3, r4, r5, pc}
 8015374:	2000df00 	.word	0x2000df00

08015378 <_sbrk_r>:
 8015378:	b538      	push	{r3, r4, r5, lr}
 801537a:	4d06      	ldr	r5, [pc, #24]	; (8015394 <_sbrk_r+0x1c>)
 801537c:	2300      	movs	r3, #0
 801537e:	4604      	mov	r4, r0
 8015380:	4608      	mov	r0, r1
 8015382:	602b      	str	r3, [r5, #0]
 8015384:	f7ec fb00 	bl	8001988 <_sbrk>
 8015388:	1c43      	adds	r3, r0, #1
 801538a:	d102      	bne.n	8015392 <_sbrk_r+0x1a>
 801538c:	682b      	ldr	r3, [r5, #0]
 801538e:	b103      	cbz	r3, 8015392 <_sbrk_r+0x1a>
 8015390:	6023      	str	r3, [r4, #0]
 8015392:	bd38      	pop	{r3, r4, r5, pc}
 8015394:	2000df00 	.word	0x2000df00

08015398 <_write_r>:
 8015398:	b538      	push	{r3, r4, r5, lr}
 801539a:	4d07      	ldr	r5, [pc, #28]	; (80153b8 <_write_r+0x20>)
 801539c:	4604      	mov	r4, r0
 801539e:	4608      	mov	r0, r1
 80153a0:	4611      	mov	r1, r2
 80153a2:	2200      	movs	r2, #0
 80153a4:	602a      	str	r2, [r5, #0]
 80153a6:	461a      	mov	r2, r3
 80153a8:	f7ec fa9d 	bl	80018e6 <_write>
 80153ac:	1c43      	adds	r3, r0, #1
 80153ae:	d102      	bne.n	80153b6 <_write_r+0x1e>
 80153b0:	682b      	ldr	r3, [r5, #0]
 80153b2:	b103      	cbz	r3, 80153b6 <_write_r+0x1e>
 80153b4:	6023      	str	r3, [r4, #0]
 80153b6:	bd38      	pop	{r3, r4, r5, pc}
 80153b8:	2000df00 	.word	0x2000df00

080153bc <__errno>:
 80153bc:	4b01      	ldr	r3, [pc, #4]	; (80153c4 <__errno+0x8>)
 80153be:	6818      	ldr	r0, [r3, #0]
 80153c0:	4770      	bx	lr
 80153c2:	bf00      	nop
 80153c4:	200002b4 	.word	0x200002b4

080153c8 <__libc_init_array>:
 80153c8:	b570      	push	{r4, r5, r6, lr}
 80153ca:	4d0d      	ldr	r5, [pc, #52]	; (8015400 <__libc_init_array+0x38>)
 80153cc:	4c0d      	ldr	r4, [pc, #52]	; (8015404 <__libc_init_array+0x3c>)
 80153ce:	1b64      	subs	r4, r4, r5
 80153d0:	10a4      	asrs	r4, r4, #2
 80153d2:	2600      	movs	r6, #0
 80153d4:	42a6      	cmp	r6, r4
 80153d6:	d109      	bne.n	80153ec <__libc_init_array+0x24>
 80153d8:	4d0b      	ldr	r5, [pc, #44]	; (8015408 <__libc_init_array+0x40>)
 80153da:	4c0c      	ldr	r4, [pc, #48]	; (801540c <__libc_init_array+0x44>)
 80153dc:	f000 ff02 	bl	80161e4 <_init>
 80153e0:	1b64      	subs	r4, r4, r5
 80153e2:	10a4      	asrs	r4, r4, #2
 80153e4:	2600      	movs	r6, #0
 80153e6:	42a6      	cmp	r6, r4
 80153e8:	d105      	bne.n	80153f6 <__libc_init_array+0x2e>
 80153ea:	bd70      	pop	{r4, r5, r6, pc}
 80153ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80153f0:	4798      	blx	r3
 80153f2:	3601      	adds	r6, #1
 80153f4:	e7ee      	b.n	80153d4 <__libc_init_array+0xc>
 80153f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80153fa:	4798      	blx	r3
 80153fc:	3601      	adds	r6, #1
 80153fe:	e7f2      	b.n	80153e6 <__libc_init_array+0x1e>
 8015400:	080171ac 	.word	0x080171ac
 8015404:	080171ac 	.word	0x080171ac
 8015408:	080171ac 	.word	0x080171ac
 801540c:	080171b8 	.word	0x080171b8

08015410 <__retarget_lock_init_recursive>:
 8015410:	4770      	bx	lr

08015412 <__retarget_lock_acquire_recursive>:
 8015412:	4770      	bx	lr

08015414 <__retarget_lock_release_recursive>:
 8015414:	4770      	bx	lr

08015416 <strcpy>:
 8015416:	4603      	mov	r3, r0
 8015418:	f811 2b01 	ldrb.w	r2, [r1], #1
 801541c:	f803 2b01 	strb.w	r2, [r3], #1
 8015420:	2a00      	cmp	r2, #0
 8015422:	d1f9      	bne.n	8015418 <strcpy+0x2>
 8015424:	4770      	bx	lr

08015426 <memcpy>:
 8015426:	440a      	add	r2, r1
 8015428:	4291      	cmp	r1, r2
 801542a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801542e:	d100      	bne.n	8015432 <memcpy+0xc>
 8015430:	4770      	bx	lr
 8015432:	b510      	push	{r4, lr}
 8015434:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015438:	f803 4f01 	strb.w	r4, [r3, #1]!
 801543c:	4291      	cmp	r1, r2
 801543e:	d1f9      	bne.n	8015434 <memcpy+0xe>
 8015440:	bd10      	pop	{r4, pc}
	...

08015444 <__assert_func>:
 8015444:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015446:	4614      	mov	r4, r2
 8015448:	461a      	mov	r2, r3
 801544a:	4b09      	ldr	r3, [pc, #36]	; (8015470 <__assert_func+0x2c>)
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	4605      	mov	r5, r0
 8015450:	68d8      	ldr	r0, [r3, #12]
 8015452:	b14c      	cbz	r4, 8015468 <__assert_func+0x24>
 8015454:	4b07      	ldr	r3, [pc, #28]	; (8015474 <__assert_func+0x30>)
 8015456:	9100      	str	r1, [sp, #0]
 8015458:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801545c:	4906      	ldr	r1, [pc, #24]	; (8015478 <__assert_func+0x34>)
 801545e:	462b      	mov	r3, r5
 8015460:	f000 fd48 	bl	8015ef4 <fiprintf>
 8015464:	f000 fdee 	bl	8016044 <abort>
 8015468:	4b04      	ldr	r3, [pc, #16]	; (801547c <__assert_func+0x38>)
 801546a:	461c      	mov	r4, r3
 801546c:	e7f3      	b.n	8015456 <__assert_func+0x12>
 801546e:	bf00      	nop
 8015470:	200002b4 	.word	0x200002b4
 8015474:	08017134 	.word	0x08017134
 8015478:	08017141 	.word	0x08017141
 801547c:	0801716f 	.word	0x0801716f

08015480 <__env_lock>:
 8015480:	4801      	ldr	r0, [pc, #4]	; (8015488 <__env_lock+0x8>)
 8015482:	f7ff bfc6 	b.w	8015412 <__retarget_lock_acquire_recursive>
 8015486:	bf00      	nop
 8015488:	2000df04 	.word	0x2000df04

0801548c <__env_unlock>:
 801548c:	4801      	ldr	r0, [pc, #4]	; (8015494 <__env_unlock+0x8>)
 801548e:	f7ff bfc1 	b.w	8015414 <__retarget_lock_release_recursive>
 8015492:	bf00      	nop
 8015494:	2000df04 	.word	0x2000df04

08015498 <_free_r>:
 8015498:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801549a:	2900      	cmp	r1, #0
 801549c:	d044      	beq.n	8015528 <_free_r+0x90>
 801549e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80154a2:	9001      	str	r0, [sp, #4]
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	f1a1 0404 	sub.w	r4, r1, #4
 80154aa:	bfb8      	it	lt
 80154ac:	18e4      	addlt	r4, r4, r3
 80154ae:	f7ff fbc1 	bl	8014c34 <__malloc_lock>
 80154b2:	4a1e      	ldr	r2, [pc, #120]	; (801552c <_free_r+0x94>)
 80154b4:	9801      	ldr	r0, [sp, #4]
 80154b6:	6813      	ldr	r3, [r2, #0]
 80154b8:	b933      	cbnz	r3, 80154c8 <_free_r+0x30>
 80154ba:	6063      	str	r3, [r4, #4]
 80154bc:	6014      	str	r4, [r2, #0]
 80154be:	b003      	add	sp, #12
 80154c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80154c4:	f7ff bbbc 	b.w	8014c40 <__malloc_unlock>
 80154c8:	42a3      	cmp	r3, r4
 80154ca:	d908      	bls.n	80154de <_free_r+0x46>
 80154cc:	6825      	ldr	r5, [r4, #0]
 80154ce:	1961      	adds	r1, r4, r5
 80154d0:	428b      	cmp	r3, r1
 80154d2:	bf01      	itttt	eq
 80154d4:	6819      	ldreq	r1, [r3, #0]
 80154d6:	685b      	ldreq	r3, [r3, #4]
 80154d8:	1949      	addeq	r1, r1, r5
 80154da:	6021      	streq	r1, [r4, #0]
 80154dc:	e7ed      	b.n	80154ba <_free_r+0x22>
 80154de:	461a      	mov	r2, r3
 80154e0:	685b      	ldr	r3, [r3, #4]
 80154e2:	b10b      	cbz	r3, 80154e8 <_free_r+0x50>
 80154e4:	42a3      	cmp	r3, r4
 80154e6:	d9fa      	bls.n	80154de <_free_r+0x46>
 80154e8:	6811      	ldr	r1, [r2, #0]
 80154ea:	1855      	adds	r5, r2, r1
 80154ec:	42a5      	cmp	r5, r4
 80154ee:	d10b      	bne.n	8015508 <_free_r+0x70>
 80154f0:	6824      	ldr	r4, [r4, #0]
 80154f2:	4421      	add	r1, r4
 80154f4:	1854      	adds	r4, r2, r1
 80154f6:	42a3      	cmp	r3, r4
 80154f8:	6011      	str	r1, [r2, #0]
 80154fa:	d1e0      	bne.n	80154be <_free_r+0x26>
 80154fc:	681c      	ldr	r4, [r3, #0]
 80154fe:	685b      	ldr	r3, [r3, #4]
 8015500:	6053      	str	r3, [r2, #4]
 8015502:	440c      	add	r4, r1
 8015504:	6014      	str	r4, [r2, #0]
 8015506:	e7da      	b.n	80154be <_free_r+0x26>
 8015508:	d902      	bls.n	8015510 <_free_r+0x78>
 801550a:	230c      	movs	r3, #12
 801550c:	6003      	str	r3, [r0, #0]
 801550e:	e7d6      	b.n	80154be <_free_r+0x26>
 8015510:	6825      	ldr	r5, [r4, #0]
 8015512:	1961      	adds	r1, r4, r5
 8015514:	428b      	cmp	r3, r1
 8015516:	bf04      	itt	eq
 8015518:	6819      	ldreq	r1, [r3, #0]
 801551a:	685b      	ldreq	r3, [r3, #4]
 801551c:	6063      	str	r3, [r4, #4]
 801551e:	bf04      	itt	eq
 8015520:	1949      	addeq	r1, r1, r5
 8015522:	6021      	streq	r1, [r4, #0]
 8015524:	6054      	str	r4, [r2, #4]
 8015526:	e7ca      	b.n	80154be <_free_r+0x26>
 8015528:	b003      	add	sp, #12
 801552a:	bd30      	pop	{r4, r5, pc}
 801552c:	2000ddbc 	.word	0x2000ddbc

08015530 <_malloc_usable_size_r>:
 8015530:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015534:	1f18      	subs	r0, r3, #4
 8015536:	2b00      	cmp	r3, #0
 8015538:	bfbc      	itt	lt
 801553a:	580b      	ldrlt	r3, [r1, r0]
 801553c:	18c0      	addlt	r0, r0, r3
 801553e:	4770      	bx	lr

08015540 <__ssputs_r>:
 8015540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015544:	688e      	ldr	r6, [r1, #8]
 8015546:	461f      	mov	r7, r3
 8015548:	42be      	cmp	r6, r7
 801554a:	680b      	ldr	r3, [r1, #0]
 801554c:	4682      	mov	sl, r0
 801554e:	460c      	mov	r4, r1
 8015550:	4690      	mov	r8, r2
 8015552:	d82c      	bhi.n	80155ae <__ssputs_r+0x6e>
 8015554:	898a      	ldrh	r2, [r1, #12]
 8015556:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801555a:	d026      	beq.n	80155aa <__ssputs_r+0x6a>
 801555c:	6965      	ldr	r5, [r4, #20]
 801555e:	6909      	ldr	r1, [r1, #16]
 8015560:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015564:	eba3 0901 	sub.w	r9, r3, r1
 8015568:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801556c:	1c7b      	adds	r3, r7, #1
 801556e:	444b      	add	r3, r9
 8015570:	106d      	asrs	r5, r5, #1
 8015572:	429d      	cmp	r5, r3
 8015574:	bf38      	it	cc
 8015576:	461d      	movcc	r5, r3
 8015578:	0553      	lsls	r3, r2, #21
 801557a:	d527      	bpl.n	80155cc <__ssputs_r+0x8c>
 801557c:	4629      	mov	r1, r5
 801557e:	f7ff fad9 	bl	8014b34 <_malloc_r>
 8015582:	4606      	mov	r6, r0
 8015584:	b360      	cbz	r0, 80155e0 <__ssputs_r+0xa0>
 8015586:	6921      	ldr	r1, [r4, #16]
 8015588:	464a      	mov	r2, r9
 801558a:	f7ff ff4c 	bl	8015426 <memcpy>
 801558e:	89a3      	ldrh	r3, [r4, #12]
 8015590:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015598:	81a3      	strh	r3, [r4, #12]
 801559a:	6126      	str	r6, [r4, #16]
 801559c:	6165      	str	r5, [r4, #20]
 801559e:	444e      	add	r6, r9
 80155a0:	eba5 0509 	sub.w	r5, r5, r9
 80155a4:	6026      	str	r6, [r4, #0]
 80155a6:	60a5      	str	r5, [r4, #8]
 80155a8:	463e      	mov	r6, r7
 80155aa:	42be      	cmp	r6, r7
 80155ac:	d900      	bls.n	80155b0 <__ssputs_r+0x70>
 80155ae:	463e      	mov	r6, r7
 80155b0:	6820      	ldr	r0, [r4, #0]
 80155b2:	4632      	mov	r2, r6
 80155b4:	4641      	mov	r1, r8
 80155b6:	f7ff fdfd 	bl	80151b4 <memmove>
 80155ba:	68a3      	ldr	r3, [r4, #8]
 80155bc:	1b9b      	subs	r3, r3, r6
 80155be:	60a3      	str	r3, [r4, #8]
 80155c0:	6823      	ldr	r3, [r4, #0]
 80155c2:	4433      	add	r3, r6
 80155c4:	6023      	str	r3, [r4, #0]
 80155c6:	2000      	movs	r0, #0
 80155c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155cc:	462a      	mov	r2, r5
 80155ce:	f7ff fbb1 	bl	8014d34 <_realloc_r>
 80155d2:	4606      	mov	r6, r0
 80155d4:	2800      	cmp	r0, #0
 80155d6:	d1e0      	bne.n	801559a <__ssputs_r+0x5a>
 80155d8:	6921      	ldr	r1, [r4, #16]
 80155da:	4650      	mov	r0, sl
 80155dc:	f7ff ff5c 	bl	8015498 <_free_r>
 80155e0:	230c      	movs	r3, #12
 80155e2:	f8ca 3000 	str.w	r3, [sl]
 80155e6:	89a3      	ldrh	r3, [r4, #12]
 80155e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80155ec:	81a3      	strh	r3, [r4, #12]
 80155ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80155f2:	e7e9      	b.n	80155c8 <__ssputs_r+0x88>

080155f4 <_svfiprintf_r>:
 80155f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155f8:	4698      	mov	r8, r3
 80155fa:	898b      	ldrh	r3, [r1, #12]
 80155fc:	061b      	lsls	r3, r3, #24
 80155fe:	b09d      	sub	sp, #116	; 0x74
 8015600:	4607      	mov	r7, r0
 8015602:	460d      	mov	r5, r1
 8015604:	4614      	mov	r4, r2
 8015606:	d50e      	bpl.n	8015626 <_svfiprintf_r+0x32>
 8015608:	690b      	ldr	r3, [r1, #16]
 801560a:	b963      	cbnz	r3, 8015626 <_svfiprintf_r+0x32>
 801560c:	2140      	movs	r1, #64	; 0x40
 801560e:	f7ff fa91 	bl	8014b34 <_malloc_r>
 8015612:	6028      	str	r0, [r5, #0]
 8015614:	6128      	str	r0, [r5, #16]
 8015616:	b920      	cbnz	r0, 8015622 <_svfiprintf_r+0x2e>
 8015618:	230c      	movs	r3, #12
 801561a:	603b      	str	r3, [r7, #0]
 801561c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015620:	e0d0      	b.n	80157c4 <_svfiprintf_r+0x1d0>
 8015622:	2340      	movs	r3, #64	; 0x40
 8015624:	616b      	str	r3, [r5, #20]
 8015626:	2300      	movs	r3, #0
 8015628:	9309      	str	r3, [sp, #36]	; 0x24
 801562a:	2320      	movs	r3, #32
 801562c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015630:	f8cd 800c 	str.w	r8, [sp, #12]
 8015634:	2330      	movs	r3, #48	; 0x30
 8015636:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80157dc <_svfiprintf_r+0x1e8>
 801563a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801563e:	f04f 0901 	mov.w	r9, #1
 8015642:	4623      	mov	r3, r4
 8015644:	469a      	mov	sl, r3
 8015646:	f813 2b01 	ldrb.w	r2, [r3], #1
 801564a:	b10a      	cbz	r2, 8015650 <_svfiprintf_r+0x5c>
 801564c:	2a25      	cmp	r2, #37	; 0x25
 801564e:	d1f9      	bne.n	8015644 <_svfiprintf_r+0x50>
 8015650:	ebba 0b04 	subs.w	fp, sl, r4
 8015654:	d00b      	beq.n	801566e <_svfiprintf_r+0x7a>
 8015656:	465b      	mov	r3, fp
 8015658:	4622      	mov	r2, r4
 801565a:	4629      	mov	r1, r5
 801565c:	4638      	mov	r0, r7
 801565e:	f7ff ff6f 	bl	8015540 <__ssputs_r>
 8015662:	3001      	adds	r0, #1
 8015664:	f000 80a9 	beq.w	80157ba <_svfiprintf_r+0x1c6>
 8015668:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801566a:	445a      	add	r2, fp
 801566c:	9209      	str	r2, [sp, #36]	; 0x24
 801566e:	f89a 3000 	ldrb.w	r3, [sl]
 8015672:	2b00      	cmp	r3, #0
 8015674:	f000 80a1 	beq.w	80157ba <_svfiprintf_r+0x1c6>
 8015678:	2300      	movs	r3, #0
 801567a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801567e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015682:	f10a 0a01 	add.w	sl, sl, #1
 8015686:	9304      	str	r3, [sp, #16]
 8015688:	9307      	str	r3, [sp, #28]
 801568a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801568e:	931a      	str	r3, [sp, #104]	; 0x68
 8015690:	4654      	mov	r4, sl
 8015692:	2205      	movs	r2, #5
 8015694:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015698:	4850      	ldr	r0, [pc, #320]	; (80157dc <_svfiprintf_r+0x1e8>)
 801569a:	f7ea fdb9 	bl	8000210 <memchr>
 801569e:	9a04      	ldr	r2, [sp, #16]
 80156a0:	b9d8      	cbnz	r0, 80156da <_svfiprintf_r+0xe6>
 80156a2:	06d0      	lsls	r0, r2, #27
 80156a4:	bf44      	itt	mi
 80156a6:	2320      	movmi	r3, #32
 80156a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80156ac:	0711      	lsls	r1, r2, #28
 80156ae:	bf44      	itt	mi
 80156b0:	232b      	movmi	r3, #43	; 0x2b
 80156b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80156b6:	f89a 3000 	ldrb.w	r3, [sl]
 80156ba:	2b2a      	cmp	r3, #42	; 0x2a
 80156bc:	d015      	beq.n	80156ea <_svfiprintf_r+0xf6>
 80156be:	9a07      	ldr	r2, [sp, #28]
 80156c0:	4654      	mov	r4, sl
 80156c2:	2000      	movs	r0, #0
 80156c4:	f04f 0c0a 	mov.w	ip, #10
 80156c8:	4621      	mov	r1, r4
 80156ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80156ce:	3b30      	subs	r3, #48	; 0x30
 80156d0:	2b09      	cmp	r3, #9
 80156d2:	d94d      	bls.n	8015770 <_svfiprintf_r+0x17c>
 80156d4:	b1b0      	cbz	r0, 8015704 <_svfiprintf_r+0x110>
 80156d6:	9207      	str	r2, [sp, #28]
 80156d8:	e014      	b.n	8015704 <_svfiprintf_r+0x110>
 80156da:	eba0 0308 	sub.w	r3, r0, r8
 80156de:	fa09 f303 	lsl.w	r3, r9, r3
 80156e2:	4313      	orrs	r3, r2
 80156e4:	9304      	str	r3, [sp, #16]
 80156e6:	46a2      	mov	sl, r4
 80156e8:	e7d2      	b.n	8015690 <_svfiprintf_r+0x9c>
 80156ea:	9b03      	ldr	r3, [sp, #12]
 80156ec:	1d19      	adds	r1, r3, #4
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	9103      	str	r1, [sp, #12]
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	bfbb      	ittet	lt
 80156f6:	425b      	neglt	r3, r3
 80156f8:	f042 0202 	orrlt.w	r2, r2, #2
 80156fc:	9307      	strge	r3, [sp, #28]
 80156fe:	9307      	strlt	r3, [sp, #28]
 8015700:	bfb8      	it	lt
 8015702:	9204      	strlt	r2, [sp, #16]
 8015704:	7823      	ldrb	r3, [r4, #0]
 8015706:	2b2e      	cmp	r3, #46	; 0x2e
 8015708:	d10c      	bne.n	8015724 <_svfiprintf_r+0x130>
 801570a:	7863      	ldrb	r3, [r4, #1]
 801570c:	2b2a      	cmp	r3, #42	; 0x2a
 801570e:	d134      	bne.n	801577a <_svfiprintf_r+0x186>
 8015710:	9b03      	ldr	r3, [sp, #12]
 8015712:	1d1a      	adds	r2, r3, #4
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	9203      	str	r2, [sp, #12]
 8015718:	2b00      	cmp	r3, #0
 801571a:	bfb8      	it	lt
 801571c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015720:	3402      	adds	r4, #2
 8015722:	9305      	str	r3, [sp, #20]
 8015724:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80157ec <_svfiprintf_r+0x1f8>
 8015728:	7821      	ldrb	r1, [r4, #0]
 801572a:	2203      	movs	r2, #3
 801572c:	4650      	mov	r0, sl
 801572e:	f7ea fd6f 	bl	8000210 <memchr>
 8015732:	b138      	cbz	r0, 8015744 <_svfiprintf_r+0x150>
 8015734:	9b04      	ldr	r3, [sp, #16]
 8015736:	eba0 000a 	sub.w	r0, r0, sl
 801573a:	2240      	movs	r2, #64	; 0x40
 801573c:	4082      	lsls	r2, r0
 801573e:	4313      	orrs	r3, r2
 8015740:	3401      	adds	r4, #1
 8015742:	9304      	str	r3, [sp, #16]
 8015744:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015748:	4825      	ldr	r0, [pc, #148]	; (80157e0 <_svfiprintf_r+0x1ec>)
 801574a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801574e:	2206      	movs	r2, #6
 8015750:	f7ea fd5e 	bl	8000210 <memchr>
 8015754:	2800      	cmp	r0, #0
 8015756:	d038      	beq.n	80157ca <_svfiprintf_r+0x1d6>
 8015758:	4b22      	ldr	r3, [pc, #136]	; (80157e4 <_svfiprintf_r+0x1f0>)
 801575a:	bb1b      	cbnz	r3, 80157a4 <_svfiprintf_r+0x1b0>
 801575c:	9b03      	ldr	r3, [sp, #12]
 801575e:	3307      	adds	r3, #7
 8015760:	f023 0307 	bic.w	r3, r3, #7
 8015764:	3308      	adds	r3, #8
 8015766:	9303      	str	r3, [sp, #12]
 8015768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801576a:	4433      	add	r3, r6
 801576c:	9309      	str	r3, [sp, #36]	; 0x24
 801576e:	e768      	b.n	8015642 <_svfiprintf_r+0x4e>
 8015770:	fb0c 3202 	mla	r2, ip, r2, r3
 8015774:	460c      	mov	r4, r1
 8015776:	2001      	movs	r0, #1
 8015778:	e7a6      	b.n	80156c8 <_svfiprintf_r+0xd4>
 801577a:	2300      	movs	r3, #0
 801577c:	3401      	adds	r4, #1
 801577e:	9305      	str	r3, [sp, #20]
 8015780:	4619      	mov	r1, r3
 8015782:	f04f 0c0a 	mov.w	ip, #10
 8015786:	4620      	mov	r0, r4
 8015788:	f810 2b01 	ldrb.w	r2, [r0], #1
 801578c:	3a30      	subs	r2, #48	; 0x30
 801578e:	2a09      	cmp	r2, #9
 8015790:	d903      	bls.n	801579a <_svfiprintf_r+0x1a6>
 8015792:	2b00      	cmp	r3, #0
 8015794:	d0c6      	beq.n	8015724 <_svfiprintf_r+0x130>
 8015796:	9105      	str	r1, [sp, #20]
 8015798:	e7c4      	b.n	8015724 <_svfiprintf_r+0x130>
 801579a:	fb0c 2101 	mla	r1, ip, r1, r2
 801579e:	4604      	mov	r4, r0
 80157a0:	2301      	movs	r3, #1
 80157a2:	e7f0      	b.n	8015786 <_svfiprintf_r+0x192>
 80157a4:	ab03      	add	r3, sp, #12
 80157a6:	9300      	str	r3, [sp, #0]
 80157a8:	462a      	mov	r2, r5
 80157aa:	4b0f      	ldr	r3, [pc, #60]	; (80157e8 <_svfiprintf_r+0x1f4>)
 80157ac:	a904      	add	r1, sp, #16
 80157ae:	4638      	mov	r0, r7
 80157b0:	f3af 8000 	nop.w
 80157b4:	1c42      	adds	r2, r0, #1
 80157b6:	4606      	mov	r6, r0
 80157b8:	d1d6      	bne.n	8015768 <_svfiprintf_r+0x174>
 80157ba:	89ab      	ldrh	r3, [r5, #12]
 80157bc:	065b      	lsls	r3, r3, #25
 80157be:	f53f af2d 	bmi.w	801561c <_svfiprintf_r+0x28>
 80157c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80157c4:	b01d      	add	sp, #116	; 0x74
 80157c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157ca:	ab03      	add	r3, sp, #12
 80157cc:	9300      	str	r3, [sp, #0]
 80157ce:	462a      	mov	r2, r5
 80157d0:	4b05      	ldr	r3, [pc, #20]	; (80157e8 <_svfiprintf_r+0x1f4>)
 80157d2:	a904      	add	r1, sp, #16
 80157d4:	4638      	mov	r0, r7
 80157d6:	f000 f9bd 	bl	8015b54 <_printf_i>
 80157da:	e7eb      	b.n	80157b4 <_svfiprintf_r+0x1c0>
 80157dc:	08017170 	.word	0x08017170
 80157e0:	0801717a 	.word	0x0801717a
 80157e4:	00000000 	.word	0x00000000
 80157e8:	08015541 	.word	0x08015541
 80157ec:	08017176 	.word	0x08017176

080157f0 <__sfputc_r>:
 80157f0:	6893      	ldr	r3, [r2, #8]
 80157f2:	3b01      	subs	r3, #1
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	b410      	push	{r4}
 80157f8:	6093      	str	r3, [r2, #8]
 80157fa:	da08      	bge.n	801580e <__sfputc_r+0x1e>
 80157fc:	6994      	ldr	r4, [r2, #24]
 80157fe:	42a3      	cmp	r3, r4
 8015800:	db01      	blt.n	8015806 <__sfputc_r+0x16>
 8015802:	290a      	cmp	r1, #10
 8015804:	d103      	bne.n	801580e <__sfputc_r+0x1e>
 8015806:	f85d 4b04 	ldr.w	r4, [sp], #4
 801580a:	f000 bb85 	b.w	8015f18 <__swbuf_r>
 801580e:	6813      	ldr	r3, [r2, #0]
 8015810:	1c58      	adds	r0, r3, #1
 8015812:	6010      	str	r0, [r2, #0]
 8015814:	7019      	strb	r1, [r3, #0]
 8015816:	4608      	mov	r0, r1
 8015818:	f85d 4b04 	ldr.w	r4, [sp], #4
 801581c:	4770      	bx	lr

0801581e <__sfputs_r>:
 801581e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015820:	4606      	mov	r6, r0
 8015822:	460f      	mov	r7, r1
 8015824:	4614      	mov	r4, r2
 8015826:	18d5      	adds	r5, r2, r3
 8015828:	42ac      	cmp	r4, r5
 801582a:	d101      	bne.n	8015830 <__sfputs_r+0x12>
 801582c:	2000      	movs	r0, #0
 801582e:	e007      	b.n	8015840 <__sfputs_r+0x22>
 8015830:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015834:	463a      	mov	r2, r7
 8015836:	4630      	mov	r0, r6
 8015838:	f7ff ffda 	bl	80157f0 <__sfputc_r>
 801583c:	1c43      	adds	r3, r0, #1
 801583e:	d1f3      	bne.n	8015828 <__sfputs_r+0xa>
 8015840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015844 <_vfiprintf_r>:
 8015844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015848:	460d      	mov	r5, r1
 801584a:	b09d      	sub	sp, #116	; 0x74
 801584c:	4614      	mov	r4, r2
 801584e:	4698      	mov	r8, r3
 8015850:	4606      	mov	r6, r0
 8015852:	b118      	cbz	r0, 801585c <_vfiprintf_r+0x18>
 8015854:	6a03      	ldr	r3, [r0, #32]
 8015856:	b90b      	cbnz	r3, 801585c <_vfiprintf_r+0x18>
 8015858:	f7ff fba4 	bl	8014fa4 <__sinit>
 801585c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801585e:	07d9      	lsls	r1, r3, #31
 8015860:	d405      	bmi.n	801586e <_vfiprintf_r+0x2a>
 8015862:	89ab      	ldrh	r3, [r5, #12]
 8015864:	059a      	lsls	r2, r3, #22
 8015866:	d402      	bmi.n	801586e <_vfiprintf_r+0x2a>
 8015868:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801586a:	f7ff fdd2 	bl	8015412 <__retarget_lock_acquire_recursive>
 801586e:	89ab      	ldrh	r3, [r5, #12]
 8015870:	071b      	lsls	r3, r3, #28
 8015872:	d501      	bpl.n	8015878 <_vfiprintf_r+0x34>
 8015874:	692b      	ldr	r3, [r5, #16]
 8015876:	b99b      	cbnz	r3, 80158a0 <_vfiprintf_r+0x5c>
 8015878:	4629      	mov	r1, r5
 801587a:	4630      	mov	r0, r6
 801587c:	f000 fb8a 	bl	8015f94 <__swsetup_r>
 8015880:	b170      	cbz	r0, 80158a0 <_vfiprintf_r+0x5c>
 8015882:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015884:	07dc      	lsls	r4, r3, #31
 8015886:	d504      	bpl.n	8015892 <_vfiprintf_r+0x4e>
 8015888:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801588c:	b01d      	add	sp, #116	; 0x74
 801588e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015892:	89ab      	ldrh	r3, [r5, #12]
 8015894:	0598      	lsls	r0, r3, #22
 8015896:	d4f7      	bmi.n	8015888 <_vfiprintf_r+0x44>
 8015898:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801589a:	f7ff fdbb 	bl	8015414 <__retarget_lock_release_recursive>
 801589e:	e7f3      	b.n	8015888 <_vfiprintf_r+0x44>
 80158a0:	2300      	movs	r3, #0
 80158a2:	9309      	str	r3, [sp, #36]	; 0x24
 80158a4:	2320      	movs	r3, #32
 80158a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80158aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80158ae:	2330      	movs	r3, #48	; 0x30
 80158b0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8015a64 <_vfiprintf_r+0x220>
 80158b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80158b8:	f04f 0901 	mov.w	r9, #1
 80158bc:	4623      	mov	r3, r4
 80158be:	469a      	mov	sl, r3
 80158c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80158c4:	b10a      	cbz	r2, 80158ca <_vfiprintf_r+0x86>
 80158c6:	2a25      	cmp	r2, #37	; 0x25
 80158c8:	d1f9      	bne.n	80158be <_vfiprintf_r+0x7a>
 80158ca:	ebba 0b04 	subs.w	fp, sl, r4
 80158ce:	d00b      	beq.n	80158e8 <_vfiprintf_r+0xa4>
 80158d0:	465b      	mov	r3, fp
 80158d2:	4622      	mov	r2, r4
 80158d4:	4629      	mov	r1, r5
 80158d6:	4630      	mov	r0, r6
 80158d8:	f7ff ffa1 	bl	801581e <__sfputs_r>
 80158dc:	3001      	adds	r0, #1
 80158de:	f000 80a9 	beq.w	8015a34 <_vfiprintf_r+0x1f0>
 80158e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80158e4:	445a      	add	r2, fp
 80158e6:	9209      	str	r2, [sp, #36]	; 0x24
 80158e8:	f89a 3000 	ldrb.w	r3, [sl]
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	f000 80a1 	beq.w	8015a34 <_vfiprintf_r+0x1f0>
 80158f2:	2300      	movs	r3, #0
 80158f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80158f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80158fc:	f10a 0a01 	add.w	sl, sl, #1
 8015900:	9304      	str	r3, [sp, #16]
 8015902:	9307      	str	r3, [sp, #28]
 8015904:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015908:	931a      	str	r3, [sp, #104]	; 0x68
 801590a:	4654      	mov	r4, sl
 801590c:	2205      	movs	r2, #5
 801590e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015912:	4854      	ldr	r0, [pc, #336]	; (8015a64 <_vfiprintf_r+0x220>)
 8015914:	f7ea fc7c 	bl	8000210 <memchr>
 8015918:	9a04      	ldr	r2, [sp, #16]
 801591a:	b9d8      	cbnz	r0, 8015954 <_vfiprintf_r+0x110>
 801591c:	06d1      	lsls	r1, r2, #27
 801591e:	bf44      	itt	mi
 8015920:	2320      	movmi	r3, #32
 8015922:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015926:	0713      	lsls	r3, r2, #28
 8015928:	bf44      	itt	mi
 801592a:	232b      	movmi	r3, #43	; 0x2b
 801592c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015930:	f89a 3000 	ldrb.w	r3, [sl]
 8015934:	2b2a      	cmp	r3, #42	; 0x2a
 8015936:	d015      	beq.n	8015964 <_vfiprintf_r+0x120>
 8015938:	9a07      	ldr	r2, [sp, #28]
 801593a:	4654      	mov	r4, sl
 801593c:	2000      	movs	r0, #0
 801593e:	f04f 0c0a 	mov.w	ip, #10
 8015942:	4621      	mov	r1, r4
 8015944:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015948:	3b30      	subs	r3, #48	; 0x30
 801594a:	2b09      	cmp	r3, #9
 801594c:	d94d      	bls.n	80159ea <_vfiprintf_r+0x1a6>
 801594e:	b1b0      	cbz	r0, 801597e <_vfiprintf_r+0x13a>
 8015950:	9207      	str	r2, [sp, #28]
 8015952:	e014      	b.n	801597e <_vfiprintf_r+0x13a>
 8015954:	eba0 0308 	sub.w	r3, r0, r8
 8015958:	fa09 f303 	lsl.w	r3, r9, r3
 801595c:	4313      	orrs	r3, r2
 801595e:	9304      	str	r3, [sp, #16]
 8015960:	46a2      	mov	sl, r4
 8015962:	e7d2      	b.n	801590a <_vfiprintf_r+0xc6>
 8015964:	9b03      	ldr	r3, [sp, #12]
 8015966:	1d19      	adds	r1, r3, #4
 8015968:	681b      	ldr	r3, [r3, #0]
 801596a:	9103      	str	r1, [sp, #12]
 801596c:	2b00      	cmp	r3, #0
 801596e:	bfbb      	ittet	lt
 8015970:	425b      	neglt	r3, r3
 8015972:	f042 0202 	orrlt.w	r2, r2, #2
 8015976:	9307      	strge	r3, [sp, #28]
 8015978:	9307      	strlt	r3, [sp, #28]
 801597a:	bfb8      	it	lt
 801597c:	9204      	strlt	r2, [sp, #16]
 801597e:	7823      	ldrb	r3, [r4, #0]
 8015980:	2b2e      	cmp	r3, #46	; 0x2e
 8015982:	d10c      	bne.n	801599e <_vfiprintf_r+0x15a>
 8015984:	7863      	ldrb	r3, [r4, #1]
 8015986:	2b2a      	cmp	r3, #42	; 0x2a
 8015988:	d134      	bne.n	80159f4 <_vfiprintf_r+0x1b0>
 801598a:	9b03      	ldr	r3, [sp, #12]
 801598c:	1d1a      	adds	r2, r3, #4
 801598e:	681b      	ldr	r3, [r3, #0]
 8015990:	9203      	str	r2, [sp, #12]
 8015992:	2b00      	cmp	r3, #0
 8015994:	bfb8      	it	lt
 8015996:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801599a:	3402      	adds	r4, #2
 801599c:	9305      	str	r3, [sp, #20]
 801599e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8015a74 <_vfiprintf_r+0x230>
 80159a2:	7821      	ldrb	r1, [r4, #0]
 80159a4:	2203      	movs	r2, #3
 80159a6:	4650      	mov	r0, sl
 80159a8:	f7ea fc32 	bl	8000210 <memchr>
 80159ac:	b138      	cbz	r0, 80159be <_vfiprintf_r+0x17a>
 80159ae:	9b04      	ldr	r3, [sp, #16]
 80159b0:	eba0 000a 	sub.w	r0, r0, sl
 80159b4:	2240      	movs	r2, #64	; 0x40
 80159b6:	4082      	lsls	r2, r0
 80159b8:	4313      	orrs	r3, r2
 80159ba:	3401      	adds	r4, #1
 80159bc:	9304      	str	r3, [sp, #16]
 80159be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80159c2:	4829      	ldr	r0, [pc, #164]	; (8015a68 <_vfiprintf_r+0x224>)
 80159c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80159c8:	2206      	movs	r2, #6
 80159ca:	f7ea fc21 	bl	8000210 <memchr>
 80159ce:	2800      	cmp	r0, #0
 80159d0:	d03f      	beq.n	8015a52 <_vfiprintf_r+0x20e>
 80159d2:	4b26      	ldr	r3, [pc, #152]	; (8015a6c <_vfiprintf_r+0x228>)
 80159d4:	bb1b      	cbnz	r3, 8015a1e <_vfiprintf_r+0x1da>
 80159d6:	9b03      	ldr	r3, [sp, #12]
 80159d8:	3307      	adds	r3, #7
 80159da:	f023 0307 	bic.w	r3, r3, #7
 80159de:	3308      	adds	r3, #8
 80159e0:	9303      	str	r3, [sp, #12]
 80159e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159e4:	443b      	add	r3, r7
 80159e6:	9309      	str	r3, [sp, #36]	; 0x24
 80159e8:	e768      	b.n	80158bc <_vfiprintf_r+0x78>
 80159ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80159ee:	460c      	mov	r4, r1
 80159f0:	2001      	movs	r0, #1
 80159f2:	e7a6      	b.n	8015942 <_vfiprintf_r+0xfe>
 80159f4:	2300      	movs	r3, #0
 80159f6:	3401      	adds	r4, #1
 80159f8:	9305      	str	r3, [sp, #20]
 80159fa:	4619      	mov	r1, r3
 80159fc:	f04f 0c0a 	mov.w	ip, #10
 8015a00:	4620      	mov	r0, r4
 8015a02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015a06:	3a30      	subs	r2, #48	; 0x30
 8015a08:	2a09      	cmp	r2, #9
 8015a0a:	d903      	bls.n	8015a14 <_vfiprintf_r+0x1d0>
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d0c6      	beq.n	801599e <_vfiprintf_r+0x15a>
 8015a10:	9105      	str	r1, [sp, #20]
 8015a12:	e7c4      	b.n	801599e <_vfiprintf_r+0x15a>
 8015a14:	fb0c 2101 	mla	r1, ip, r1, r2
 8015a18:	4604      	mov	r4, r0
 8015a1a:	2301      	movs	r3, #1
 8015a1c:	e7f0      	b.n	8015a00 <_vfiprintf_r+0x1bc>
 8015a1e:	ab03      	add	r3, sp, #12
 8015a20:	9300      	str	r3, [sp, #0]
 8015a22:	462a      	mov	r2, r5
 8015a24:	4b12      	ldr	r3, [pc, #72]	; (8015a70 <_vfiprintf_r+0x22c>)
 8015a26:	a904      	add	r1, sp, #16
 8015a28:	4630      	mov	r0, r6
 8015a2a:	f3af 8000 	nop.w
 8015a2e:	4607      	mov	r7, r0
 8015a30:	1c78      	adds	r0, r7, #1
 8015a32:	d1d6      	bne.n	80159e2 <_vfiprintf_r+0x19e>
 8015a34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015a36:	07d9      	lsls	r1, r3, #31
 8015a38:	d405      	bmi.n	8015a46 <_vfiprintf_r+0x202>
 8015a3a:	89ab      	ldrh	r3, [r5, #12]
 8015a3c:	059a      	lsls	r2, r3, #22
 8015a3e:	d402      	bmi.n	8015a46 <_vfiprintf_r+0x202>
 8015a40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015a42:	f7ff fce7 	bl	8015414 <__retarget_lock_release_recursive>
 8015a46:	89ab      	ldrh	r3, [r5, #12]
 8015a48:	065b      	lsls	r3, r3, #25
 8015a4a:	f53f af1d 	bmi.w	8015888 <_vfiprintf_r+0x44>
 8015a4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015a50:	e71c      	b.n	801588c <_vfiprintf_r+0x48>
 8015a52:	ab03      	add	r3, sp, #12
 8015a54:	9300      	str	r3, [sp, #0]
 8015a56:	462a      	mov	r2, r5
 8015a58:	4b05      	ldr	r3, [pc, #20]	; (8015a70 <_vfiprintf_r+0x22c>)
 8015a5a:	a904      	add	r1, sp, #16
 8015a5c:	4630      	mov	r0, r6
 8015a5e:	f000 f879 	bl	8015b54 <_printf_i>
 8015a62:	e7e4      	b.n	8015a2e <_vfiprintf_r+0x1ea>
 8015a64:	08017170 	.word	0x08017170
 8015a68:	0801717a 	.word	0x0801717a
 8015a6c:	00000000 	.word	0x00000000
 8015a70:	0801581f 	.word	0x0801581f
 8015a74:	08017176 	.word	0x08017176

08015a78 <_printf_common>:
 8015a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a7c:	4616      	mov	r6, r2
 8015a7e:	4699      	mov	r9, r3
 8015a80:	688a      	ldr	r2, [r1, #8]
 8015a82:	690b      	ldr	r3, [r1, #16]
 8015a84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015a88:	4293      	cmp	r3, r2
 8015a8a:	bfb8      	it	lt
 8015a8c:	4613      	movlt	r3, r2
 8015a8e:	6033      	str	r3, [r6, #0]
 8015a90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015a94:	4607      	mov	r7, r0
 8015a96:	460c      	mov	r4, r1
 8015a98:	b10a      	cbz	r2, 8015a9e <_printf_common+0x26>
 8015a9a:	3301      	adds	r3, #1
 8015a9c:	6033      	str	r3, [r6, #0]
 8015a9e:	6823      	ldr	r3, [r4, #0]
 8015aa0:	0699      	lsls	r1, r3, #26
 8015aa2:	bf42      	ittt	mi
 8015aa4:	6833      	ldrmi	r3, [r6, #0]
 8015aa6:	3302      	addmi	r3, #2
 8015aa8:	6033      	strmi	r3, [r6, #0]
 8015aaa:	6825      	ldr	r5, [r4, #0]
 8015aac:	f015 0506 	ands.w	r5, r5, #6
 8015ab0:	d106      	bne.n	8015ac0 <_printf_common+0x48>
 8015ab2:	f104 0a19 	add.w	sl, r4, #25
 8015ab6:	68e3      	ldr	r3, [r4, #12]
 8015ab8:	6832      	ldr	r2, [r6, #0]
 8015aba:	1a9b      	subs	r3, r3, r2
 8015abc:	42ab      	cmp	r3, r5
 8015abe:	dc26      	bgt.n	8015b0e <_printf_common+0x96>
 8015ac0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015ac4:	1e13      	subs	r3, r2, #0
 8015ac6:	6822      	ldr	r2, [r4, #0]
 8015ac8:	bf18      	it	ne
 8015aca:	2301      	movne	r3, #1
 8015acc:	0692      	lsls	r2, r2, #26
 8015ace:	d42b      	bmi.n	8015b28 <_printf_common+0xb0>
 8015ad0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015ad4:	4649      	mov	r1, r9
 8015ad6:	4638      	mov	r0, r7
 8015ad8:	47c0      	blx	r8
 8015ada:	3001      	adds	r0, #1
 8015adc:	d01e      	beq.n	8015b1c <_printf_common+0xa4>
 8015ade:	6823      	ldr	r3, [r4, #0]
 8015ae0:	6922      	ldr	r2, [r4, #16]
 8015ae2:	f003 0306 	and.w	r3, r3, #6
 8015ae6:	2b04      	cmp	r3, #4
 8015ae8:	bf02      	ittt	eq
 8015aea:	68e5      	ldreq	r5, [r4, #12]
 8015aec:	6833      	ldreq	r3, [r6, #0]
 8015aee:	1aed      	subeq	r5, r5, r3
 8015af0:	68a3      	ldr	r3, [r4, #8]
 8015af2:	bf0c      	ite	eq
 8015af4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015af8:	2500      	movne	r5, #0
 8015afa:	4293      	cmp	r3, r2
 8015afc:	bfc4      	itt	gt
 8015afe:	1a9b      	subgt	r3, r3, r2
 8015b00:	18ed      	addgt	r5, r5, r3
 8015b02:	2600      	movs	r6, #0
 8015b04:	341a      	adds	r4, #26
 8015b06:	42b5      	cmp	r5, r6
 8015b08:	d11a      	bne.n	8015b40 <_printf_common+0xc8>
 8015b0a:	2000      	movs	r0, #0
 8015b0c:	e008      	b.n	8015b20 <_printf_common+0xa8>
 8015b0e:	2301      	movs	r3, #1
 8015b10:	4652      	mov	r2, sl
 8015b12:	4649      	mov	r1, r9
 8015b14:	4638      	mov	r0, r7
 8015b16:	47c0      	blx	r8
 8015b18:	3001      	adds	r0, #1
 8015b1a:	d103      	bne.n	8015b24 <_printf_common+0xac>
 8015b1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b24:	3501      	adds	r5, #1
 8015b26:	e7c6      	b.n	8015ab6 <_printf_common+0x3e>
 8015b28:	18e1      	adds	r1, r4, r3
 8015b2a:	1c5a      	adds	r2, r3, #1
 8015b2c:	2030      	movs	r0, #48	; 0x30
 8015b2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015b32:	4422      	add	r2, r4
 8015b34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015b38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015b3c:	3302      	adds	r3, #2
 8015b3e:	e7c7      	b.n	8015ad0 <_printf_common+0x58>
 8015b40:	2301      	movs	r3, #1
 8015b42:	4622      	mov	r2, r4
 8015b44:	4649      	mov	r1, r9
 8015b46:	4638      	mov	r0, r7
 8015b48:	47c0      	blx	r8
 8015b4a:	3001      	adds	r0, #1
 8015b4c:	d0e6      	beq.n	8015b1c <_printf_common+0xa4>
 8015b4e:	3601      	adds	r6, #1
 8015b50:	e7d9      	b.n	8015b06 <_printf_common+0x8e>
	...

08015b54 <_printf_i>:
 8015b54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015b58:	7e0f      	ldrb	r7, [r1, #24]
 8015b5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015b5c:	2f78      	cmp	r7, #120	; 0x78
 8015b5e:	4691      	mov	r9, r2
 8015b60:	4680      	mov	r8, r0
 8015b62:	460c      	mov	r4, r1
 8015b64:	469a      	mov	sl, r3
 8015b66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015b6a:	d807      	bhi.n	8015b7c <_printf_i+0x28>
 8015b6c:	2f62      	cmp	r7, #98	; 0x62
 8015b6e:	d80a      	bhi.n	8015b86 <_printf_i+0x32>
 8015b70:	2f00      	cmp	r7, #0
 8015b72:	f000 80d4 	beq.w	8015d1e <_printf_i+0x1ca>
 8015b76:	2f58      	cmp	r7, #88	; 0x58
 8015b78:	f000 80c0 	beq.w	8015cfc <_printf_i+0x1a8>
 8015b7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015b80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015b84:	e03a      	b.n	8015bfc <_printf_i+0xa8>
 8015b86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015b8a:	2b15      	cmp	r3, #21
 8015b8c:	d8f6      	bhi.n	8015b7c <_printf_i+0x28>
 8015b8e:	a101      	add	r1, pc, #4	; (adr r1, 8015b94 <_printf_i+0x40>)
 8015b90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015b94:	08015bed 	.word	0x08015bed
 8015b98:	08015c01 	.word	0x08015c01
 8015b9c:	08015b7d 	.word	0x08015b7d
 8015ba0:	08015b7d 	.word	0x08015b7d
 8015ba4:	08015b7d 	.word	0x08015b7d
 8015ba8:	08015b7d 	.word	0x08015b7d
 8015bac:	08015c01 	.word	0x08015c01
 8015bb0:	08015b7d 	.word	0x08015b7d
 8015bb4:	08015b7d 	.word	0x08015b7d
 8015bb8:	08015b7d 	.word	0x08015b7d
 8015bbc:	08015b7d 	.word	0x08015b7d
 8015bc0:	08015d05 	.word	0x08015d05
 8015bc4:	08015c2d 	.word	0x08015c2d
 8015bc8:	08015cbf 	.word	0x08015cbf
 8015bcc:	08015b7d 	.word	0x08015b7d
 8015bd0:	08015b7d 	.word	0x08015b7d
 8015bd4:	08015d27 	.word	0x08015d27
 8015bd8:	08015b7d 	.word	0x08015b7d
 8015bdc:	08015c2d 	.word	0x08015c2d
 8015be0:	08015b7d 	.word	0x08015b7d
 8015be4:	08015b7d 	.word	0x08015b7d
 8015be8:	08015cc7 	.word	0x08015cc7
 8015bec:	682b      	ldr	r3, [r5, #0]
 8015bee:	1d1a      	adds	r2, r3, #4
 8015bf0:	681b      	ldr	r3, [r3, #0]
 8015bf2:	602a      	str	r2, [r5, #0]
 8015bf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015bf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015bfc:	2301      	movs	r3, #1
 8015bfe:	e09f      	b.n	8015d40 <_printf_i+0x1ec>
 8015c00:	6820      	ldr	r0, [r4, #0]
 8015c02:	682b      	ldr	r3, [r5, #0]
 8015c04:	0607      	lsls	r7, r0, #24
 8015c06:	f103 0104 	add.w	r1, r3, #4
 8015c0a:	6029      	str	r1, [r5, #0]
 8015c0c:	d501      	bpl.n	8015c12 <_printf_i+0xbe>
 8015c0e:	681e      	ldr	r6, [r3, #0]
 8015c10:	e003      	b.n	8015c1a <_printf_i+0xc6>
 8015c12:	0646      	lsls	r6, r0, #25
 8015c14:	d5fb      	bpl.n	8015c0e <_printf_i+0xba>
 8015c16:	f9b3 6000 	ldrsh.w	r6, [r3]
 8015c1a:	2e00      	cmp	r6, #0
 8015c1c:	da03      	bge.n	8015c26 <_printf_i+0xd2>
 8015c1e:	232d      	movs	r3, #45	; 0x2d
 8015c20:	4276      	negs	r6, r6
 8015c22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015c26:	485a      	ldr	r0, [pc, #360]	; (8015d90 <_printf_i+0x23c>)
 8015c28:	230a      	movs	r3, #10
 8015c2a:	e012      	b.n	8015c52 <_printf_i+0xfe>
 8015c2c:	682b      	ldr	r3, [r5, #0]
 8015c2e:	6820      	ldr	r0, [r4, #0]
 8015c30:	1d19      	adds	r1, r3, #4
 8015c32:	6029      	str	r1, [r5, #0]
 8015c34:	0605      	lsls	r5, r0, #24
 8015c36:	d501      	bpl.n	8015c3c <_printf_i+0xe8>
 8015c38:	681e      	ldr	r6, [r3, #0]
 8015c3a:	e002      	b.n	8015c42 <_printf_i+0xee>
 8015c3c:	0641      	lsls	r1, r0, #25
 8015c3e:	d5fb      	bpl.n	8015c38 <_printf_i+0xe4>
 8015c40:	881e      	ldrh	r6, [r3, #0]
 8015c42:	4853      	ldr	r0, [pc, #332]	; (8015d90 <_printf_i+0x23c>)
 8015c44:	2f6f      	cmp	r7, #111	; 0x6f
 8015c46:	bf0c      	ite	eq
 8015c48:	2308      	moveq	r3, #8
 8015c4a:	230a      	movne	r3, #10
 8015c4c:	2100      	movs	r1, #0
 8015c4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015c52:	6865      	ldr	r5, [r4, #4]
 8015c54:	60a5      	str	r5, [r4, #8]
 8015c56:	2d00      	cmp	r5, #0
 8015c58:	bfa2      	ittt	ge
 8015c5a:	6821      	ldrge	r1, [r4, #0]
 8015c5c:	f021 0104 	bicge.w	r1, r1, #4
 8015c60:	6021      	strge	r1, [r4, #0]
 8015c62:	b90e      	cbnz	r6, 8015c68 <_printf_i+0x114>
 8015c64:	2d00      	cmp	r5, #0
 8015c66:	d04b      	beq.n	8015d00 <_printf_i+0x1ac>
 8015c68:	4615      	mov	r5, r2
 8015c6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8015c6e:	fb03 6711 	mls	r7, r3, r1, r6
 8015c72:	5dc7      	ldrb	r7, [r0, r7]
 8015c74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015c78:	4637      	mov	r7, r6
 8015c7a:	42bb      	cmp	r3, r7
 8015c7c:	460e      	mov	r6, r1
 8015c7e:	d9f4      	bls.n	8015c6a <_printf_i+0x116>
 8015c80:	2b08      	cmp	r3, #8
 8015c82:	d10b      	bne.n	8015c9c <_printf_i+0x148>
 8015c84:	6823      	ldr	r3, [r4, #0]
 8015c86:	07de      	lsls	r6, r3, #31
 8015c88:	d508      	bpl.n	8015c9c <_printf_i+0x148>
 8015c8a:	6923      	ldr	r3, [r4, #16]
 8015c8c:	6861      	ldr	r1, [r4, #4]
 8015c8e:	4299      	cmp	r1, r3
 8015c90:	bfde      	ittt	le
 8015c92:	2330      	movle	r3, #48	; 0x30
 8015c94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015c98:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8015c9c:	1b52      	subs	r2, r2, r5
 8015c9e:	6122      	str	r2, [r4, #16]
 8015ca0:	f8cd a000 	str.w	sl, [sp]
 8015ca4:	464b      	mov	r3, r9
 8015ca6:	aa03      	add	r2, sp, #12
 8015ca8:	4621      	mov	r1, r4
 8015caa:	4640      	mov	r0, r8
 8015cac:	f7ff fee4 	bl	8015a78 <_printf_common>
 8015cb0:	3001      	adds	r0, #1
 8015cb2:	d14a      	bne.n	8015d4a <_printf_i+0x1f6>
 8015cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015cb8:	b004      	add	sp, #16
 8015cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015cbe:	6823      	ldr	r3, [r4, #0]
 8015cc0:	f043 0320 	orr.w	r3, r3, #32
 8015cc4:	6023      	str	r3, [r4, #0]
 8015cc6:	4833      	ldr	r0, [pc, #204]	; (8015d94 <_printf_i+0x240>)
 8015cc8:	2778      	movs	r7, #120	; 0x78
 8015cca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015cce:	6823      	ldr	r3, [r4, #0]
 8015cd0:	6829      	ldr	r1, [r5, #0]
 8015cd2:	061f      	lsls	r7, r3, #24
 8015cd4:	f851 6b04 	ldr.w	r6, [r1], #4
 8015cd8:	d402      	bmi.n	8015ce0 <_printf_i+0x18c>
 8015cda:	065f      	lsls	r7, r3, #25
 8015cdc:	bf48      	it	mi
 8015cde:	b2b6      	uxthmi	r6, r6
 8015ce0:	07df      	lsls	r7, r3, #31
 8015ce2:	bf48      	it	mi
 8015ce4:	f043 0320 	orrmi.w	r3, r3, #32
 8015ce8:	6029      	str	r1, [r5, #0]
 8015cea:	bf48      	it	mi
 8015cec:	6023      	strmi	r3, [r4, #0]
 8015cee:	b91e      	cbnz	r6, 8015cf8 <_printf_i+0x1a4>
 8015cf0:	6823      	ldr	r3, [r4, #0]
 8015cf2:	f023 0320 	bic.w	r3, r3, #32
 8015cf6:	6023      	str	r3, [r4, #0]
 8015cf8:	2310      	movs	r3, #16
 8015cfa:	e7a7      	b.n	8015c4c <_printf_i+0xf8>
 8015cfc:	4824      	ldr	r0, [pc, #144]	; (8015d90 <_printf_i+0x23c>)
 8015cfe:	e7e4      	b.n	8015cca <_printf_i+0x176>
 8015d00:	4615      	mov	r5, r2
 8015d02:	e7bd      	b.n	8015c80 <_printf_i+0x12c>
 8015d04:	682b      	ldr	r3, [r5, #0]
 8015d06:	6826      	ldr	r6, [r4, #0]
 8015d08:	6961      	ldr	r1, [r4, #20]
 8015d0a:	1d18      	adds	r0, r3, #4
 8015d0c:	6028      	str	r0, [r5, #0]
 8015d0e:	0635      	lsls	r5, r6, #24
 8015d10:	681b      	ldr	r3, [r3, #0]
 8015d12:	d501      	bpl.n	8015d18 <_printf_i+0x1c4>
 8015d14:	6019      	str	r1, [r3, #0]
 8015d16:	e002      	b.n	8015d1e <_printf_i+0x1ca>
 8015d18:	0670      	lsls	r0, r6, #25
 8015d1a:	d5fb      	bpl.n	8015d14 <_printf_i+0x1c0>
 8015d1c:	8019      	strh	r1, [r3, #0]
 8015d1e:	2300      	movs	r3, #0
 8015d20:	6123      	str	r3, [r4, #16]
 8015d22:	4615      	mov	r5, r2
 8015d24:	e7bc      	b.n	8015ca0 <_printf_i+0x14c>
 8015d26:	682b      	ldr	r3, [r5, #0]
 8015d28:	1d1a      	adds	r2, r3, #4
 8015d2a:	602a      	str	r2, [r5, #0]
 8015d2c:	681d      	ldr	r5, [r3, #0]
 8015d2e:	6862      	ldr	r2, [r4, #4]
 8015d30:	2100      	movs	r1, #0
 8015d32:	4628      	mov	r0, r5
 8015d34:	f7ea fa6c 	bl	8000210 <memchr>
 8015d38:	b108      	cbz	r0, 8015d3e <_printf_i+0x1ea>
 8015d3a:	1b40      	subs	r0, r0, r5
 8015d3c:	6060      	str	r0, [r4, #4]
 8015d3e:	6863      	ldr	r3, [r4, #4]
 8015d40:	6123      	str	r3, [r4, #16]
 8015d42:	2300      	movs	r3, #0
 8015d44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015d48:	e7aa      	b.n	8015ca0 <_printf_i+0x14c>
 8015d4a:	6923      	ldr	r3, [r4, #16]
 8015d4c:	462a      	mov	r2, r5
 8015d4e:	4649      	mov	r1, r9
 8015d50:	4640      	mov	r0, r8
 8015d52:	47d0      	blx	sl
 8015d54:	3001      	adds	r0, #1
 8015d56:	d0ad      	beq.n	8015cb4 <_printf_i+0x160>
 8015d58:	6823      	ldr	r3, [r4, #0]
 8015d5a:	079b      	lsls	r3, r3, #30
 8015d5c:	d413      	bmi.n	8015d86 <_printf_i+0x232>
 8015d5e:	68e0      	ldr	r0, [r4, #12]
 8015d60:	9b03      	ldr	r3, [sp, #12]
 8015d62:	4298      	cmp	r0, r3
 8015d64:	bfb8      	it	lt
 8015d66:	4618      	movlt	r0, r3
 8015d68:	e7a6      	b.n	8015cb8 <_printf_i+0x164>
 8015d6a:	2301      	movs	r3, #1
 8015d6c:	4632      	mov	r2, r6
 8015d6e:	4649      	mov	r1, r9
 8015d70:	4640      	mov	r0, r8
 8015d72:	47d0      	blx	sl
 8015d74:	3001      	adds	r0, #1
 8015d76:	d09d      	beq.n	8015cb4 <_printf_i+0x160>
 8015d78:	3501      	adds	r5, #1
 8015d7a:	68e3      	ldr	r3, [r4, #12]
 8015d7c:	9903      	ldr	r1, [sp, #12]
 8015d7e:	1a5b      	subs	r3, r3, r1
 8015d80:	42ab      	cmp	r3, r5
 8015d82:	dcf2      	bgt.n	8015d6a <_printf_i+0x216>
 8015d84:	e7eb      	b.n	8015d5e <_printf_i+0x20a>
 8015d86:	2500      	movs	r5, #0
 8015d88:	f104 0619 	add.w	r6, r4, #25
 8015d8c:	e7f5      	b.n	8015d7a <_printf_i+0x226>
 8015d8e:	bf00      	nop
 8015d90:	08017181 	.word	0x08017181
 8015d94:	08017192 	.word	0x08017192

08015d98 <__sflush_r>:
 8015d98:	898a      	ldrh	r2, [r1, #12]
 8015d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d9e:	4605      	mov	r5, r0
 8015da0:	0710      	lsls	r0, r2, #28
 8015da2:	460c      	mov	r4, r1
 8015da4:	d458      	bmi.n	8015e58 <__sflush_r+0xc0>
 8015da6:	684b      	ldr	r3, [r1, #4]
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	dc05      	bgt.n	8015db8 <__sflush_r+0x20>
 8015dac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	dc02      	bgt.n	8015db8 <__sflush_r+0x20>
 8015db2:	2000      	movs	r0, #0
 8015db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015db8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015dba:	2e00      	cmp	r6, #0
 8015dbc:	d0f9      	beq.n	8015db2 <__sflush_r+0x1a>
 8015dbe:	2300      	movs	r3, #0
 8015dc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015dc4:	682f      	ldr	r7, [r5, #0]
 8015dc6:	6a21      	ldr	r1, [r4, #32]
 8015dc8:	602b      	str	r3, [r5, #0]
 8015dca:	d032      	beq.n	8015e32 <__sflush_r+0x9a>
 8015dcc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015dce:	89a3      	ldrh	r3, [r4, #12]
 8015dd0:	075a      	lsls	r2, r3, #29
 8015dd2:	d505      	bpl.n	8015de0 <__sflush_r+0x48>
 8015dd4:	6863      	ldr	r3, [r4, #4]
 8015dd6:	1ac0      	subs	r0, r0, r3
 8015dd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015dda:	b10b      	cbz	r3, 8015de0 <__sflush_r+0x48>
 8015ddc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015dde:	1ac0      	subs	r0, r0, r3
 8015de0:	2300      	movs	r3, #0
 8015de2:	4602      	mov	r2, r0
 8015de4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015de6:	6a21      	ldr	r1, [r4, #32]
 8015de8:	4628      	mov	r0, r5
 8015dea:	47b0      	blx	r6
 8015dec:	1c43      	adds	r3, r0, #1
 8015dee:	89a3      	ldrh	r3, [r4, #12]
 8015df0:	d106      	bne.n	8015e00 <__sflush_r+0x68>
 8015df2:	6829      	ldr	r1, [r5, #0]
 8015df4:	291d      	cmp	r1, #29
 8015df6:	d82b      	bhi.n	8015e50 <__sflush_r+0xb8>
 8015df8:	4a29      	ldr	r2, [pc, #164]	; (8015ea0 <__sflush_r+0x108>)
 8015dfa:	410a      	asrs	r2, r1
 8015dfc:	07d6      	lsls	r6, r2, #31
 8015dfe:	d427      	bmi.n	8015e50 <__sflush_r+0xb8>
 8015e00:	2200      	movs	r2, #0
 8015e02:	6062      	str	r2, [r4, #4]
 8015e04:	04d9      	lsls	r1, r3, #19
 8015e06:	6922      	ldr	r2, [r4, #16]
 8015e08:	6022      	str	r2, [r4, #0]
 8015e0a:	d504      	bpl.n	8015e16 <__sflush_r+0x7e>
 8015e0c:	1c42      	adds	r2, r0, #1
 8015e0e:	d101      	bne.n	8015e14 <__sflush_r+0x7c>
 8015e10:	682b      	ldr	r3, [r5, #0]
 8015e12:	b903      	cbnz	r3, 8015e16 <__sflush_r+0x7e>
 8015e14:	6560      	str	r0, [r4, #84]	; 0x54
 8015e16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015e18:	602f      	str	r7, [r5, #0]
 8015e1a:	2900      	cmp	r1, #0
 8015e1c:	d0c9      	beq.n	8015db2 <__sflush_r+0x1a>
 8015e1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015e22:	4299      	cmp	r1, r3
 8015e24:	d002      	beq.n	8015e2c <__sflush_r+0x94>
 8015e26:	4628      	mov	r0, r5
 8015e28:	f7ff fb36 	bl	8015498 <_free_r>
 8015e2c:	2000      	movs	r0, #0
 8015e2e:	6360      	str	r0, [r4, #52]	; 0x34
 8015e30:	e7c0      	b.n	8015db4 <__sflush_r+0x1c>
 8015e32:	2301      	movs	r3, #1
 8015e34:	4628      	mov	r0, r5
 8015e36:	47b0      	blx	r6
 8015e38:	1c41      	adds	r1, r0, #1
 8015e3a:	d1c8      	bne.n	8015dce <__sflush_r+0x36>
 8015e3c:	682b      	ldr	r3, [r5, #0]
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d0c5      	beq.n	8015dce <__sflush_r+0x36>
 8015e42:	2b1d      	cmp	r3, #29
 8015e44:	d001      	beq.n	8015e4a <__sflush_r+0xb2>
 8015e46:	2b16      	cmp	r3, #22
 8015e48:	d101      	bne.n	8015e4e <__sflush_r+0xb6>
 8015e4a:	602f      	str	r7, [r5, #0]
 8015e4c:	e7b1      	b.n	8015db2 <__sflush_r+0x1a>
 8015e4e:	89a3      	ldrh	r3, [r4, #12]
 8015e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e54:	81a3      	strh	r3, [r4, #12]
 8015e56:	e7ad      	b.n	8015db4 <__sflush_r+0x1c>
 8015e58:	690f      	ldr	r7, [r1, #16]
 8015e5a:	2f00      	cmp	r7, #0
 8015e5c:	d0a9      	beq.n	8015db2 <__sflush_r+0x1a>
 8015e5e:	0793      	lsls	r3, r2, #30
 8015e60:	680e      	ldr	r6, [r1, #0]
 8015e62:	bf08      	it	eq
 8015e64:	694b      	ldreq	r3, [r1, #20]
 8015e66:	600f      	str	r7, [r1, #0]
 8015e68:	bf18      	it	ne
 8015e6a:	2300      	movne	r3, #0
 8015e6c:	eba6 0807 	sub.w	r8, r6, r7
 8015e70:	608b      	str	r3, [r1, #8]
 8015e72:	f1b8 0f00 	cmp.w	r8, #0
 8015e76:	dd9c      	ble.n	8015db2 <__sflush_r+0x1a>
 8015e78:	6a21      	ldr	r1, [r4, #32]
 8015e7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015e7c:	4643      	mov	r3, r8
 8015e7e:	463a      	mov	r2, r7
 8015e80:	4628      	mov	r0, r5
 8015e82:	47b0      	blx	r6
 8015e84:	2800      	cmp	r0, #0
 8015e86:	dc06      	bgt.n	8015e96 <__sflush_r+0xfe>
 8015e88:	89a3      	ldrh	r3, [r4, #12]
 8015e8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e8e:	81a3      	strh	r3, [r4, #12]
 8015e90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015e94:	e78e      	b.n	8015db4 <__sflush_r+0x1c>
 8015e96:	4407      	add	r7, r0
 8015e98:	eba8 0800 	sub.w	r8, r8, r0
 8015e9c:	e7e9      	b.n	8015e72 <__sflush_r+0xda>
 8015e9e:	bf00      	nop
 8015ea0:	dfbffffe 	.word	0xdfbffffe

08015ea4 <_fflush_r>:
 8015ea4:	b538      	push	{r3, r4, r5, lr}
 8015ea6:	690b      	ldr	r3, [r1, #16]
 8015ea8:	4605      	mov	r5, r0
 8015eaa:	460c      	mov	r4, r1
 8015eac:	b913      	cbnz	r3, 8015eb4 <_fflush_r+0x10>
 8015eae:	2500      	movs	r5, #0
 8015eb0:	4628      	mov	r0, r5
 8015eb2:	bd38      	pop	{r3, r4, r5, pc}
 8015eb4:	b118      	cbz	r0, 8015ebe <_fflush_r+0x1a>
 8015eb6:	6a03      	ldr	r3, [r0, #32]
 8015eb8:	b90b      	cbnz	r3, 8015ebe <_fflush_r+0x1a>
 8015eba:	f7ff f873 	bl	8014fa4 <__sinit>
 8015ebe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	d0f3      	beq.n	8015eae <_fflush_r+0xa>
 8015ec6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015ec8:	07d0      	lsls	r0, r2, #31
 8015eca:	d404      	bmi.n	8015ed6 <_fflush_r+0x32>
 8015ecc:	0599      	lsls	r1, r3, #22
 8015ece:	d402      	bmi.n	8015ed6 <_fflush_r+0x32>
 8015ed0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015ed2:	f7ff fa9e 	bl	8015412 <__retarget_lock_acquire_recursive>
 8015ed6:	4628      	mov	r0, r5
 8015ed8:	4621      	mov	r1, r4
 8015eda:	f7ff ff5d 	bl	8015d98 <__sflush_r>
 8015ede:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015ee0:	07da      	lsls	r2, r3, #31
 8015ee2:	4605      	mov	r5, r0
 8015ee4:	d4e4      	bmi.n	8015eb0 <_fflush_r+0xc>
 8015ee6:	89a3      	ldrh	r3, [r4, #12]
 8015ee8:	059b      	lsls	r3, r3, #22
 8015eea:	d4e1      	bmi.n	8015eb0 <_fflush_r+0xc>
 8015eec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015eee:	f7ff fa91 	bl	8015414 <__retarget_lock_release_recursive>
 8015ef2:	e7dd      	b.n	8015eb0 <_fflush_r+0xc>

08015ef4 <fiprintf>:
 8015ef4:	b40e      	push	{r1, r2, r3}
 8015ef6:	b503      	push	{r0, r1, lr}
 8015ef8:	4601      	mov	r1, r0
 8015efa:	ab03      	add	r3, sp, #12
 8015efc:	4805      	ldr	r0, [pc, #20]	; (8015f14 <fiprintf+0x20>)
 8015efe:	f853 2b04 	ldr.w	r2, [r3], #4
 8015f02:	6800      	ldr	r0, [r0, #0]
 8015f04:	9301      	str	r3, [sp, #4]
 8015f06:	f7ff fc9d 	bl	8015844 <_vfiprintf_r>
 8015f0a:	b002      	add	sp, #8
 8015f0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015f10:	b003      	add	sp, #12
 8015f12:	4770      	bx	lr
 8015f14:	200002b4 	.word	0x200002b4

08015f18 <__swbuf_r>:
 8015f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f1a:	460e      	mov	r6, r1
 8015f1c:	4614      	mov	r4, r2
 8015f1e:	4605      	mov	r5, r0
 8015f20:	b118      	cbz	r0, 8015f2a <__swbuf_r+0x12>
 8015f22:	6a03      	ldr	r3, [r0, #32]
 8015f24:	b90b      	cbnz	r3, 8015f2a <__swbuf_r+0x12>
 8015f26:	f7ff f83d 	bl	8014fa4 <__sinit>
 8015f2a:	69a3      	ldr	r3, [r4, #24]
 8015f2c:	60a3      	str	r3, [r4, #8]
 8015f2e:	89a3      	ldrh	r3, [r4, #12]
 8015f30:	071a      	lsls	r2, r3, #28
 8015f32:	d525      	bpl.n	8015f80 <__swbuf_r+0x68>
 8015f34:	6923      	ldr	r3, [r4, #16]
 8015f36:	b31b      	cbz	r3, 8015f80 <__swbuf_r+0x68>
 8015f38:	6823      	ldr	r3, [r4, #0]
 8015f3a:	6922      	ldr	r2, [r4, #16]
 8015f3c:	1a98      	subs	r0, r3, r2
 8015f3e:	6963      	ldr	r3, [r4, #20]
 8015f40:	b2f6      	uxtb	r6, r6
 8015f42:	4283      	cmp	r3, r0
 8015f44:	4637      	mov	r7, r6
 8015f46:	dc04      	bgt.n	8015f52 <__swbuf_r+0x3a>
 8015f48:	4621      	mov	r1, r4
 8015f4a:	4628      	mov	r0, r5
 8015f4c:	f7ff ffaa 	bl	8015ea4 <_fflush_r>
 8015f50:	b9e0      	cbnz	r0, 8015f8c <__swbuf_r+0x74>
 8015f52:	68a3      	ldr	r3, [r4, #8]
 8015f54:	3b01      	subs	r3, #1
 8015f56:	60a3      	str	r3, [r4, #8]
 8015f58:	6823      	ldr	r3, [r4, #0]
 8015f5a:	1c5a      	adds	r2, r3, #1
 8015f5c:	6022      	str	r2, [r4, #0]
 8015f5e:	701e      	strb	r6, [r3, #0]
 8015f60:	6962      	ldr	r2, [r4, #20]
 8015f62:	1c43      	adds	r3, r0, #1
 8015f64:	429a      	cmp	r2, r3
 8015f66:	d004      	beq.n	8015f72 <__swbuf_r+0x5a>
 8015f68:	89a3      	ldrh	r3, [r4, #12]
 8015f6a:	07db      	lsls	r3, r3, #31
 8015f6c:	d506      	bpl.n	8015f7c <__swbuf_r+0x64>
 8015f6e:	2e0a      	cmp	r6, #10
 8015f70:	d104      	bne.n	8015f7c <__swbuf_r+0x64>
 8015f72:	4621      	mov	r1, r4
 8015f74:	4628      	mov	r0, r5
 8015f76:	f7ff ff95 	bl	8015ea4 <_fflush_r>
 8015f7a:	b938      	cbnz	r0, 8015f8c <__swbuf_r+0x74>
 8015f7c:	4638      	mov	r0, r7
 8015f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f80:	4621      	mov	r1, r4
 8015f82:	4628      	mov	r0, r5
 8015f84:	f000 f806 	bl	8015f94 <__swsetup_r>
 8015f88:	2800      	cmp	r0, #0
 8015f8a:	d0d5      	beq.n	8015f38 <__swbuf_r+0x20>
 8015f8c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015f90:	e7f4      	b.n	8015f7c <__swbuf_r+0x64>
	...

08015f94 <__swsetup_r>:
 8015f94:	b538      	push	{r3, r4, r5, lr}
 8015f96:	4b2a      	ldr	r3, [pc, #168]	; (8016040 <__swsetup_r+0xac>)
 8015f98:	4605      	mov	r5, r0
 8015f9a:	6818      	ldr	r0, [r3, #0]
 8015f9c:	460c      	mov	r4, r1
 8015f9e:	b118      	cbz	r0, 8015fa8 <__swsetup_r+0x14>
 8015fa0:	6a03      	ldr	r3, [r0, #32]
 8015fa2:	b90b      	cbnz	r3, 8015fa8 <__swsetup_r+0x14>
 8015fa4:	f7fe fffe 	bl	8014fa4 <__sinit>
 8015fa8:	89a3      	ldrh	r3, [r4, #12]
 8015faa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015fae:	0718      	lsls	r0, r3, #28
 8015fb0:	d422      	bmi.n	8015ff8 <__swsetup_r+0x64>
 8015fb2:	06d9      	lsls	r1, r3, #27
 8015fb4:	d407      	bmi.n	8015fc6 <__swsetup_r+0x32>
 8015fb6:	2309      	movs	r3, #9
 8015fb8:	602b      	str	r3, [r5, #0]
 8015fba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015fbe:	81a3      	strh	r3, [r4, #12]
 8015fc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015fc4:	e034      	b.n	8016030 <__swsetup_r+0x9c>
 8015fc6:	0758      	lsls	r0, r3, #29
 8015fc8:	d512      	bpl.n	8015ff0 <__swsetup_r+0x5c>
 8015fca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015fcc:	b141      	cbz	r1, 8015fe0 <__swsetup_r+0x4c>
 8015fce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015fd2:	4299      	cmp	r1, r3
 8015fd4:	d002      	beq.n	8015fdc <__swsetup_r+0x48>
 8015fd6:	4628      	mov	r0, r5
 8015fd8:	f7ff fa5e 	bl	8015498 <_free_r>
 8015fdc:	2300      	movs	r3, #0
 8015fde:	6363      	str	r3, [r4, #52]	; 0x34
 8015fe0:	89a3      	ldrh	r3, [r4, #12]
 8015fe2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015fe6:	81a3      	strh	r3, [r4, #12]
 8015fe8:	2300      	movs	r3, #0
 8015fea:	6063      	str	r3, [r4, #4]
 8015fec:	6923      	ldr	r3, [r4, #16]
 8015fee:	6023      	str	r3, [r4, #0]
 8015ff0:	89a3      	ldrh	r3, [r4, #12]
 8015ff2:	f043 0308 	orr.w	r3, r3, #8
 8015ff6:	81a3      	strh	r3, [r4, #12]
 8015ff8:	6923      	ldr	r3, [r4, #16]
 8015ffa:	b94b      	cbnz	r3, 8016010 <__swsetup_r+0x7c>
 8015ffc:	89a3      	ldrh	r3, [r4, #12]
 8015ffe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016002:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016006:	d003      	beq.n	8016010 <__swsetup_r+0x7c>
 8016008:	4621      	mov	r1, r4
 801600a:	4628      	mov	r0, r5
 801600c:	f000 f847 	bl	801609e <__smakebuf_r>
 8016010:	89a0      	ldrh	r0, [r4, #12]
 8016012:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016016:	f010 0301 	ands.w	r3, r0, #1
 801601a:	d00a      	beq.n	8016032 <__swsetup_r+0x9e>
 801601c:	2300      	movs	r3, #0
 801601e:	60a3      	str	r3, [r4, #8]
 8016020:	6963      	ldr	r3, [r4, #20]
 8016022:	425b      	negs	r3, r3
 8016024:	61a3      	str	r3, [r4, #24]
 8016026:	6923      	ldr	r3, [r4, #16]
 8016028:	b943      	cbnz	r3, 801603c <__swsetup_r+0xa8>
 801602a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801602e:	d1c4      	bne.n	8015fba <__swsetup_r+0x26>
 8016030:	bd38      	pop	{r3, r4, r5, pc}
 8016032:	0781      	lsls	r1, r0, #30
 8016034:	bf58      	it	pl
 8016036:	6963      	ldrpl	r3, [r4, #20]
 8016038:	60a3      	str	r3, [r4, #8]
 801603a:	e7f4      	b.n	8016026 <__swsetup_r+0x92>
 801603c:	2000      	movs	r0, #0
 801603e:	e7f7      	b.n	8016030 <__swsetup_r+0x9c>
 8016040:	200002b4 	.word	0x200002b4

08016044 <abort>:
 8016044:	b508      	push	{r3, lr}
 8016046:	2006      	movs	r0, #6
 8016048:	f000 f88e 	bl	8016168 <raise>
 801604c:	2001      	movs	r0, #1
 801604e:	f7eb fc23 	bl	8001898 <_exit>

08016052 <__swhatbuf_r>:
 8016052:	b570      	push	{r4, r5, r6, lr}
 8016054:	460c      	mov	r4, r1
 8016056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801605a:	2900      	cmp	r1, #0
 801605c:	b096      	sub	sp, #88	; 0x58
 801605e:	4615      	mov	r5, r2
 8016060:	461e      	mov	r6, r3
 8016062:	da0d      	bge.n	8016080 <__swhatbuf_r+0x2e>
 8016064:	89a3      	ldrh	r3, [r4, #12]
 8016066:	f013 0f80 	tst.w	r3, #128	; 0x80
 801606a:	f04f 0100 	mov.w	r1, #0
 801606e:	bf0c      	ite	eq
 8016070:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8016074:	2340      	movne	r3, #64	; 0x40
 8016076:	2000      	movs	r0, #0
 8016078:	6031      	str	r1, [r6, #0]
 801607a:	602b      	str	r3, [r5, #0]
 801607c:	b016      	add	sp, #88	; 0x58
 801607e:	bd70      	pop	{r4, r5, r6, pc}
 8016080:	466a      	mov	r2, sp
 8016082:	f000 f879 	bl	8016178 <_fstat_r>
 8016086:	2800      	cmp	r0, #0
 8016088:	dbec      	blt.n	8016064 <__swhatbuf_r+0x12>
 801608a:	9901      	ldr	r1, [sp, #4]
 801608c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8016090:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8016094:	4259      	negs	r1, r3
 8016096:	4159      	adcs	r1, r3
 8016098:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801609c:	e7eb      	b.n	8016076 <__swhatbuf_r+0x24>

0801609e <__smakebuf_r>:
 801609e:	898b      	ldrh	r3, [r1, #12]
 80160a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80160a2:	079d      	lsls	r5, r3, #30
 80160a4:	4606      	mov	r6, r0
 80160a6:	460c      	mov	r4, r1
 80160a8:	d507      	bpl.n	80160ba <__smakebuf_r+0x1c>
 80160aa:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80160ae:	6023      	str	r3, [r4, #0]
 80160b0:	6123      	str	r3, [r4, #16]
 80160b2:	2301      	movs	r3, #1
 80160b4:	6163      	str	r3, [r4, #20]
 80160b6:	b002      	add	sp, #8
 80160b8:	bd70      	pop	{r4, r5, r6, pc}
 80160ba:	ab01      	add	r3, sp, #4
 80160bc:	466a      	mov	r2, sp
 80160be:	f7ff ffc8 	bl	8016052 <__swhatbuf_r>
 80160c2:	9900      	ldr	r1, [sp, #0]
 80160c4:	4605      	mov	r5, r0
 80160c6:	4630      	mov	r0, r6
 80160c8:	f7fe fd34 	bl	8014b34 <_malloc_r>
 80160cc:	b948      	cbnz	r0, 80160e2 <__smakebuf_r+0x44>
 80160ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80160d2:	059a      	lsls	r2, r3, #22
 80160d4:	d4ef      	bmi.n	80160b6 <__smakebuf_r+0x18>
 80160d6:	f023 0303 	bic.w	r3, r3, #3
 80160da:	f043 0302 	orr.w	r3, r3, #2
 80160de:	81a3      	strh	r3, [r4, #12]
 80160e0:	e7e3      	b.n	80160aa <__smakebuf_r+0xc>
 80160e2:	89a3      	ldrh	r3, [r4, #12]
 80160e4:	6020      	str	r0, [r4, #0]
 80160e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80160ea:	81a3      	strh	r3, [r4, #12]
 80160ec:	9b00      	ldr	r3, [sp, #0]
 80160ee:	6163      	str	r3, [r4, #20]
 80160f0:	9b01      	ldr	r3, [sp, #4]
 80160f2:	6120      	str	r0, [r4, #16]
 80160f4:	b15b      	cbz	r3, 801610e <__smakebuf_r+0x70>
 80160f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80160fa:	4630      	mov	r0, r6
 80160fc:	f000 f84e 	bl	801619c <_isatty_r>
 8016100:	b128      	cbz	r0, 801610e <__smakebuf_r+0x70>
 8016102:	89a3      	ldrh	r3, [r4, #12]
 8016104:	f023 0303 	bic.w	r3, r3, #3
 8016108:	f043 0301 	orr.w	r3, r3, #1
 801610c:	81a3      	strh	r3, [r4, #12]
 801610e:	89a3      	ldrh	r3, [r4, #12]
 8016110:	431d      	orrs	r5, r3
 8016112:	81a5      	strh	r5, [r4, #12]
 8016114:	e7cf      	b.n	80160b6 <__smakebuf_r+0x18>

08016116 <_raise_r>:
 8016116:	291f      	cmp	r1, #31
 8016118:	b538      	push	{r3, r4, r5, lr}
 801611a:	4604      	mov	r4, r0
 801611c:	460d      	mov	r5, r1
 801611e:	d904      	bls.n	801612a <_raise_r+0x14>
 8016120:	2316      	movs	r3, #22
 8016122:	6003      	str	r3, [r0, #0]
 8016124:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016128:	bd38      	pop	{r3, r4, r5, pc}
 801612a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801612c:	b112      	cbz	r2, 8016134 <_raise_r+0x1e>
 801612e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016132:	b94b      	cbnz	r3, 8016148 <_raise_r+0x32>
 8016134:	4620      	mov	r0, r4
 8016136:	f000 f853 	bl	80161e0 <_getpid_r>
 801613a:	462a      	mov	r2, r5
 801613c:	4601      	mov	r1, r0
 801613e:	4620      	mov	r0, r4
 8016140:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016144:	f000 b83a 	b.w	80161bc <_kill_r>
 8016148:	2b01      	cmp	r3, #1
 801614a:	d00a      	beq.n	8016162 <_raise_r+0x4c>
 801614c:	1c59      	adds	r1, r3, #1
 801614e:	d103      	bne.n	8016158 <_raise_r+0x42>
 8016150:	2316      	movs	r3, #22
 8016152:	6003      	str	r3, [r0, #0]
 8016154:	2001      	movs	r0, #1
 8016156:	e7e7      	b.n	8016128 <_raise_r+0x12>
 8016158:	2400      	movs	r4, #0
 801615a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801615e:	4628      	mov	r0, r5
 8016160:	4798      	blx	r3
 8016162:	2000      	movs	r0, #0
 8016164:	e7e0      	b.n	8016128 <_raise_r+0x12>
	...

08016168 <raise>:
 8016168:	4b02      	ldr	r3, [pc, #8]	; (8016174 <raise+0xc>)
 801616a:	4601      	mov	r1, r0
 801616c:	6818      	ldr	r0, [r3, #0]
 801616e:	f7ff bfd2 	b.w	8016116 <_raise_r>
 8016172:	bf00      	nop
 8016174:	200002b4 	.word	0x200002b4

08016178 <_fstat_r>:
 8016178:	b538      	push	{r3, r4, r5, lr}
 801617a:	4d07      	ldr	r5, [pc, #28]	; (8016198 <_fstat_r+0x20>)
 801617c:	2300      	movs	r3, #0
 801617e:	4604      	mov	r4, r0
 8016180:	4608      	mov	r0, r1
 8016182:	4611      	mov	r1, r2
 8016184:	602b      	str	r3, [r5, #0]
 8016186:	f7eb fbd6 	bl	8001936 <_fstat>
 801618a:	1c43      	adds	r3, r0, #1
 801618c:	d102      	bne.n	8016194 <_fstat_r+0x1c>
 801618e:	682b      	ldr	r3, [r5, #0]
 8016190:	b103      	cbz	r3, 8016194 <_fstat_r+0x1c>
 8016192:	6023      	str	r3, [r4, #0]
 8016194:	bd38      	pop	{r3, r4, r5, pc}
 8016196:	bf00      	nop
 8016198:	2000df00 	.word	0x2000df00

0801619c <_isatty_r>:
 801619c:	b538      	push	{r3, r4, r5, lr}
 801619e:	4d06      	ldr	r5, [pc, #24]	; (80161b8 <_isatty_r+0x1c>)
 80161a0:	2300      	movs	r3, #0
 80161a2:	4604      	mov	r4, r0
 80161a4:	4608      	mov	r0, r1
 80161a6:	602b      	str	r3, [r5, #0]
 80161a8:	f7eb fbd5 	bl	8001956 <_isatty>
 80161ac:	1c43      	adds	r3, r0, #1
 80161ae:	d102      	bne.n	80161b6 <_isatty_r+0x1a>
 80161b0:	682b      	ldr	r3, [r5, #0]
 80161b2:	b103      	cbz	r3, 80161b6 <_isatty_r+0x1a>
 80161b4:	6023      	str	r3, [r4, #0]
 80161b6:	bd38      	pop	{r3, r4, r5, pc}
 80161b8:	2000df00 	.word	0x2000df00

080161bc <_kill_r>:
 80161bc:	b538      	push	{r3, r4, r5, lr}
 80161be:	4d07      	ldr	r5, [pc, #28]	; (80161dc <_kill_r+0x20>)
 80161c0:	2300      	movs	r3, #0
 80161c2:	4604      	mov	r4, r0
 80161c4:	4608      	mov	r0, r1
 80161c6:	4611      	mov	r1, r2
 80161c8:	602b      	str	r3, [r5, #0]
 80161ca:	f7eb fb55 	bl	8001878 <_kill>
 80161ce:	1c43      	adds	r3, r0, #1
 80161d0:	d102      	bne.n	80161d8 <_kill_r+0x1c>
 80161d2:	682b      	ldr	r3, [r5, #0]
 80161d4:	b103      	cbz	r3, 80161d8 <_kill_r+0x1c>
 80161d6:	6023      	str	r3, [r4, #0]
 80161d8:	bd38      	pop	{r3, r4, r5, pc}
 80161da:	bf00      	nop
 80161dc:	2000df00 	.word	0x2000df00

080161e0 <_getpid_r>:
 80161e0:	f7eb bb42 	b.w	8001868 <_getpid>

080161e4 <_init>:
 80161e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161e6:	bf00      	nop
 80161e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80161ea:	bc08      	pop	{r3}
 80161ec:	469e      	mov	lr, r3
 80161ee:	4770      	bx	lr

080161f0 <_fini>:
 80161f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161f2:	bf00      	nop
 80161f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80161f6:	bc08      	pop	{r3}
 80161f8:	469e      	mov	lr, r3
 80161fa:	4770      	bx	lr
